var Client = (function (exports) {
	'use strict';

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function unwrapExports (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	var es5 = createCommonjsModule(function (module, exports) {
	!function(e,t){module.exports=t();}(commonjsGlobal,(function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n});},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0});},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=90)}({17:function(e,t,r){t.__esModule=!0,t.default=void 0;var n=r(18),i=function(){function e(){}return e.getFirstMatch=function(e,t){var r=t.match(e);return r&&r.length>0&&r[1]||""},e.getSecondMatch=function(e,t){var r=t.match(e);return r&&r.length>1&&r[2]||""},e.matchAndReturnConst=function(e,t,r){if(e.test(t))return r},e.getWindowsVersionName=function(e){switch(e){case"NT":return "NT";case"XP":return "XP";case"NT 5.0":return "2000";case"NT 5.1":return "XP";case"NT 5.2":return "2003";case"NT 6.0":return "Vista";case"NT 6.1":return "7";case"NT 6.2":return "8";case"NT 6.3":return "8.1";case"NT 10.0":return "10";default:return}},e.getMacOSVersionName=function(e){var t=e.split(".").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),10===t[0])switch(t[1]){case 5:return "Leopard";case 6:return "Snow Leopard";case 7:return "Lion";case 8:return "Mountain Lion";case 9:return "Mavericks";case 10:return "Yosemite";case 11:return "El Capitan";case 12:return "Sierra";case 13:return "High Sierra";case 14:return "Mojave";case 15:return "Catalina";default:return}},e.getAndroidVersionName=function(e){var t=e.split(".").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),!(1===t[0]&&t[1]<5))return 1===t[0]&&t[1]<6?"Cupcake":1===t[0]&&t[1]>=6?"Donut":2===t[0]&&t[1]<2?"Eclair":2===t[0]&&2===t[1]?"Froyo":2===t[0]&&t[1]>2?"Gingerbread":3===t[0]?"Honeycomb":4===t[0]&&t[1]<1?"Ice Cream Sandwich":4===t[0]&&t[1]<4?"Jelly Bean":4===t[0]&&t[1]>=4?"KitKat":5===t[0]?"Lollipop":6===t[0]?"Marshmallow":7===t[0]?"Nougat":8===t[0]?"Oreo":9===t[0]?"Pie":void 0},e.getVersionPrecision=function(e){return e.split(".").length},e.compareVersions=function(t,r,n){void 0===n&&(n=!1);var i=e.getVersionPrecision(t),s=e.getVersionPrecision(r),a=Math.max(i,s),o=0,u=e.map([t,r],(function(t){var r=a-e.getVersionPrecision(t),n=t+new Array(r+1).join(".0");return e.map(n.split("."),(function(e){return new Array(20-e.length).join("0")+e})).reverse()}));for(n&&(o=a-Math.min(i,s)),a-=1;a>=o;){if(u[0][a]>u[1][a])return 1;if(u[0][a]===u[1][a]){if(a===o)return 0;a-=1;}else if(u[0][a]<u[1][a])return -1}},e.map=function(e,t){var r,n=[];if(Array.prototype.map)return Array.prototype.map.call(e,t);for(r=0;r<e.length;r+=1)n.push(t(e[r]));return n},e.find=function(e,t){var r,n;if(Array.prototype.find)return Array.prototype.find.call(e,t);for(r=0,n=e.length;r<n;r+=1){var i=e[r];if(t(i,r))return i}},e.assign=function(e){for(var t,r,n=e,i=arguments.length,s=new Array(i>1?i-1:0),a=1;a<i;a++)s[a-1]=arguments[a];if(Object.assign)return Object.assign.apply(Object,[e].concat(s));var o=function(){var e=s[t];"object"==typeof e&&null!==e&&Object.keys(e).forEach((function(t){n[t]=e[t];}));};for(t=0,r=s.length;t<r;t+=1)o();return e},e.getBrowserAlias=function(e){return n.BROWSER_ALIASES_MAP[e]},e.getBrowserTypeByAlias=function(e){return n.BROWSER_MAP[e]||""},e}();t.default=i,e.exports=t.default;},18:function(e,t,r){t.__esModule=!0,t.ENGINE_MAP=t.OS_MAP=t.PLATFORMS_MAP=t.BROWSER_MAP=t.BROWSER_ALIASES_MAP=void 0;t.BROWSER_ALIASES_MAP={"Amazon Silk":"amazon_silk","Android Browser":"android",Bada:"bada",BlackBerry:"blackberry",Chrome:"chrome",Chromium:"chromium",Electron:"electron",Epiphany:"epiphany",Firefox:"firefox",Focus:"focus",Generic:"generic","Google Search":"google_search",Googlebot:"googlebot","Internet Explorer":"ie","K-Meleon":"k_meleon",Maxthon:"maxthon","Microsoft Edge":"edge","MZ Browser":"mz","NAVER Whale Browser":"naver",Opera:"opera","Opera Coast":"opera_coast",PhantomJS:"phantomjs",Puffin:"puffin",QupZilla:"qupzilla",QQ:"qq",QQLite:"qqlite",Safari:"safari",Sailfish:"sailfish","Samsung Internet for Android":"samsung_internet",SeaMonkey:"seamonkey",Sleipnir:"sleipnir",Swing:"swing",Tizen:"tizen","UC Browser":"uc",Vivaldi:"vivaldi","WebOS Browser":"webos",WeChat:"wechat","Yandex Browser":"yandex",Roku:"roku"};t.BROWSER_MAP={amazon_silk:"Amazon Silk",android:"Android Browser",bada:"Bada",blackberry:"BlackBerry",chrome:"Chrome",chromium:"Chromium",electron:"Electron",epiphany:"Epiphany",firefox:"Firefox",focus:"Focus",generic:"Generic",googlebot:"Googlebot",google_search:"Google Search",ie:"Internet Explorer",k_meleon:"K-Meleon",maxthon:"Maxthon",edge:"Microsoft Edge",mz:"MZ Browser",naver:"NAVER Whale Browser",opera:"Opera",opera_coast:"Opera Coast",phantomjs:"PhantomJS",puffin:"Puffin",qupzilla:"QupZilla",qq:"QQ Browser",qqlite:"QQ Browser Lite",safari:"Safari",sailfish:"Sailfish",samsung_internet:"Samsung Internet for Android",seamonkey:"SeaMonkey",sleipnir:"Sleipnir",swing:"Swing",tizen:"Tizen",uc:"UC Browser",vivaldi:"Vivaldi",webos:"WebOS Browser",wechat:"WeChat",yandex:"Yandex Browser"};t.PLATFORMS_MAP={tablet:"tablet",mobile:"mobile",desktop:"desktop",tv:"tv"};t.OS_MAP={WindowsPhone:"Windows Phone",Windows:"Windows",MacOS:"macOS",iOS:"iOS",Android:"Android",WebOS:"WebOS",BlackBerry:"BlackBerry",Bada:"Bada",Tizen:"Tizen",Linux:"Linux",ChromeOS:"Chrome OS",PlayStation4:"PlayStation 4",Roku:"Roku"};t.ENGINE_MAP={EdgeHTML:"EdgeHTML",Blink:"Blink",Trident:"Trident",Presto:"Presto",Gecko:"Gecko",WebKit:"WebKit"};},90:function(e,t,r){t.__esModule=!0,t.default=void 0;var n,i=(n=r(91))&&n.__esModule?n:{default:n},s=r(18);function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n);}}var o=function(){function e(){}var t,r,n;return e.getParser=function(e,t){if(void 0===t&&(t=!1),"string"!=typeof e)throw new Error("UserAgent should be a string");return new i.default(e,t)},e.parse=function(e){return new i.default(e).getResult()},t=e,n=[{key:"BROWSER_MAP",get:function(){return s.BROWSER_MAP}},{key:"ENGINE_MAP",get:function(){return s.ENGINE_MAP}},{key:"OS_MAP",get:function(){return s.OS_MAP}},{key:"PLATFORMS_MAP",get:function(){return s.PLATFORMS_MAP}}],(r=null)&&a(t.prototype,r),n&&a(t,n),e}();t.default=o,e.exports=t.default;},91:function(e,t,r){t.__esModule=!0,t.default=void 0;var n=u(r(92)),i=u(r(93)),s=u(r(94)),a=u(r(95)),o=u(r(17));function u(e){return e&&e.__esModule?e:{default:e}}var d=function(){function e(e,t){if(void 0===t&&(t=!1),null==e||""===e)throw new Error("UserAgent parameter can't be empty");this._ua=e,this.parsedResult={},!0!==t&&this.parse();}var t=e.prototype;return t.getUA=function(){return this._ua},t.test=function(e){return e.test(this._ua)},t.parseBrowser=function(){var e=this;this.parsedResult.browser={};var t=o.default.find(n.default,(function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error("Browser's test function is not valid")}));return t&&(this.parsedResult.browser=t.describe(this.getUA())),this.parsedResult.browser},t.getBrowser=function(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()},t.getBrowserName=function(e){return e?String(this.getBrowser().name).toLowerCase()||"":this.getBrowser().name||""},t.getBrowserVersion=function(){return this.getBrowser().version},t.getOS=function(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()},t.parseOS=function(){var e=this;this.parsedResult.os={};var t=o.default.find(i.default,(function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error("Browser's test function is not valid")}));return t&&(this.parsedResult.os=t.describe(this.getUA())),this.parsedResult.os},t.getOSName=function(e){var t=this.getOS().name;return e?String(t).toLowerCase()||"":t||""},t.getOSVersion=function(){return this.getOS().version},t.getPlatform=function(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()},t.getPlatformType=function(e){void 0===e&&(e=!1);var t=this.getPlatform().type;return e?String(t).toLowerCase()||"":t||""},t.parsePlatform=function(){var e=this;this.parsedResult.platform={};var t=o.default.find(s.default,(function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error("Browser's test function is not valid")}));return t&&(this.parsedResult.platform=t.describe(this.getUA())),this.parsedResult.platform},t.getEngine=function(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()},t.getEngineName=function(e){return e?String(this.getEngine().name).toLowerCase()||"":this.getEngine().name||""},t.parseEngine=function(){var e=this;this.parsedResult.engine={};var t=o.default.find(a.default,(function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error("Browser's test function is not valid")}));return t&&(this.parsedResult.engine=t.describe(this.getUA())),this.parsedResult.engine},t.parse=function(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this},t.getResult=function(){return o.default.assign({},this.parsedResult)},t.satisfies=function(e){var t=this,r={},n=0,i={},s=0;if(Object.keys(e).forEach((function(t){var a=e[t];"string"==typeof a?(i[t]=a,s+=1):"object"==typeof a&&(r[t]=a,n+=1);})),n>0){var a=Object.keys(r),u=o.default.find(a,(function(e){return t.isOS(e)}));if(u){var d=this.satisfies(r[u]);if(void 0!==d)return d}var c=o.default.find(a,(function(e){return t.isPlatform(e)}));if(c){var f=this.satisfies(r[c]);if(void 0!==f)return f}}if(s>0){var l=Object.keys(i),h=o.default.find(l,(function(e){return t.isBrowser(e,!0)}));if(void 0!==h)return this.compareVersion(i[h])}},t.isBrowser=function(e,t){void 0===t&&(t=!1);var r=this.getBrowserName().toLowerCase(),n=e.toLowerCase(),i=o.default.getBrowserTypeByAlias(n);return t&&i&&(n=i.toLowerCase()),n===r},t.compareVersion=function(e){var t=[0],r=e,n=!1,i=this.getBrowserVersion();if("string"==typeof i)return ">"===e[0]||"<"===e[0]?(r=e.substr(1),"="===e[1]?(n=!0,r=e.substr(2)):t=[],">"===e[0]?t.push(1):t.push(-1)):"="===e[0]?r=e.substr(1):"~"===e[0]&&(n=!0,r=e.substr(1)),t.indexOf(o.default.compareVersions(i,r,n))>-1},t.isOS=function(e){return this.getOSName(!0)===String(e).toLowerCase()},t.isPlatform=function(e){return this.getPlatformType(!0)===String(e).toLowerCase()},t.isEngine=function(e){return this.getEngineName(!0)===String(e).toLowerCase()},t.is=function(e){return this.isBrowser(e)||this.isOS(e)||this.isPlatform(e)},t.some=function(e){var t=this;return void 0===e&&(e=[]),e.some((function(e){return t.is(e)}))},e}();t.default=d,e.exports=t.default;},92:function(e,t,r){t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n};var s=/version\/(\d+(\.?_?\d+)+)/i,a=[{test:[/googlebot/i],describe:function(e){var t={name:"Googlebot"},r=i.default.getFirstMatch(/googlebot\/(\d+(\.\d+))/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/opera/i],describe:function(e){var t={name:"Opera"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:opera)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opr\/|opios/i],describe:function(e){var t={name:"Opera"},r=i.default.getFirstMatch(/(?:opr|opios)[\s/](\S+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/SamsungBrowser/i],describe:function(e){var t={name:"Samsung Internet for Android"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:SamsungBrowser)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Whale/i],describe:function(e){var t={name:"NAVER Whale Browser"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:whale)[\s/](\d+(?:\.\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MZBrowser/i],describe:function(e){var t={name:"MZ Browser"},r=i.default.getFirstMatch(/(?:MZBrowser)[\s/](\d+(?:\.\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/focus/i],describe:function(e){var t={name:"Focus"},r=i.default.getFirstMatch(/(?:focus)[\s/](\d+(?:\.\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/swing/i],describe:function(e){var t={name:"Swing"},r=i.default.getFirstMatch(/(?:swing)[\s/](\d+(?:\.\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/coast/i],describe:function(e){var t={name:"Opera Coast"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:coast)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opt\/\d+(?:.?_?\d+)+/i],describe:function(e){var t={name:"Opera Touch"},r=i.default.getFirstMatch(/(?:opt)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/yabrowser/i],describe:function(e){var t={name:"Yandex Browser"},r=i.default.getFirstMatch(/(?:yabrowser)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/ucbrowser/i],describe:function(e){var t={name:"UC Browser"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:ucbrowser)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Maxthon|mxios/i],describe:function(e){var t={name:"Maxthon"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:Maxthon|mxios)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/epiphany/i],describe:function(e){var t={name:"Epiphany"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:epiphany)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/puffin/i],describe:function(e){var t={name:"Puffin"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:puffin)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sleipnir/i],describe:function(e){var t={name:"Sleipnir"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:sleipnir)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/k-meleon/i],describe:function(e){var t={name:"K-Meleon"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:k-meleon)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/micromessenger/i],describe:function(e){var t={name:"WeChat"},r=i.default.getFirstMatch(/(?:micromessenger)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qqbrowser/i],describe:function(e){var t={name:/qqbrowserlite/i.test(e)?"QQ Browser Lite":"QQ Browser"},r=i.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/msie|trident/i],describe:function(e){var t={name:"Internet Explorer"},r=i.default.getFirstMatch(/(?:msie |rv:)(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/\sedg\//i],describe:function(e){var t={name:"Microsoft Edge"},r=i.default.getFirstMatch(/\sedg\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/edg([ea]|ios)/i],describe:function(e){var t={name:"Microsoft Edge"},r=i.default.getSecondMatch(/edg([ea]|ios)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/vivaldi/i],describe:function(e){var t={name:"Vivaldi"},r=i.default.getFirstMatch(/vivaldi\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/seamonkey/i],describe:function(e){var t={name:"SeaMonkey"},r=i.default.getFirstMatch(/seamonkey\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sailfish/i],describe:function(e){var t={name:"Sailfish"},r=i.default.getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i,e);return r&&(t.version=r),t}},{test:[/silk/i],describe:function(e){var t={name:"Amazon Silk"},r=i.default.getFirstMatch(/silk\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/phantom/i],describe:function(e){var t={name:"PhantomJS"},r=i.default.getFirstMatch(/phantomjs\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/slimerjs/i],describe:function(e){var t={name:"SlimerJS"},r=i.default.getFirstMatch(/slimerjs\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/blackberry|\bbb\d+/i,/rim\stablet/i],describe:function(e){var t={name:"BlackBerry"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/blackberry[\d]+\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t={name:"WebOS Browser"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/bada/i],describe:function(e){var t={name:"Bada"},r=i.default.getFirstMatch(/dolfin\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/tizen/i],describe:function(e){var t={name:"Tizen"},r=i.default.getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qupzilla/i],describe:function(e){var t={name:"QupZilla"},r=i.default.getFirstMatch(/(?:qupzilla)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/firefox|iceweasel|fxios/i],describe:function(e){var t={name:"Firefox"},r=i.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/electron/i],describe:function(e){var t={name:"Electron"},r=i.default.getFirstMatch(/(?:electron)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/chromium/i],describe:function(e){var t={name:"Chromium"},r=i.default.getFirstMatch(/(?:chromium)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/chrome|crios|crmo/i],describe:function(e){var t={name:"Chrome"},r=i.default.getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/GSA/i],describe:function(e){var t={name:"Google Search"},r=i.default.getFirstMatch(/(?:GSA)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t={name:"Android Browser"},r=i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/playstation 4/i],describe:function(e){var t={name:"PlayStation 4"},r=i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/safari|applewebkit/i],describe:function(e){var t={name:"Safari"},r=i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/.*/i],describe:function(e){var t=-1!==e.search("\\(")?/^(.*)\/(.*)[ \t]\((.*)/:/^(.*)\/(.*) /;return {name:i.default.getFirstMatch(t,e),version:i.default.getSecondMatch(t,e)}}}];t.default=a,e.exports=t.default;},93:function(e,t,r){t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n},s=r(18);var a=[{test:[/Roku\/DVP/],describe:function(e){var t=i.default.getFirstMatch(/Roku\/DVP-(\d+\.\d+)/i,e);return {name:s.OS_MAP.Roku,version:t}}},{test:[/windows phone/i],describe:function(e){var t=i.default.getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i,e);return {name:s.OS_MAP.WindowsPhone,version:t}}},{test:[/windows /i],describe:function(e){var t=i.default.getFirstMatch(/Windows ((NT|XP)( \d\d?.\d)?)/i,e),r=i.default.getWindowsVersionName(t);return {name:s.OS_MAP.Windows,version:t,versionName:r}}},{test:[/Macintosh(.*?) FxiOS(.*?)\//],describe:function(e){var t={name:s.OS_MAP.iOS},r=i.default.getSecondMatch(/(Version\/)(\d[\d.]+)/,e);return r&&(t.version=r),t}},{test:[/macintosh/i],describe:function(e){var t=i.default.getFirstMatch(/mac os x (\d+(\.?_?\d+)+)/i,e).replace(/[_\s]/g,"."),r=i.default.getMacOSVersionName(t),n={name:s.OS_MAP.MacOS,version:t};return r&&(n.versionName=r),n}},{test:[/(ipod|iphone|ipad)/i],describe:function(e){var t=i.default.getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i,e).replace(/[_\s]/g,".");return {name:s.OS_MAP.iOS,version:t}}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t=i.default.getFirstMatch(/android[\s/-](\d+(\.\d+)*)/i,e),r=i.default.getAndroidVersionName(t),n={name:s.OS_MAP.Android,version:t};return r&&(n.versionName=r),n}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t=i.default.getFirstMatch(/(?:web|hpw)[o0]s\/(\d+(\.\d+)*)/i,e),r={name:s.OS_MAP.WebOS};return t&&t.length&&(r.version=t),r}},{test:[/blackberry|\bbb\d+/i,/rim\stablet/i],describe:function(e){var t=i.default.getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i,e)||i.default.getFirstMatch(/blackberry\d+\/(\d+([_\s]\d+)*)/i,e)||i.default.getFirstMatch(/\bbb(\d+)/i,e);return {name:s.OS_MAP.BlackBerry,version:t}}},{test:[/bada/i],describe:function(e){var t=i.default.getFirstMatch(/bada\/(\d+(\.\d+)*)/i,e);return {name:s.OS_MAP.Bada,version:t}}},{test:[/tizen/i],describe:function(e){var t=i.default.getFirstMatch(/tizen[/\s](\d+(\.\d+)*)/i,e);return {name:s.OS_MAP.Tizen,version:t}}},{test:[/linux/i],describe:function(){return {name:s.OS_MAP.Linux}}},{test:[/CrOS/],describe:function(){return {name:s.OS_MAP.ChromeOS}}},{test:[/PlayStation 4/],describe:function(e){var t=i.default.getFirstMatch(/PlayStation 4[/\s](\d+(\.\d+)*)/i,e);return {name:s.OS_MAP.PlayStation4,version:t}}}];t.default=a,e.exports=t.default;},94:function(e,t,r){t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n},s=r(18);var a=[{test:[/googlebot/i],describe:function(){return {type:"bot",vendor:"Google"}}},{test:[/huawei/i],describe:function(e){var t=i.default.getFirstMatch(/(can-l01)/i,e)&&"Nova",r={type:s.PLATFORMS_MAP.mobile,vendor:"Huawei"};return t&&(r.model=t),r}},{test:[/nexus\s*(?:7|8|9|10).*/i],describe:function(){return {type:s.PLATFORMS_MAP.tablet,vendor:"Nexus"}}},{test:[/ipad/i],describe:function(){return {type:s.PLATFORMS_MAP.tablet,vendor:"Apple",model:"iPad"}}},{test:[/Macintosh(.*?) FxiOS(.*?)\//],describe:function(){return {type:s.PLATFORMS_MAP.tablet,vendor:"Apple",model:"iPad"}}},{test:[/kftt build/i],describe:function(){return {type:s.PLATFORMS_MAP.tablet,vendor:"Amazon",model:"Kindle Fire HD 7"}}},{test:[/silk/i],describe:function(){return {type:s.PLATFORMS_MAP.tablet,vendor:"Amazon"}}},{test:[/tablet(?! pc)/i],describe:function(){return {type:s.PLATFORMS_MAP.tablet}}},{test:function(e){var t=e.test(/ipod|iphone/i),r=e.test(/like (ipod|iphone)/i);return t&&!r},describe:function(e){var t=i.default.getFirstMatch(/(ipod|iphone)/i,e);return {type:s.PLATFORMS_MAP.mobile,vendor:"Apple",model:t}}},{test:[/nexus\s*[0-6].*/i,/galaxy nexus/i],describe:function(){return {type:s.PLATFORMS_MAP.mobile,vendor:"Nexus"}}},{test:[/[^-]mobi/i],describe:function(){return {type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return "blackberry"===e.getBrowserName(!0)},describe:function(){return {type:s.PLATFORMS_MAP.mobile,vendor:"BlackBerry"}}},{test:function(e){return "bada"===e.getBrowserName(!0)},describe:function(){return {type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return "windows phone"===e.getBrowserName()},describe:function(){return {type:s.PLATFORMS_MAP.mobile,vendor:"Microsoft"}}},{test:function(e){var t=Number(String(e.getOSVersion()).split(".")[0]);return "android"===e.getOSName(!0)&&t>=3},describe:function(){return {type:s.PLATFORMS_MAP.tablet}}},{test:function(e){return "android"===e.getOSName(!0)},describe:function(){return {type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return "macos"===e.getOSName(!0)},describe:function(){return {type:s.PLATFORMS_MAP.desktop,vendor:"Apple"}}},{test:function(e){return "windows"===e.getOSName(!0)},describe:function(){return {type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return "linux"===e.getOSName(!0)},describe:function(){return {type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return "playstation 4"===e.getOSName(!0)},describe:function(){return {type:s.PLATFORMS_MAP.tv}}},{test:function(e){return "roku"===e.getOSName(!0)},describe:function(){return {type:s.PLATFORMS_MAP.tv}}}];t.default=a,e.exports=t.default;},95:function(e,t,r){t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n},s=r(18);var a=[{test:function(e){return "microsoft edge"===e.getBrowserName(!0)},describe:function(e){if(/\sedg\//i.test(e))return {name:s.ENGINE_MAP.Blink};var t=i.default.getFirstMatch(/edge\/(\d+(\.?_?\d+)+)/i,e);return {name:s.ENGINE_MAP.EdgeHTML,version:t}}},{test:[/trident/i],describe:function(e){var t={name:s.ENGINE_MAP.Trident},r=i.default.getFirstMatch(/trident\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){return e.test(/presto/i)},describe:function(e){var t={name:s.ENGINE_MAP.Presto},r=i.default.getFirstMatch(/presto\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=e.test(/gecko/i),r=e.test(/like gecko/i);return t&&!r},describe:function(e){var t={name:s.ENGINE_MAP.Gecko},r=i.default.getFirstMatch(/gecko\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(apple)?webkit\/537\.36/i],describe:function(){return {name:s.ENGINE_MAP.Blink}}},{test:[/(apple)?webkit/i],describe:function(e){var t={name:s.ENGINE_MAP.WebKit},r=i.default.getFirstMatch(/webkit\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}}];t.default=a,e.exports=t.default;}})}));
	});

	unwrapExports(es5);
	var es5_1 = es5.bowser;

	/**
	 * Helpers.
	 */

	var s = 1000;
	var m = s * 60;
	var h = m * 60;
	var d = h * 24;
	var w = d * 7;
	var y = d * 365.25;

	/**
	 * Parse or format the given `val`.
	 *
	 * Options:
	 *
	 *  - `long` verbose formatting [false]
	 *
	 * @param {String|Number} val
	 * @param {Object} [options]
	 * @throws {Error} throw an error if val is not a non-empty string or a number
	 * @return {String|Number}
	 * @api public
	 */

	var ms = function(val, options) {
	  options = options || {};
	  var type = typeof val;
	  if (type === 'string' && val.length > 0) {
	    return parse(val);
	  } else if (type === 'number' && isFinite(val)) {
	    return options.long ? fmtLong(val) : fmtShort(val);
	  }
	  throw new Error(
	    'val is not a non-empty string or a valid number. val=' +
	      JSON.stringify(val)
	  );
	};

	/**
	 * Parse the given `str` and return milliseconds.
	 *
	 * @param {String} str
	 * @return {Number}
	 * @api private
	 */

	function parse(str) {
	  str = String(str);
	  if (str.length > 100) {
	    return;
	  }
	  var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
	    str
	  );
	  if (!match) {
	    return;
	  }
	  var n = parseFloat(match[1]);
	  var type = (match[2] || 'ms').toLowerCase();
	  switch (type) {
	    case 'years':
	    case 'year':
	    case 'yrs':
	    case 'yr':
	    case 'y':
	      return n * y;
	    case 'weeks':
	    case 'week':
	    case 'w':
	      return n * w;
	    case 'days':
	    case 'day':
	    case 'd':
	      return n * d;
	    case 'hours':
	    case 'hour':
	    case 'hrs':
	    case 'hr':
	    case 'h':
	      return n * h;
	    case 'minutes':
	    case 'minute':
	    case 'mins':
	    case 'min':
	    case 'm':
	      return n * m;
	    case 'seconds':
	    case 'second':
	    case 'secs':
	    case 'sec':
	    case 's':
	      return n * s;
	    case 'milliseconds':
	    case 'millisecond':
	    case 'msecs':
	    case 'msec':
	    case 'ms':
	      return n;
	    default:
	      return undefined;
	  }
	}

	/**
	 * Short format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function fmtShort(ms) {
	  var msAbs = Math.abs(ms);
	  if (msAbs >= d) {
	    return Math.round(ms / d) + 'd';
	  }
	  if (msAbs >= h) {
	    return Math.round(ms / h) + 'h';
	  }
	  if (msAbs >= m) {
	    return Math.round(ms / m) + 'm';
	  }
	  if (msAbs >= s) {
	    return Math.round(ms / s) + 's';
	  }
	  return ms + 'ms';
	}

	/**
	 * Long format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function fmtLong(ms) {
	  var msAbs = Math.abs(ms);
	  if (msAbs >= d) {
	    return plural(ms, msAbs, d, 'day');
	  }
	  if (msAbs >= h) {
	    return plural(ms, msAbs, h, 'hour');
	  }
	  if (msAbs >= m) {
	    return plural(ms, msAbs, m, 'minute');
	  }
	  if (msAbs >= s) {
	    return plural(ms, msAbs, s, 'second');
	  }
	  return ms + ' ms';
	}

	/**
	 * Pluralization helper.
	 */

	function plural(ms, msAbs, n, name) {
	  var isPlural = msAbs >= n * 1.5;
	  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
	}

	/**
	 * This is the common logic for both the Node.js and web browser
	 * implementations of `debug()`.
	 */

	function setup(env) {
		createDebug.debug = createDebug;
		createDebug.default = createDebug;
		createDebug.coerce = coerce;
		createDebug.disable = disable;
		createDebug.enable = enable;
		createDebug.enabled = enabled;
		createDebug.humanize = ms;

		Object.keys(env).forEach(key => {
			createDebug[key] = env[key];
		});

		/**
		* Active `debug` instances.
		*/
		createDebug.instances = [];

		/**
		* The currently active debug mode names, and names to skip.
		*/

		createDebug.names = [];
		createDebug.skips = [];

		/**
		* Map of special "%n" handling functions, for the debug "format" argument.
		*
		* Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
		*/
		createDebug.formatters = {};

		/**
		* Selects a color for a debug namespace
		* @param {String} namespace The namespace string for the for the debug instance to be colored
		* @return {Number|String} An ANSI color code for the given namespace
		* @api private
		*/
		function selectColor(namespace) {
			let hash = 0;

			for (let i = 0; i < namespace.length; i++) {
				hash = ((hash << 5) - hash) + namespace.charCodeAt(i);
				hash |= 0; // Convert to 32bit integer
			}

			return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
		}
		createDebug.selectColor = selectColor;

		/**
		* Create a debugger with the given `namespace`.
		*
		* @param {String} namespace
		* @return {Function}
		* @api public
		*/
		function createDebug(namespace) {
			let prevTime;

			function debug(...args) {
				// Disabled?
				if (!debug.enabled) {
					return;
				}

				const self = debug;

				// Set `diff` timestamp
				const curr = Number(new Date());
				const ms = curr - (prevTime || curr);
				self.diff = ms;
				self.prev = prevTime;
				self.curr = curr;
				prevTime = curr;

				args[0] = createDebug.coerce(args[0]);

				if (typeof args[0] !== 'string') {
					// Anything else let's inspect with %O
					args.unshift('%O');
				}

				// Apply any `formatters` transformations
				let index = 0;
				args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
					// If we encounter an escaped % then don't increase the array index
					if (match === '%%') {
						return match;
					}
					index++;
					const formatter = createDebug.formatters[format];
					if (typeof formatter === 'function') {
						const val = args[index];
						match = formatter.call(self, val);

						// Now we need to remove `args[index]` since it's inlined in the `format`
						args.splice(index, 1);
						index--;
					}
					return match;
				});

				// Apply env-specific formatting (colors, etc.)
				createDebug.formatArgs.call(self, args);

				const logFn = self.log || createDebug.log;
				logFn.apply(self, args);
			}

			debug.namespace = namespace;
			debug.enabled = createDebug.enabled(namespace);
			debug.useColors = createDebug.useColors();
			debug.color = selectColor(namespace);
			debug.destroy = destroy;
			debug.extend = extend;
			// Debug.formatArgs = formatArgs;
			// debug.rawLog = rawLog;

			// env-specific initialization logic for debug instances
			if (typeof createDebug.init === 'function') {
				createDebug.init(debug);
			}

			createDebug.instances.push(debug);

			return debug;
		}

		function destroy() {
			const index = createDebug.instances.indexOf(this);
			if (index !== -1) {
				createDebug.instances.splice(index, 1);
				return true;
			}
			return false;
		}

		function extend(namespace, delimiter) {
			const newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
			newDebug.log = this.log;
			return newDebug;
		}

		/**
		* Enables a debug mode by namespaces. This can include modes
		* separated by a colon and wildcards.
		*
		* @param {String} namespaces
		* @api public
		*/
		function enable(namespaces) {
			createDebug.save(namespaces);

			createDebug.names = [];
			createDebug.skips = [];

			let i;
			const split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
			const len = split.length;

			for (i = 0; i < len; i++) {
				if (!split[i]) {
					// ignore empty strings
					continue;
				}

				namespaces = split[i].replace(/\*/g, '.*?');

				if (namespaces[0] === '-') {
					createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
				} else {
					createDebug.names.push(new RegExp('^' + namespaces + '$'));
				}
			}

			for (i = 0; i < createDebug.instances.length; i++) {
				const instance = createDebug.instances[i];
				instance.enabled = createDebug.enabled(instance.namespace);
			}
		}

		/**
		* Disable debug output.
		*
		* @return {String} namespaces
		* @api public
		*/
		function disable() {
			const namespaces = [
				...createDebug.names.map(toNamespace),
				...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)
			].join(',');
			createDebug.enable('');
			return namespaces;
		}

		/**
		* Returns true if the given mode name is enabled, false otherwise.
		*
		* @param {String} name
		* @return {Boolean}
		* @api public
		*/
		function enabled(name) {
			if (name[name.length - 1] === '*') {
				return true;
			}

			let i;
			let len;

			for (i = 0, len = createDebug.skips.length; i < len; i++) {
				if (createDebug.skips[i].test(name)) {
					return false;
				}
			}

			for (i = 0, len = createDebug.names.length; i < len; i++) {
				if (createDebug.names[i].test(name)) {
					return true;
				}
			}

			return false;
		}

		/**
		* Convert regexp to namespace
		*
		* @param {RegExp} regxep
		* @return {String} namespace
		* @api private
		*/
		function toNamespace(regexp) {
			return regexp.toString()
				.substring(2, regexp.toString().length - 2)
				.replace(/\.\*\?$/, '*');
		}

		/**
		* Coerce `val`.
		*
		* @param {Mixed} val
		* @return {Mixed}
		* @api private
		*/
		function coerce(val) {
			if (val instanceof Error) {
				return val.stack || val.message;
			}
			return val;
		}

		createDebug.enable(createDebug.load());

		return createDebug;
	}

	var common = setup;

	var browser = createCommonjsModule(function (module, exports) {
	/* eslint-env browser */

	/**
	 * This is the web browser implementation of `debug()`.
	 */

	exports.log = log;
	exports.formatArgs = formatArgs;
	exports.save = save;
	exports.load = load;
	exports.useColors = useColors;
	exports.storage = localstorage();

	/**
	 * Colors.
	 */

	exports.colors = [
		'#0000CC',
		'#0000FF',
		'#0033CC',
		'#0033FF',
		'#0066CC',
		'#0066FF',
		'#0099CC',
		'#0099FF',
		'#00CC00',
		'#00CC33',
		'#00CC66',
		'#00CC99',
		'#00CCCC',
		'#00CCFF',
		'#3300CC',
		'#3300FF',
		'#3333CC',
		'#3333FF',
		'#3366CC',
		'#3366FF',
		'#3399CC',
		'#3399FF',
		'#33CC00',
		'#33CC33',
		'#33CC66',
		'#33CC99',
		'#33CCCC',
		'#33CCFF',
		'#6600CC',
		'#6600FF',
		'#6633CC',
		'#6633FF',
		'#66CC00',
		'#66CC33',
		'#9900CC',
		'#9900FF',
		'#9933CC',
		'#9933FF',
		'#99CC00',
		'#99CC33',
		'#CC0000',
		'#CC0033',
		'#CC0066',
		'#CC0099',
		'#CC00CC',
		'#CC00FF',
		'#CC3300',
		'#CC3333',
		'#CC3366',
		'#CC3399',
		'#CC33CC',
		'#CC33FF',
		'#CC6600',
		'#CC6633',
		'#CC9900',
		'#CC9933',
		'#CCCC00',
		'#CCCC33',
		'#FF0000',
		'#FF0033',
		'#FF0066',
		'#FF0099',
		'#FF00CC',
		'#FF00FF',
		'#FF3300',
		'#FF3333',
		'#FF3366',
		'#FF3399',
		'#FF33CC',
		'#FF33FF',
		'#FF6600',
		'#FF6633',
		'#FF9900',
		'#FF9933',
		'#FFCC00',
		'#FFCC33'
	];

	/**
	 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
	 * and the Firebug extension (any Firefox version) are known
	 * to support "%c" CSS customizations.
	 *
	 * TODO: add a `localStorage` variable to explicitly enable/disable colors
	 */

	// eslint-disable-next-line complexity
	function useColors() {
		// NB: In an Electron preload script, document will be defined but not fully
		// initialized. Since we know we're in Chrome, we'll just detect this case
		// explicitly
		if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
			return true;
		}

		// Internet Explorer and Edge do not support colors.
		if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
			return false;
		}

		// Is webkit? http://stackoverflow.com/a/16459606/376773
		// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
		return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
			// Is firebug? http://stackoverflow.com/a/398120/376773
			(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
			// Is firefox >= v31?
			// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
			(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
			// Double check webkit in userAgent just in case we are in a worker
			(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
	}

	/**
	 * Colorize log arguments if enabled.
	 *
	 * @api public
	 */

	function formatArgs(args) {
		args[0] = (this.useColors ? '%c' : '') +
			this.namespace +
			(this.useColors ? ' %c' : ' ') +
			args[0] +
			(this.useColors ? '%c ' : ' ') +
			'+' + module.exports.humanize(this.diff);

		if (!this.useColors) {
			return;
		}

		const c = 'color: ' + this.color;
		args.splice(1, 0, c, 'color: inherit');

		// The final "%c" is somewhat tricky, because there could be other
		// arguments passed either before or after the %c, so we need to
		// figure out the correct index to insert the CSS into
		let index = 0;
		let lastC = 0;
		args[0].replace(/%[a-zA-Z%]/g, match => {
			if (match === '%%') {
				return;
			}
			index++;
			if (match === '%c') {
				// We only are interested in the *last* %c
				// (the user may have provided their own)
				lastC = index;
			}
		});

		args.splice(lastC, 0, c);
	}

	/**
	 * Invokes `console.log()` when available.
	 * No-op when `console.log` is not a "function".
	 *
	 * @api public
	 */
	function log(...args) {
		// This hackery is required for IE8/9, where
		// the `console.log` function doesn't have 'apply'
		return typeof console === 'object' &&
			console.log &&
			console.log(...args);
	}

	/**
	 * Save `namespaces`.
	 *
	 * @param {String} namespaces
	 * @api private
	 */
	function save(namespaces) {
		try {
			if (namespaces) {
				exports.storage.setItem('debug', namespaces);
			} else {
				exports.storage.removeItem('debug');
			}
		} catch (error) {
			// Swallow
			// XXX (@Qix-) should we be logging these?
		}
	}

	/**
	 * Load `namespaces`.
	 *
	 * @return {String} returns the previously persisted debug modes
	 * @api private
	 */
	function load() {
		let r;
		try {
			r = exports.storage.getItem('debug');
		} catch (error) {
			// Swallow
			// XXX (@Qix-) should we be logging these?
		}

		// If debug isn't set in LS, and we're in Electron, try to load $DEBUG
		if (!r && typeof process !== 'undefined' && 'env' in process) {
			r = process.env.DEBUG;
		}

		return r;
	}

	/**
	 * Localstorage attempts to return the localstorage.
	 *
	 * This is necessary because safari throws
	 * when a user disables cookies/localstorage
	 * and you attempt to access it.
	 *
	 * @return {LocalStorage}
	 * @api private
	 */

	function localstorage() {
		try {
			// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
			// The Browser also has localStorage in the global context.
			return localStorage;
		} catch (error) {
			// Swallow
			// XXX (@Qix-) should we be logging these?
		}
	}

	module.exports = common(exports);

	const {formatters} = module.exports;

	/**
	 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
	 */

	formatters.j = function (v) {
		try {
			return JSON.stringify(v);
		} catch (error) {
			return '[UnexpectedJSONParseError]: ' + error.message;
		}
	};
	});
	var browser_1 = browser.log;
	var browser_2 = browser.formatArgs;
	var browser_3 = browser.save;
	var browser_4 = browser.load;
	var browser_5 = browser.useColors;
	var browser_6 = browser.storage;
	var browser_7 = browser.colors;

	var Logger_1 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });

	const APP_NAME = 'mediasoup-client';
	class Logger {
	    constructor(prefix) {
	        if (prefix) {
	            this._debug = browser.default(`${APP_NAME}:${prefix}`);
	            this._warn = browser.default(`${APP_NAME}:WARN:${prefix}`);
	            this._error = browser.default(`${APP_NAME}:ERROR:${prefix}`);
	        }
	        else {
	            this._debug = browser.default(APP_NAME);
	            this._warn = browser.default(`${APP_NAME}:WARN`);
	            this._error = browser.default(`${APP_NAME}:ERROR`);
	        }
	        /* eslint-disable no-console */
	        this._debug.log = console.info.bind(console);
	        this._warn.log = console.warn.bind(console);
	        this._error.log = console.error.bind(console);
	        /* eslint-enable no-console */
	    }
	    get debug() {
	        return this._debug;
	    }
	    get warn() {
	        return this._warn;
	    }
	    get error() {
	        return this._error;
	    }
	}
	exports.Logger = Logger;
	});

	unwrapExports(Logger_1);
	var Logger_2 = Logger_1.Logger;

	var errors = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	/**
	 * Error indicating not support for something.
	 */
	class UnsupportedError extends Error {
	    constructor(message) {
	        super(message);
	        this.name = 'UnsupportedError';
	        if (Error.hasOwnProperty('captureStackTrace')) // Just in V8.
	         {
	            // @ts-ignore
	            Error.captureStackTrace(this, UnsupportedError);
	        }
	        else {
	            this.stack = (new Error(message)).stack;
	        }
	    }
	}
	exports.UnsupportedError = UnsupportedError;
	/**
	 * Error produced when calling a method in an invalid state.
	 */
	class InvalidStateError extends Error {
	    constructor(message) {
	        super(message);
	        this.name = 'InvalidStateError';
	        if (Error.hasOwnProperty('captureStackTrace')) // Just in V8.
	         {
	            // @ts-ignore
	            Error.captureStackTrace(this, InvalidStateError);
	        }
	        else {
	            this.stack = (new Error(message)).stack;
	        }
	    }
	}
	exports.InvalidStateError = InvalidStateError;
	});

	unwrapExports(errors);
	var errors_1 = errors.UnsupportedError;
	var errors_2 = errors.InvalidStateError;

	/**
	 * Helpers.
	 */

	var s$1 = 1000;
	var m$1 = s$1 * 60;
	var h$1 = m$1 * 60;
	var d$1 = h$1 * 24;
	var w$1 = d$1 * 7;
	var y$1 = d$1 * 365.25;

	/**
	 * Parse or format the given `val`.
	 *
	 * Options:
	 *
	 *  - `long` verbose formatting [false]
	 *
	 * @param {String|Number} val
	 * @param {Object} [options]
	 * @throws {Error} throw an error if val is not a non-empty string or a number
	 * @return {String|Number}
	 * @api public
	 */

	var ms$1 = function(val, options) {
	  options = options || {};
	  var type = typeof val;
	  if (type === 'string' && val.length > 0) {
	    return parse$1(val);
	  } else if (type === 'number' && isFinite(val)) {
	    return options.long ? fmtLong$1(val) : fmtShort$1(val);
	  }
	  throw new Error(
	    'val is not a non-empty string or a valid number. val=' +
	      JSON.stringify(val)
	  );
	};

	/**
	 * Parse the given `str` and return milliseconds.
	 *
	 * @param {String} str
	 * @return {Number}
	 * @api private
	 */

	function parse$1(str) {
	  str = String(str);
	  if (str.length > 100) {
	    return;
	  }
	  var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
	    str
	  );
	  if (!match) {
	    return;
	  }
	  var n = parseFloat(match[1]);
	  var type = (match[2] || 'ms').toLowerCase();
	  switch (type) {
	    case 'years':
	    case 'year':
	    case 'yrs':
	    case 'yr':
	    case 'y':
	      return n * y$1;
	    case 'weeks':
	    case 'week':
	    case 'w':
	      return n * w$1;
	    case 'days':
	    case 'day':
	    case 'd':
	      return n * d$1;
	    case 'hours':
	    case 'hour':
	    case 'hrs':
	    case 'hr':
	    case 'h':
	      return n * h$1;
	    case 'minutes':
	    case 'minute':
	    case 'mins':
	    case 'min':
	    case 'm':
	      return n * m$1;
	    case 'seconds':
	    case 'second':
	    case 'secs':
	    case 'sec':
	    case 's':
	      return n * s$1;
	    case 'milliseconds':
	    case 'millisecond':
	    case 'msecs':
	    case 'msec':
	    case 'ms':
	      return n;
	    default:
	      return undefined;
	  }
	}

	/**
	 * Short format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function fmtShort$1(ms) {
	  var msAbs = Math.abs(ms);
	  if (msAbs >= d$1) {
	    return Math.round(ms / d$1) + 'd';
	  }
	  if (msAbs >= h$1) {
	    return Math.round(ms / h$1) + 'h';
	  }
	  if (msAbs >= m$1) {
	    return Math.round(ms / m$1) + 'm';
	  }
	  if (msAbs >= s$1) {
	    return Math.round(ms / s$1) + 's';
	  }
	  return ms + 'ms';
	}

	/**
	 * Long format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function fmtLong$1(ms) {
	  var msAbs = Math.abs(ms);
	  if (msAbs >= d$1) {
	    return plural$1(ms, msAbs, d$1, 'day');
	  }
	  if (msAbs >= h$1) {
	    return plural$1(ms, msAbs, h$1, 'hour');
	  }
	  if (msAbs >= m$1) {
	    return plural$1(ms, msAbs, m$1, 'minute');
	  }
	  if (msAbs >= s$1) {
	    return plural$1(ms, msAbs, s$1, 'second');
	  }
	  return ms + ' ms';
	}

	/**
	 * Pluralization helper.
	 */

	function plural$1(ms, msAbs, n, name) {
	  var isPlural = msAbs >= n * 1.5;
	  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
	}

	/**
	 * This is the common logic for both the Node.js and web browser
	 * implementations of `debug()`.
	 */

	function setup$1(env) {
		createDebug.debug = createDebug;
		createDebug.default = createDebug;
		createDebug.coerce = coerce;
		createDebug.disable = disable;
		createDebug.enable = enable;
		createDebug.enabled = enabled;
		createDebug.humanize = ms$1;

		Object.keys(env).forEach(key => {
			createDebug[key] = env[key];
		});

		/**
		* Active `debug` instances.
		*/
		createDebug.instances = [];

		/**
		* The currently active debug mode names, and names to skip.
		*/

		createDebug.names = [];
		createDebug.skips = [];

		/**
		* Map of special "%n" handling functions, for the debug "format" argument.
		*
		* Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
		*/
		createDebug.formatters = {};

		/**
		* Selects a color for a debug namespace
		* @param {String} namespace The namespace string for the for the debug instance to be colored
		* @return {Number|String} An ANSI color code for the given namespace
		* @api private
		*/
		function selectColor(namespace) {
			let hash = 0;

			for (let i = 0; i < namespace.length; i++) {
				hash = ((hash << 5) - hash) + namespace.charCodeAt(i);
				hash |= 0; // Convert to 32bit integer
			}

			return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
		}
		createDebug.selectColor = selectColor;

		/**
		* Create a debugger with the given `namespace`.
		*
		* @param {String} namespace
		* @return {Function}
		* @api public
		*/
		function createDebug(namespace) {
			let prevTime;

			function debug(...args) {
				// Disabled?
				if (!debug.enabled) {
					return;
				}

				const self = debug;

				// Set `diff` timestamp
				const curr = Number(new Date());
				const ms = curr - (prevTime || curr);
				self.diff = ms;
				self.prev = prevTime;
				self.curr = curr;
				prevTime = curr;

				args[0] = createDebug.coerce(args[0]);

				if (typeof args[0] !== 'string') {
					// Anything else let's inspect with %O
					args.unshift('%O');
				}

				// Apply any `formatters` transformations
				let index = 0;
				args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
					// If we encounter an escaped % then don't increase the array index
					if (match === '%%') {
						return match;
					}
					index++;
					const formatter = createDebug.formatters[format];
					if (typeof formatter === 'function') {
						const val = args[index];
						match = formatter.call(self, val);

						// Now we need to remove `args[index]` since it's inlined in the `format`
						args.splice(index, 1);
						index--;
					}
					return match;
				});

				// Apply env-specific formatting (colors, etc.)
				createDebug.formatArgs.call(self, args);

				const logFn = self.log || createDebug.log;
				logFn.apply(self, args);
			}

			debug.namespace = namespace;
			debug.enabled = createDebug.enabled(namespace);
			debug.useColors = createDebug.useColors();
			debug.color = selectColor(namespace);
			debug.destroy = destroy;
			debug.extend = extend;
			// Debug.formatArgs = formatArgs;
			// debug.rawLog = rawLog;

			// env-specific initialization logic for debug instances
			if (typeof createDebug.init === 'function') {
				createDebug.init(debug);
			}

			createDebug.instances.push(debug);

			return debug;
		}

		function destroy() {
			const index = createDebug.instances.indexOf(this);
			if (index !== -1) {
				createDebug.instances.splice(index, 1);
				return true;
			}
			return false;
		}

		function extend(namespace, delimiter) {
			const newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
			newDebug.log = this.log;
			return newDebug;
		}

		/**
		* Enables a debug mode by namespaces. This can include modes
		* separated by a colon and wildcards.
		*
		* @param {String} namespaces
		* @api public
		*/
		function enable(namespaces) {
			createDebug.save(namespaces);

			createDebug.names = [];
			createDebug.skips = [];

			let i;
			const split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
			const len = split.length;

			for (i = 0; i < len; i++) {
				if (!split[i]) {
					// ignore empty strings
					continue;
				}

				namespaces = split[i].replace(/\*/g, '.*?');

				if (namespaces[0] === '-') {
					createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
				} else {
					createDebug.names.push(new RegExp('^' + namespaces + '$'));
				}
			}

			for (i = 0; i < createDebug.instances.length; i++) {
				const instance = createDebug.instances[i];
				instance.enabled = createDebug.enabled(instance.namespace);
			}
		}

		/**
		* Disable debug output.
		*
		* @return {String} namespaces
		* @api public
		*/
		function disable() {
			const namespaces = [
				...createDebug.names.map(toNamespace),
				...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)
			].join(',');
			createDebug.enable('');
			return namespaces;
		}

		/**
		* Returns true if the given mode name is enabled, false otherwise.
		*
		* @param {String} name
		* @return {Boolean}
		* @api public
		*/
		function enabled(name) {
			if (name[name.length - 1] === '*') {
				return true;
			}

			let i;
			let len;

			for (i = 0, len = createDebug.skips.length; i < len; i++) {
				if (createDebug.skips[i].test(name)) {
					return false;
				}
			}

			for (i = 0, len = createDebug.names.length; i < len; i++) {
				if (createDebug.names[i].test(name)) {
					return true;
				}
			}

			return false;
		}

		/**
		* Convert regexp to namespace
		*
		* @param {RegExp} regxep
		* @return {String} namespace
		* @api private
		*/
		function toNamespace(regexp) {
			return regexp.toString()
				.substring(2, regexp.toString().length - 2)
				.replace(/\.\*\?$/, '*');
		}

		/**
		* Coerce `val`.
		*
		* @param {Mixed} val
		* @return {Mixed}
		* @api private
		*/
		function coerce(val) {
			if (val instanceof Error) {
				return val.stack || val.message;
			}
			return val;
		}

		createDebug.enable(createDebug.load());

		return createDebug;
	}

	var common$1 = setup$1;

	var browser$1 = createCommonjsModule(function (module, exports) {
	/* eslint-env browser */

	/**
	 * This is the web browser implementation of `debug()`.
	 */

	exports.log = log;
	exports.formatArgs = formatArgs;
	exports.save = save;
	exports.load = load;
	exports.useColors = useColors;
	exports.storage = localstorage();

	/**
	 * Colors.
	 */

	exports.colors = [
		'#0000CC',
		'#0000FF',
		'#0033CC',
		'#0033FF',
		'#0066CC',
		'#0066FF',
		'#0099CC',
		'#0099FF',
		'#00CC00',
		'#00CC33',
		'#00CC66',
		'#00CC99',
		'#00CCCC',
		'#00CCFF',
		'#3300CC',
		'#3300FF',
		'#3333CC',
		'#3333FF',
		'#3366CC',
		'#3366FF',
		'#3399CC',
		'#3399FF',
		'#33CC00',
		'#33CC33',
		'#33CC66',
		'#33CC99',
		'#33CCCC',
		'#33CCFF',
		'#6600CC',
		'#6600FF',
		'#6633CC',
		'#6633FF',
		'#66CC00',
		'#66CC33',
		'#9900CC',
		'#9900FF',
		'#9933CC',
		'#9933FF',
		'#99CC00',
		'#99CC33',
		'#CC0000',
		'#CC0033',
		'#CC0066',
		'#CC0099',
		'#CC00CC',
		'#CC00FF',
		'#CC3300',
		'#CC3333',
		'#CC3366',
		'#CC3399',
		'#CC33CC',
		'#CC33FF',
		'#CC6600',
		'#CC6633',
		'#CC9900',
		'#CC9933',
		'#CCCC00',
		'#CCCC33',
		'#FF0000',
		'#FF0033',
		'#FF0066',
		'#FF0099',
		'#FF00CC',
		'#FF00FF',
		'#FF3300',
		'#FF3333',
		'#FF3366',
		'#FF3399',
		'#FF33CC',
		'#FF33FF',
		'#FF6600',
		'#FF6633',
		'#FF9900',
		'#FF9933',
		'#FFCC00',
		'#FFCC33'
	];

	/**
	 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
	 * and the Firebug extension (any Firefox version) are known
	 * to support "%c" CSS customizations.
	 *
	 * TODO: add a `localStorage` variable to explicitly enable/disable colors
	 */

	// eslint-disable-next-line complexity
	function useColors() {
		// NB: In an Electron preload script, document will be defined but not fully
		// initialized. Since we know we're in Chrome, we'll just detect this case
		// explicitly
		if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
			return true;
		}

		// Internet Explorer and Edge do not support colors.
		if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
			return false;
		}

		// Is webkit? http://stackoverflow.com/a/16459606/376773
		// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
		return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
			// Is firebug? http://stackoverflow.com/a/398120/376773
			(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
			// Is firefox >= v31?
			// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
			(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
			// Double check webkit in userAgent just in case we are in a worker
			(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
	}

	/**
	 * Colorize log arguments if enabled.
	 *
	 * @api public
	 */

	function formatArgs(args) {
		args[0] = (this.useColors ? '%c' : '') +
			this.namespace +
			(this.useColors ? ' %c' : ' ') +
			args[0] +
			(this.useColors ? '%c ' : ' ') +
			'+' + module.exports.humanize(this.diff);

		if (!this.useColors) {
			return;
		}

		const c = 'color: ' + this.color;
		args.splice(1, 0, c, 'color: inherit');

		// The final "%c" is somewhat tricky, because there could be other
		// arguments passed either before or after the %c, so we need to
		// figure out the correct index to insert the CSS into
		let index = 0;
		let lastC = 0;
		args[0].replace(/%[a-zA-Z%]/g, match => {
			if (match === '%%') {
				return;
			}
			index++;
			if (match === '%c') {
				// We only are interested in the *last* %c
				// (the user may have provided their own)
				lastC = index;
			}
		});

		args.splice(lastC, 0, c);
	}

	/**
	 * Invokes `console.log()` when available.
	 * No-op when `console.log` is not a "function".
	 *
	 * @api public
	 */
	function log(...args) {
		// This hackery is required for IE8/9, where
		// the `console.log` function doesn't have 'apply'
		return typeof console === 'object' &&
			console.log &&
			console.log(...args);
	}

	/**
	 * Save `namespaces`.
	 *
	 * @param {String} namespaces
	 * @api private
	 */
	function save(namespaces) {
		try {
			if (namespaces) {
				exports.storage.setItem('debug', namespaces);
			} else {
				exports.storage.removeItem('debug');
			}
		} catch (error) {
			// Swallow
			// XXX (@Qix-) should we be logging these?
		}
	}

	/**
	 * Load `namespaces`.
	 *
	 * @return {String} returns the previously persisted debug modes
	 * @api private
	 */
	function load() {
		let r;
		try {
			r = exports.storage.getItem('debug');
		} catch (error) {
			// Swallow
			// XXX (@Qix-) should we be logging these?
		}

		// If debug isn't set in LS, and we're in Electron, try to load $DEBUG
		if (!r && typeof process !== 'undefined' && 'env' in process) {
			r = process.env.DEBUG;
		}

		return r;
	}

	/**
	 * Localstorage attempts to return the localstorage.
	 *
	 * This is necessary because safari throws
	 * when a user disables cookies/localstorage
	 * and you attempt to access it.
	 *
	 * @return {LocalStorage}
	 * @api private
	 */

	function localstorage() {
		try {
			// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
			// The Browser also has localStorage in the global context.
			return localStorage;
		} catch (error) {
			// Swallow
			// XXX (@Qix-) should we be logging these?
		}
	}

	module.exports = common$1(exports);

	const {formatters} = module.exports;

	/**
	 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
	 */

	formatters.j = function (v) {
		try {
			return JSON.stringify(v);
		} catch (error) {
			return '[UnexpectedJSONParseError]: ' + error.message;
		}
	};
	});
	var browser_1$1 = browser$1.log;
	var browser_2$1 = browser$1.formatArgs;
	var browser_3$1 = browser$1.save;
	var browser_4$1 = browser$1.load;
	var browser_5$1 = browser$1.useColors;
	var browser_6$1 = browser$1.storage;
	var browser_7$1 = browser$1.colors;

	var h264ProfileLevelId = createCommonjsModule(function (module, exports) {
	const debug = browser$1('h264-profile-level-id');

	/* eslint-disable no-console */
	debug.log = console.info.bind(console);
	/* eslint-enable no-console */

	const ProfileConstrainedBaseline = 1;
	const ProfileBaseline = 2;
	const ProfileMain = 3;
	const ProfileConstrainedHigh = 4;
	const ProfileHigh = 5;

	exports.ProfileConstrainedBaseline = ProfileConstrainedBaseline;
	exports.ProfileBaseline = ProfileBaseline;
	exports.ProfileMain = ProfileMain;
	exports.ProfileConstrainedHigh = ProfileConstrainedHigh;
	exports.ProfileHigh = ProfileHigh;

	// All values are equal to ten times the level number, except level 1b which is
	// special.
	const Level1_b = 0;
	const Level1 = 10;
	const Level1_1 = 11;
	const Level1_2 = 12;
	const Level1_3 = 13;
	const Level2 = 20;
	const Level2_1 = 21;
	const Level2_2 = 22;
	const Level3 = 30;
	const Level3_1 = 31;
	const Level3_2 = 32;
	const Level4 = 40;
	const Level4_1 = 41;
	const Level4_2 = 42;
	const Level5 = 50;
	const Level5_1 = 51;
	const Level5_2 = 52;

	exports.Level1_b = Level1_b;
	exports.Level1 = Level1;
	exports.Level1_1 = Level1_1;
	exports.Level1_2 = Level1_2;
	exports.Level1_3 = Level1_3;
	exports.Level2 = Level2;
	exports.Level2_1 = Level2_1;
	exports.Level2_2 = Level2_2;
	exports.Level3 = Level3;
	exports.Level3_1 = Level3_1;
	exports.Level3_2 = Level3_2;
	exports.Level4 = Level4;
	exports.Level4_1 = Level4_1;
	exports.Level4_2 = Level4_2;
	exports.Level5 = Level5;
	exports.Level5_1 = Level5_1;
	exports.Level5_2 = Level5_2;

	class ProfileLevelId
	{
		constructor(profile, level)
		{
			this.profile = profile;
			this.level = level;
		}
	}

	exports.ProfileLevelId = ProfileLevelId;

	// Default ProfileLevelId.
	//
	// TODO: The default should really be profile Baseline and level 1 according to
	// the spec: https://tools.ietf.org/html/rfc6184#section-8.1. In order to not
	// break backwards compatibility with older versions of WebRTC where external
	// codecs don't have any parameters, use profile ConstrainedBaseline level 3_1
	// instead. This workaround will only be done in an interim period to allow
	// external clients to update their code.
	//
	// http://crbug/webrtc/6337.
	const DefaultProfileLevelId =
		new ProfileLevelId(ProfileConstrainedBaseline, Level3_1);

	// For level_idc=11 and profile_idc=0x42, 0x4D, or 0x58, the constraint set3
	// flag specifies if level 1b or level 1.1 is used.
	const ConstraintSet3Flag = 0x10;

	// Class for matching bit patterns such as "x1xx0000" where 'x' is allowed to be
	// either 0 or 1.
	class BitPattern
	{
		constructor(str)
		{
			this._mask = ~byteMaskString('x', str);
			this._maskedValue = byteMaskString('1', str);
		}

		isMatch(value)
		{
			return this._maskedValue === (value & this._mask);
		}
	}

	// Class for converting between profile_idc/profile_iop to Profile.
	class ProfilePattern
	{
		constructor(profile_idc, profile_iop, profile)
		{
			this.profile_idc = profile_idc;
			this.profile_iop = profile_iop;
			this.profile = profile;
		}
	}

	// This is from https://tools.ietf.org/html/rfc6184#section-8.1.
	const ProfilePatterns =
	[
		new ProfilePattern(0x42, new BitPattern('x1xx0000'), ProfileConstrainedBaseline),
		new ProfilePattern(0x4D, new BitPattern('1xxx0000'), ProfileConstrainedBaseline),
		new ProfilePattern(0x58, new BitPattern('11xx0000'), ProfileConstrainedBaseline),
		new ProfilePattern(0x42, new BitPattern('x0xx0000'), ProfileBaseline),
		new ProfilePattern(0x58, new BitPattern('10xx0000'), ProfileBaseline),
		new ProfilePattern(0x4D, new BitPattern('0x0x0000'), ProfileMain),
		new ProfilePattern(0x64, new BitPattern('00000000'), ProfileHigh),
		new ProfilePattern(0x64, new BitPattern('00001100'), ProfileConstrainedHigh)
	];

	/**
	 * Parse profile level id that is represented as a string of 3 hex bytes.
	 * Nothing will be returned if the string is not a recognized H264 profile
	 * level id.
	 *
	 * @param {String} str - profile-level-id value as a string of 3 hex bytes.
	 *
	 * @returns {ProfileLevelId}
	 */
	exports.parseProfileLevelId = function(str)
	{
		// The string should consist of 3 bytes in hexadecimal format.
		if (typeof str !== 'string' || str.length !== 6)
			return null;

		const profile_level_id_numeric = parseInt(str, 16);

		if (profile_level_id_numeric === 0)
			return null;

		// Separate into three bytes.
		const level_idc = profile_level_id_numeric & 0xFF;
		const profile_iop = (profile_level_id_numeric >> 8) & 0xFF;
		const profile_idc = (profile_level_id_numeric >> 16) & 0xFF;

		// Parse level based on level_idc and constraint set 3 flag.
		let level;

		switch (level_idc)
		{
			case Level1_1:
			{
				level = (profile_iop & ConstraintSet3Flag) !== 0 ? Level1_b : Level1_1;
				break;
			}
			case Level1:
			case Level1_2:
			case Level1_3:
			case Level2:
			case Level2_1:
			case Level2_2:
			case Level3:
			case Level3_1:
			case Level3_2:
			case Level4:
			case Level4_1:
			case Level4_2:
			case Level5:
			case Level5_1:
			case Level5_2:
			{
				level = level_idc;
				break;
			}
			// Unrecognized level_idc.
			default:
			{
				debug('parseProfileLevelId() | unrecognized level_idc:%s', level_idc);

				return null;
			}
		}

		// Parse profile_idc/profile_iop into a Profile enum.
		for (const pattern of ProfilePatterns)
		{
			if (
				profile_idc === pattern.profile_idc &&
				pattern.profile_iop.isMatch(profile_iop)
			)
			{
				return new ProfileLevelId(pattern.profile, level);
			}
		}

		debug('parseProfileLevelId() | unrecognized profile_idc/profile_iop combination');

		return null;
	};

	/**
	 * Returns canonical string representation as three hex bytes of the profile
	 * level id, or returns nothing for invalid profile level ids.
	 *
	 * @param {ProfileLevelId} profile_level_id
	 *
	 * @returns {String}
	 */
	exports.profileLevelIdToString = function(profile_level_id)
	{
		// Handle special case level == 1b.
		if (profile_level_id.level == Level1_b)
		{
			switch (profile_level_id.profile)
			{
				case ProfileConstrainedBaseline:
				{
					return '42f00b';
				}
				case ProfileBaseline:
				{
					return '42100b';
				}
				case ProfileMain:
				{
					return '4d100b';
				}
				// Level 1_b is not allowed for other profiles.
				default:
				{
					debug(
						'profileLevelIdToString() | Level 1_b not is allowed for profile:%s',
						profile_level_id.profile);

					return null;
				}
			}
		}

		let profile_idc_iop_string;

		switch (profile_level_id.profile)
		{
			case ProfileConstrainedBaseline:
			{
				profile_idc_iop_string = '42e0';
				break;
			}
			case ProfileBaseline:
			{
				profile_idc_iop_string = '4200';
				break;
			}
			case ProfileMain:
			{
				profile_idc_iop_string = '4d00';
				break;
			}
			case ProfileConstrainedHigh:
			{
				profile_idc_iop_string = '640c';
				break;
			}
			case ProfileHigh:
			{
				profile_idc_iop_string = '6400';
				break;
			}
			default:
			{
				debug(
					'profileLevelIdToString() | unrecognized profile:%s',
					profile_level_id.profile);

				return null;
			}
		}

		let levelStr = (profile_level_id.level).toString(16);

		if (levelStr.length === 1)
			levelStr = `0${levelStr}`;

		return `${profile_idc_iop_string}${levelStr}`;
	};

	/**
	 * Parse profile level id that is represented as a string of 3 hex bytes
	 * contained in an SDP key-value map. A default profile level id will be
	 * returned if the profile-level-id key is missing. Nothing will be returned if
	 * the key is present but the string is invalid.
	 *
	 * @param {Object} [params={}] - Codec parameters object.
	 *
	 * @returns {ProfileLevelId}
	 */
	exports.parseSdpProfileLevelId = function(params = {})
	{
		const profile_level_id = params['profile-level-id'];

		return !profile_level_id
			? DefaultProfileLevelId
			: exports.parseProfileLevelId(profile_level_id);
	};

	/**
	 * Returns true if the parameters have the same H264 profile, i.e. the same
	 * H264 profile (Baseline, High, etc).
	 *
	 * @param {Object} [params1={}] - Codec parameters object.
	 * @param {Object} [params2={}] - Codec parameters object.
	 *
	 * @returns {Boolean}
	 */
	exports.isSameProfile = function(params1 = {}, params2 = {})
	{
		const profile_level_id_1 = exports.parseSdpProfileLevelId(params1);
		const profile_level_id_2 = exports.parseSdpProfileLevelId(params2);

		// Compare H264 profiles, but not levels.
		return Boolean(
			profile_level_id_1 &&
			profile_level_id_2 &&
			profile_level_id_1.profile === profile_level_id_2.profile
		);
	};

	/**
	 * Generate codec parameters that will be used as answer in an SDP negotiation
	 * based on local supported parameters and remote offered parameters. Both
	 * local_supported_params and remote_offered_params represent sendrecv media
	 * descriptions, i.e they are a mix of both encode and decode capabilities. In
	 * theory, when the profile in local_supported_params represent a strict superset
	 * of the profile in remote_offered_params, we could limit the profile in the
	 * answer to the profile in remote_offered_params.
	 *
	 * However, to simplify the code, each supported H264 profile should be listed
	 * explicitly in the list of local supported codecs, even if they are redundant.
	 * Then each local codec in the list should be tested one at a time against the
	 * remote codec, and only when the profiles are equal should this function be
	 * called. Therefore, this function does not need to handle profile intersection,
	 * and the profile of local_supported_params and remote_offered_params must be
	 * equal before calling this function. The parameters that are used when
	 * negotiating are the level part of profile-level-id and level-asymmetry-allowed.
	 *
	 * @param {Object} [local_supported_params={}]
	 * @param {Object} [remote_offered_params={}]
	 *
	 * @returns {String} Canonical string representation as three hex bytes of the
	 *   profile level id, or null if no one of the params have profile-level-id.
	 *
	 * @throws {TypeError} If Profile mismatch or invalid params.
	 */
	exports.generateProfileLevelIdForAnswer = function(
		local_supported_params = {},
		remote_offered_params = {}
	)
	{
		// If both local and remote params do not contain profile-level-id, they are
		// both using the default profile. In this case, don't return anything.
		if (
			!local_supported_params['profile-level-id'] &&
			!remote_offered_params['profile-level-id']
		)
		{
			debug(
				'generateProfileLevelIdForAnswer() | no profile-level-id in local and remote params');

			return null;
		}

		// Parse profile-level-ids.
		const local_profile_level_id =
			exports.parseSdpProfileLevelId(local_supported_params);
		const remote_profile_level_id =
			exports.parseSdpProfileLevelId(remote_offered_params);

		// The local and remote codec must have valid and equal H264 Profiles.
		if (!local_profile_level_id)
			throw new TypeError('invalid local_profile_level_id');

		if (!remote_profile_level_id)
			throw new TypeError('invalid remote_profile_level_id');

		if (local_profile_level_id.profile !== remote_profile_level_id.profile)
			throw new TypeError('H264 Profile mismatch');

		// Parse level information.
		const level_asymmetry_allowed = (
			isLevelAsymmetryAllowed(local_supported_params) &&
			isLevelAsymmetryAllowed(remote_offered_params)
		);

		const local_level = local_profile_level_id.level;
		const remote_level = remote_profile_level_id.level;
		const min_level = minLevel(local_level, remote_level);

		// Determine answer level. When level asymmetry is not allowed, level upgrade
		// is not allowed, i.e., the level in the answer must be equal to or lower
		// than the level in the offer.
		const answer_level = level_asymmetry_allowed ? local_level : min_level;

		debug(
			'generateProfileLevelIdForAnswer() | result: [profile:%s, level:%s]',
			local_profile_level_id.profile, answer_level);

		// Return the resulting profile-level-id for the answer parameters.
		return exports.profileLevelIdToString(
			new ProfileLevelId(local_profile_level_id.profile, answer_level));
	};

	// Convert a string of 8 characters into a byte where the positions containing
	// character c will have their bit set. For example, c = 'x', str = "x1xx0000"
	// will return 0b10110000.
	function byteMaskString(c, str)
	{
		return (
			((str[0] === c) << 7) | ((str[1] === c) << 6) | ((str[2] === c) << 5) |
			((str[3] === c) << 4)	| ((str[4] === c) << 3)	| ((str[5] === c) << 2)	|
			((str[6] === c) << 1)	| ((str[7] === c) << 0)
		);
	}

	// Compare H264 levels and handle the level 1b case.
	function isLessLevel(a, b)
	{
		if (a === Level1_b)
			return b !== Level1 && b !== Level1_b;

		if (b === Level1_b)
			return a !== Level1;

		return a < b;
	}

	function minLevel(a, b)
	{
		return isLessLevel(a, b) ? a : b;
	}

	function isLevelAsymmetryAllowed(params = {})
	{
		const level_asymmetry_allowed = params['level-asymmetry-allowed'];

		return (
			level_asymmetry_allowed === 1 ||
			level_asymmetry_allowed === '1'
		);
	}
	});
	var h264ProfileLevelId_1 = h264ProfileLevelId.ProfileConstrainedBaseline;
	var h264ProfileLevelId_2 = h264ProfileLevelId.ProfileBaseline;
	var h264ProfileLevelId_3 = h264ProfileLevelId.ProfileMain;
	var h264ProfileLevelId_4 = h264ProfileLevelId.ProfileConstrainedHigh;
	var h264ProfileLevelId_5 = h264ProfileLevelId.ProfileHigh;
	var h264ProfileLevelId_6 = h264ProfileLevelId.Level1_b;
	var h264ProfileLevelId_7 = h264ProfileLevelId.Level1;
	var h264ProfileLevelId_8 = h264ProfileLevelId.Level1_1;
	var h264ProfileLevelId_9 = h264ProfileLevelId.Level1_2;
	var h264ProfileLevelId_10 = h264ProfileLevelId.Level1_3;
	var h264ProfileLevelId_11 = h264ProfileLevelId.Level2;
	var h264ProfileLevelId_12 = h264ProfileLevelId.Level2_1;
	var h264ProfileLevelId_13 = h264ProfileLevelId.Level2_2;
	var h264ProfileLevelId_14 = h264ProfileLevelId.Level3;
	var h264ProfileLevelId_15 = h264ProfileLevelId.Level3_1;
	var h264ProfileLevelId_16 = h264ProfileLevelId.Level3_2;
	var h264ProfileLevelId_17 = h264ProfileLevelId.Level4;
	var h264ProfileLevelId_18 = h264ProfileLevelId.Level4_1;
	var h264ProfileLevelId_19 = h264ProfileLevelId.Level4_2;
	var h264ProfileLevelId_20 = h264ProfileLevelId.Level5;
	var h264ProfileLevelId_21 = h264ProfileLevelId.Level5_1;
	var h264ProfileLevelId_22 = h264ProfileLevelId.Level5_2;
	var h264ProfileLevelId_23 = h264ProfileLevelId.ProfileLevelId;
	var h264ProfileLevelId_24 = h264ProfileLevelId.parseProfileLevelId;
	var h264ProfileLevelId_25 = h264ProfileLevelId.profileLevelIdToString;
	var h264ProfileLevelId_26 = h264ProfileLevelId.parseSdpProfileLevelId;
	var h264ProfileLevelId_27 = h264ProfileLevelId.isSameProfile;
	var h264ProfileLevelId_28 = h264ProfileLevelId.generateProfileLevelIdForAnswer;

	var utils = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	/**
	 * Clones the given object/array.
	 *
	 * @param {Object|Array} obj
	 *
	 * @returns {Object|Array}
	 */
	function clone(data) {
	    if (typeof data !== 'object')
	        return {};
	    return JSON.parse(JSON.stringify(data));
	}
	exports.clone = clone;
	/**
	 * Generates a random positive integer.
	 */
	function generateRandomNumber() {
	    return Math.round(Math.random() * 10000000);
	}
	exports.generateRandomNumber = generateRandomNumber;
	});

	unwrapExports(utils);
	var utils_1 = utils.clone;
	var utils_2 = utils.generateRandomNumber;

	var ortc = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });


	const RTP_PROBATOR_MID = 'probator';
	const RTP_PROBATOR_SSRC = 1234;
	const RTP_PROBATOR_CODEC_PAYLOAD_TYPE = 127;
	/**
	 * Validates RtpCapabilities. It may modify given data by adding missing
	 * fields with default values.
	 * It throws if invalid.
	 */
	function validateRtpCapabilities(caps) {
	    if (typeof caps !== 'object')
	        throw new TypeError('caps is not an object');
	    // codecs is optional. If unset, fill with an empty array.
	    if (caps.codecs && !Array.isArray(caps.codecs))
	        throw new TypeError('caps.codecs is not an array');
	    else if (!caps.codecs)
	        caps.codecs = [];
	    for (const codec of caps.codecs) {
	        validateRtpCodecCapability(codec);
	    }
	    // headerExtensions is optional. If unset, fill with an empty array.
	    if (caps.headerExtensions && !Array.isArray(caps.headerExtensions))
	        throw new TypeError('caps.headerExtensions is not an array');
	    else if (!caps.headerExtensions)
	        caps.headerExtensions = [];
	    for (const ext of caps.headerExtensions) {
	        validateRtpHeaderExtension(ext);
	    }
	}
	exports.validateRtpCapabilities = validateRtpCapabilities;
	/**
	 * Validates RtpCodecCapability. It may modify given data by adding missing
	 * fields with default values.
	 * It throws if invalid.
	 */
	function validateRtpCodecCapability(codec) {
	    const MimeTypeRegex = new RegExp('^(audio|video)/(.+)', 'i');
	    if (typeof codec !== 'object')
	        throw new TypeError('codec is not an object');
	    // mimeType is mandatory.
	    if (!codec.mimeType || typeof codec.mimeType !== 'string')
	        throw new TypeError('missing codec.mimeType');
	    const mimeTypeMatch = MimeTypeRegex.exec(codec.mimeType);
	    if (!mimeTypeMatch)
	        throw new TypeError('invalid codec.mimeType');
	    // Just override kind with media component of mimeType.
	    codec.kind = mimeTypeMatch[1].toLowerCase();
	    // preferredPayloadType is optional.
	    if (codec.preferredPayloadType && typeof codec.preferredPayloadType !== 'number')
	        throw new TypeError('invalid codec.preferredPayloadType');
	    // clockRate is mandatory.
	    if (typeof codec.clockRate !== 'number')
	        throw new TypeError('missing codec.clockRate');
	    // channels is optional. If unset, set it to 1 (just if audio).
	    if (codec.kind === 'audio') {
	        if (typeof codec.channels !== 'number')
	            codec.channels = 1;
	    }
	    else {
	        delete codec.channels;
	    }
	    // parameters is optional. If unset, set it to an empty object.
	    if (!codec.parameters || typeof codec.parameters !== 'object')
	        codec.parameters = {};
	    for (const key of Object.keys(codec.parameters)) {
	        let value = codec.parameters[key];
	        if (value === undefined) {
	            codec.parameters[key] = '';
	            value = '';
	        }
	        if (typeof value !== 'string' && typeof value !== 'number') {
	            throw new TypeError(`invalid codec parameter [key:${key}s, value:${value}]`);
	        }
	        // Specific parameters validation.
	        if (key === 'apt') {
	            if (typeof value !== 'number')
	                throw new TypeError('invalid codec apt parameter');
	        }
	    }
	    // rtcpFeedback is optional. If unset, set it to an empty array.
	    if (!codec.rtcpFeedback || !Array.isArray(codec.rtcpFeedback))
	        codec.rtcpFeedback = [];
	    for (const fb of codec.rtcpFeedback) {
	        validateRtcpFeedback(fb);
	    }
	}
	exports.validateRtpCodecCapability = validateRtpCodecCapability;
	/**
	 * Validates RtcpFeedback. It may modify given data by adding missing
	 * fields with default values.
	 * It throws if invalid.
	 */
	function validateRtcpFeedback(fb) {
	    if (typeof fb !== 'object')
	        throw new TypeError('fb is not an object');
	    // type is mandatory.
	    if (!fb.type || typeof fb.type !== 'string')
	        throw new TypeError('missing fb.type');
	    // parameter is optional. If unset set it to an empty string.
	    if (!fb.parameter || typeof fb.parameter !== 'string')
	        fb.parameter = '';
	}
	exports.validateRtcpFeedback = validateRtcpFeedback;
	/**
	 * Validates RtpHeaderExtension. It may modify given data by adding missing
	 * fields with default values.
	 * It throws if invalid.
	 */
	function validateRtpHeaderExtension(ext) {
	    if (typeof ext !== 'object')
	        throw new TypeError('ext is not an object');
	    // kind is optional. If unset set it to an empty string.
	    if (!ext.kind || typeof ext.kind !== 'string')
	        ext.kind = '';
	    if (ext.kind !== '' && ext.kind !== 'audio' && ext.kind !== 'video')
	        throw new TypeError('invalid ext.kind');
	    // uri is mandatory.
	    if (!ext.uri || typeof ext.uri !== 'string')
	        throw new TypeError('missing ext.uri');
	    // preferredId is mandatory.
	    if (typeof ext.preferredId !== 'number')
	        throw new TypeError('missing ext.preferredId');
	    // preferredEncrypt is optional. If unset set it to false.
	    if (ext.preferredEncrypt && typeof ext.preferredEncrypt !== 'boolean')
	        throw new TypeError('invalid ext.preferredEncrypt');
	    else if (!ext.preferredEncrypt)
	        ext.preferredEncrypt = false;
	    // direction is optional. If unset set it to sendrecv.
	    if (ext.direction && typeof ext.direction !== 'string')
	        throw new TypeError('invalid ext.direction');
	    else if (!ext.direction)
	        ext.direction = 'sendrecv';
	}
	exports.validateRtpHeaderExtension = validateRtpHeaderExtension;
	/**
	 * Validates RtpParameters. It may modify given data by adding missing
	 * fields with default values.
	 * It throws if invalid.
	 */
	function validateRtpParameters(params) {
	    if (typeof params !== 'object')
	        throw new TypeError('params is not an object');
	    // mid is optional.
	    if (params.mid && typeof params.mid !== 'string')
	        throw new TypeError('params.mid is not a string');
	    // codecs is mandatory.
	    if (!Array.isArray(params.codecs))
	        throw new TypeError('missing params.codecs');
	    for (const codec of params.codecs) {
	        validateRtpCodecParameters(codec);
	    }
	    // headerExtensions is optional. If unset, fill with an empty array.
	    if (params.headerExtensions && !Array.isArray(params.headerExtensions))
	        throw new TypeError('params.headerExtensions is not an array');
	    else if (!params.headerExtensions)
	        params.headerExtensions = [];
	    for (const ext of params.headerExtensions) {
	        validateRtpHeaderExtensionParameters(ext);
	    }
	    // encodings is optional. If unset, fill with an empty array.
	    if (params.encodings && !Array.isArray(params.encodings))
	        throw new TypeError('params.encodings is not an array');
	    else if (!params.encodings)
	        params.encodings = [];
	    for (const encoding of params.encodings) {
	        validateRtpEncodingParameters(encoding);
	    }
	    // rtcp is optional. If unset, fill with an empty object.
	    if (params.rtcp && typeof params.rtcp !== 'object')
	        throw new TypeError('params.rtcp is not an object');
	    else if (!params.rtcp)
	        params.rtcp = {};
	    validateRtcpParameters(params.rtcp);
	}
	exports.validateRtpParameters = validateRtpParameters;
	/**
	 * Validates RtpCodecParameters. It may modify given data by adding missing
	 * fields with default values.
	 * It throws if invalid.
	 */
	function validateRtpCodecParameters(codec) {
	    const MimeTypeRegex = new RegExp('^(audio|video)/(.+)', 'i');
	    if (typeof codec !== 'object')
	        throw new TypeError('codec is not an object');
	    // mimeType is mandatory.
	    if (!codec.mimeType || typeof codec.mimeType !== 'string')
	        throw new TypeError('missing codec.mimeType');
	    const mimeTypeMatch = MimeTypeRegex.exec(codec.mimeType);
	    if (!mimeTypeMatch)
	        throw new TypeError('invalid codec.mimeType');
	    // payloadType is mandatory.
	    if (typeof codec.payloadType !== 'number')
	        throw new TypeError('missing codec.payloadType');
	    // clockRate is mandatory.
	    if (typeof codec.clockRate !== 'number')
	        throw new TypeError('missing codec.clockRate');
	    const kind = mimeTypeMatch[1].toLowerCase();
	    // channels is optional. If unset, set it to 1 (just if audio).
	    if (kind === 'audio') {
	        if (typeof codec.channels !== 'number')
	            codec.channels = 1;
	    }
	    else {
	        delete codec.channels;
	    }
	    // parameters is optional. If unset, set it to an empty object.
	    if (!codec.parameters || typeof codec.parameters !== 'object')
	        codec.parameters = {};
	    for (const key of Object.keys(codec.parameters)) {
	        let value = codec.parameters[key];
	        if (value === undefined) {
	            codec.parameters[key] = '';
	            value = '';
	        }
	        if (typeof value !== 'string' && typeof value !== 'number') {
	            throw new TypeError(`invalid codec parameter [key:${key}s, value:${value}]`);
	        }
	        // Specific parameters validation.
	        if (key === 'apt') {
	            if (typeof value !== 'number')
	                throw new TypeError('invalid codec apt parameter');
	        }
	    }
	    // rtcpFeedback is optional. If unset, set it to an empty array.
	    if (!codec.rtcpFeedback || !Array.isArray(codec.rtcpFeedback))
	        codec.rtcpFeedback = [];
	    for (const fb of codec.rtcpFeedback) {
	        validateRtcpFeedback(fb);
	    }
	}
	exports.validateRtpCodecParameters = validateRtpCodecParameters;
	/**
	 * Validates RtpHeaderExtensionParameteters. It may modify given data by adding missing
	 * fields with default values.
	 * It throws if invalid.
	 */
	function validateRtpHeaderExtensionParameters(ext) {
	    if (typeof ext !== 'object')
	        throw new TypeError('ext is not an object');
	    // uri is mandatory.
	    if (!ext.uri || typeof ext.uri !== 'string')
	        throw new TypeError('missing ext.uri');
	    // id is mandatory.
	    if (typeof ext.id !== 'number')
	        throw new TypeError('missing ext.id');
	    // encrypt is optional. If unset set it to false.
	    if (ext.encrypt && typeof ext.encrypt !== 'boolean')
	        throw new TypeError('invalid ext.encrypt');
	    else if (!ext.encrypt)
	        ext.encrypt = false;
	    // parameters is optional. If unset, set it to an empty object.
	    if (!ext.parameters || typeof ext.parameters !== 'object')
	        ext.parameters = {};
	    for (const key of Object.keys(ext.parameters)) {
	        let value = ext.parameters[key];
	        if (value === undefined) {
	            ext.parameters[key] = '';
	            value = '';
	        }
	        if (typeof value !== 'string' && typeof value !== 'number')
	            throw new TypeError('invalid header extension parameter');
	    }
	}
	exports.validateRtpHeaderExtensionParameters = validateRtpHeaderExtensionParameters;
	/**
	 * Validates RtpEncodingParameters. It may modify given data by adding missing
	 * fields with default values.
	 * It throws if invalid.
	 */
	function validateRtpEncodingParameters(encoding) {
	    if (typeof encoding !== 'object')
	        throw new TypeError('encoding is not an object');
	    // ssrc is optional.
	    if (encoding.ssrc && typeof encoding.ssrc !== 'number')
	        throw new TypeError('invalid encoding.ssrc');
	    // rid is optional.
	    if (encoding.rid && typeof encoding.rid !== 'string')
	        throw new TypeError('invalid encoding.rid');
	    // rtx is optional.
	    if (encoding.rtx && typeof encoding.rtx !== 'object') {
	        throw new TypeError('invalid encoding.rtx');
	    }
	    else if (encoding.rtx) {
	        // RTX ssrc is mandatory if rtx is present.
	        if (typeof encoding.rtx.ssrc !== 'number')
	            throw new TypeError('missing encoding.rtx.ssrc');
	    }
	    // dtx is optional. If unset set it to false.
	    if (!encoding.dtx || typeof encoding.dtx !== 'boolean')
	        encoding.dtx = false;
	    // scalabilityMode is optional.
	    if (encoding.scalabilityMode && typeof encoding.scalabilityMode !== 'string')
	        throw new TypeError('invalid encoding.scalabilityMode');
	}
	exports.validateRtpEncodingParameters = validateRtpEncodingParameters;
	/**
	 * Validates RtcpParameters. It may modify given data by adding missing
	 * fields with default values.
	 * It throws if invalid.
	 */
	function validateRtcpParameters(rtcp) {
	    if (typeof rtcp !== 'object')
	        throw new TypeError('rtcp is not an object');
	    // cname is optional.
	    if (rtcp.cname && typeof rtcp.cname !== 'string')
	        throw new TypeError('invalid rtcp.cname');
	    // reducedSize is optional. If unset set it to true.
	    if (!rtcp.reducedSize || typeof rtcp.reducedSize !== 'boolean')
	        rtcp.reducedSize = true;
	}
	exports.validateRtcpParameters = validateRtcpParameters;
	/**
	 * Validates SctpCapabilities. It may modify given data by adding missing
	 * fields with default values.
	 * It throws if invalid.
	 */
	function validateSctpCapabilities(caps) {
	    if (typeof caps !== 'object')
	        throw new TypeError('caps is not an object');
	    // numStreams is mandatory.
	    if (!caps.numStreams || typeof caps.numStreams !== 'object')
	        throw new TypeError('missing caps.numStreams');
	    validateNumSctpStreams(caps.numStreams);
	}
	exports.validateSctpCapabilities = validateSctpCapabilities;
	/**
	 * Validates NumSctpStreams. It may modify given data by adding missing
	 * fields with default values.
	 * It throws if invalid.
	 */
	function validateNumSctpStreams(numStreams) {
	    if (typeof numStreams !== 'object')
	        throw new TypeError('numStreams is not an object');
	    // OS is mandatory.
	    if (typeof numStreams.OS !== 'number')
	        throw new TypeError('missing numStreams.OS');
	    // MIS is mandatory.
	    if (typeof numStreams.MIS !== 'number')
	        throw new TypeError('missing numStreams.MIS');
	}
	exports.validateNumSctpStreams = validateNumSctpStreams;
	/**
	 * Validates SctpParameters. It may modify given data by adding missing
	 * fields with default values.
	 * It throws if invalid.
	 */
	function validateSctpParameters(params) {
	    if (typeof params !== 'object')
	        throw new TypeError('params is not an object');
	    // port is mandatory.
	    if (typeof params.port !== 'number')
	        throw new TypeError('missing params.port');
	    // OS is mandatory.
	    if (typeof params.OS !== 'number')
	        throw new TypeError('missing params.OS');
	    // MIS is mandatory.
	    if (typeof params.MIS !== 'number')
	        throw new TypeError('missing params.MIS');
	    // maxMessageSize is mandatory.
	    if (typeof params.maxMessageSize !== 'number')
	        throw new TypeError('missing params.maxMessageSize');
	}
	exports.validateSctpParameters = validateSctpParameters;
	/**
	 * Validates SctpStreamParameters. It may modify given data by adding missing
	 * fields with default values.
	 * It throws if invalid.
	 */
	function validateSctpStreamParameters(params) {
	    if (typeof params !== 'object')
	        throw new TypeError('params is not an object');
	    // streamId is mandatory.
	    if (typeof params.streamId !== 'number')
	        throw new TypeError('missing params.streamId');
	    // ordered is optional.
	    let orderedGiven = false;
	    if (typeof params.ordered === 'boolean')
	        orderedGiven = true;
	    else
	        params.ordered = true;
	    // maxPacketLifeTime is optional.
	    if (params.maxPacketLifeTime && typeof params.maxPacketLifeTime !== 'number')
	        throw new TypeError('invalid params.maxPacketLifeTime');
	    // maxRetransmits is optional.
	    if (params.maxRetransmits && typeof params.maxRetransmits !== 'number')
	        throw new TypeError('invalid params.maxRetransmits');
	    if (params.maxPacketLifeTime && params.maxRetransmits)
	        throw new TypeError('cannot provide both maxPacketLifeTime and maxRetransmits');
	    if (orderedGiven &&
	        params.ordered &&
	        (params.maxPacketLifeTime || params.maxRetransmits)) {
	        throw new TypeError('cannot be ordered with maxPacketLifeTime or maxRetransmits');
	    }
	    else if (!orderedGiven && (params.maxPacketLifeTime || params.maxRetransmits)) {
	        params.ordered = false;
	    }
	    // priority is optional.
	    if (params.priority && typeof params.priority !== 'string')
	        throw new TypeError('invalid params.priority');
	    // label is optional.
	    if (params.label && typeof params.label !== 'string')
	        throw new TypeError('invalid params.label');
	    // protocol is optional.
	    if (params.protocol && typeof params.protocol !== 'string')
	        throw new TypeError('invalid params.protocol');
	}
	exports.validateSctpStreamParameters = validateSctpStreamParameters;
	/**
	 * Generate extended RTP capabilities for sending and receiving.
	 */
	function getExtendedRtpCapabilities(localCaps, remoteCaps) {
	    const extendedRtpCapabilities = {
	        codecs: [],
	        headerExtensions: []
	    };
	    // Match media codecs and keep the order preferred by remoteCaps.
	    for (const remoteCodec of remoteCaps.codecs || []) {
	        if (isRtxCodec(remoteCodec))
	            continue;
	        const matchingLocalCodec = (localCaps.codecs || [])
	            .find((localCodec) => (matchCodecs(localCodec, remoteCodec, { strict: true, modify: true })));
	        if (!matchingLocalCodec)
	            continue;
	        const extendedCodec = {
	            mimeType: matchingLocalCodec.mimeType,
	            kind: matchingLocalCodec.kind,
	            clockRate: matchingLocalCodec.clockRate,
	            channels: matchingLocalCodec.channels,
	            localPayloadType: matchingLocalCodec.preferredPayloadType,
	            localRtxPayloadType: undefined,
	            remotePayloadType: remoteCodec.preferredPayloadType,
	            remoteRtxPayloadType: undefined,
	            localParameters: matchingLocalCodec.parameters,
	            remoteParameters: remoteCodec.parameters,
	            rtcpFeedback: reduceRtcpFeedback(matchingLocalCodec, remoteCodec)
	        };
	        extendedRtpCapabilities.codecs.push(extendedCodec);
	    }
	    // Match RTX codecs.
	    for (const extendedCodec of extendedRtpCapabilities.codecs) {
	        const matchingLocalRtxCodec = localCaps.codecs
	            .find((localCodec) => (isRtxCodec(localCodec) &&
	            localCodec.parameters.apt === extendedCodec.localPayloadType));
	        const matchingRemoteRtxCodec = remoteCaps.codecs
	            .find((remoteCodec) => (isRtxCodec(remoteCodec) &&
	            remoteCodec.parameters.apt === extendedCodec.remotePayloadType));
	        if (matchingLocalRtxCodec && matchingRemoteRtxCodec) {
	            extendedCodec.localRtxPayloadType = matchingLocalRtxCodec.preferredPayloadType;
	            extendedCodec.remoteRtxPayloadType = matchingRemoteRtxCodec.preferredPayloadType;
	        }
	    }
	    // Match header extensions.
	    for (const remoteExt of remoteCaps.headerExtensions) {
	        const matchingLocalExt = localCaps.headerExtensions
	            .find((localExt) => (matchHeaderExtensions(localExt, remoteExt)));
	        if (!matchingLocalExt)
	            continue;
	        const extendedExt = {
	            kind: remoteExt.kind,
	            uri: remoteExt.uri,
	            sendId: matchingLocalExt.preferredId,
	            recvId: remoteExt.preferredId,
	            encrypt: matchingLocalExt.preferredEncrypt,
	            direction: 'sendrecv'
	        };
	        switch (remoteExt.direction) {
	            case 'sendrecv':
	                extendedExt.direction = 'sendrecv';
	                break;
	            case 'recvonly':
	                extendedExt.direction = 'sendonly';
	                break;
	            case 'sendonly':
	                extendedExt.direction = 'recvonly';
	                break;
	            case 'inactive':
	                extendedExt.direction = 'inactive';
	                break;
	        }
	        extendedRtpCapabilities.headerExtensions.push(extendedExt);
	    }
	    return extendedRtpCapabilities;
	}
	exports.getExtendedRtpCapabilities = getExtendedRtpCapabilities;
	/**
	 * Generate RTP capabilities for receiving media based on the given extended
	 * RTP capabilities.
	 */
	function getRecvRtpCapabilities(extendedRtpCapabilities) {
	    const rtpCapabilities = {
	        codecs: [],
	        headerExtensions: []
	    };
	    for (const extendedCodec of extendedRtpCapabilities.codecs) {
	        const codec = {
	            mimeType: extendedCodec.mimeType,
	            kind: extendedCodec.kind,
	            preferredPayloadType: extendedCodec.remotePayloadType,
	            clockRate: extendedCodec.clockRate,
	            channels: extendedCodec.channels,
	            parameters: extendedCodec.localParameters,
	            rtcpFeedback: extendedCodec.rtcpFeedback
	        };
	        rtpCapabilities.codecs.push(codec);
	        // Add RTX codec.
	        if (!extendedCodec.remoteRtxPayloadType)
	            continue;
	        const rtxCodec = {
	            mimeType: `${extendedCodec.kind}/rtx`,
	            kind: extendedCodec.kind,
	            preferredPayloadType: extendedCodec.remoteRtxPayloadType,
	            clockRate: extendedCodec.clockRate,
	            parameters: {
	                apt: extendedCodec.remotePayloadType
	            },
	            rtcpFeedback: []
	        };
	        rtpCapabilities.codecs.push(rtxCodec);
	        // TODO: In the future, we need to add FEC, CN, etc, codecs.
	    }
	    for (const extendedExtension of extendedRtpCapabilities.headerExtensions) {
	        // Ignore RTP extensions not valid for receiving.
	        if (extendedExtension.direction !== 'sendrecv' &&
	            extendedExtension.direction !== 'recvonly') {
	            continue;
	        }
	        const ext = {
	            kind: extendedExtension.kind,
	            uri: extendedExtension.uri,
	            preferredId: extendedExtension.recvId,
	            preferredEncrypt: extendedExtension.encrypt,
	            direction: extendedExtension.direction
	        };
	        rtpCapabilities.headerExtensions.push(ext);
	    }
	    return rtpCapabilities;
	}
	exports.getRecvRtpCapabilities = getRecvRtpCapabilities;
	/**
	 * Generate RTP parameters of the given kind for sending media.
	 * NOTE: mid, encodings and rtcp fields are left empty.
	 */
	function getSendingRtpParameters(kind, extendedRtpCapabilities) {
	    const rtpParameters = {
	        mid: undefined,
	        codecs: [],
	        headerExtensions: [],
	        encodings: [],
	        rtcp: {}
	    };
	    for (const extendedCodec of extendedRtpCapabilities.codecs) {
	        if (extendedCodec.kind !== kind)
	            continue;
	        const codec = {
	            mimeType: extendedCodec.mimeType,
	            payloadType: extendedCodec.localPayloadType,
	            clockRate: extendedCodec.clockRate,
	            channels: extendedCodec.channels,
	            parameters: extendedCodec.localParameters,
	            rtcpFeedback: extendedCodec.rtcpFeedback
	        };
	        rtpParameters.codecs.push(codec);
	        // Add RTX codec.
	        if (extendedCodec.localRtxPayloadType) {
	            const rtxCodec = {
	                mimeType: `${extendedCodec.kind}/rtx`,
	                payloadType: extendedCodec.localRtxPayloadType,
	                clockRate: extendedCodec.clockRate,
	                parameters: {
	                    apt: extendedCodec.localPayloadType
	                },
	                rtcpFeedback: []
	            };
	            rtpParameters.codecs.push(rtxCodec);
	        }
	    }
	    for (const extendedExtension of extendedRtpCapabilities.headerExtensions) {
	        // Ignore RTP extensions of a different kind and those not valid for sending.
	        if ((extendedExtension.kind && extendedExtension.kind !== kind) ||
	            (extendedExtension.direction !== 'sendrecv' &&
	                extendedExtension.direction !== 'sendonly')) {
	            continue;
	        }
	        const ext = {
	            uri: extendedExtension.uri,
	            id: extendedExtension.sendId,
	            encrypt: extendedExtension.encrypt,
	            parameters: {}
	        };
	        rtpParameters.headerExtensions.push(ext);
	    }
	    return rtpParameters;
	}
	exports.getSendingRtpParameters = getSendingRtpParameters;
	/**
	 * Generate RTP parameters of the given kind suitable for the remote SDP answer.
	 */
	function getSendingRemoteRtpParameters(kind, extendedRtpCapabilities) {
	    const rtpParameters = {
	        mid: undefined,
	        codecs: [],
	        headerExtensions: [],
	        encodings: [],
	        rtcp: {}
	    };
	    for (const extendedCodec of extendedRtpCapabilities.codecs) {
	        if (extendedCodec.kind !== kind)
	            continue;
	        const codec = {
	            mimeType: extendedCodec.mimeType,
	            payloadType: extendedCodec.localPayloadType,
	            clockRate: extendedCodec.clockRate,
	            channels: extendedCodec.channels,
	            parameters: extendedCodec.remoteParameters,
	            rtcpFeedback: extendedCodec.rtcpFeedback
	        };
	        rtpParameters.codecs.push(codec);
	        // Add RTX codec.
	        if (extendedCodec.localRtxPayloadType) {
	            const rtxCodec = {
	                mimeType: `${extendedCodec.kind}/rtx`,
	                payloadType: extendedCodec.localRtxPayloadType,
	                clockRate: extendedCodec.clockRate,
	                parameters: {
	                    apt: extendedCodec.localPayloadType
	                },
	                rtcpFeedback: []
	            };
	            rtpParameters.codecs.push(rtxCodec);
	        }
	    }
	    for (const extendedExtension of extendedRtpCapabilities.headerExtensions) {
	        // Ignore RTP extensions of a different kind and those not valid for sending.
	        if ((extendedExtension.kind && extendedExtension.kind !== kind) ||
	            (extendedExtension.direction !== 'sendrecv' &&
	                extendedExtension.direction !== 'sendonly')) {
	            continue;
	        }
	        const ext = {
	            uri: extendedExtension.uri,
	            id: extendedExtension.sendId,
	            encrypt: extendedExtension.encrypt,
	            parameters: {}
	        };
	        rtpParameters.headerExtensions.push(ext);
	    }
	    // Reduce codecs' RTCP feedback. Use Transport-CC if available, REMB otherwise.
	    if (rtpParameters.headerExtensions.some((ext) => (ext.uri === 'http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01'))) {
	        for (const codec of rtpParameters.codecs) {
	            codec.rtcpFeedback = (codec.rtcpFeedback || [])
	                .filter((fb) => fb.type !== 'goog-remb');
	        }
	    }
	    else if (rtpParameters.headerExtensions.some((ext) => (ext.uri === 'http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time'))) {
	        for (const codec of rtpParameters.codecs) {
	            codec.rtcpFeedback = (codec.rtcpFeedback || [])
	                .filter((fb) => fb.type !== 'transport-cc');
	        }
	    }
	    else {
	        for (const codec of rtpParameters.codecs) {
	            codec.rtcpFeedback = (codec.rtcpFeedback || [])
	                .filter((fb) => (fb.type !== 'transport-cc' &&
	                fb.type !== 'goog-remb'));
	        }
	    }
	    return rtpParameters;
	}
	exports.getSendingRemoteRtpParameters = getSendingRemoteRtpParameters;
	/**
	 * Reduce given codecs by returning an array of codecs "compatible" with the
	 * given capability codec. If no capability codec is given, take the first
	 * one(s).
	 *
	 * Given codecs must be generated by ortc.getSendingRtpParameters() or
	 * ortc.getSendingRemoteRtpParameters().
	 *
	 * The returned array of codecs also include a RTX codec if available.
	 */
	function reduceCodecs(codecs, capCodec) {
	    const filteredCodecs = [];
	    // If no capability codec is given, take the first one (and RTX).
	    if (!capCodec) {
	        filteredCodecs.push(codecs[0]);
	        if (isRtxCodec(codecs[1]))
	            filteredCodecs.push(codecs[1]);
	    }
	    // Otherwise look for a compatible set of codecs.
	    else {
	        for (let idx = 0; idx < codecs.length; ++idx) {
	            if (matchCodecs(codecs[idx], capCodec)) {
	                filteredCodecs.push(codecs[idx]);
	                if (isRtxCodec(codecs[idx + 1]))
	                    filteredCodecs.push(codecs[idx + 1]);
	                break;
	            }
	        }
	        if (filteredCodecs.length === 0)
	            throw new TypeError('no matching codec found');
	    }
	    return filteredCodecs;
	}
	exports.reduceCodecs = reduceCodecs;
	/**
	 * Create RTP parameters for a Consumer for the RTP probator.
	 */
	function generateProbatorRtpParameters(videoRtpParameters) {
	    // Clone given reference video RTP parameters.
	    videoRtpParameters = utils.clone(videoRtpParameters);
	    // This may throw.
	    validateRtpParameters(videoRtpParameters);
	    const rtpParameters = {
	        mid: RTP_PROBATOR_MID,
	        codecs: [],
	        headerExtensions: [],
	        encodings: [{ ssrc: RTP_PROBATOR_SSRC }],
	        rtcp: { cname: 'probator' }
	    };
	    rtpParameters.codecs.push(videoRtpParameters.codecs[0]);
	    rtpParameters.codecs[0].payloadType = RTP_PROBATOR_CODEC_PAYLOAD_TYPE;
	    rtpParameters.headerExtensions = videoRtpParameters.headerExtensions;
	    return rtpParameters;
	}
	exports.generateProbatorRtpParameters = generateProbatorRtpParameters;
	/**
	 * Whether media can be sent based on the given RTP capabilities.
	 */
	function canSend(kind, extendedRtpCapabilities) {
	    return extendedRtpCapabilities.codecs.
	        some((codec) => codec.kind === kind);
	}
	exports.canSend = canSend;
	/**
	 * Whether the given RTP parameters can be received with the given RTP
	 * capabilities.
	 */
	function canReceive(rtpParameters, extendedRtpCapabilities) {
	    // This may throw.
	    validateRtpParameters(rtpParameters);
	    if (rtpParameters.codecs.length === 0)
	        return false;
	    const firstMediaCodec = rtpParameters.codecs[0];
	    return extendedRtpCapabilities.codecs
	        .some((codec) => codec.remotePayloadType === firstMediaCodec.payloadType);
	}
	exports.canReceive = canReceive;
	function isRtxCodec(codec) {
	    if (!codec)
	        return false;
	    return /.+\/rtx$/i.test(codec.mimeType);
	}
	function matchCodecs(aCodec, bCodec, { strict = false, modify = false } = {}) {
	    const aMimeType = aCodec.mimeType.toLowerCase();
	    const bMimeType = bCodec.mimeType.toLowerCase();
	    if (aMimeType !== bMimeType)
	        return false;
	    if (aCodec.clockRate !== bCodec.clockRate)
	        return false;
	    if (aCodec.channels !== bCodec.channels)
	        return false;
	    // Per codec special checks.
	    switch (aMimeType) {
	        case 'video/h264':
	            {
	                const aPacketizationMode = aCodec.parameters['packetization-mode'] || 0;
	                const bPacketizationMode = bCodec.parameters['packetization-mode'] || 0;
	                if (aPacketizationMode !== bPacketizationMode)
	                    return false;
	                // If strict matching check profile-level-id.
	                if (strict) {
	                    if (!h264ProfileLevelId.isSameProfile(aCodec.parameters, bCodec.parameters))
	                        return false;
	                    let selectedProfileLevelId;
	                    try {
	                        selectedProfileLevelId =
	                            h264ProfileLevelId.generateProfileLevelIdForAnswer(aCodec.parameters, bCodec.parameters);
	                    }
	                    catch (error) {
	                        return false;
	                    }
	                    if (modify) {
	                        if (selectedProfileLevelId)
	                            aCodec.parameters['profile-level-id'] = selectedProfileLevelId;
	                        else
	                            delete aCodec.parameters['profile-level-id'];
	                    }
	                }
	                break;
	            }
	        case 'video/vp9':
	            {
	                // If strict matching check profile-id.
	                if (strict) {
	                    const aProfileId = aCodec.parameters['profile-id'] || 0;
	                    const bProfileId = bCodec.parameters['profile-id'] || 0;
	                    if (aProfileId !== bProfileId)
	                        return false;
	                }
	                break;
	            }
	    }
	    return true;
	}
	function matchHeaderExtensions(aExt, bExt) {
	    if (aExt.kind && bExt.kind && aExt.kind !== bExt.kind)
	        return false;
	    if (aExt.uri !== bExt.uri)
	        return false;
	    return true;
	}
	function reduceRtcpFeedback(codecA, codecB) {
	    const reducedRtcpFeedback = [];
	    for (const aFb of codecA.rtcpFeedback || []) {
	        const matchingBFb = (codecB.rtcpFeedback || [])
	            .find((bFb) => (bFb.type === aFb.type &&
	            (bFb.parameter === aFb.parameter || (!bFb.parameter && !aFb.parameter))));
	        if (matchingBFb)
	            reducedRtcpFeedback.push(matchingBFb);
	    }
	    return reducedRtcpFeedback;
	}
	});

	unwrapExports(ortc);
	var ortc_1 = ortc.validateRtpCapabilities;
	var ortc_2 = ortc.validateRtpCodecCapability;
	var ortc_3 = ortc.validateRtcpFeedback;
	var ortc_4 = ortc.validateRtpHeaderExtension;
	var ortc_5 = ortc.validateRtpParameters;
	var ortc_6 = ortc.validateRtpCodecParameters;
	var ortc_7 = ortc.validateRtpHeaderExtensionParameters;
	var ortc_8 = ortc.validateRtpEncodingParameters;
	var ortc_9 = ortc.validateRtcpParameters;
	var ortc_10 = ortc.validateSctpCapabilities;
	var ortc_11 = ortc.validateNumSctpStreams;
	var ortc_12 = ortc.validateSctpParameters;
	var ortc_13 = ortc.validateSctpStreamParameters;
	var ortc_14 = ortc.getExtendedRtpCapabilities;
	var ortc_15 = ortc.getRecvRtpCapabilities;
	var ortc_16 = ortc.getSendingRtpParameters;
	var ortc_17 = ortc.getSendingRemoteRtpParameters;
	var ortc_18 = ortc.reduceCodecs;
	var ortc_19 = ortc.generateProbatorRtpParameters;
	var ortc_20 = ortc.canSend;
	var ortc_21 = ortc.canReceive;

	var lib = createCommonjsModule(function (module, exports) {
	var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	class AwaitQueue {
	    constructor({ ClosedErrorClass, StoppedErrorClass } = {
	        ClosedErrorClass: Error,
	        StoppedErrorClass: Error
	    }) {
	        // Closed flag.
	        this.closed = false;
	        // Queue of pending tasks.
	        this.pendingTasks = [];
	        // Error class used when rejecting a task due to AwaitQueue being closed.
	        this.ClosedErrorClass = Error;
	        // Error class used when rejecting a task due to AwaitQueue being stopped.
	        this.StoppedErrorClass = Error;
	        this.ClosedErrorClass = ClosedErrorClass;
	        this.StoppedErrorClass = StoppedErrorClass;
	    }
	    /**
	     * The number of ongoing enqueued tasks.
	     */
	    get size() {
	        return this.pendingTasks.length;
	    }
	    /**
	     * Closes the AwaitQueue. Pending tasks will be rejected with ClosedErrorClass
	     * error.
	     */
	    close() {
	        if (this.closed)
	            return;
	        this.closed = true;
	        for (const pendingTask of this.pendingTasks) {
	            pendingTask.stopped = true;
	            pendingTask.reject(new this.ClosedErrorClass('AwaitQueue closed'));
	        }
	        // Enpty the pending tasks array.
	        this.pendingTasks.length = 0;
	    }
	    /**
	     * Accepts a task as argument (and an optional task name) and enqueues it after
	     * pending tasks. Once processed, the push() method resolves (or rejects) with
	     * the result returned by the given task.
	     *
	     * The given task must return a Promise or directly a value.
	     */
	    push(task, name) {
	        return __awaiter(this, void 0, void 0, function* () {
	            if (this.closed)
	                throw new this.ClosedErrorClass('AwaitQueue closed');
	            if (typeof task !== 'function')
	                throw new TypeError('given task is not a function');
	            if (!task.name && name) {
	                try {
	                    Object.defineProperty(task, 'name', { value: name });
	                }
	                catch (error) { }
	            }
	            return new Promise((resolve, reject) => {
	                const pendingTask = {
	                    task,
	                    name,
	                    resolve,
	                    reject,
	                    stopped: false
	                };
	                // Append task to the queue.
	                this.pendingTasks.push(pendingTask);
	                // And run it if this is the only task in the queue.
	                if (this.pendingTasks.length === 1)
	                    this.next();
	            });
	        });
	    }
	    /**
	     * Make ongoing pending tasks reject with the given StoppedErrorClass error.
	     * The AwaitQueue instance is still usable for future tasks added via push()
	     * method.
	     */
	    stop() {
	        if (this.closed)
	            return;
	        for (const pendingTask of this.pendingTasks) {
	            pendingTask.stopped = true;
	            pendingTask.reject(new this.StoppedErrorClass('AwaitQueue stopped'));
	        }
	        // Enpty the pending tasks array.
	        this.pendingTasks.length = 0;
	    }
	    dump() {
	        return this.pendingTasks.map((pendingTask) => {
	            return {
	                task: pendingTask.task,
	                name: pendingTask.name,
	                stopped: pendingTask.stopped
	            };
	        });
	    }
	    next() {
	        return __awaiter(this, void 0, void 0, function* () {
	            // Take the first pending task.
	            const pendingTask = this.pendingTasks[0];
	            if (!pendingTask)
	                return;
	            // Execute it.
	            yield this.executeTask(pendingTask);
	            // Remove the first pending task (the completed one) from the queue.
	            this.pendingTasks.shift();
	            // And continue.
	            this.next();
	        });
	    }
	    executeTask(pendingTask) {
	        return __awaiter(this, void 0, void 0, function* () {
	            // If the task is stopped, ignore it.
	            if (pendingTask.stopped)
	                return;
	            try {
	                const result = yield pendingTask.task();
	                // If the task is stopped, ignore it.
	                if (pendingTask.stopped)
	                    return;
	                // Resolve the task with the returned result (if any).
	                pendingTask.resolve(result);
	            }
	            catch (error) {
	                // If the task is stopped, ignore it.
	                if (pendingTask.stopped)
	                    return;
	                // Reject the task with its own error.
	                pendingTask.reject(error);
	            }
	        });
	    }
	}
	exports.AwaitQueue = AwaitQueue;
	});

	unwrapExports(lib);
	var lib_1 = lib.AwaitQueue;

	var domain;

	// This constructor is used to store event handlers. Instantiating this is
	// faster than explicitly calling `Object.create(null)` to get a "clean" empty
	// object (tested with v8 v4.9).
	function EventHandlers() {}
	EventHandlers.prototype = Object.create(null);

	function EventEmitter() {
	  EventEmitter.init.call(this);
	}

	// nodejs oddity
	// require('events') === require('events').EventEmitter
	EventEmitter.EventEmitter = EventEmitter;

	EventEmitter.usingDomains = false;

	EventEmitter.prototype.domain = undefined;
	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;

	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;

	EventEmitter.init = function() {
	  this.domain = null;
	  if (EventEmitter.usingDomains) {
	    // if there is an active domain, then attach to it.
	    if (domain.active ) ;
	  }

	  if (!this._events || this._events === Object.getPrototypeOf(this)._events) {
	    this._events = new EventHandlers();
	    this._eventsCount = 0;
	  }

	  this._maxListeners = this._maxListeners || undefined;
	};

	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
	  if (typeof n !== 'number' || n < 0 || isNaN(n))
	    throw new TypeError('"n" argument must be a positive number');
	  this._maxListeners = n;
	  return this;
	};

	function $getMaxListeners(that) {
	  if (that._maxListeners === undefined)
	    return EventEmitter.defaultMaxListeners;
	  return that._maxListeners;
	}

	EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
	  return $getMaxListeners(this);
	};

	// These standalone emit* functions are used to optimize calling of event
	// handlers for fast cases because emit() itself often has a variable number of
	// arguments and can be deoptimized because of that. These functions always have
	// the same number of arguments and thus do not get deoptimized, so the code
	// inside them can execute faster.
	function emitNone(handler, isFn, self) {
	  if (isFn)
	    handler.call(self);
	  else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);
	    for (var i = 0; i < len; ++i)
	      listeners[i].call(self);
	  }
	}
	function emitOne(handler, isFn, self, arg1) {
	  if (isFn)
	    handler.call(self, arg1);
	  else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);
	    for (var i = 0; i < len; ++i)
	      listeners[i].call(self, arg1);
	  }
	}
	function emitTwo(handler, isFn, self, arg1, arg2) {
	  if (isFn)
	    handler.call(self, arg1, arg2);
	  else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);
	    for (var i = 0; i < len; ++i)
	      listeners[i].call(self, arg1, arg2);
	  }
	}
	function emitThree(handler, isFn, self, arg1, arg2, arg3) {
	  if (isFn)
	    handler.call(self, arg1, arg2, arg3);
	  else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);
	    for (var i = 0; i < len; ++i)
	      listeners[i].call(self, arg1, arg2, arg3);
	  }
	}

	function emitMany(handler, isFn, self, args) {
	  if (isFn)
	    handler.apply(self, args);
	  else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);
	    for (var i = 0; i < len; ++i)
	      listeners[i].apply(self, args);
	  }
	}

	EventEmitter.prototype.emit = function emit(type) {
	  var er, handler, len, args, i, events, domain;
	  var doError = (type === 'error');

	  events = this._events;
	  if (events)
	    doError = (doError && events.error == null);
	  else if (!doError)
	    return false;

	  domain = this.domain;

	  // If there is no 'error' event listener then throw.
	  if (doError) {
	    er = arguments[1];
	    if (domain) {
	      if (!er)
	        er = new Error('Uncaught, unspecified "error" event');
	      er.domainEmitter = this;
	      er.domain = domain;
	      er.domainThrown = false;
	      domain.emit('error', er);
	    } else if (er instanceof Error) {
	      throw er; // Unhandled 'error' event
	    } else {
	      // At least give some kind of context to the user
	      var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
	      err.context = er;
	      throw err;
	    }
	    return false;
	  }

	  handler = events[type];

	  if (!handler)
	    return false;

	  var isFn = typeof handler === 'function';
	  len = arguments.length;
	  switch (len) {
	    // fast cases
	    case 1:
	      emitNone(handler, isFn, this);
	      break;
	    case 2:
	      emitOne(handler, isFn, this, arguments[1]);
	      break;
	    case 3:
	      emitTwo(handler, isFn, this, arguments[1], arguments[2]);
	      break;
	    case 4:
	      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
	      break;
	    // slower
	    default:
	      args = new Array(len - 1);
	      for (i = 1; i < len; i++)
	        args[i - 1] = arguments[i];
	      emitMany(handler, isFn, this, args);
	  }

	  return true;
	};

	function _addListener(target, type, listener, prepend) {
	  var m;
	  var events;
	  var existing;

	  if (typeof listener !== 'function')
	    throw new TypeError('"listener" argument must be a function');

	  events = target._events;
	  if (!events) {
	    events = target._events = new EventHandlers();
	    target._eventsCount = 0;
	  } else {
	    // To avoid recursion in the case that type === "newListener"! Before
	    // adding it to the listeners, first emit "newListener".
	    if (events.newListener) {
	      target.emit('newListener', type,
	                  listener.listener ? listener.listener : listener);

	      // Re-assign `events` because a newListener handler could have caused the
	      // this._events to be assigned to a new object
	      events = target._events;
	    }
	    existing = events[type];
	  }

	  if (!existing) {
	    // Optimize the case of one listener. Don't need the extra array object.
	    existing = events[type] = listener;
	    ++target._eventsCount;
	  } else {
	    if (typeof existing === 'function') {
	      // Adding the second element, need to change to array.
	      existing = events[type] = prepend ? [listener, existing] :
	                                          [existing, listener];
	    } else {
	      // If we've already got an array, just append.
	      if (prepend) {
	        existing.unshift(listener);
	      } else {
	        existing.push(listener);
	      }
	    }

	    // Check for listener leak
	    if (!existing.warned) {
	      m = $getMaxListeners(target);
	      if (m && m > 0 && existing.length > m) {
	        existing.warned = true;
	        var w = new Error('Possible EventEmitter memory leak detected. ' +
	                            existing.length + ' ' + type + ' listeners added. ' +
	                            'Use emitter.setMaxListeners() to increase limit');
	        w.name = 'MaxListenersExceededWarning';
	        w.emitter = target;
	        w.type = type;
	        w.count = existing.length;
	        emitWarning(w);
	      }
	    }
	  }

	  return target;
	}
	function emitWarning(e) {
	  typeof console.warn === 'function' ? console.warn(e) : console.log(e);
	}
	EventEmitter.prototype.addListener = function addListener(type, listener) {
	  return _addListener(this, type, listener, false);
	};

	EventEmitter.prototype.on = EventEmitter.prototype.addListener;

	EventEmitter.prototype.prependListener =
	    function prependListener(type, listener) {
	      return _addListener(this, type, listener, true);
	    };

	function _onceWrap(target, type, listener) {
	  var fired = false;
	  function g() {
	    target.removeListener(type, g);
	    if (!fired) {
	      fired = true;
	      listener.apply(target, arguments);
	    }
	  }
	  g.listener = listener;
	  return g;
	}

	EventEmitter.prototype.once = function once(type, listener) {
	  if (typeof listener !== 'function')
	    throw new TypeError('"listener" argument must be a function');
	  this.on(type, _onceWrap(this, type, listener));
	  return this;
	};

	EventEmitter.prototype.prependOnceListener =
	    function prependOnceListener(type, listener) {
	      if (typeof listener !== 'function')
	        throw new TypeError('"listener" argument must be a function');
	      this.prependListener(type, _onceWrap(this, type, listener));
	      return this;
	    };

	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener =
	    function removeListener(type, listener) {
	      var list, events, position, i, originalListener;

	      if (typeof listener !== 'function')
	        throw new TypeError('"listener" argument must be a function');

	      events = this._events;
	      if (!events)
	        return this;

	      list = events[type];
	      if (!list)
	        return this;

	      if (list === listener || (list.listener && list.listener === listener)) {
	        if (--this._eventsCount === 0)
	          this._events = new EventHandlers();
	        else {
	          delete events[type];
	          if (events.removeListener)
	            this.emit('removeListener', type, list.listener || listener);
	        }
	      } else if (typeof list !== 'function') {
	        position = -1;

	        for (i = list.length; i-- > 0;) {
	          if (list[i] === listener ||
	              (list[i].listener && list[i].listener === listener)) {
	            originalListener = list[i].listener;
	            position = i;
	            break;
	          }
	        }

	        if (position < 0)
	          return this;

	        if (list.length === 1) {
	          list[0] = undefined;
	          if (--this._eventsCount === 0) {
	            this._events = new EventHandlers();
	            return this;
	          } else {
	            delete events[type];
	          }
	        } else {
	          spliceOne(list, position);
	        }

	        if (events.removeListener)
	          this.emit('removeListener', type, originalListener || listener);
	      }

	      return this;
	    };

	EventEmitter.prototype.removeAllListeners =
	    function removeAllListeners(type) {
	      var listeners, events;

	      events = this._events;
	      if (!events)
	        return this;

	      // not listening for removeListener, no need to emit
	      if (!events.removeListener) {
	        if (arguments.length === 0) {
	          this._events = new EventHandlers();
	          this._eventsCount = 0;
	        } else if (events[type]) {
	          if (--this._eventsCount === 0)
	            this._events = new EventHandlers();
	          else
	            delete events[type];
	        }
	        return this;
	      }

	      // emit removeListener for all listeners on all events
	      if (arguments.length === 0) {
	        var keys = Object.keys(events);
	        for (var i = 0, key; i < keys.length; ++i) {
	          key = keys[i];
	          if (key === 'removeListener') continue;
	          this.removeAllListeners(key);
	        }
	        this.removeAllListeners('removeListener');
	        this._events = new EventHandlers();
	        this._eventsCount = 0;
	        return this;
	      }

	      listeners = events[type];

	      if (typeof listeners === 'function') {
	        this.removeListener(type, listeners);
	      } else if (listeners) {
	        // LIFO order
	        do {
	          this.removeListener(type, listeners[listeners.length - 1]);
	        } while (listeners[0]);
	      }

	      return this;
	    };

	EventEmitter.prototype.listeners = function listeners(type) {
	  var evlistener;
	  var ret;
	  var events = this._events;

	  if (!events)
	    ret = [];
	  else {
	    evlistener = events[type];
	    if (!evlistener)
	      ret = [];
	    else if (typeof evlistener === 'function')
	      ret = [evlistener.listener || evlistener];
	    else
	      ret = unwrapListeners(evlistener);
	  }

	  return ret;
	};

	EventEmitter.listenerCount = function(emitter, type) {
	  if (typeof emitter.listenerCount === 'function') {
	    return emitter.listenerCount(type);
	  } else {
	    return listenerCount.call(emitter, type);
	  }
	};

	EventEmitter.prototype.listenerCount = listenerCount;
	function listenerCount(type) {
	  var events = this._events;

	  if (events) {
	    var evlistener = events[type];

	    if (typeof evlistener === 'function') {
	      return 1;
	    } else if (evlistener) {
	      return evlistener.length;
	    }
	  }

	  return 0;
	}

	EventEmitter.prototype.eventNames = function eventNames() {
	  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
	};

	// About 1.5x faster than the two-arg version of Array#splice().
	function spliceOne(list, index) {
	  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
	    list[i] = list[k];
	  list.pop();
	}

	function arrayClone(arr, i) {
	  var copy = new Array(i);
	  while (i--)
	    copy[i] = arr[i];
	  return copy;
	}

	function unwrapListeners(arr) {
	  var ret = new Array(arr.length);
	  for (var i = 0; i < ret.length; ++i) {
	    ret[i] = arr[i].listener || arr[i];
	  }
	  return ret;
	}

	var EnhancedEventEmitter_1 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });


	const logger = new Logger_1.Logger('EnhancedEventEmitter');
	class EnhancedEventEmitter extends EventEmitter.EventEmitter {
	    constructor() {
	        super();
	        this.setMaxListeners(Infinity);
	    }
	    safeEmit(event, ...args) {
	        const numListeners = this.listenerCount(event);
	        try {
	            return this.emit(event, ...args);
	        }
	        catch (error) {
	            logger.error('safeEmit() | event listener threw an error [event:%s]:%o', event, error);
	            return Boolean(numListeners);
	        }
	    }
	    async safeEmitAsPromise(event, ...args) {
	        return new Promise((resolve, reject) => (this.safeEmit(event, ...args, resolve, reject)));
	    }
	}
	exports.EnhancedEventEmitter = EnhancedEventEmitter;
	});

	unwrapExports(EnhancedEventEmitter_1);
	var EnhancedEventEmitter_2 = EnhancedEventEmitter_1.EnhancedEventEmitter;

	var Producer_1 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });



	const logger = new Logger_1.Logger('Producer');
	class Producer extends EnhancedEventEmitter_1.EnhancedEventEmitter {
	    /**
	     * @emits transportclose
	     * @emits trackended
	     * @emits @replacetrack - (track: MediaStreamTrack | null)
	     * @emits @setmaxspatiallayer - (spatialLayer: string)
	     * @emits @setrtpencodingparameters - (params: any)
	     * @emits @getstats
	     * @emits @close
	     */
	    constructor({ id, localId, rtpSender, track, rtpParameters, stopTracks, disableTrackOnPause, zeroRtpOnPause, appData }) {
	        super();
	        // Closed flag.
	        this._closed = false;
	        logger.debug('constructor()');
	        this._id = id;
	        this._localId = localId;
	        this._rtpSender = rtpSender;
	        this._track = track;
	        this._kind = track.kind;
	        this._rtpParameters = rtpParameters;
	        this._paused = disableTrackOnPause ? !track.enabled : false;
	        this._maxSpatialLayer = undefined;
	        this._stopTracks = stopTracks;
	        this._disableTrackOnPause = disableTrackOnPause;
	        this._zeroRtpOnPause = zeroRtpOnPause;
	        this._appData = appData;
	        this._onTrackEnded = this._onTrackEnded.bind(this);
	        // NOTE: Minor issue. If zeroRtpOnPause is true, we cannot emit the
	        // '@replacetrack' event here, so RTCRtpSender.track won't be null.
	        this._handleTrack();
	    }
	    /**
	     * Producer id.
	     */
	    get id() {
	        return this._id;
	    }
	    /**
	     * Local id.
	     */
	    get localId() {
	        return this._localId;
	    }
	    /**
	     * Whether the Producer is closed.
	     */
	    get closed() {
	        return this._closed;
	    }
	    /**
	     * Media kind.
	     */
	    get kind() {
	        return this._kind;
	    }
	    /**
	     * Associated RTCRtpSender.
	     */
	    get rtpSender() {
	        return this._rtpSender;
	    }
	    /**
	     * The associated track.
	     */
	    get track() {
	        return this._track;
	    }
	    /**
	     * RTP parameters.
	     */
	    get rtpParameters() {
	        return this._rtpParameters;
	    }
	    /**
	     * Whether the Producer is paused.
	     */
	    get paused() {
	        return this._paused;
	    }
	    /**
	     * Max spatial layer.
	     *
	     * @type {Number | undefined}
	     */
	    get maxSpatialLayer() {
	        return this._maxSpatialLayer;
	    }
	    /**
	     * App custom data.
	     */
	    get appData() {
	        return this._appData;
	    }
	    /**
	     * Invalid setter.
	     */
	    set appData(appData) {
	        throw new Error('cannot override appData object');
	    }
	    /**
	     * Closes the Producer.
	     */
	    close() {
	        if (this._closed)
	            return;
	        logger.debug('close()');
	        this._closed = true;
	        this._destroyTrack();
	        this.emit('@close');
	    }
	    /**
	     * Transport was closed.
	     */
	    transportClosed() {
	        if (this._closed)
	            return;
	        logger.debug('transportClosed()');
	        this._closed = true;
	        this._destroyTrack();
	        this.safeEmit('transportclose');
	    }
	    /**
	     * Get associated RTCRtpSender stats.
	     */
	    async getStats() {
	        if (this._closed)
	            throw new errors.InvalidStateError('closed');
	        return this.safeEmitAsPromise('@getstats');
	    }
	    /**
	     * Pauses sending media.
	     */
	    pause() {
	        logger.debug('pause()');
	        if (this._closed) {
	            logger.error('pause() | Producer closed');
	            return;
	        }
	        this._paused = true;
	        if (this._track && this._disableTrackOnPause) {
	            this._track.enabled = false;
	        }
	        if (this._zeroRtpOnPause) {
	            this.safeEmitAsPromise('@replacetrack', null)
	                .catch(() => { });
	        }
	    }
	    /**
	     * Resumes sending media.
	     */
	    resume() {
	        logger.debug('resume()');
	        if (this._closed) {
	            logger.error('resume() | Producer closed');
	            return;
	        }
	        this._paused = false;
	        if (this._track && this._disableTrackOnPause) {
	            this._track.enabled = true;
	        }
	        if (this._zeroRtpOnPause) {
	            this.safeEmitAsPromise('@replacetrack', this._track)
	                .catch(() => { });
	        }
	    }
	    /**
	     * Replaces the current track with a new one or null.
	     */
	    async replaceTrack({ track }) {
	        logger.debug('replaceTrack() [track:%o]', track);
	        if (this._closed) {
	            // This must be done here. Otherwise there is no chance to stop the given
	            // track.
	            if (track && this._stopTracks) {
	                try {
	                    track.stop();
	                }
	                catch (error) { }
	            }
	            throw new errors.InvalidStateError('closed');
	        }
	        else if (track && track.readyState === 'ended') {
	            throw new errors.InvalidStateError('track ended');
	        }
	        // Do nothing if this is the same track as the current handled one.
	        if (track === this._track) {
	            logger.debug('replaceTrack() | same track, ignored');
	            return;
	        }
	        if (!this._zeroRtpOnPause || !this._paused) {
	            await this.safeEmitAsPromise('@replacetrack', track);
	        }
	        // Destroy the previous track.
	        this._destroyTrack();
	        // Set the new track.
	        this._track = track;
	        // If this Producer was paused/resumed and the state of the new
	        // track does not match, fix it.
	        if (this._track && this._disableTrackOnPause) {
	            if (!this._paused)
	                this._track.enabled = true;
	            else if (this._paused)
	                this._track.enabled = false;
	        }
	        // Handle the effective track.
	        this._handleTrack();
	    }
	    /**
	     * Sets the video max spatial layer to be sent.
	     */
	    async setMaxSpatialLayer(spatialLayer) {
	        if (this._closed)
	            throw new errors.InvalidStateError('closed');
	        else if (this._kind !== 'video')
	            throw new errors.UnsupportedError('not a video Producer');
	        else if (typeof spatialLayer !== 'number')
	            throw new TypeError('invalid spatialLayer');
	        if (spatialLayer === this._maxSpatialLayer)
	            return;
	        await this.safeEmitAsPromise('@setmaxspatiallayer', spatialLayer);
	        this._maxSpatialLayer = spatialLayer;
	    }
	    /**
	     * Sets the DSCP value.
	     */
	    async setRtpEncodingParameters(params) {
	        if (this._closed)
	            throw new errors.InvalidStateError('closed');
	        else if (typeof params !== 'object')
	            throw new TypeError('invalid params');
	        await this.safeEmitAsPromise('@setrtpencodingparameters', params);
	    }
	    _onTrackEnded() {
	        logger.debug('track "ended" event');
	        this.safeEmit('trackended');
	    }
	    _handleTrack() {
	        if (!this._track)
	            return;
	        this._track.addEventListener('ended', this._onTrackEnded);
	    }
	    _destroyTrack() {
	        if (!this._track)
	            return;
	        try {
	            this._track.removeEventListener('ended', this._onTrackEnded);
	            // Just stop the track unless the app set stopTracks: false.
	            if (this._stopTracks)
	                this._track.stop();
	        }
	        catch (error) { }
	    }
	}
	exports.Producer = Producer;
	});

	unwrapExports(Producer_1);
	var Producer_2 = Producer_1.Producer;

	var Consumer_1 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });



	const logger = new Logger_1.Logger('Consumer');
	class Consumer extends EnhancedEventEmitter_1.EnhancedEventEmitter {
	    /**
	     * @emits transportclose
	     * @emits trackended
	     * @emits @getstats
	     * @emits @close
	     */
	    constructor({ id, localId, producerId, rtpReceiver, track, rtpParameters, appData }) {
	        super();
	        // Closed flag.
	        this._closed = false;
	        logger.debug('constructor()');
	        this._id = id;
	        this._localId = localId;
	        this._producerId = producerId;
	        this._rtpReceiver = rtpReceiver;
	        this._track = track;
	        this._rtpParameters = rtpParameters;
	        this._paused = !track.enabled;
	        this._appData = appData;
	        this._onTrackEnded = this._onTrackEnded.bind(this);
	        this._handleTrack();
	    }
	    /**
	     * Consumer id.
	     */
	    get id() {
	        return this._id;
	    }
	    /**
	     * Local id.
	     */
	    get localId() {
	        return this._localId;
	    }
	    /**
	     * Associated Producer id.
	     */
	    get producerId() {
	        return this._producerId;
	    }
	    /**
	     * Whether the Consumer is closed.
	     */
	    get closed() {
	        return this._closed;
	    }
	    /**
	     * Media kind.
	     */
	    get kind() {
	        return this._track.kind;
	    }
	    /**
	     * Associated RTCRtpReceiver.
	     */
	    get rtpReceiver() {
	        return this._rtpReceiver;
	    }
	    /**
	     * The associated track.
	     */
	    get track() {
	        return this._track;
	    }
	    /**
	     * RTP parameters.
	     */
	    get rtpParameters() {
	        return this._rtpParameters;
	    }
	    /**
	     * Whether the Consumer is paused.
	     */
	    get paused() {
	        return this._paused;
	    }
	    /**
	     * App custom data.
	     */
	    get appData() {
	        return this._appData;
	    }
	    /**
	     * Invalid setter.
	     */
	    set appData(appData) {
	        throw new Error('cannot override appData object');
	    }
	    /**
	     * Closes the Consumer.
	     */
	    close() {
	        if (this._closed)
	            return;
	        logger.debug('close()');
	        this._closed = true;
	        this._destroyTrack();
	        this.emit('@close');
	    }
	    /**
	     * Transport was closed.
	     */
	    transportClosed() {
	        if (this._closed)
	            return;
	        logger.debug('transportClosed()');
	        this._closed = true;
	        this._destroyTrack();
	        this.safeEmit('transportclose');
	    }
	    /**
	     * Get associated RTCRtpReceiver stats.
	     */
	    async getStats() {
	        if (this._closed)
	            throw new errors.InvalidStateError('closed');
	        return this.safeEmitAsPromise('@getstats');
	    }
	    /**
	     * Pauses receiving media.
	     */
	    pause() {
	        logger.debug('pause()');
	        if (this._closed) {
	            logger.error('pause() | Consumer closed');
	            return;
	        }
	        this._paused = true;
	        this._track.enabled = false;
	    }
	    /**
	     * Resumes receiving media.
	     */
	    resume() {
	        logger.debug('resume()');
	        if (this._closed) {
	            logger.error('resume() | Consumer closed');
	            return;
	        }
	        this._paused = false;
	        this._track.enabled = true;
	    }
	    _onTrackEnded() {
	        logger.debug('track "ended" event');
	        this.safeEmit('trackended');
	    }
	    _handleTrack() {
	        this._track.addEventListener('ended', this._onTrackEnded);
	    }
	    _destroyTrack() {
	        try {
	            this._track.removeEventListener('ended', this._onTrackEnded);
	            this._track.stop();
	        }
	        catch (error) { }
	    }
	}
	exports.Consumer = Consumer;
	});

	unwrapExports(Consumer_1);
	var Consumer_2 = Consumer_1.Consumer;

	var DataProducer_1 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });



	const logger = new Logger_1.Logger('DataProducer');
	class DataProducer extends EnhancedEventEmitter_1.EnhancedEventEmitter {
	    /**
	     * @emits transportclose
	     * @emits open
	     * @emits error - (error: Error)
	     * @emits close
	     * @emits bufferedamountlow
	     * @emits @close
	     */
	    constructor({ id, dataChannel, sctpStreamParameters, appData }) {
	        super();
	        // Closed flag.
	        this._closed = false;
	        logger.debug('constructor()');
	        this._id = id;
	        this._dataChannel = dataChannel;
	        this._sctpStreamParameters = sctpStreamParameters;
	        this._appData = appData;
	        this._handleDataChannel();
	    }
	    /**
	     * DataProducer id.
	     */
	    get id() {
	        return this._id;
	    }
	    /**
	     * Whether the DataProducer is closed.
	     */
	    get closed() {
	        return this._closed;
	    }
	    /**
	     * SCTP stream parameters.
	     */
	    get sctpStreamParameters() {
	        return this._sctpStreamParameters;
	    }
	    /**
	     * DataChannel readyState.
	     */
	    get readyState() {
	        return this._dataChannel.readyState;
	    }
	    /**
	     * DataChannel label.
	     */
	    get label() {
	        return this._dataChannel.label;
	    }
	    /**
	     * DataChannel protocol.
	     */
	    get protocol() {
	        return this._dataChannel.protocol;
	    }
	    /**
	     * DataChannel bufferedAmount.
	     */
	    get bufferedAmount() {
	        return this._dataChannel.bufferedAmount;
	    }
	    /**
	     * DataChannel bufferedAmountLowThreshold.
	     */
	    get bufferedAmountLowThreshold() {
	        return this._dataChannel.bufferedAmountLowThreshold;
	    }
	    /**
	     * Set DataChannel bufferedAmountLowThreshold.
	     */
	    set bufferedAmountLowThreshold(bufferedAmountLowThreshold) {
	        this._dataChannel.bufferedAmountLowThreshold = bufferedAmountLowThreshold;
	    }
	    /**
	     * App custom data.
	     */
	    get appData() {
	        return this._appData;
	    }
	    /**
	     * Invalid setter.
	     */
	    set appData(appData) {
	        throw new Error('cannot override appData object');
	    }
	    /**
	     * Closes the DataProducer.
	     */
	    close() {
	        if (this._closed)
	            return;
	        logger.debug('close()');
	        this._closed = true;
	        this._dataChannel.close();
	        this.emit('@close');
	    }
	    /**
	     * Transport was closed.
	     */
	    transportClosed() {
	        if (this._closed)
	            return;
	        logger.debug('transportClosed()');
	        this._closed = true;
	        this._dataChannel.close();
	        this.safeEmit('transportclose');
	    }
	    /**
	     * Send a message.
	     *
	     * @param {String|Blob|ArrayBuffer|ArrayBufferView} data.
	     */
	    send(data) {
	        logger.debug('send()');
	        if (this._closed)
	            throw new errors.InvalidStateError('closed');
	        this._dataChannel.send(data);
	    }
	    _handleDataChannel() {
	        this._dataChannel.addEventListener('open', () => {
	            if (this._closed)
	                return;
	            logger.debug('DataChannel "open" event');
	            this.safeEmit('open');
	        });
	        this._dataChannel.addEventListener('error', (event) => {
	            if (this._closed)
	                return;
	            let { error } = event;
	            if (!error)
	                error = new Error('unknown DataChannel error');
	            if (error.errorDetail === 'sctp-failure') {
	                logger.error('DataChannel SCTP error [sctpCauseCode:%s]: %s', error.sctpCauseCode, error.message);
	            }
	            else {
	                logger.error('DataChannel "error" event: %o', error);
	            }
	            this.safeEmit('error', error);
	        });
	        this._dataChannel.addEventListener('close', () => {
	            if (this._closed)
	                return;
	            logger.warn('DataChannel "close" event');
	            this._closed = true;
	            this.emit('@close');
	            this.safeEmit('close');
	        });
	        this._dataChannel.addEventListener('message', () => {
	            if (this._closed)
	                return;
	            logger.warn('DataChannel "message" event in a DataProducer, message discarded');
	        });
	        this._dataChannel.addEventListener('bufferedamountlow', () => {
	            if (this._closed)
	                return;
	            this.safeEmit('bufferedamountlow');
	        });
	    }
	}
	exports.DataProducer = DataProducer;
	});

	unwrapExports(DataProducer_1);
	var DataProducer_2 = DataProducer_1.DataProducer;

	var DataConsumer_1 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });


	const logger = new Logger_1.Logger('DataConsumer');
	class DataConsumer extends EnhancedEventEmitter_1.EnhancedEventEmitter {
	    /**
	     * @emits transportclose
	     * @emits open
	     * @emits error - (error: Error)
	     * @emits close
	     * @emits message - (message: any)
	     * @emits @close
	     */
	    constructor({ id, dataProducerId, dataChannel, sctpStreamParameters, appData }) {
	        super();
	        // Closed flag.
	        this._closed = false;
	        logger.debug('constructor()');
	        this._id = id;
	        this._dataProducerId = dataProducerId;
	        this._dataChannel = dataChannel;
	        this._sctpStreamParameters = sctpStreamParameters;
	        this._appData = appData;
	        this._handleDataChannel();
	    }
	    /**
	     * DataConsumer id.
	     */
	    get id() {
	        return this._id;
	    }
	    /**
	     * Associated DataProducer id.
	     */
	    get dataProducerId() {
	        return this._dataProducerId;
	    }
	    /**
	     * Whether the DataConsumer is closed.
	     */
	    get closed() {
	        return this._closed;
	    }
	    /**
	     * SCTP stream parameters.
	     */
	    get sctpStreamParameters() {
	        return this._sctpStreamParameters;
	    }
	    /**
	     * DataChannel readyState.
	     */
	    get readyState() {
	        return this._dataChannel.readyState;
	    }
	    /**
	     * DataChannel label.
	     */
	    get label() {
	        return this._dataChannel.label;
	    }
	    /**
	     * DataChannel protocol.
	     */
	    get protocol() {
	        return this._dataChannel.protocol;
	    }
	    /**
	     * DataChannel binaryType.
	     */
	    get binaryType() {
	        return this._dataChannel.binaryType;
	    }
	    /**
	     * Set DataChannel binaryType.
	     */
	    set binaryType(binaryType) {
	        this._dataChannel.binaryType = binaryType;
	    }
	    /**
	     * App custom data.
	     */
	    get appData() {
	        return this._appData;
	    }
	    /**
	     * Invalid setter.
	     */
	    set appData(appData) {
	        throw new Error('cannot override appData object');
	    }
	    /**
	     * Closes the DataConsumer.
	     */
	    close() {
	        if (this._closed)
	            return;
	        logger.debug('close()');
	        this._closed = true;
	        this._dataChannel.close();
	        this.emit('@close');
	    }
	    /**
	     * Transport was closed.
	     */
	    transportClosed() {
	        if (this._closed)
	            return;
	        logger.debug('transportClosed()');
	        this._closed = true;
	        this._dataChannel.close();
	        this.safeEmit('transportclose');
	    }
	    _handleDataChannel() {
	        this._dataChannel.addEventListener('open', () => {
	            if (this._closed)
	                return;
	            logger.debug('DataChannel "open" event');
	            this.safeEmit('open');
	        });
	        this._dataChannel.addEventListener('error', (event) => {
	            if (this._closed)
	                return;
	            let { error } = event;
	            if (!error)
	                error = new Error('unknown DataChannel error');
	            if (error.errorDetail === 'sctp-failure') {
	                logger.error('DataChannel SCTP error [sctpCauseCode:%s]: %s', error.sctpCauseCode, error.message);
	            }
	            else {
	                logger.error('DataChannel "error" event: %o', error);
	            }
	            this.safeEmit('error', error);
	        });
	        this._dataChannel.addEventListener('close', () => {
	            if (this._closed)
	                return;
	            logger.warn('DataChannel "close" event');
	            this._closed = true;
	            this.emit('@close');
	            this.safeEmit('close');
	        });
	        this._dataChannel.addEventListener('message', (event) => {
	            if (this._closed)
	                return;
	            this.safeEmit('message', event.data);
	        });
	    }
	}
	exports.DataConsumer = DataConsumer;
	});

	unwrapExports(DataConsumer_1);
	var DataConsumer_2 = DataConsumer_1.DataConsumer;

	var Transport_1 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });










	const logger = new Logger_1.Logger('Transport');
	class Transport extends EnhancedEventEmitter_1.EnhancedEventEmitter {
	    /**
	     * @emits connect - (transportLocalParameters: any, callback: Function, errback: Function)
	     * @emits connectionstatechange - (connectionState: ConnectionState)
	     * @emits produce - (producerLocalParameters: any, callback: Function, errback: Function)
	     * @emits producedata - (dataProducerLocalParameters: any, callback: Function, errback: Function)
	     */
	    constructor({ direction, id, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, appData, handlerFactory, extendedRtpCapabilities, canProduceByKind }) {
	        super();
	        // Closed flag.
	        this._closed = false;
	        // Transport connection state.
	        this._connectionState = 'new';
	        // Map of Producers indexed by id.
	        this._producers = new Map();
	        // Map of Consumers indexed by id.
	        this._consumers = new Map();
	        // Map of DataProducers indexed by id.
	        this._dataProducers = new Map();
	        // Map of DataConsumers indexed by id.
	        this._dataConsumers = new Map();
	        // Whether the Consumer for RTP probation has been created.
	        this._probatorConsumerCreated = false;
	        // AwaitQueue instance to make async tasks happen sequentially.
	        this._awaitQueue = new lib.AwaitQueue({ ClosedErrorClass: errors.InvalidStateError });
	        logger.debug('constructor() [id:%s, direction:%s]', id, direction);
	        this._id = id;
	        this._direction = direction;
	        this._extendedRtpCapabilities = extendedRtpCapabilities;
	        this._canProduceByKind = canProduceByKind;
	        this._maxSctpMessageSize =
	            sctpParameters ? sctpParameters.maxMessageSize : null;
	        // Clone and sanitize additionalSettings.
	        additionalSettings = utils.clone(additionalSettings);
	        delete additionalSettings.iceServers;
	        delete additionalSettings.iceTransportPolicy;
	        delete additionalSettings.bundlePolicy;
	        delete additionalSettings.rtcpMuxPolicy;
	        delete additionalSettings.sdpSemantics;
	        this._handler = handlerFactory();
	        this._handler.run({
	            direction,
	            iceParameters,
	            iceCandidates,
	            dtlsParameters,
	            sctpParameters,
	            iceServers,
	            iceTransportPolicy,
	            additionalSettings,
	            proprietaryConstraints,
	            extendedRtpCapabilities
	        });
	        this._appData = appData;
	        this._handleHandler();
	    }
	    /**
	     * Transport id.
	     */
	    get id() {
	        return this._id;
	    }
	    /**
	     * Whether the Transport is closed.
	     */
	    get closed() {
	        return this._closed;
	    }
	    /**
	     * Transport direction.
	     */
	    get direction() {
	        return this._direction;
	    }
	    /**
	     * RTC handler instance.
	     */
	    get handler() {
	        return this._handler;
	    }
	    /**
	     * Connection state.
	     */
	    get connectionState() {
	        return this._connectionState;
	    }
	    /**
	     * App custom data.
	     */
	    get appData() {
	        return this._appData;
	    }
	    /**
	     * Invalid setter.
	     */
	    set appData(appData) {
	        throw new Error('cannot override appData object');
	    }
	    /**
	     * Close the Transport.
	     */
	    close() {
	        if (this._closed)
	            return;
	        logger.debug('close()');
	        this._closed = true;
	        // Close the AwaitQueue.
	        this._awaitQueue.close();
	        // Close the handler.
	        this._handler.close();
	        // Close all Producers.
	        for (const producer of this._producers.values()) {
	            producer.transportClosed();
	        }
	        this._producers.clear();
	        // Close all Consumers.
	        for (const consumer of this._consumers.values()) {
	            consumer.transportClosed();
	        }
	        this._consumers.clear();
	        // Close all DataProducers.
	        for (const dataProducer of this._dataProducers.values()) {
	            dataProducer.transportClosed();
	        }
	        this._dataProducers.clear();
	        // Close all DataConsumers.
	        for (const dataConsumer of this._dataConsumers.values()) {
	            dataConsumer.transportClosed();
	        }
	        this._dataConsumers.clear();
	    }
	    /**
	     * Get associated Transport (RTCPeerConnection) stats.
	     *
	     * @returns {RTCStatsReport}
	     */
	    async getStats() {
	        if (this._closed)
	            throw new errors.InvalidStateError('closed');
	        return this._handler.getTransportStats();
	    }
	    /**
	     * Restart ICE connection.
	     */
	    async restartIce({ iceParameters }) {
	        logger.debug('restartIce()');
	        if (this._closed)
	            throw new errors.InvalidStateError('closed');
	        else if (!iceParameters)
	            throw new TypeError('missing iceParameters');
	        // Enqueue command.
	        return this._awaitQueue.push(async () => this._handler.restartIce(iceParameters));
	    }
	    /**
	     * Update ICE servers.
	     */
	    async updateIceServers({ iceServers } = {}) {
	        logger.debug('updateIceServers()');
	        if (this._closed)
	            throw new errors.InvalidStateError('closed');
	        else if (!Array.isArray(iceServers))
	            throw new TypeError('missing iceServers');
	        // Enqueue command.
	        return this._awaitQueue.push(async () => this._handler.updateIceServers(iceServers));
	    }
	    /**
	     * Create a Producer.
	     */
	    async produce({ track, encodings, codecOptions, codec, stopTracks = true, disableTrackOnPause = true, zeroRtpOnPause = false, appData = {} } = {}) {
	        logger.debug('produce() [track:%o]', track);
	        if (!track)
	            throw new TypeError('missing track');
	        else if (this._direction !== 'send')
	            throw new errors.UnsupportedError('not a sending Transport');
	        else if (!this._canProduceByKind[track.kind])
	            throw new errors.UnsupportedError(`cannot produce ${track.kind}`);
	        else if (track.readyState === 'ended')
	            throw new errors.InvalidStateError('track ended');
	        else if (this.listenerCount('connect') === 0 && this._connectionState === 'new')
	            throw new TypeError('no "connect" listener set into this transport');
	        else if (this.listenerCount('produce') === 0)
	            throw new TypeError('no "produce" listener set into this transport');
	        else if (appData && typeof appData !== 'object')
	            throw new TypeError('if given, appData must be an object');
	        // Enqueue command.
	        return this._awaitQueue.push(async () => {
	            let normalizedEncodings;
	            if (encodings && !Array.isArray(encodings)) {
	                throw TypeError('encodings must be an array');
	            }
	            else if (encodings && encodings.length === 0) {
	                normalizedEncodings = undefined;
	            }
	            else if (encodings) {
	                normalizedEncodings = encodings
	                    .map((encoding) => {
	                    const normalizedEncoding = { active: true };
	                    if (encoding.active === false)
	                        normalizedEncoding.active = false;
	                    if (typeof encoding.dtx === 'boolean')
	                        normalizedEncoding.dtx = encoding.dtx;
	                    if (typeof encoding.scalabilityMode === 'string')
	                        normalizedEncoding.scalabilityMode = encoding.scalabilityMode;
	                    if (typeof encoding.scaleResolutionDownBy === 'number')
	                        normalizedEncoding.scaleResolutionDownBy = encoding.scaleResolutionDownBy;
	                    if (typeof encoding.maxBitrate === 'number')
	                        normalizedEncoding.maxBitrate = encoding.maxBitrate;
	                    if (typeof encoding.maxFramerate === 'number')
	                        normalizedEncoding.maxFramerate = encoding.maxFramerate;
	                    if (typeof encoding.adaptivePtime === 'boolean')
	                        normalizedEncoding.adaptivePtime = encoding.adaptivePtime;
	                    if (typeof encoding.priority === 'string')
	                        normalizedEncoding.priority = encoding.priority;
	                    if (typeof encoding.networkPriority === 'string')
	                        normalizedEncoding.networkPriority = encoding.networkPriority;
	                    return normalizedEncoding;
	                });
	            }
	            const { localId, rtpParameters, rtpSender } = await this._handler.send({
	                track,
	                encodings: normalizedEncodings,
	                codecOptions,
	                codec
	            });
	            try {
	                // This will fill rtpParameters's missing fields with default values.
	                ortc.validateRtpParameters(rtpParameters);
	                const { id } = await this.safeEmitAsPromise('produce', {
	                    kind: track.kind,
	                    rtpParameters,
	                    appData
	                });
	                const producer = new Producer_1.Producer({
	                    id,
	                    localId,
	                    rtpSender,
	                    track,
	                    rtpParameters,
	                    stopTracks,
	                    disableTrackOnPause,
	                    zeroRtpOnPause,
	                    appData
	                });
	                this._producers.set(producer.id, producer);
	                this._handleProducer(producer);
	                return producer;
	            }
	            catch (error) {
	                this._handler.stopSending(localId)
	                    .catch(() => { });
	                throw error;
	            }
	        })
	            // This catch is needed to stop the given track if the command above
	            // failed due to closed Transport.
	            .catch((error) => {
	            if (stopTracks) {
	                try {
	                    track.stop();
	                }
	                catch (error2) { }
	            }
	            throw error;
	        });
	    }
	    /**
	     * Create a Consumer to consume a remote Producer.
	     */
	    async consume({ id, producerId, kind, rtpParameters, appData = {} }) {
	        logger.debug('consume()');
	        if (this._closed)
	            throw new errors.InvalidStateError('closed');
	        else if (this._direction !== 'recv')
	            throw new errors.UnsupportedError('not a receiving Transport');
	        else if (typeof id !== 'string')
	            throw new TypeError('missing id');
	        else if (typeof producerId !== 'string')
	            throw new TypeError('missing producerId');
	        else if (kind !== 'audio' && kind !== 'video')
	            throw new TypeError(`invalid kind '${kind}'`);
	        else if (this.listenerCount('connect') === 0 && this._connectionState === 'new')
	            throw new TypeError('no "connect" listener set into this transport');
	        else if (appData && typeof appData !== 'object')
	            throw new TypeError('if given, appData must be an object');
	        // Enqueue command.
	        return this._awaitQueue.push(async () => {
	            // Ensure the device can consume it.
	            const canConsume = ortc.canReceive(rtpParameters, this._extendedRtpCapabilities);
	            if (!canConsume)
	                throw new errors.UnsupportedError('cannot consume this Producer');
	            const { localId, rtpReceiver, track } = await this._handler.receive({ trackId: id, kind, rtpParameters });
	            const consumer = new Consumer_1.Consumer({
	                id,
	                localId,
	                producerId,
	                rtpReceiver,
	                track,
	                rtpParameters,
	                appData
	            });
	            this._consumers.set(consumer.id, consumer);
	            this._handleConsumer(consumer);
	            // If this is the first video Consumer and the Consumer for RTP probation
	            // has not yet been created, create it now.
	            if (!this._probatorConsumerCreated && kind === 'video') {
	                try {
	                    const probatorRtpParameters = ortc.generateProbatorRtpParameters(consumer.rtpParameters);
	                    await this._handler.receive({
	                        trackId: 'probator',
	                        kind: 'video',
	                        rtpParameters: probatorRtpParameters
	                    });
	                    logger.debug('consume() | Consumer for RTP probation created');
	                    this._probatorConsumerCreated = true;
	                }
	                catch (error) {
	                    logger.error('consume() | failed to create Consumer for RTP probation:%o', error);
	                }
	            }
	            return consumer;
	        });
	    }
	    /**
	     * Create a DataProducer
	     */
	    async produceData({ ordered = true, maxPacketLifeTime, maxRetransmits, priority = 'low', label = '', protocol = '', appData = {} } = {}) {
	        logger.debug('produceData()');
	        if (this._direction !== 'send')
	            throw new errors.UnsupportedError('not a sending Transport');
	        else if (!this._maxSctpMessageSize)
	            throw new errors.UnsupportedError('SCTP not enabled by remote Transport');
	        else if (!['very-low', 'low', 'medium', 'high'].includes(priority))
	            throw new TypeError('wrong priority');
	        else if (this.listenerCount('connect') === 0 && this._connectionState === 'new')
	            throw new TypeError('no "connect" listener set into this transport');
	        else if (this.listenerCount('producedata') === 0)
	            throw new TypeError('no "producedata" listener set into this transport');
	        else if (appData && typeof appData !== 'object')
	            throw new TypeError('if given, appData must be an object');
	        if (maxPacketLifeTime || maxRetransmits)
	            ordered = false;
	        // Enqueue command.
	        return this._awaitQueue.push(async () => {
	            const { dataChannel, sctpStreamParameters } = await this._handler.sendDataChannel({
	                ordered,
	                maxPacketLifeTime,
	                maxRetransmits,
	                priority,
	                label,
	                protocol
	            });
	            // This will fill sctpStreamParameters's missing fields with default values.
	            ortc.validateSctpStreamParameters(sctpStreamParameters);
	            const { id } = await this.safeEmitAsPromise('producedata', {
	                sctpStreamParameters,
	                label,
	                protocol,
	                appData
	            });
	            const dataProducer = new DataProducer_1.DataProducer({ id, dataChannel, sctpStreamParameters, appData });
	            this._dataProducers.set(dataProducer.id, dataProducer);
	            this._handleDataProducer(dataProducer);
	            return dataProducer;
	        });
	    }
	    /**
	     * Create a DataConsumer
	     */
	    async consumeData({ id, dataProducerId, sctpStreamParameters, label = '', protocol = '', appData = {} }) {
	        logger.debug('consumeData()');
	        if (this._closed)
	            throw new errors.InvalidStateError('closed');
	        else if (this._direction !== 'recv')
	            throw new errors.UnsupportedError('not a receiving Transport');
	        else if (!this._maxSctpMessageSize)
	            throw new errors.UnsupportedError('SCTP not enabled by remote Transport');
	        else if (typeof id !== 'string')
	            throw new TypeError('missing id');
	        else if (typeof dataProducerId !== 'string')
	            throw new TypeError('missing dataProducerId');
	        else if (this.listenerCount('connect') === 0 && this._connectionState === 'new')
	            throw new TypeError('no "connect" listener set into this transport');
	        else if (appData && typeof appData !== 'object')
	            throw new TypeError('if given, appData must be an object');
	        // This may throw.
	        ortc.validateSctpStreamParameters(sctpStreamParameters);
	        // Enqueue command.
	        return this._awaitQueue.push(async () => {
	            const { dataChannel } = await this._handler.receiveDataChannel({
	                sctpStreamParameters,
	                label,
	                protocol
	            });
	            const dataConsumer = new DataConsumer_1.DataConsumer({
	                id,
	                dataProducerId,
	                dataChannel,
	                sctpStreamParameters,
	                appData
	            });
	            this._dataConsumers.set(dataConsumer.id, dataConsumer);
	            this._handleDataConsumer(dataConsumer);
	            return dataConsumer;
	        });
	    }
	    _handleHandler() {
	        const handler = this._handler;
	        handler.on('@connect', ({ dtlsParameters }, callback, errback) => {
	            if (this._closed) {
	                errback(new errors.InvalidStateError('closed'));
	                return;
	            }
	            this.safeEmit('connect', { dtlsParameters }, callback, errback);
	        });
	        handler.on('@connectionstatechange', (connectionState) => {
	            if (connectionState === this._connectionState)
	                return;
	            logger.debug('connection state changed to %s', connectionState);
	            this._connectionState = connectionState;
	            if (!this._closed)
	                this.safeEmit('connectionstatechange', connectionState);
	        });
	    }
	    _handleProducer(producer) {
	        producer.on('@close', () => {
	            this._producers.delete(producer.id);
	            if (this._closed)
	                return;
	            this._awaitQueue.push(async () => this._handler.stopSending(producer.localId))
	                .catch((error) => logger.warn('producer.close() failed:%o', error));
	        });
	        producer.on('@replacetrack', (track, callback, errback) => {
	            this._awaitQueue.push(async () => this._handler.replaceTrack(producer.localId, track))
	                .then(callback)
	                .catch(errback);
	        });
	        producer.on('@setmaxspatiallayer', (spatialLayer, callback, errback) => {
	            this._awaitQueue.push(async () => (this._handler.setMaxSpatialLayer(producer.localId, spatialLayer)))
	                .then(callback)
	                .catch(errback);
	        });
	        producer.on('@setrtpencodingparameters', (params, callback, errback) => {
	            this._awaitQueue.push(async () => (this._handler.setRtpEncodingParameters(producer.localId, params)))
	                .then(callback)
	                .catch(errback);
	        });
	        producer.on('@getstats', (callback, errback) => {
	            if (this._closed)
	                return errback(new errors.InvalidStateError('closed'));
	            this._handler.getSenderStats(producer.localId)
	                .then(callback)
	                .catch(errback);
	        });
	    }
	    _handleConsumer(consumer) {
	        consumer.on('@close', () => {
	            this._consumers.delete(consumer.id);
	            if (this._closed)
	                return;
	            this._awaitQueue.push(async () => this._handler.stopReceiving(consumer.localId))
	                .catch(() => { });
	        });
	        consumer.on('@getstats', (callback, errback) => {
	            if (this._closed)
	                return errback(new errors.InvalidStateError('closed'));
	            this._handler.getReceiverStats(consumer.localId)
	                .then(callback)
	                .catch(errback);
	        });
	    }
	    _handleDataProducer(dataProducer) {
	        dataProducer.on('@close', () => {
	            this._dataProducers.delete(dataProducer.id);
	        });
	    }
	    _handleDataConsumer(dataConsumer) {
	        dataConsumer.on('@close', () => {
	            this._dataConsumers.delete(dataConsumer.id);
	        });
	    }
	}
	exports.Transport = Transport;
	});

	unwrapExports(Transport_1);
	var Transport_2 = Transport_1.Transport;

	var grammar_1 = createCommonjsModule(function (module) {
	var grammar = module.exports = {
	  v: [{
	    name: 'version',
	    reg: /^(\d*)$/
	  }],
	  o: [{
	    // o=- 20518 0 IN IP4 203.0.113.1
	    // NB: sessionId will be a String in most cases because it is huge
	    name: 'origin',
	    reg: /^(\S*) (\d*) (\d*) (\S*) IP(\d) (\S*)/,
	    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],
	    format: '%s %s %d %s IP%d %s'
	  }],
	  // default parsing of these only (though some of these feel outdated)
	  s: [{ name: 'name' }],
	  i: [{ name: 'description' }],
	  u: [{ name: 'uri' }],
	  e: [{ name: 'email' }],
	  p: [{ name: 'phone' }],
	  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly...
	  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly
	  // k: [{}], // outdated thing ignored
	  t: [{
	    // t=0 0
	    name: 'timing',
	    reg: /^(\d*) (\d*)/,
	    names: ['start', 'stop'],
	    format: '%d %d'
	  }],
	  c: [{
	    // c=IN IP4 10.47.197.26
	    name: 'connection',
	    reg: /^IN IP(\d) (\S*)/,
	    names: ['version', 'ip'],
	    format: 'IN IP%d %s'
	  }],
	  b: [{
	    // b=AS:4000
	    push: 'bandwidth',
	    reg: /^(TIAS|AS|CT|RR|RS):(\d*)/,
	    names: ['type', 'limit'],
	    format: '%s:%s'
	  }],
	  m: [{
	    // m=video 51744 RTP/AVP 126 97 98 34 31
	    // NB: special - pushes to session
	    // TODO: rtp/fmtp should be filtered by the payloads found here?
	    reg: /^(\w*) (\d*) ([\w/]*)(?: (.*))?/,
	    names: ['type', 'port', 'protocol', 'payloads'],
	    format: '%s %d %s %s'
	  }],
	  a: [
	    {
	      // a=rtpmap:110 opus/48000/2
	      push: 'rtp',
	      reg: /^rtpmap:(\d*) ([\w\-.]*)(?:\s*\/(\d*)(?:\s*\/(\S*))?)?/,
	      names: ['payload', 'codec', 'rate', 'encoding'],
	      format: function (o) {
	        return (o.encoding)
	          ? 'rtpmap:%d %s/%s/%s'
	          : o.rate
	            ? 'rtpmap:%d %s/%s'
	            : 'rtpmap:%d %s';
	      }
	    },
	    {
	      // a=fmtp:108 profile-level-id=24;object=23;bitrate=64000
	      // a=fmtp:111 minptime=10; useinbandfec=1
	      push: 'fmtp',
	      reg: /^fmtp:(\d*) ([\S| ]*)/,
	      names: ['payload', 'config'],
	      format: 'fmtp:%d %s'
	    },
	    {
	      // a=control:streamid=0
	      name: 'control',
	      reg: /^control:(.*)/,
	      format: 'control:%s'
	    },
	    {
	      // a=rtcp:65179 IN IP4 193.84.77.194
	      name: 'rtcp',
	      reg: /^rtcp:(\d*)(?: (\S*) IP(\d) (\S*))?/,
	      names: ['port', 'netType', 'ipVer', 'address'],
	      format: function (o) {
	        return (o.address != null)
	          ? 'rtcp:%d %s IP%d %s'
	          : 'rtcp:%d';
	      }
	    },
	    {
	      // a=rtcp-fb:98 trr-int 100
	      push: 'rtcpFbTrrInt',
	      reg: /^rtcp-fb:(\*|\d*) trr-int (\d*)/,
	      names: ['payload', 'value'],
	      format: 'rtcp-fb:%d trr-int %d'
	    },
	    {
	      // a=rtcp-fb:98 nack rpsi
	      push: 'rtcpFb',
	      reg: /^rtcp-fb:(\*|\d*) ([\w-_]*)(?: ([\w-_]*))?/,
	      names: ['payload', 'type', 'subtype'],
	      format: function (o) {
	        return (o.subtype != null)
	          ? 'rtcp-fb:%s %s %s'
	          : 'rtcp-fb:%s %s';
	      }
	    },
	    {
	      // a=extmap:2 urn:ietf:params:rtp-hdrext:toffset
	      // a=extmap:1/recvonly URI-gps-string
	      // a=extmap:3 urn:ietf:params:rtp-hdrext:encrypt urn:ietf:params:rtp-hdrext:smpte-tc 25@600/24
	      push: 'ext',
	      reg: /^extmap:(\d+)(?:\/(\w+))?(?: (urn:ietf:params:rtp-hdrext:encrypt))? (\S*)(?: (\S*))?/,
	      names: ['value', 'direction', 'encrypt-uri', 'uri', 'config'],
	      format: function (o) {
	        return (
	          'extmap:%d' +
	          (o.direction ? '/%s' : '%v') +
	          (o['encrypt-uri'] ? ' %s' : '%v') +
	          ' %s' +
	          (o.config ? ' %s' : '')
	        );
	      }
	    },
	    {
	      // a=extmap-allow-mixed
	      name: 'extmapAllowMixed',
	      reg: /^(extmap-allow-mixed)/
	    },
	    {
	      // a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32
	      push: 'crypto',
	      reg: /^crypto:(\d*) ([\w_]*) (\S*)(?: (\S*))?/,
	      names: ['id', 'suite', 'config', 'sessionConfig'],
	      format: function (o) {
	        return (o.sessionConfig != null)
	          ? 'crypto:%d %s %s %s'
	          : 'crypto:%d %s %s';
	      }
	    },
	    {
	      // a=setup:actpass
	      name: 'setup',
	      reg: /^setup:(\w*)/,
	      format: 'setup:%s'
	    },
	    {
	      // a=connection:new
	      name: 'connectionType',
	      reg: /^connection:(new|existing)/,
	      format: 'connection:%s'
	    },
	    {
	      // a=mid:1
	      name: 'mid',
	      reg: /^mid:([^\s]*)/,
	      format: 'mid:%s'
	    },
	    {
	      // a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a
	      name: 'msid',
	      reg: /^msid:(.*)/,
	      format: 'msid:%s'
	    },
	    {
	      // a=ptime:20
	      name: 'ptime',
	      reg: /^ptime:(\d*(?:\.\d*)*)/,
	      format: 'ptime:%d'
	    },
	    {
	      // a=maxptime:60
	      name: 'maxptime',
	      reg: /^maxptime:(\d*(?:\.\d*)*)/,
	      format: 'maxptime:%d'
	    },
	    {
	      // a=sendrecv
	      name: 'direction',
	      reg: /^(sendrecv|recvonly|sendonly|inactive)/
	    },
	    {
	      // a=ice-lite
	      name: 'icelite',
	      reg: /^(ice-lite)/
	    },
	    {
	      // a=ice-ufrag:F7gI
	      name: 'iceUfrag',
	      reg: /^ice-ufrag:(\S*)/,
	      format: 'ice-ufrag:%s'
	    },
	    {
	      // a=ice-pwd:x9cml/YzichV2+XlhiMu8g
	      name: 'icePwd',
	      reg: /^ice-pwd:(\S*)/,
	      format: 'ice-pwd:%s'
	    },
	    {
	      // a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33
	      name: 'fingerprint',
	      reg: /^fingerprint:(\S*) (\S*)/,
	      names: ['type', 'hash'],
	      format: 'fingerprint:%s %s'
	    },
	    {
	      // a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host
	      // a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10
	      // a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10
	      // a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10
	      // a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10
	      push:'candidates',
	      reg: /^candidate:(\S*) (\d*) (\S*) (\d*) (\S*) (\d*) typ (\S*)(?: raddr (\S*) rport (\d*))?(?: tcptype (\S*))?(?: generation (\d*))?(?: network-id (\d*))?(?: network-cost (\d*))?/,
	      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],
	      format: function (o) {
	        var str = 'candidate:%s %d %s %d %s %d typ %s';

	        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';

	        // NB: candidate has three optional chunks, so %void middles one if it's missing
	        str += (o.tcptype != null) ? ' tcptype %s' : '%v';

	        if (o.generation != null) {
	          str += ' generation %d';
	        }

	        str += (o['network-id'] != null) ? ' network-id %d' : '%v';
	        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';
	        return str;
	      }
	    },
	    {
	      // a=end-of-candidates (keep after the candidates line for readability)
	      name: 'endOfCandidates',
	      reg: /^(end-of-candidates)/
	    },
	    {
	      // a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...
	      name: 'remoteCandidates',
	      reg: /^remote-candidates:(.*)/,
	      format: 'remote-candidates:%s'
	    },
	    {
	      // a=ice-options:google-ice
	      name: 'iceOptions',
	      reg: /^ice-options:(\S*)/,
	      format: 'ice-options:%s'
	    },
	    {
	      // a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1
	      push: 'ssrcs',
	      reg: /^ssrc:(\d*) ([\w_-]*)(?::(.*))?/,
	      names: ['id', 'attribute', 'value'],
	      format: function (o) {
	        var str = 'ssrc:%d';
	        if (o.attribute != null) {
	          str += ' %s';
	          if (o.value != null) {
	            str += ':%s';
	          }
	        }
	        return str;
	      }
	    },
	    {
	      // a=ssrc-group:FEC 1 2
	      // a=ssrc-group:FEC-FR 3004364195 1080772241
	      push: 'ssrcGroups',
	      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E
	      reg: /^ssrc-group:([\x21\x23\x24\x25\x26\x27\x2A\x2B\x2D\x2E\w]*) (.*)/,
	      names: ['semantics', 'ssrcs'],
	      format: 'ssrc-group:%s %s'
	    },
	    {
	      // a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV
	      name: 'msidSemantic',
	      reg: /^msid-semantic:\s?(\w*) (\S*)/,
	      names: ['semantic', 'token'],
	      format: 'msid-semantic: %s %s' // space after ':' is not accidental
	    },
	    {
	      // a=group:BUNDLE audio video
	      push: 'groups',
	      reg: /^group:(\w*) (.*)/,
	      names: ['type', 'mids'],
	      format: 'group:%s %s'
	    },
	    {
	      // a=rtcp-mux
	      name: 'rtcpMux',
	      reg: /^(rtcp-mux)/
	    },
	    {
	      // a=rtcp-rsize
	      name: 'rtcpRsize',
	      reg: /^(rtcp-rsize)/
	    },
	    {
	      // a=sctpmap:5000 webrtc-datachannel 1024
	      name: 'sctpmap',
	      reg: /^sctpmap:([\w_/]*) (\S*)(?: (\S*))?/,
	      names: ['sctpmapNumber', 'app', 'maxMessageSize'],
	      format: function (o) {
	        return (o.maxMessageSize != null)
	          ? 'sctpmap:%s %s %s'
	          : 'sctpmap:%s %s';
	      }
	    },
	    {
	      // a=x-google-flag:conference
	      name: 'xGoogleFlag',
	      reg: /^x-google-flag:([^\s]*)/,
	      format: 'x-google-flag:%s'
	    },
	    {
	      // a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0
	      push: 'rids',
	      reg: /^rid:([\d\w]+) (\w+)(?: ([\S| ]*))?/,
	      names: ['id', 'direction', 'params'],
	      format: function (o) {
	        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';
	      }
	    },
	    {
	      // a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]
	      // a=imageattr:* send [x=800,y=640] recv *
	      // a=imageattr:100 recv [x=320,y=240]
	      push: 'imageattrs',
	      reg: new RegExp(
	        // a=imageattr:97
	        '^imageattr:(\\d+|\\*)' +
	        // send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]
	        '[\\s\\t]+(send|recv)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*)' +
	        // recv [x=330,y=250]
	        '(?:[\\s\\t]+(recv|send)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*))?'
	      ),
	      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],
	      format: function (o) {
	        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');
	      }
	    },
	    {
	      // a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8
	      // a=simulcast:recv 1;4,5 send 6;7
	      name: 'simulcast',
	      reg: new RegExp(
	        // a=simulcast:
	        '^simulcast:' +
	        // send 1,2,3;~4,~5
	        '(send|recv) ([a-zA-Z0-9\\-_~;,]+)' +
	        // space + recv 6;~7,~8
	        '(?:\\s?(send|recv) ([a-zA-Z0-9\\-_~;,]+))?' +
	        // end
	        '$'
	      ),
	      names: ['dir1', 'list1', 'dir2', 'list2'],
	      format: function (o) {
	        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');
	      }
	    },
	    {
	      // old simulcast draft 03 (implemented by Firefox)
	      //   https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03
	      // a=simulcast: recv pt=97;98 send pt=97
	      // a=simulcast: send rid=5;6;7 paused=6,7
	      name: 'simulcast_03',
	      reg: /^simulcast:[\s\t]+([\S+\s\t]+)$/,
	      names: ['value'],
	      format: 'simulcast: %s'
	    },
	    {
	      // a=framerate:25
	      // a=framerate:29.97
	      name: 'framerate',
	      reg: /^framerate:(\d+(?:$|\.\d+))/,
	      format: 'framerate:%s'
	    },
	    {
	      // RFC4570
	      // a=source-filter: incl IN IP4 239.5.2.31 10.1.15.5
	      name: 'sourceFilter',
	      reg: /^source-filter: *(excl|incl) (\S*) (IP4|IP6|\*) (\S*) (.*)/,
	      names: ['filterMode', 'netType', 'addressTypes', 'destAddress', 'srcList'],
	      format: 'source-filter: %s %s %s %s %s'
	    },
	    {
	      // a=bundle-only
	      name: 'bundleOnly',
	      reg: /^(bundle-only)/
	    },
	    {
	      // a=label:1
	      name: 'label',
	      reg: /^label:(.+)/,
	      format: 'label:%s'
	    },
	    {
	      // RFC version 26 for SCTP over DTLS
	      // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-5
	      name: 'sctpPort',
	      reg: /^sctp-port:(\d+)$/,
	      format: 'sctp-port:%s'
	    },
	    {
	      // RFC version 26 for SCTP over DTLS
	      // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-6
	      name: 'maxMessageSize',
	      reg: /^max-message-size:(\d+)$/,
	      format: 'max-message-size:%s'
	    },
	    {
	      // RFC7273
	      // a=ts-refclk:ptp=IEEE1588-2008:39-A7-94-FF-FE-07-CB-D0:37
	      push:'tsRefClocks',
	      reg: /^ts-refclk:([^\s=]*)(?:=(\S*))?/,
	      names: ['clksrc', 'clksrcExt'],
	      format: function (o) {
	        return 'ts-refclk:%s' + (o.clksrcExt != null ? '=%s' : '');
	      }
	    },
	    {
	      // RFC7273
	      // a=mediaclk:direct=963214424
	      name:'mediaClk',
	      reg: /^mediaclk:(?:id=(\S*))? *([^\s=]*)(?:=(\S*))?(?: *rate=(\d+)\/(\d+))?/,
	      names: ['id', 'mediaClockName', 'mediaClockValue', 'rateNumerator', 'rateDenominator'],
	      format: function (o) {
	        var str = 'mediaclk:';
	        str += (o.id != null ? 'id=%s %s' : '%v%s');
	        str += (o.mediaClockValue != null ? '=%s' : '');
	        str += (o.rateNumerator != null ? ' rate=%s' : '');
	        str += (o.rateDenominator != null ? '/%s' : '');
	        return str;
	      }
	    },
	    {
	      // a=keywds:keywords
	      name: 'keywords',
	      reg: /^keywds:(.+)$/,
	      format: 'keywds:%s'
	    },
	    {
	      // a=content:main
	      name: 'content',
	      reg: /^content:(.+)/,
	      format: 'content:%s'
	    },
	    // BFCP https://tools.ietf.org/html/rfc4583
	    {
	      // a=floorctrl:c-s
	      name: 'bfcpFloorCtrl',
	      reg: /^floorctrl:(c-only|s-only|c-s)/,
	      format: 'floorctrl:%s'
	    },
	    {
	      // a=confid:1
	      name: 'bfcpConfId',
	      reg: /^confid:(\d+)/,
	      format: 'confid:%s'
	    },
	    {
	      // a=userid:1
	      name: 'bfcpUserId',
	      reg: /^userid:(\d+)/,
	      format: 'userid:%s'
	    },
	    {
	      // a=floorid:1
	      name: 'bfcpFloorId',
	      reg: /^floorid:(.+) (?:m-stream|mstrm):(.+)/,
	      names: ['id', 'mStream'],
	      format: 'floorid:%s mstrm:%s'
	    },
	    {
	      // any a= that we don't understand is kept verbatim on media.invalid
	      push: 'invalid',
	      names: ['value']
	    }
	  ]
	};

	// set sensible defaults to avoid polluting the grammar with boring details
	Object.keys(grammar).forEach(function (key) {
	  var objs = grammar[key];
	  objs.forEach(function (obj) {
	    if (!obj.reg) {
	      obj.reg = /(.*)/;
	    }
	    if (!obj.format) {
	      obj.format = '%s';
	    }
	  });
	});
	});
	var grammar_2 = grammar_1.v;
	var grammar_3 = grammar_1.o;
	var grammar_4 = grammar_1.s;
	var grammar_5 = grammar_1.i;
	var grammar_6 = grammar_1.u;
	var grammar_7 = grammar_1.e;
	var grammar_8 = grammar_1.p;
	var grammar_9 = grammar_1.z;
	var grammar_10 = grammar_1.r;
	var grammar_11 = grammar_1.t;
	var grammar_12 = grammar_1.c;
	var grammar_13 = grammar_1.b;
	var grammar_14 = grammar_1.m;
	var grammar_15 = grammar_1.a;

	var parser = createCommonjsModule(function (module, exports) {
	var toIntIfInt = function (v) {
	  return String(Number(v)) === v ? Number(v) : v;
	};

	var attachProperties = function (match, location, names, rawName) {
	  if (rawName && !names) {
	    location[rawName] = toIntIfInt(match[1]);
	  }
	  else {
	    for (var i = 0; i < names.length; i += 1) {
	      if (match[i+1] != null) {
	        location[names[i]] = toIntIfInt(match[i+1]);
	      }
	    }
	  }
	};

	var parseReg = function (obj, location, content) {
	  var needsBlank = obj.name && obj.names;
	  if (obj.push && !location[obj.push]) {
	    location[obj.push] = [];
	  }
	  else if (needsBlank && !location[obj.name]) {
	    location[obj.name] = {};
	  }
	  var keyLocation = obj.push ?
	    {} :  // blank object that will be pushed
	    needsBlank ? location[obj.name] : location; // otherwise, named location or root

	  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);

	  if (obj.push) {
	    location[obj.push].push(keyLocation);
	  }
	};


	var validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);

	exports.parse = function (sdp) {
	  var session = {}
	    , media = []
	    , location = session; // points at where properties go under (one of the above)

	  // parse lines we understand
	  sdp.split(/(\r\n|\r|\n)/).filter(validLine).forEach(function (l) {
	    var type = l[0];
	    var content = l.slice(2);
	    if (type === 'm') {
	      media.push({rtp: [], fmtp: []});
	      location = media[media.length-1]; // point at latest media line
	    }

	    for (var j = 0; j < (grammar_1[type] || []).length; j += 1) {
	      var obj = grammar_1[type][j];
	      if (obj.reg.test(content)) {
	        return parseReg(obj, location, content);
	      }
	    }
	  });

	  session.media = media; // link it up
	  return session;
	};

	var paramReducer = function (acc, expr) {
	  var s = expr.split(/=(.+)/, 2);
	  if (s.length === 2) {
	    acc[s[0]] = toIntIfInt(s[1]);
	  } else if (s.length === 1 && expr.length > 1) {
	    acc[s[0]] = undefined;
	  }
	  return acc;
	};

	exports.parseParams = function (str) {
	  return str.split(/;\s?/).reduce(paramReducer, {});
	};

	// For backward compatibility - alias will be removed in 3.0.0
	exports.parseFmtpConfig = exports.parseParams;

	exports.parsePayloads = function (str) {
	  return str.toString().split(' ').map(Number);
	};

	exports.parseRemoteCandidates = function (str) {
	  var candidates = [];
	  var parts = str.split(' ').map(toIntIfInt);
	  for (var i = 0; i < parts.length; i += 3) {
	    candidates.push({
	      component: parts[i],
	      ip: parts[i + 1],
	      port: parts[i + 2]
	    });
	  }
	  return candidates;
	};

	exports.parseImageAttributes = function (str) {
	  return str.split(' ').map(function (item) {
	    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});
	  });
	};

	exports.parseSimulcastStreamList = function (str) {
	  return str.split(';').map(function (stream) {
	    return stream.split(',').map(function (format) {
	      var scid, paused = false;

	      if (format[0] !== '~') {
	        scid = toIntIfInt(format);
	      } else {
	        scid = toIntIfInt(format.substring(1, format.length));
	        paused = true;
	      }

	      return {
	        scid: scid,
	        paused: paused
	      };
	    });
	  });
	};
	});
	var parser_1 = parser.parse;
	var parser_2 = parser.parseParams;
	var parser_3 = parser.parseFmtpConfig;
	var parser_4 = parser.parsePayloads;
	var parser_5 = parser.parseRemoteCandidates;
	var parser_6 = parser.parseImageAttributes;
	var parser_7 = parser.parseSimulcastStreamList;

	// customized util.format - discards excess arguments and can void middle ones
	var formatRegExp = /%[sdv%]/g;
	var format = function (formatStr) {
	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  return formatStr.replace(formatRegExp, function (x) {
	    if (i >= len) {
	      return x; // missing argument
	    }
	    var arg = args[i];
	    i += 1;
	    switch (x) {
	    case '%%':
	      return '%';
	    case '%s':
	      return String(arg);
	    case '%d':
	      return Number(arg);
	    case '%v':
	      return '';
	    }
	  });
	  // NB: we discard excess arguments - they are typically undefined from makeLine
	};

	var makeLine = function (type, obj, location) {
	  var str = obj.format instanceof Function ?
	    (obj.format(obj.push ? location : location[obj.name])) :
	    obj.format;

	  var args = [type + '=' + str];
	  if (obj.names) {
	    for (var i = 0; i < obj.names.length; i += 1) {
	      var n = obj.names[i];
	      if (obj.name) {
	        args.push(location[obj.name][n]);
	      }
	      else { // for mLine and push attributes
	        args.push(location[obj.names[i]]);
	      }
	    }
	  }
	  else {
	    args.push(location[obj.name]);
	  }
	  return format.apply(null, args);
	};

	// RFC specified order
	// TODO: extend this with all the rest
	var defaultOuterOrder = [
	  'v', 'o', 's', 'i',
	  'u', 'e', 'p', 'c',
	  'b', 't', 'r', 'z', 'a'
	];
	var defaultInnerOrder = ['i', 'c', 'b', 'a'];


	var writer = function (session, opts) {
	  opts = opts || {};
	  // ensure certain properties exist
	  if (session.version == null) {
	    session.version = 0; // 'v=0' must be there (only defined version atm)
	  }
	  if (session.name == null) {
	    session.name = ' '; // 's= ' must be there if no meaningful name set
	  }
	  session.media.forEach(function (mLine) {
	    if (mLine.payloads == null) {
	      mLine.payloads = '';
	    }
	  });

	  var outerOrder = opts.outerOrder || defaultOuterOrder;
	  var innerOrder = opts.innerOrder || defaultInnerOrder;
	  var sdp = [];

	  // loop through outerOrder for matching properties on session
	  outerOrder.forEach(function (type) {
	    grammar_1[type].forEach(function (obj) {
	      if (obj.name in session && session[obj.name] != null) {
	        sdp.push(makeLine(type, obj, session));
	      }
	      else if (obj.push in session && session[obj.push] != null) {
	        session[obj.push].forEach(function (el) {
	          sdp.push(makeLine(type, obj, el));
	        });
	      }
	    });
	  });

	  // then for each media line, follow the innerOrder
	  session.media.forEach(function (mLine) {
	    sdp.push(makeLine('m', grammar_1.m[0], mLine));

	    innerOrder.forEach(function (type) {
	      grammar_1[type].forEach(function (obj) {
	        if (obj.name in mLine && mLine[obj.name] != null) {
	          sdp.push(makeLine(type, obj, mLine));
	        }
	        else if (obj.push in mLine && mLine[obj.push] != null) {
	          mLine[obj.push].forEach(function (el) {
	            sdp.push(makeLine(type, obj, el));
	          });
	        }
	      });
	    });
	  });

	  return sdp.join('\r\n') + '\r\n';
	};

	var write = writer;
	var parse$2 = parser.parse;
	var parseParams = parser.parseParams;
	var parseFmtpConfig = parser.parseFmtpConfig; // Alias of parseParams().
	var parsePayloads = parser.parsePayloads;
	var parseRemoteCandidates = parser.parseRemoteCandidates;
	var parseImageAttributes = parser.parseImageAttributes;
	var parseSimulcastStreamList = parser.parseSimulcastStreamList;

	var lib$1 = {
		write: write,
		parse: parse$2,
		parseParams: parseParams,
		parseFmtpConfig: parseFmtpConfig,
		parsePayloads: parsePayloads,
		parseRemoteCandidates: parseRemoteCandidates,
		parseImageAttributes: parseImageAttributes,
		parseSimulcastStreamList: parseSimulcastStreamList
	};

	var commonUtils = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });

	function extractRtpCapabilities({ sdpObject }) {
	    // Map of RtpCodecParameters indexed by payload type.
	    const codecsMap = new Map();
	    // Array of RtpHeaderExtensions.
	    const headerExtensions = [];
	    // Whether a m=audio/video section has been already found.
	    let gotAudio = false;
	    let gotVideo = false;
	    for (const m of sdpObject.media) {
	        const kind = m.type;
	        switch (kind) {
	            case 'audio':
	                {
	                    if (gotAudio)
	                        continue;
	                    gotAudio = true;
	                    break;
	                }
	            case 'video':
	                {
	                    if (gotVideo)
	                        continue;
	                    gotVideo = true;
	                    break;
	                }
	            default:
	                {
	                    continue;
	                }
	        }
	        // Get codecs.
	        for (const rtp of m.rtp) {
	            const codec = {
	                kind: kind,
	                mimeType: `${kind}/${rtp.codec}`,
	                preferredPayloadType: rtp.payload,
	                clockRate: rtp.rate,
	                channels: rtp.encoding,
	                parameters: {},
	                rtcpFeedback: []
	            };
	            codecsMap.set(codec.preferredPayloadType, codec);
	        }
	        // Get codec parameters.
	        for (const fmtp of m.fmtp || []) {
	            const parameters = lib$1.parseParams(fmtp.config);
	            const codec = codecsMap.get(fmtp.payload);
	            if (!codec)
	                continue;
	            // Specials case to convert parameter value to string.
	            if (parameters && parameters['profile-level-id'])
	                parameters['profile-level-id'] = String(parameters['profile-level-id']);
	            codec.parameters = parameters;
	        }
	        // Get RTCP feedback for each codec.
	        for (const fb of m.rtcpFb || []) {
	            const codec = codecsMap.get(fb.payload);
	            if (!codec)
	                continue;
	            const feedback = {
	                type: fb.type,
	                parameter: fb.subtype
	            };
	            if (!feedback.parameter)
	                delete feedback.parameter;
	            codec.rtcpFeedback.push(feedback);
	        }
	        // Get RTP header extensions.
	        for (const ext of m.ext || []) {
	            // Ignore encrypted extensions (not yet supported in mediasoup).
	            if (ext['encrypt-uri'])
	                continue;
	            const headerExtension = {
	                kind: kind,
	                uri: ext.uri,
	                preferredId: ext.value
	            };
	            headerExtensions.push(headerExtension);
	        }
	    }
	    const rtpCapabilities = {
	        codecs: Array.from(codecsMap.values()),
	        headerExtensions: headerExtensions
	    };
	    return rtpCapabilities;
	}
	exports.extractRtpCapabilities = extractRtpCapabilities;
	function extractDtlsParameters({ sdpObject }) {
	    const mediaObject = (sdpObject.media || [])
	        .find((m) => (m.iceUfrag && m.port !== 0));
	    if (!mediaObject)
	        throw new Error('no active media section found');
	    const fingerprint = mediaObject.fingerprint || sdpObject.fingerprint;
	    let role;
	    switch (mediaObject.setup) {
	        case 'active':
	            role = 'client';
	            break;
	        case 'passive':
	            role = 'server';
	            break;
	        case 'actpass':
	            role = 'auto';
	            break;
	    }
	    const dtlsParameters = {
	        role,
	        fingerprints: [
	            {
	                algorithm: fingerprint.type,
	                value: fingerprint.hash
	            }
	        ]
	    };
	    return dtlsParameters;
	}
	exports.extractDtlsParameters = extractDtlsParameters;
	function getCname({ offerMediaObject }) {
	    const ssrcCnameLine = (offerMediaObject.ssrcs || [])
	        .find((line) => line.attribute === 'cname');
	    if (!ssrcCnameLine)
	        return '';
	    return ssrcCnameLine.value;
	}
	exports.getCname = getCname;
	/**
	 * Apply codec parameters in the given SDP m= section answer based on the
	 * given RTP parameters of an offer.
	 */
	function applyCodecParameters({ offerRtpParameters, answerMediaObject }) {
	    for (const codec of offerRtpParameters.codecs) {
	        const mimeType = codec.mimeType.toLowerCase();
	        // Avoid parsing codec parameters for unhandled codecs.
	        if (mimeType !== 'audio/opus')
	            continue;
	        const rtp = (answerMediaObject.rtp || [])
	            .find((r) => r.payload === codec.payloadType);
	        if (!rtp)
	            continue;
	        // Just in case.
	        answerMediaObject.fmtp = answerMediaObject.fmtp || [];
	        let fmtp = answerMediaObject.fmtp
	            .find((f) => f.payload === codec.payloadType);
	        if (!fmtp) {
	            fmtp = { payload: codec.payloadType, config: '' };
	            answerMediaObject.fmtp.push(fmtp);
	        }
	        const parameters = lib$1.parseParams(fmtp.config);
	        switch (mimeType) {
	            case 'audio/opus':
	                {
	                    const spropStereo = codec.parameters['sprop-stereo'];
	                    if (spropStereo !== undefined)
	                        parameters.stereo = spropStereo ? 1 : 0;
	                    break;
	                }
	        }
	        // Write the codec fmtp.config back.
	        fmtp.config = '';
	        for (const key of Object.keys(parameters)) {
	            if (fmtp.config)
	                fmtp.config += ';';
	            fmtp.config += `${key}=${parameters[key]}`;
	        }
	    }
	}
	exports.applyCodecParameters = applyCodecParameters;
	});

	unwrapExports(commonUtils);
	var commonUtils_1 = commonUtils.extractRtpCapabilities;
	var commonUtils_2 = commonUtils.extractDtlsParameters;
	var commonUtils_3 = commonUtils.getCname;
	var commonUtils_4 = commonUtils.applyCodecParameters;

	var unifiedPlanUtils = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	function getRtpEncodings({ offerMediaObject }) {
	    const ssrcs = new Set();
	    for (const line of offerMediaObject.ssrcs || []) {
	        const ssrc = line.id;
	        ssrcs.add(ssrc);
	    }
	    if (ssrcs.size === 0)
	        throw new Error('no a=ssrc lines found');
	    const ssrcToRtxSsrc = new Map();
	    // First assume RTX is used.
	    for (const line of offerMediaObject.ssrcGroups || []) {
	        if (line.semantics !== 'FID')
	            continue;
	        let [ssrc, rtxSsrc] = line.ssrcs.split(/\s+/);
	        ssrc = Number(ssrc);
	        rtxSsrc = Number(rtxSsrc);
	        if (ssrcs.has(ssrc)) {
	            // Remove both the SSRC and RTX SSRC from the set so later we know that they
	            // are already handled.
	            ssrcs.delete(ssrc);
	            ssrcs.delete(rtxSsrc);
	            // Add to the map.
	            ssrcToRtxSsrc.set(ssrc, rtxSsrc);
	        }
	    }
	    // If the set of SSRCs is not empty it means that RTX is not being used, so take
	    // media SSRCs from there.
	    for (const ssrc of ssrcs) {
	        // Add to the map.
	        ssrcToRtxSsrc.set(ssrc, null);
	    }
	    const encodings = [];
	    for (const [ssrc, rtxSsrc] of ssrcToRtxSsrc) {
	        const encoding = { ssrc };
	        if (rtxSsrc)
	            encoding.rtx = { ssrc: rtxSsrc };
	        encodings.push(encoding);
	    }
	    return encodings;
	}
	exports.getRtpEncodings = getRtpEncodings;
	/**
	 * Adds multi-ssrc based simulcast into the given SDP media section offer.
	 */
	function addLegacySimulcast({ offerMediaObject, numStreams }) {
	    if (numStreams <= 1)
	        throw new TypeError('numStreams must be greater than 1');
	    // Get the SSRC.
	    const ssrcMsidLine = (offerMediaObject.ssrcs || [])
	        .find((line) => line.attribute === 'msid');
	    if (!ssrcMsidLine)
	        throw new Error('a=ssrc line with msid information not found');
	    const [streamId, trackId] = ssrcMsidLine.value.split(' ')[0];
	    const firstSsrc = ssrcMsidLine.id;
	    let firstRtxSsrc;
	    // Get the SSRC for RTX.
	    (offerMediaObject.ssrcGroups || [])
	        .some((line) => {
	        if (line.semantics !== 'FID')
	            return false;
	        const ssrcs = line.ssrcs.split(/\s+/);
	        if (Number(ssrcs[0]) === firstSsrc) {
	            firstRtxSsrc = Number(ssrcs[1]);
	            return true;
	        }
	        else {
	            return false;
	        }
	    });
	    const ssrcCnameLine = offerMediaObject.ssrcs
	        .find((line) => line.attribute === 'cname');
	    if (!ssrcCnameLine)
	        throw new Error('a=ssrc line with cname information not found');
	    const cname = ssrcCnameLine.value;
	    const ssrcs = [];
	    const rtxSsrcs = [];
	    for (let i = 0; i < numStreams; ++i) {
	        ssrcs.push(firstSsrc + i);
	        if (firstRtxSsrc)
	            rtxSsrcs.push(firstRtxSsrc + i);
	    }
	    offerMediaObject.ssrcGroups = [];
	    offerMediaObject.ssrcs = [];
	    offerMediaObject.ssrcGroups.push({
	        semantics: 'SIM',
	        ssrcs: ssrcs.join(' ')
	    });
	    for (let i = 0; i < ssrcs.length; ++i) {
	        const ssrc = ssrcs[i];
	        offerMediaObject.ssrcs.push({
	            id: ssrc,
	            attribute: 'cname',
	            value: cname
	        });
	        offerMediaObject.ssrcs.push({
	            id: ssrc,
	            attribute: 'msid',
	            value: `${streamId} ${trackId}`
	        });
	    }
	    for (let i = 0; i < rtxSsrcs.length; ++i) {
	        const ssrc = ssrcs[i];
	        const rtxSsrc = rtxSsrcs[i];
	        offerMediaObject.ssrcs.push({
	            id: rtxSsrc,
	            attribute: 'cname',
	            value: cname
	        });
	        offerMediaObject.ssrcs.push({
	            id: rtxSsrc,
	            attribute: 'msid',
	            value: `${streamId} ${trackId}`
	        });
	        offerMediaObject.ssrcGroups.push({
	            semantics: 'FID',
	            ssrcs: `${ssrc} ${rtxSsrc}`
	        });
	    }
	}
	exports.addLegacySimulcast = addLegacySimulcast;
	});

	unwrapExports(unifiedPlanUtils);
	var unifiedPlanUtils_1 = unifiedPlanUtils.getRtpEncodings;
	var unifiedPlanUtils_2 = unifiedPlanUtils.addLegacySimulcast;

	var HandlerInterface_1 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });

	class HandlerInterface extends EnhancedEventEmitter_1.EnhancedEventEmitter {
	    /**
	     * @emits @connect - (
	     *     { dtlsParameters: DtlsParameters },
	     *     callback: Function,
	     *     errback: Function
	     *   )
	     * @emits @connectionstatechange - (connectionState: ConnectionState)
	     */
	    constructor() {
	        super();
	    }
	}
	exports.HandlerInterface = HandlerInterface;
	});

	unwrapExports(HandlerInterface_1);
	var HandlerInterface_2 = HandlerInterface_1.HandlerInterface;

	var MediaSection_1 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });

	class MediaSection {
	    constructor({ iceParameters, iceCandidates, dtlsParameters, planB = false }) {
	        this._mediaObject = {};
	        this._planB = planB;
	        if (iceParameters) {
	            this.setIceParameters(iceParameters);
	        }
	        if (iceCandidates) {
	            this._mediaObject.candidates = [];
	            for (const candidate of iceCandidates) {
	                const candidateObject = {};
	                // mediasoup does mandates rtcp-mux so candidates component is always
	                // RTP (1).
	                candidateObject.component = 1;
	                candidateObject.foundation = candidate.foundation;
	                candidateObject.ip = candidate.ip;
	                candidateObject.port = candidate.port;
	                candidateObject.priority = candidate.priority;
	                candidateObject.transport = candidate.protocol;
	                candidateObject.type = candidate.type;
	                if (candidate.tcpType)
	                    candidateObject.tcptype = candidate.tcpType;
	                this._mediaObject.candidates.push(candidateObject);
	            }
	            this._mediaObject.endOfCandidates = 'end-of-candidates';
	            this._mediaObject.iceOptions = 'renomination';
	        }
	        if (dtlsParameters) {
	            this.setDtlsRole(dtlsParameters.role);
	        }
	    }
	    get mid() {
	        return String(this._mediaObject.mid);
	    }
	    get closed() {
	        return this._mediaObject.port === 0;
	    }
	    getObject() {
	        return this._mediaObject;
	    }
	    setIceParameters(iceParameters) {
	        this._mediaObject.iceUfrag = iceParameters.usernameFragment;
	        this._mediaObject.icePwd = iceParameters.password;
	    }
	    disable() {
	        this._mediaObject.direction = 'inactive';
	        delete this._mediaObject.ext;
	        delete this._mediaObject.ssrcs;
	        delete this._mediaObject.ssrcGroups;
	        delete this._mediaObject.simulcast;
	        delete this._mediaObject.simulcast_03;
	        delete this._mediaObject.rids;
	    }
	    close() {
	        this._mediaObject.direction = 'inactive';
	        this._mediaObject.port = 0;
	        delete this._mediaObject.ext;
	        delete this._mediaObject.ssrcs;
	        delete this._mediaObject.ssrcGroups;
	        delete this._mediaObject.simulcast;
	        delete this._mediaObject.simulcast_03;
	        delete this._mediaObject.rids;
	        delete this._mediaObject.extmapAllowMixed;
	    }
	}
	exports.MediaSection = MediaSection;
	class AnswerMediaSection extends MediaSection {
	    constructor({ iceParameters, iceCandidates, dtlsParameters, sctpParameters, plainRtpParameters, planB = false, offerMediaObject, offerRtpParameters, answerRtpParameters, codecOptions, extmapAllowMixed = false }) {
	        super({ iceParameters, iceCandidates, dtlsParameters, planB });
	        this._mediaObject.mid = String(offerMediaObject.mid);
	        this._mediaObject.type = offerMediaObject.type;
	        this._mediaObject.protocol = offerMediaObject.protocol;
	        if (!plainRtpParameters) {
	            this._mediaObject.connection = { ip: '127.0.0.1', version: 4 };
	            this._mediaObject.port = 7;
	        }
	        else {
	            this._mediaObject.connection =
	                {
	                    ip: plainRtpParameters.ip,
	                    version: plainRtpParameters.ipVersion
	                };
	            this._mediaObject.port = plainRtpParameters.port;
	        }
	        switch (offerMediaObject.type) {
	            case 'audio':
	            case 'video':
	                {
	                    this._mediaObject.direction = 'recvonly';
	                    this._mediaObject.rtp = [];
	                    this._mediaObject.rtcpFb = [];
	                    this._mediaObject.fmtp = [];
	                    for (const codec of answerRtpParameters.codecs) {
	                        const rtp = {
	                            payload: codec.payloadType,
	                            codec: getCodecName(codec),
	                            rate: codec.clockRate
	                        };
	                        if (codec.channels > 1)
	                            rtp.encoding = codec.channels;
	                        this._mediaObject.rtp.push(rtp);
	                        const codecParameters = utils.clone(codec.parameters || {});
	                        if (codecOptions) {
	                            const { opusStereo, opusFec, opusDtx, opusMaxPlaybackRate, opusPtime, videoGoogleStartBitrate, videoGoogleMaxBitrate, videoGoogleMinBitrate } = codecOptions;
	                            const offerCodec = offerRtpParameters.codecs
	                                .find((c) => (c.payloadType === codec.payloadType));
	                            switch (codec.mimeType.toLowerCase()) {
	                                case 'audio/opus':
	                                    {
	                                        if (opusStereo !== undefined) {
	                                            offerCodec.parameters['sprop-stereo'] = opusStereo ? 1 : 0;
	                                            codecParameters.stereo = opusStereo ? 1 : 0;
	                                        }
	                                        if (opusFec !== undefined) {
	                                            offerCodec.parameters.useinbandfec = opusFec ? 1 : 0;
	                                            codecParameters.useinbandfec = opusFec ? 1 : 0;
	                                        }
	                                        if (opusDtx !== undefined) {
	                                            offerCodec.parameters.usedtx = opusDtx ? 1 : 0;
	                                            codecParameters.usedtx = opusDtx ? 1 : 0;
	                                        }
	                                        if (opusMaxPlaybackRate !== undefined) {
	                                            codecParameters.maxplaybackrate = opusMaxPlaybackRate;
	                                        }
	                                        if (opusPtime !== undefined) {
	                                            offerCodec.parameters.ptime = opusPtime;
	                                            codecParameters.ptime = opusPtime;
	                                        }
	                                        break;
	                                    }
	                                case 'video/vp8':
	                                case 'video/vp9':
	                                case 'video/h264':
	                                case 'video/h265':
	                                    {
	                                        if (videoGoogleStartBitrate !== undefined)
	                                            codecParameters['x-google-start-bitrate'] = videoGoogleStartBitrate;
	                                        if (videoGoogleMaxBitrate !== undefined)
	                                            codecParameters['x-google-max-bitrate'] = videoGoogleMaxBitrate;
	                                        if (videoGoogleMinBitrate !== undefined)
	                                            codecParameters['x-google-min-bitrate'] = videoGoogleMinBitrate;
	                                        break;
	                                    }
	                            }
	                        }
	                        const fmtp = {
	                            payload: codec.payloadType,
	                            config: ''
	                        };
	                        for (const key of Object.keys(codecParameters)) {
	                            if (fmtp.config)
	                                fmtp.config += ';';
	                            fmtp.config += `${key}=${codecParameters[key]}`;
	                        }
	                        if (fmtp.config)
	                            this._mediaObject.fmtp.push(fmtp);
	                        for (const fb of codec.rtcpFeedback) {
	                            this._mediaObject.rtcpFb.push({
	                                payload: codec.payloadType,
	                                type: fb.type,
	                                subtype: fb.parameter
	                            });
	                        }
	                    }
	                    this._mediaObject.payloads = answerRtpParameters.codecs
	                        .map((codec) => codec.payloadType)
	                        .join(' ');
	                    this._mediaObject.ext = [];
	                    for (const ext of answerRtpParameters.headerExtensions) {
	                        // Don't add a header extension if not present in the offer.
	                        const found = (offerMediaObject.ext || [])
	                            .some((localExt) => localExt.uri === ext.uri);
	                        if (!found)
	                            continue;
	                        this._mediaObject.ext.push({
	                            uri: ext.uri,
	                            value: ext.id
	                        });
	                    }
	                    // Allow both 1 byte and 2 bytes length header extensions.
	                    if (extmapAllowMixed &&
	                        offerMediaObject.extmapAllowMixed === 'extmap-allow-mixed') {
	                        this._mediaObject.extmapAllowMixed = 'extmap-allow-mixed';
	                    }
	                    // Simulcast.
	                    if (offerMediaObject.simulcast) {
	                        this._mediaObject.simulcast =
	                            {
	                                dir1: 'recv',
	                                list1: offerMediaObject.simulcast.list1
	                            };
	                        this._mediaObject.rids = [];
	                        for (const rid of offerMediaObject.rids || []) {
	                            if (rid.direction !== 'send')
	                                continue;
	                            this._mediaObject.rids.push({
	                                id: rid.id,
	                                direction: 'recv'
	                            });
	                        }
	                    }
	                    // Simulcast (draft version 03).
	                    else if (offerMediaObject.simulcast_03) {
	                        // eslint-disable-next-line camelcase
	                        this._mediaObject.simulcast_03 =
	                            {
	                                value: offerMediaObject.simulcast_03.value.replace(/send/g, 'recv')
	                            };
	                        this._mediaObject.rids = [];
	                        for (const rid of offerMediaObject.rids || []) {
	                            if (rid.direction !== 'send')
	                                continue;
	                            this._mediaObject.rids.push({
	                                id: rid.id,
	                                direction: 'recv'
	                            });
	                        }
	                    }
	                    this._mediaObject.rtcpMux = 'rtcp-mux';
	                    this._mediaObject.rtcpRsize = 'rtcp-rsize';
	                    if (this._planB && this._mediaObject.type === 'video')
	                        this._mediaObject.xGoogleFlag = 'conference';
	                    break;
	                }
	            case 'application':
	                {
	                    // New spec.
	                    if (typeof offerMediaObject.sctpPort === 'number') {
	                        this._mediaObject.payloads = 'webrtc-datachannel';
	                        this._mediaObject.sctpPort = sctpParameters.port;
	                        this._mediaObject.maxMessageSize = sctpParameters.maxMessageSize;
	                    }
	                    // Old spec.
	                    else if (offerMediaObject.sctpmap) {
	                        this._mediaObject.payloads = sctpParameters.port;
	                        this._mediaObject.sctpmap =
	                            {
	                                app: 'webrtc-datachannel',
	                                sctpmapNumber: sctpParameters.port,
	                                maxMessageSize: sctpParameters.maxMessageSize
	                            };
	                    }
	                    break;
	                }
	        }
	    }
	    setDtlsRole(role) {
	        switch (role) {
	            case 'client':
	                this._mediaObject.setup = 'active';
	                break;
	            case 'server':
	                this._mediaObject.setup = 'passive';
	                break;
	            case 'auto':
	                this._mediaObject.setup = 'actpass';
	                break;
	        }
	    }
	}
	exports.AnswerMediaSection = AnswerMediaSection;
	class OfferMediaSection extends MediaSection {
	    constructor({ iceParameters, iceCandidates, dtlsParameters, sctpParameters, plainRtpParameters, planB = false, mid, kind, offerRtpParameters, streamId, trackId, oldDataChannelSpec = false }) {
	        super({ iceParameters, iceCandidates, dtlsParameters, planB });
	        this._mediaObject.mid = String(mid);
	        this._mediaObject.type = kind;
	        if (!plainRtpParameters) {
	            this._mediaObject.connection = { ip: '127.0.0.1', version: 4 };
	            if (!sctpParameters)
	                this._mediaObject.protocol = 'UDP/TLS/RTP/SAVPF';
	            else
	                this._mediaObject.protocol = 'UDP/DTLS/SCTP';
	            this._mediaObject.port = 7;
	        }
	        else {
	            this._mediaObject.connection =
	                {
	                    ip: plainRtpParameters.ip,
	                    version: plainRtpParameters.ipVersion
	                };
	            this._mediaObject.protocol = 'RTP/AVP';
	            this._mediaObject.port = plainRtpParameters.port;
	        }
	        switch (kind) {
	            case 'audio':
	            case 'video':
	                {
	                    this._mediaObject.direction = 'sendonly';
	                    this._mediaObject.rtp = [];
	                    this._mediaObject.rtcpFb = [];
	                    this._mediaObject.fmtp = [];
	                    if (!this._planB)
	                        this._mediaObject.msid = `${streamId || '-'} ${trackId}`;
	                    for (const codec of offerRtpParameters.codecs) {
	                        const rtp = {
	                            payload: codec.payloadType,
	                            codec: getCodecName(codec),
	                            rate: codec.clockRate
	                        };
	                        if (codec.channels > 1)
	                            rtp.encoding = codec.channels;
	                        this._mediaObject.rtp.push(rtp);
	                        const fmtp = {
	                            payload: codec.payloadType,
	                            config: ''
	                        };
	                        for (const key of Object.keys(codec.parameters)) {
	                            if (fmtp.config)
	                                fmtp.config += ';';
	                            fmtp.config += `${key}=${codec.parameters[key]}`;
	                        }
	                        if (fmtp.config)
	                            this._mediaObject.fmtp.push(fmtp);
	                        for (const fb of codec.rtcpFeedback) {
	                            this._mediaObject.rtcpFb.push({
	                                payload: codec.payloadType,
	                                type: fb.type,
	                                subtype: fb.parameter
	                            });
	                        }
	                    }
	                    this._mediaObject.payloads = offerRtpParameters.codecs
	                        .map((codec) => codec.payloadType)
	                        .join(' ');
	                    this._mediaObject.ext = [];
	                    for (const ext of offerRtpParameters.headerExtensions) {
	                        this._mediaObject.ext.push({
	                            uri: ext.uri,
	                            value: ext.id
	                        });
	                    }
	                    this._mediaObject.rtcpMux = 'rtcp-mux';
	                    this._mediaObject.rtcpRsize = 'rtcp-rsize';
	                    const encoding = offerRtpParameters.encodings[0];
	                    const ssrc = encoding.ssrc;
	                    const rtxSsrc = (encoding.rtx && encoding.rtx.ssrc)
	                        ? encoding.rtx.ssrc
	                        : undefined;
	                    this._mediaObject.ssrcs = [];
	                    this._mediaObject.ssrcGroups = [];
	                    if (offerRtpParameters.rtcp.cname) {
	                        this._mediaObject.ssrcs.push({
	                            id: ssrc,
	                            attribute: 'cname',
	                            value: offerRtpParameters.rtcp.cname
	                        });
	                    }
	                    if (this._planB) {
	                        this._mediaObject.ssrcs.push({
	                            id: ssrc,
	                            attribute: 'msid',
	                            value: `${streamId || '-'} ${trackId}`
	                        });
	                    }
	                    if (rtxSsrc) {
	                        if (offerRtpParameters.rtcp.cname) {
	                            this._mediaObject.ssrcs.push({
	                                id: rtxSsrc,
	                                attribute: 'cname',
	                                value: offerRtpParameters.rtcp.cname
	                            });
	                        }
	                        if (this._planB) {
	                            this._mediaObject.ssrcs.push({
	                                id: rtxSsrc,
	                                attribute: 'msid',
	                                value: `${streamId || '-'} ${trackId}`
	                            });
	                        }
	                        // Associate original and retransmission SSRCs.
	                        this._mediaObject.ssrcGroups.push({
	                            semantics: 'FID',
	                            ssrcs: `${ssrc} ${rtxSsrc}`
	                        });
	                    }
	                    break;
	                }
	            case 'application':
	                {
	                    // New spec.
	                    if (!oldDataChannelSpec) {
	                        this._mediaObject.payloads = 'webrtc-datachannel';
	                        this._mediaObject.sctpPort = sctpParameters.port;
	                        this._mediaObject.maxMessageSize = sctpParameters.maxMessageSize;
	                    }
	                    // Old spec.
	                    else {
	                        this._mediaObject.payloads = sctpParameters.port;
	                        this._mediaObject.sctpmap =
	                            {
	                                app: 'webrtc-datachannel',
	                                sctpmapNumber: sctpParameters.port,
	                                maxMessageSize: sctpParameters.maxMessageSize
	                            };
	                    }
	                    break;
	                }
	        }
	    }
	    // eslint-disable-next-line @typescript-eslint/no-unused-vars
	    setDtlsRole(role) {
	        // Always 'actpass'.
	        this._mediaObject.setup = 'actpass';
	    }
	    planBReceive({ offerRtpParameters, streamId, trackId }) {
	        const encoding = offerRtpParameters.encodings[0];
	        const ssrc = encoding.ssrc;
	        const rtxSsrc = (encoding.rtx && encoding.rtx.ssrc)
	            ? encoding.rtx.ssrc
	            : undefined;
	        if (offerRtpParameters.rtcp.cname) {
	            this._mediaObject.ssrcs.push({
	                id: ssrc,
	                attribute: 'cname',
	                value: offerRtpParameters.rtcp.cname
	            });
	        }
	        this._mediaObject.ssrcs.push({
	            id: ssrc,
	            attribute: 'msid',
	            value: `${streamId || '-'} ${trackId}`
	        });
	        if (rtxSsrc) {
	            if (offerRtpParameters.rtcp.cname) {
	                this._mediaObject.ssrcs.push({
	                    id: rtxSsrc,
	                    attribute: 'cname',
	                    value: offerRtpParameters.rtcp.cname
	                });
	            }
	            this._mediaObject.ssrcs.push({
	                id: rtxSsrc,
	                attribute: 'msid',
	                value: `${streamId || '-'} ${trackId}`
	            });
	            // Associate original and retransmission SSRCs.
	            this._mediaObject.ssrcGroups.push({
	                semantics: 'FID',
	                ssrcs: `${ssrc} ${rtxSsrc}`
	            });
	        }
	    }
	    planBStopReceiving({ offerRtpParameters }) {
	        const encoding = offerRtpParameters.encodings[0];
	        const ssrc = encoding.ssrc;
	        const rtxSsrc = (encoding.rtx && encoding.rtx.ssrc)
	            ? encoding.rtx.ssrc
	            : undefined;
	        this._mediaObject.ssrcs = this._mediaObject.ssrcs
	            .filter((s) => s.id !== ssrc && s.id !== rtxSsrc);
	        if (rtxSsrc) {
	            this._mediaObject.ssrcGroups = this._mediaObject.ssrcGroups
	                .filter((group) => group.ssrcs !== `${ssrc} ${rtxSsrc}`);
	        }
	    }
	}
	exports.OfferMediaSection = OfferMediaSection;
	function getCodecName(codec) {
	    const MimeTypeRegex = new RegExp('^(audio|video)/(.+)', 'i');
	    const mimeTypeMatch = MimeTypeRegex.exec(codec.mimeType);
	    if (!mimeTypeMatch)
	        throw new TypeError('invalid codec.mimeType');
	    return mimeTypeMatch[2];
	}
	});

	unwrapExports(MediaSection_1);
	var MediaSection_2 = MediaSection_1.MediaSection;
	var MediaSection_3 = MediaSection_1.AnswerMediaSection;
	var MediaSection_4 = MediaSection_1.OfferMediaSection;

	var RemoteSdp_1 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });



	const logger = new Logger_1.Logger('RemoteSdp');
	class RemoteSdp {
	    constructor({ iceParameters, iceCandidates, dtlsParameters, sctpParameters, plainRtpParameters, planB = false }) {
	        // MediaSection instances.
	        this._mediaSections = [];
	        // MediaSection indices indexed by MID.
	        this._midToIndex = new Map();
	        this._iceParameters = iceParameters;
	        this._iceCandidates = iceCandidates;
	        this._dtlsParameters = dtlsParameters;
	        this._sctpParameters = sctpParameters;
	        this._plainRtpParameters = plainRtpParameters;
	        this._planB = planB;
	        this._sdpObject =
	            {
	                version: 0,
	                origin: {
	                    address: '0.0.0.0',
	                    ipVer: 4,
	                    netType: 'IN',
	                    sessionId: 10000,
	                    sessionVersion: 0,
	                    username: 'mediasoup-client'
	                },
	                name: '-',
	                timing: { start: 0, stop: 0 },
	                media: []
	            };
	        // If ICE parameters are given, add ICE-Lite indicator.
	        if (iceParameters && iceParameters.iceLite) {
	            this._sdpObject.icelite = 'ice-lite';
	        }
	        // If DTLS parameters are given, assume WebRTC and BUNDLE.
	        if (dtlsParameters) {
	            this._sdpObject.msidSemantic = { semantic: 'WMS', token: '*' };
	            // NOTE: We take the latest fingerprint.
	            const numFingerprints = this._dtlsParameters.fingerprints.length;
	            this._sdpObject.fingerprint =
	                {
	                    type: dtlsParameters.fingerprints[numFingerprints - 1].algorithm,
	                    hash: dtlsParameters.fingerprints[numFingerprints - 1].value
	                };
	            this._sdpObject.groups = [{ type: 'BUNDLE', mids: '' }];
	        }
	        // If there are plain RPT parameters, override SDP origin.
	        if (plainRtpParameters) {
	            this._sdpObject.origin.address = plainRtpParameters.ip;
	            this._sdpObject.origin.ipVer = plainRtpParameters.ipVersion;
	        }
	    }
	    updateIceParameters(iceParameters) {
	        logger.debug('updateIceParameters() [iceParameters:%o]', iceParameters);
	        this._iceParameters = iceParameters;
	        this._sdpObject.icelite = iceParameters.iceLite ? 'ice-lite' : undefined;
	        for (const mediaSection of this._mediaSections) {
	            mediaSection.setIceParameters(iceParameters);
	        }
	    }
	    updateDtlsRole(role) {
	        logger.debug('updateDtlsRole() [role:%s]', role);
	        this._dtlsParameters.role = role;
	        for (const mediaSection of this._mediaSections) {
	            mediaSection.setDtlsRole(role);
	        }
	    }
	    getNextMediaSectionIdx() {
	        // If a closed media section is found, return its index.
	        for (let idx = 0; idx < this._mediaSections.length; ++idx) {
	            const mediaSection = this._mediaSections[idx];
	            if (mediaSection.closed)
	                return { idx, reuseMid: mediaSection.mid };
	        }
	        // If no closed media section is found, return next one.
	        return { idx: this._mediaSections.length };
	    }
	    send({ offerMediaObject, reuseMid, offerRtpParameters, answerRtpParameters, codecOptions, extmapAllowMixed = false }) {
	        const mediaSection = new MediaSection_1.AnswerMediaSection({
	            iceParameters: this._iceParameters,
	            iceCandidates: this._iceCandidates,
	            dtlsParameters: this._dtlsParameters,
	            plainRtpParameters: this._plainRtpParameters,
	            planB: this._planB,
	            offerMediaObject,
	            offerRtpParameters,
	            answerRtpParameters,
	            codecOptions,
	            extmapAllowMixed
	        });
	        // Unified-Plan with closed media section replacement.
	        if (reuseMid) {
	            this._replaceMediaSection(mediaSection, reuseMid);
	        }
	        // Unified-Plan or Plan-B with different media kind.
	        else if (!this._midToIndex.has(mediaSection.mid)) {
	            this._addMediaSection(mediaSection);
	        }
	        // Plan-B with same media kind.
	        else {
	            this._replaceMediaSection(mediaSection);
	        }
	    }
	    receive({ mid, kind, offerRtpParameters, streamId, trackId }) {
	        const idx = this._midToIndex.get(mid);
	        let mediaSection;
	        if (idx !== undefined)
	            mediaSection = this._mediaSections[idx];
	        // Unified-Plan or different media kind.
	        if (!mediaSection) {
	            mediaSection = new MediaSection_1.OfferMediaSection({
	                iceParameters: this._iceParameters,
	                iceCandidates: this._iceCandidates,
	                dtlsParameters: this._dtlsParameters,
	                plainRtpParameters: this._plainRtpParameters,
	                planB: this._planB,
	                mid,
	                kind,
	                offerRtpParameters,
	                streamId,
	                trackId
	            });
	            this._addMediaSection(mediaSection);
	        }
	        // Plan-B.
	        else {
	            mediaSection.planBReceive({ offerRtpParameters, streamId, trackId });
	            this._replaceMediaSection(mediaSection);
	        }
	    }
	    disableMediaSection(mid) {
	        const idx = this._midToIndex.get(mid);
	        if (idx === undefined) {
	            throw new Error(`no media section found with mid '${mid}'`);
	        }
	        const mediaSection = this._mediaSections[idx];
	        mediaSection.disable();
	    }
	    closeMediaSection(mid) {
	        const idx = this._midToIndex.get(mid);
	        if (idx === undefined) {
	            throw new Error(`no media section found with mid '${mid}'`);
	        }
	        const mediaSection = this._mediaSections[idx];
	        // NOTE: Closing the first m section is a pain since it invalidates the
	        // bundled transport, so let's avoid it.
	        if (mid === this._firstMid) {
	            logger.debug('closeMediaSection() | cannot close first media section, disabling it instead [mid:%s]', mid);
	            this.disableMediaSection(mid);
	            return;
	        }
	        mediaSection.close();
	        // Regenerate BUNDLE mids.
	        this._regenerateBundleMids();
	    }
	    planBStopReceiving({ mid, offerRtpParameters }) {
	        const idx = this._midToIndex.get(mid);
	        if (idx === undefined) {
	            throw new Error(`no media section found with mid '${mid}'`);
	        }
	        const mediaSection = this._mediaSections[idx];
	        mediaSection.planBStopReceiving({ offerRtpParameters });
	        this._replaceMediaSection(mediaSection);
	    }
	    sendSctpAssociation({ offerMediaObject }) {
	        const mediaSection = new MediaSection_1.AnswerMediaSection({
	            iceParameters: this._iceParameters,
	            iceCandidates: this._iceCandidates,
	            dtlsParameters: this._dtlsParameters,
	            sctpParameters: this._sctpParameters,
	            plainRtpParameters: this._plainRtpParameters,
	            offerMediaObject
	        });
	        this._addMediaSection(mediaSection);
	    }
	    receiveSctpAssociation({ oldDataChannelSpec = false } = {}) {
	        const mediaSection = new MediaSection_1.OfferMediaSection({
	            iceParameters: this._iceParameters,
	            iceCandidates: this._iceCandidates,
	            dtlsParameters: this._dtlsParameters,
	            sctpParameters: this._sctpParameters,
	            plainRtpParameters: this._plainRtpParameters,
	            mid: 'datachannel',
	            kind: 'application',
	            oldDataChannelSpec
	        });
	        this._addMediaSection(mediaSection);
	    }
	    getSdp() {
	        // Increase SDP version.
	        this._sdpObject.origin.sessionVersion++;
	        return lib$1.write(this._sdpObject);
	    }
	    _addMediaSection(newMediaSection) {
	        if (!this._firstMid)
	            this._firstMid = newMediaSection.mid;
	        // Add to the vector.
	        this._mediaSections.push(newMediaSection);
	        // Add to the map.
	        this._midToIndex.set(newMediaSection.mid, this._mediaSections.length - 1);
	        // Add to the SDP object.
	        this._sdpObject.media.push(newMediaSection.getObject());
	        // Regenerate BUNDLE mids.
	        this._regenerateBundleMids();
	    }
	    _replaceMediaSection(newMediaSection, reuseMid) {
	        // Store it in the map.
	        if (typeof reuseMid === 'string') {
	            const idx = this._midToIndex.get(reuseMid);
	            if (idx === undefined) {
	                throw new Error(`no media section found for reuseMid '${reuseMid}'`);
	            }
	            const oldMediaSection = this._mediaSections[idx];
	            // Replace the index in the vector with the new media section.
	            this._mediaSections[idx] = newMediaSection;
	            // Update the map.
	            this._midToIndex.delete(oldMediaSection.mid);
	            this._midToIndex.set(newMediaSection.mid, idx);
	            // Update the SDP object.
	            this._sdpObject.media[idx] = newMediaSection.getObject();
	            // Regenerate BUNDLE mids.
	            this._regenerateBundleMids();
	        }
	        else {
	            const idx = this._midToIndex.get(newMediaSection.mid);
	            if (idx === undefined) {
	                throw new Error(`no media section found with mid '${newMediaSection.mid}'`);
	            }
	            // Replace the index in the vector with the new media section.
	            this._mediaSections[idx] = newMediaSection;
	            // Update the SDP object.
	            this._sdpObject.media[idx] = newMediaSection.getObject();
	        }
	    }
	    _regenerateBundleMids() {
	        if (!this._dtlsParameters)
	            return;
	        this._sdpObject.groups[0].mids = this._mediaSections
	            .filter((mediaSection) => !mediaSection.closed)
	            .map((mediaSection) => mediaSection.mid)
	            .join(' ');
	    }
	}
	exports.RemoteSdp = RemoteSdp;
	});

	unwrapExports(RemoteSdp_1);
	var RemoteSdp_2 = RemoteSdp_1.RemoteSdp;

	var scalabilityModes = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	const ScalabilityModeRegex = new RegExp('^[LS]([1-9]\\d{0,1})T([1-9]\\d{0,1})');
	function parse(scalabilityMode) {
	    const match = ScalabilityModeRegex.exec(scalabilityMode || '');
	    if (match) {
	        return {
	            spatialLayers: Number(match[1]),
	            temporalLayers: Number(match[2])
	        };
	    }
	    else {
	        return {
	            spatialLayers: 1,
	            temporalLayers: 1
	        };
	    }
	}
	exports.parse = parse;
	});

	unwrapExports(scalabilityModes);
	var scalabilityModes_1 = scalabilityModes.parse;

	var Chrome74_1 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });









	const logger = new Logger_1.Logger('Chrome74');
	const SCTP_NUM_STREAMS = { OS: 1024, MIS: 1024 };
	class Chrome74 extends HandlerInterface_1.HandlerInterface {
	    constructor() {
	        super();
	        // Map of RTCTransceivers indexed by MID.
	        this._mapMidTransceiver = new Map();
	        // Local stream for sending.
	        this._sendStream = new MediaStream();
	        // Whether a DataChannel m=application section has been created.
	        this._hasDataChannelMediaSection = false;
	        // Sending DataChannel id value counter. Incremented for each new DataChannel.
	        this._nextSendSctpStreamId = 0;
	        // Got transport local and remote parameters.
	        this._transportReady = false;
	    }
	    /**
	     * Creates a factory function.
	     */
	    static createFactory() {
	        return () => new Chrome74();
	    }
	    get name() {
	        return 'Chrome74';
	    }
	    close() {
	        logger.debug('close()');
	        // Close RTCPeerConnection.
	        if (this._pc) {
	            try {
	                this._pc.close();
	            }
	            catch (error) { }
	        }
	    }
	    async getNativeRtpCapabilities() {
	        logger.debug('getNativeRtpCapabilities()');
	        const pc = new RTCPeerConnection({
	            iceServers: [],
	            iceTransportPolicy: 'all',
	            bundlePolicy: 'max-bundle',
	            rtcpMuxPolicy: 'require',
	            sdpSemantics: 'unified-plan'
	        });
	        try {
	            pc.addTransceiver('audio');
	            pc.addTransceiver('video');
	            const offer = await pc.createOffer();
	            try {
	                pc.close();
	            }
	            catch (error) { }
	            const sdpObject = lib$1.parse(offer.sdp);
	            const nativeRtpCapabilities = commonUtils.extractRtpCapabilities({ sdpObject });
	            return nativeRtpCapabilities;
	        }
	        catch (error) {
	            try {
	                pc.close();
	            }
	            catch (error2) { }
	            throw error;
	        }
	    }
	    async getNativeSctpCapabilities() {
	        logger.debug('getNativeSctpCapabilities()');
	        return {
	            numStreams: SCTP_NUM_STREAMS
	        };
	    }
	    run({ direction, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, extendedRtpCapabilities }) {
	        logger.debug('run()');
	        this._direction = direction;
	        this._remoteSdp = new RemoteSdp_1.RemoteSdp({
	            iceParameters,
	            iceCandidates,
	            dtlsParameters,
	            sctpParameters
	        });
	        this._sendingRtpParametersByKind =
	            {
	                audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),
	                video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities)
	            };
	        this._sendingRemoteRtpParametersByKind =
	            {
	                audio: ortc.getSendingRemoteRtpParameters('audio', extendedRtpCapabilities),
	                video: ortc.getSendingRemoteRtpParameters('video', extendedRtpCapabilities)
	            };
	        this._pc = new RTCPeerConnection({
	            iceServers: iceServers || [],
	            iceTransportPolicy: iceTransportPolicy || 'all',
	            bundlePolicy: 'max-bundle',
	            rtcpMuxPolicy: 'require',
	            sdpSemantics: 'unified-plan',
	            ...additionalSettings
	        }, proprietaryConstraints);
	        // Handle RTCPeerConnection connection status.
	        this._pc.addEventListener('iceconnectionstatechange', () => {
	            switch (this._pc.iceConnectionState) {
	                case 'checking':
	                    this.emit('@connectionstatechange', 'connecting');
	                    break;
	                case 'connected':
	                case 'completed':
	                    this.emit('@connectionstatechange', 'connected');
	                    break;
	                case 'failed':
	                    this.emit('@connectionstatechange', 'failed');
	                    break;
	                case 'disconnected':
	                    this.emit('@connectionstatechange', 'disconnected');
	                    break;
	                case 'closed':
	                    this.emit('@connectionstatechange', 'closed');
	                    break;
	            }
	        });
	    }
	    async updateIceServers(iceServers) {
	        logger.debug('updateIceServers()');
	        const configuration = this._pc.getConfiguration();
	        configuration.iceServers = iceServers;
	        this._pc.setConfiguration(configuration);
	    }
	    async restartIce(iceParameters) {
	        logger.debug('restartIce()');
	        // Provide the remote SDP handler with new remote ICE parameters.
	        this._remoteSdp.updateIceParameters(iceParameters);
	        if (!this._transportReady)
	            return;
	        if (this._direction === 'send') {
	            const offer = await this._pc.createOffer({ iceRestart: true });
	            logger.debug('restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);
	            await this._pc.setLocalDescription(offer);
	            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);
	            await this._pc.setRemoteDescription(answer);
	        }
	        else {
	            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);
	            await this._pc.setRemoteDescription(offer);
	            const answer = await this._pc.createAnswer();
	            logger.debug('restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);
	            await this._pc.setLocalDescription(answer);
	        }
	    }
	    async getTransportStats() {
	        return this._pc.getStats();
	    }
	    async send({ track, encodings, codecOptions, codec }) {
	        this._assertSendDirection();
	        logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);
	        if (encodings && encodings.length > 1) {
	            encodings.forEach((encoding, idx) => {
	                encoding.rid = `r${idx}`;
	            });
	        }
	        const sendingRtpParameters = utils.clone(this._sendingRtpParametersByKind[track.kind]);
	        // This may throw.
	        sendingRtpParameters.codecs =
	            ortc.reduceCodecs(sendingRtpParameters.codecs, codec);
	        const sendingRemoteRtpParameters = utils.clone(this._sendingRemoteRtpParametersByKind[track.kind]);
	        // This may throw.
	        sendingRemoteRtpParameters.codecs =
	            ortc.reduceCodecs(sendingRemoteRtpParameters.codecs, codec);
	        const mediaSectionIdx = this._remoteSdp.getNextMediaSectionIdx();
	        const transceiver = this._pc.addTransceiver(track, {
	            direction: 'sendonly',
	            streams: [this._sendStream],
	            sendEncodings: encodings
	        });
	        let offer = await this._pc.createOffer();
	        let localSdpObject = lib$1.parse(offer.sdp);
	        let offerMediaObject;
	        if (!this._transportReady)
	            await this._setupTransport({ localDtlsRole: 'server', localSdpObject });
	        // Special case for VP9 with SVC.
	        let hackVp9Svc = false;
	        const layers = scalabilityModes.parse((encodings || [{}])[0].scalabilityMode);
	        if (encodings &&
	            encodings.length === 1 &&
	            layers.spatialLayers > 1 &&
	            sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp9') {
	            logger.debug('send() | enabling legacy simulcast for VP9 SVC');
	            hackVp9Svc = true;
	            localSdpObject = lib$1.parse(offer.sdp);
	            offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];
	            unifiedPlanUtils.addLegacySimulcast({
	                offerMediaObject,
	                numStreams: layers.spatialLayers
	            });
	            offer = { type: 'offer', sdp: lib$1.write(localSdpObject) };
	        }
	        logger.debug('send() | calling pc.setLocalDescription() [offer:%o]', offer);
	        await this._pc.setLocalDescription(offer);
	        // We can now get the transceiver.mid.
	        const localId = transceiver.mid;
	        // Set MID.
	        sendingRtpParameters.mid = localId;
	        localSdpObject = lib$1.parse(this._pc.localDescription.sdp);
	        offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];
	        // Set RTCP CNAME.
	        sendingRtpParameters.rtcp.cname =
	            commonUtils.getCname({ offerMediaObject });
	        // Set RTP encodings by parsing the SDP offer if no encodings are given.
	        if (!encodings) {
	            sendingRtpParameters.encodings =
	                unifiedPlanUtils.getRtpEncodings({ offerMediaObject });
	        }
	        // Set RTP encodings by parsing the SDP offer and complete them with given
	        // one if just a single encoding has been given.
	        else if (encodings.length === 1) {
	            let newEncodings = unifiedPlanUtils.getRtpEncodings({ offerMediaObject });
	            Object.assign(newEncodings[0], encodings[0]);
	            // Hack for VP9 SVC.
	            if (hackVp9Svc)
	                newEncodings = [newEncodings[0]];
	            sendingRtpParameters.encodings = newEncodings;
	        }
	        // Otherwise if more than 1 encoding are given use them verbatim.
	        else {
	            sendingRtpParameters.encodings = encodings;
	        }
	        // If VP8 or H264 and there is effective simulcast, add scalabilityMode to
	        // each encoding.
	        if (sendingRtpParameters.encodings.length > 1 &&
	            (sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp8' ||
	                sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/h264')) {
	            for (const encoding of sendingRtpParameters.encodings) {
	                encoding.scalabilityMode = 'S1T3';
	            }
	        }
	        this._remoteSdp.send({
	            offerMediaObject,
	            reuseMid: mediaSectionIdx.reuseMid,
	            offerRtpParameters: sendingRtpParameters,
	            answerRtpParameters: sendingRemoteRtpParameters,
	            codecOptions,
	            extmapAllowMixed: true
	        });
	        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('send() | calling pc.setRemoteDescription() [answer:%o]', answer);
	        await this._pc.setRemoteDescription(answer);
	        // Store in the map.
	        this._mapMidTransceiver.set(localId, transceiver);
	        return {
	            localId,
	            rtpParameters: sendingRtpParameters,
	            rtpSender: transceiver.sender
	        };
	    }
	    async stopSending(localId) {
	        this._assertSendDirection();
	        logger.debug('stopSending() [localId:%s]', localId);
	        const transceiver = this._mapMidTransceiver.get(localId);
	        if (!transceiver)
	            throw new Error('associated RTCRtpTransceiver not found');
	        transceiver.sender.replaceTrack(null);
	        this._pc.removeTrack(transceiver.sender);
	        this._remoteSdp.closeMediaSection(transceiver.mid);
	        const offer = await this._pc.createOffer();
	        logger.debug('stopSending() | calling pc.setLocalDescription() [offer:%o]', offer);
	        await this._pc.setLocalDescription(offer);
	        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('stopSending() | calling pc.setRemoteDescription() [answer:%o]', answer);
	        await this._pc.setRemoteDescription(answer);
	    }
	    async replaceTrack(localId, track) {
	        this._assertSendDirection();
	        if (track) {
	            logger.debug('replaceTrack() [localId:%s, track.id:%s]', localId, track.id);
	        }
	        else {
	            logger.debug('replaceTrack() [localId:%s, no track]', localId);
	        }
	        const transceiver = this._mapMidTransceiver.get(localId);
	        if (!transceiver)
	            throw new Error('associated RTCRtpTransceiver not found');
	        await transceiver.sender.replaceTrack(track);
	    }
	    async setMaxSpatialLayer(localId, spatialLayer) {
	        this._assertSendDirection();
	        logger.debug('setMaxSpatialLayer() [localId:%s, spatialLayer:%s]', localId, spatialLayer);
	        const transceiver = this._mapMidTransceiver.get(localId);
	        if (!transceiver)
	            throw new Error('associated RTCRtpTransceiver not found');
	        const parameters = transceiver.sender.getParameters();
	        parameters.encodings.forEach((encoding, idx) => {
	            if (idx <= spatialLayer)
	                encoding.active = true;
	            else
	                encoding.active = false;
	        });
	        await transceiver.sender.setParameters(parameters);
	    }
	    async setRtpEncodingParameters(localId, params) {
	        this._assertSendDirection();
	        logger.debug('setRtpEncodingParameters() [localId:%s, params:%o]', localId, params);
	        const transceiver = this._mapMidTransceiver.get(localId);
	        if (!transceiver)
	            throw new Error('associated RTCRtpTransceiver not found');
	        const parameters = transceiver.sender.getParameters();
	        parameters.encodings.forEach((encoding, idx) => {
	            parameters.encodings[idx] = { ...encoding, ...params };
	        });
	        await transceiver.sender.setParameters(parameters);
	    }
	    async getSenderStats(localId) {
	        this._assertSendDirection();
	        const transceiver = this._mapMidTransceiver.get(localId);
	        if (!transceiver)
	            throw new Error('associated RTCRtpTransceiver not found');
	        return transceiver.sender.getStats();
	    }
	    async sendDataChannel({ ordered, maxPacketLifeTime, maxRetransmits, label, protocol, priority }) {
	        this._assertSendDirection();
	        const options = {
	            negotiated: true,
	            id: this._nextSendSctpStreamId,
	            ordered,
	            maxPacketLifeTime,
	            maxRetransmits,
	            protocol,
	            priority
	        };
	        logger.debug('sendDataChannel() [options:%o]', options);
	        const dataChannel = this._pc.createDataChannel(label, options);
	        // Increase next id.
	        this._nextSendSctpStreamId =
	            ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;
	        // If this is the first DataChannel we need to create the SDP answer with
	        // m=application section.
	        if (!this._hasDataChannelMediaSection) {
	            const offer = await this._pc.createOffer();
	            const localSdpObject = lib$1.parse(offer.sdp);
	            const offerMediaObject = localSdpObject.media
	                .find((m) => m.type === 'application');
	            if (!this._transportReady)
	                await this._setupTransport({ localDtlsRole: 'server', localSdpObject });
	            logger.debug('sendDataChannel() | calling pc.setLocalDescription() [offer:%o]', offer);
	            await this._pc.setLocalDescription(offer);
	            this._remoteSdp.sendSctpAssociation({ offerMediaObject });
	            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);
	            await this._pc.setRemoteDescription(answer);
	            this._hasDataChannelMediaSection = true;
	        }
	        const sctpStreamParameters = {
	            streamId: options.id,
	            ordered: options.ordered,
	            maxPacketLifeTime: options.maxPacketLifeTime,
	            maxRetransmits: options.maxRetransmits
	        };
	        return { dataChannel, sctpStreamParameters };
	    }
	    async receive({ trackId, kind, rtpParameters }) {
	        this._assertRecvDirection();
	        logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);
	        const localId = rtpParameters.mid || String(this._mapMidTransceiver.size);
	        this._remoteSdp.receive({
	            mid: localId,
	            kind,
	            offerRtpParameters: rtpParameters,
	            streamId: rtpParameters.rtcp.cname,
	            trackId
	        });
	        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('receive() | calling pc.setRemoteDescription() [offer:%o]', offer);
	        await this._pc.setRemoteDescription(offer);
	        let answer = await this._pc.createAnswer();
	        const localSdpObject = lib$1.parse(answer.sdp);
	        const answerMediaObject = localSdpObject.media
	            .find((m) => String(m.mid) === localId);
	        // May need to modify codec parameters in the answer based on codec
	        // parameters in the offer.
	        commonUtils.applyCodecParameters({
	            offerRtpParameters: rtpParameters,
	            answerMediaObject
	        });
	        answer = { type: 'answer', sdp: lib$1.write(localSdpObject) };
	        if (!this._transportReady)
	            await this._setupTransport({ localDtlsRole: 'client', localSdpObject });
	        logger.debug('receive() | calling pc.setLocalDescription() [answer:%o]', answer);
	        await this._pc.setLocalDescription(answer);
	        const transceiver = this._pc.getTransceivers()
	            .find((t) => t.mid === localId);
	        if (!transceiver)
	            throw new Error('new RTCRtpTransceiver not found');
	        // Store in the map.
	        this._mapMidTransceiver.set(localId, transceiver);
	        return {
	            localId,
	            track: transceiver.receiver.track,
	            rtpReceiver: transceiver.receiver
	        };
	    }
	    async stopReceiving(localId) {
	        this._assertRecvDirection();
	        logger.debug('stopReceiving() [localId:%s]', localId);
	        const transceiver = this._mapMidTransceiver.get(localId);
	        if (!transceiver)
	            throw new Error('associated RTCRtpTransceiver not found');
	        this._remoteSdp.closeMediaSection(transceiver.mid);
	        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('stopReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);
	        await this._pc.setRemoteDescription(offer);
	        const answer = await this._pc.createAnswer();
	        logger.debug('stopReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);
	        await this._pc.setLocalDescription(answer);
	    }
	    async getReceiverStats(localId) {
	        this._assertRecvDirection();
	        const transceiver = this._mapMidTransceiver.get(localId);
	        if (!transceiver)
	            throw new Error('associated RTCRtpTransceiver not found');
	        return transceiver.receiver.getStats();
	    }
	    async receiveDataChannel({ sctpStreamParameters, label, protocol }) {
	        this._assertRecvDirection();
	        const { streamId, ordered, maxPacketLifeTime, maxRetransmits } = sctpStreamParameters;
	        const options = {
	            negotiated: true,
	            id: streamId,
	            ordered,
	            maxPacketLifeTime,
	            maxRetransmits,
	            protocol
	        };
	        logger.debug('receiveDataChannel() [options:%o]', options);
	        const dataChannel = this._pc.createDataChannel(label, options);
	        // If this is the first DataChannel we need to create the SDP offer with
	        // m=application section.
	        if (!this._hasDataChannelMediaSection) {
	            this._remoteSdp.receiveSctpAssociation();
	            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]', offer);
	            await this._pc.setRemoteDescription(offer);
	            const answer = await this._pc.createAnswer();
	            if (!this._transportReady) {
	                const localSdpObject = lib$1.parse(answer.sdp);
	                await this._setupTransport({ localDtlsRole: 'client', localSdpObject });
	            }
	            logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);
	            await this._pc.setLocalDescription(answer);
	            this._hasDataChannelMediaSection = true;
	        }
	        return { dataChannel };
	    }
	    async _setupTransport({ localDtlsRole, localSdpObject }) {
	        if (!localSdpObject)
	            localSdpObject = lib$1.parse(this._pc.localDescription.sdp);
	        // Get our local DTLS parameters.
	        const dtlsParameters = commonUtils.extractDtlsParameters({ sdpObject: localSdpObject });
	        // Set our DTLS role.
	        dtlsParameters.role = localDtlsRole;
	        // Update the remote DTLS role in the SDP.
	        this._remoteSdp.updateDtlsRole(localDtlsRole === 'client' ? 'server' : 'client');
	        // Need to tell the remote transport about our parameters.
	        await this.safeEmitAsPromise('@connect', { dtlsParameters });
	        this._transportReady = true;
	    }
	    _assertSendDirection() {
	        if (this._direction !== 'send') {
	            throw new Error('method can just be called for handlers with "send" direction');
	        }
	    }
	    _assertRecvDirection() {
	        if (this._direction !== 'recv') {
	            throw new Error('method can just be called for handlers with "recv" direction');
	        }
	    }
	}
	exports.Chrome74 = Chrome74;
	});

	unwrapExports(Chrome74_1);
	var Chrome74_2 = Chrome74_1.Chrome74;

	var Chrome70_1 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });









	const logger = new Logger_1.Logger('Chrome70');
	const SCTP_NUM_STREAMS = { OS: 1024, MIS: 1024 };
	class Chrome70 extends HandlerInterface_1.HandlerInterface {
	    constructor() {
	        super();
	        // Map of RTCTransceivers indexed by MID.
	        this._mapMidTransceiver = new Map();
	        // Local stream for sending.
	        this._sendStream = new MediaStream();
	        // Whether a DataChannel m=application section has been created.
	        this._hasDataChannelMediaSection = false;
	        // Sending DataChannel id value counter. Incremented for each new DataChannel.
	        this._nextSendSctpStreamId = 0;
	        // Got transport local and remote parameters.
	        this._transportReady = false;
	    }
	    /**
	     * Creates a factory function.
	     */
	    static createFactory() {
	        return () => new Chrome70();
	    }
	    get name() {
	        return 'Chrome70';
	    }
	    close() {
	        logger.debug('close()');
	        // Close RTCPeerConnection.
	        if (this._pc) {
	            try {
	                this._pc.close();
	            }
	            catch (error) { }
	        }
	    }
	    async getNativeRtpCapabilities() {
	        logger.debug('getNativeRtpCapabilities()');
	        const pc = new RTCPeerConnection({
	            iceServers: [],
	            iceTransportPolicy: 'all',
	            bundlePolicy: 'max-bundle',
	            rtcpMuxPolicy: 'require',
	            sdpSemantics: 'unified-plan'
	        });
	        try {
	            pc.addTransceiver('audio');
	            pc.addTransceiver('video');
	            const offer = await pc.createOffer();
	            try {
	                pc.close();
	            }
	            catch (error) { }
	            const sdpObject = lib$1.parse(offer.sdp);
	            const nativeRtpCapabilities = commonUtils.extractRtpCapabilities({ sdpObject });
	            return nativeRtpCapabilities;
	        }
	        catch (error) {
	            try {
	                pc.close();
	            }
	            catch (error2) { }
	            throw error;
	        }
	    }
	    async getNativeSctpCapabilities() {
	        logger.debug('getNativeSctpCapabilities()');
	        return {
	            numStreams: SCTP_NUM_STREAMS
	        };
	    }
	    run({ direction, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, extendedRtpCapabilities }) {
	        logger.debug('run()');
	        this._direction = direction;
	        this._remoteSdp = new RemoteSdp_1.RemoteSdp({
	            iceParameters,
	            iceCandidates,
	            dtlsParameters,
	            sctpParameters
	        });
	        this._sendingRtpParametersByKind =
	            {
	                audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),
	                video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities)
	            };
	        this._sendingRemoteRtpParametersByKind =
	            {
	                audio: ortc.getSendingRemoteRtpParameters('audio', extendedRtpCapabilities),
	                video: ortc.getSendingRemoteRtpParameters('video', extendedRtpCapabilities)
	            };
	        this._pc = new RTCPeerConnection({
	            iceServers: iceServers || [],
	            iceTransportPolicy: iceTransportPolicy || 'all',
	            bundlePolicy: 'max-bundle',
	            rtcpMuxPolicy: 'require',
	            sdpSemantics: 'unified-plan',
	            ...additionalSettings
	        }, proprietaryConstraints);
	        // Handle RTCPeerConnection connection status.
	        this._pc.addEventListener('iceconnectionstatechange', () => {
	            switch (this._pc.iceConnectionState) {
	                case 'checking':
	                    this.emit('@connectionstatechange', 'connecting');
	                    break;
	                case 'connected':
	                case 'completed':
	                    this.emit('@connectionstatechange', 'connected');
	                    break;
	                case 'failed':
	                    this.emit('@connectionstatechange', 'failed');
	                    break;
	                case 'disconnected':
	                    this.emit('@connectionstatechange', 'disconnected');
	                    break;
	                case 'closed':
	                    this.emit('@connectionstatechange', 'closed');
	                    break;
	            }
	        });
	    }
	    async updateIceServers(iceServers) {
	        logger.debug('updateIceServers()');
	        const configuration = this._pc.getConfiguration();
	        configuration.iceServers = iceServers;
	        this._pc.setConfiguration(configuration);
	    }
	    async restartIce(iceParameters) {
	        logger.debug('restartIce()');
	        // Provide the remote SDP handler with new remote ICE parameters.
	        this._remoteSdp.updateIceParameters(iceParameters);
	        if (!this._transportReady)
	            return;
	        if (this._direction === 'send') {
	            const offer = await this._pc.createOffer({ iceRestart: true });
	            logger.debug('restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);
	            await this._pc.setLocalDescription(offer);
	            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);
	            await this._pc.setRemoteDescription(answer);
	        }
	        else {
	            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);
	            await this._pc.setRemoteDescription(offer);
	            const answer = await this._pc.createAnswer();
	            logger.debug('restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);
	            await this._pc.setLocalDescription(answer);
	        }
	    }
	    async getTransportStats() {
	        return this._pc.getStats();
	    }
	    async send({ track, encodings, codecOptions, codec }) {
	        this._assertSendDirection();
	        logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);
	        const sendingRtpParameters = utils.clone(this._sendingRtpParametersByKind[track.kind]);
	        // This may throw.
	        sendingRtpParameters.codecs =
	            ortc.reduceCodecs(sendingRtpParameters.codecs, codec);
	        const sendingRemoteRtpParameters = utils.clone(this._sendingRemoteRtpParametersByKind[track.kind]);
	        // This may throw.
	        sendingRemoteRtpParameters.codecs =
	            ortc.reduceCodecs(sendingRemoteRtpParameters.codecs, codec);
	        const mediaSectionIdx = this._remoteSdp.getNextMediaSectionIdx();
	        const transceiver = this._pc.addTransceiver(track, { direction: 'sendonly', streams: [this._sendStream] });
	        let offer = await this._pc.createOffer();
	        let localSdpObject = lib$1.parse(offer.sdp);
	        let offerMediaObject;
	        if (!this._transportReady)
	            await this._setupTransport({ localDtlsRole: 'server', localSdpObject });
	        if (encodings && encodings.length > 1) {
	            logger.debug('send() | enabling legacy simulcast');
	            localSdpObject = lib$1.parse(offer.sdp);
	            offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];
	            unifiedPlanUtils.addLegacySimulcast({
	                offerMediaObject,
	                numStreams: encodings.length
	            });
	            offer = { type: 'offer', sdp: lib$1.write(localSdpObject) };
	        }
	        // Special case for VP9 with SVC.
	        let hackVp9Svc = false;
	        const layers = scalabilityModes.parse((encodings || [{}])[0].scalabilityMode);
	        if (encodings &&
	            encodings.length === 1 &&
	            layers.spatialLayers > 1 &&
	            sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp9') {
	            logger.debug('send() | enabling legacy simulcast for VP9 SVC');
	            hackVp9Svc = true;
	            localSdpObject = lib$1.parse(offer.sdp);
	            offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];
	            unifiedPlanUtils.addLegacySimulcast({
	                offerMediaObject,
	                numStreams: layers.spatialLayers
	            });
	            offer = { type: 'offer', sdp: lib$1.write(localSdpObject) };
	        }
	        logger.debug('send() | calling pc.setLocalDescription() [offer:%o]', offer);
	        await this._pc.setLocalDescription(offer);
	        // If encodings are given, apply them now.
	        if (encodings) {
	            logger.debug('send() | applying given encodings');
	            const parameters = transceiver.sender.getParameters();
	            for (let idx = 0; idx < (parameters.encodings || []).length; ++idx) {
	                const encoding = parameters.encodings[idx];
	                const desiredEncoding = encodings[idx];
	                // Should not happen but just in case.
	                if (!desiredEncoding)
	                    break;
	                parameters.encodings[idx] = Object.assign(encoding, desiredEncoding);
	            }
	            await transceiver.sender.setParameters(parameters);
	        }
	        // We can now get the transceiver.mid.
	        const localId = transceiver.mid;
	        // Set MID.
	        sendingRtpParameters.mid = localId;
	        localSdpObject = lib$1.parse(this._pc.localDescription.sdp);
	        offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];
	        // Set RTCP CNAME.
	        sendingRtpParameters.rtcp.cname =
	            commonUtils.getCname({ offerMediaObject });
	        // Set RTP encodings.
	        sendingRtpParameters.encodings =
	            unifiedPlanUtils.getRtpEncodings({ offerMediaObject });
	        // Complete encodings with given values.
	        if (encodings) {
	            for (let idx = 0; idx < sendingRtpParameters.encodings.length; ++idx) {
	                if (encodings[idx])
	                    Object.assign(sendingRtpParameters.encodings[idx], encodings[idx]);
	            }
	        }
	        // Hack for VP9 SVC.
	        if (hackVp9Svc) {
	            sendingRtpParameters.encodings = [sendingRtpParameters.encodings[0]];
	        }
	        // If VP8 or H264 and there is effective simulcast, add scalabilityMode to
	        // each encoding.
	        if (sendingRtpParameters.encodings.length > 1 &&
	            (sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp8' ||
	                sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/h264')) {
	            for (const encoding of sendingRtpParameters.encodings) {
	                encoding.scalabilityMode = 'S1T3';
	            }
	        }
	        this._remoteSdp.send({
	            offerMediaObject,
	            reuseMid: mediaSectionIdx.reuseMid,
	            offerRtpParameters: sendingRtpParameters,
	            answerRtpParameters: sendingRemoteRtpParameters,
	            codecOptions
	        });
	        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('send() | calling pc.setRemoteDescription() [answer:%o]', answer);
	        await this._pc.setRemoteDescription(answer);
	        // Store in the map.
	        this._mapMidTransceiver.set(localId, transceiver);
	        return {
	            localId,
	            rtpParameters: sendingRtpParameters,
	            rtpSender: transceiver.sender
	        };
	    }
	    async stopSending(localId) {
	        this._assertSendDirection();
	        logger.debug('stopSending() [localId:%s]', localId);
	        const transceiver = this._mapMidTransceiver.get(localId);
	        if (!transceiver)
	            throw new Error('associated RTCRtpTransceiver not found');
	        transceiver.sender.replaceTrack(null);
	        this._pc.removeTrack(transceiver.sender);
	        this._remoteSdp.closeMediaSection(transceiver.mid);
	        const offer = await this._pc.createOffer();
	        logger.debug('stopSending() | calling pc.setLocalDescription() [offer:%o]', offer);
	        await this._pc.setLocalDescription(offer);
	        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('stopSending() | calling pc.setRemoteDescription() [answer:%o]', answer);
	        await this._pc.setRemoteDescription(answer);
	    }
	    async replaceTrack(localId, track) {
	        this._assertSendDirection();
	        if (track) {
	            logger.debug('replaceTrack() [localId:%s, track.id:%s]', localId, track.id);
	        }
	        else {
	            logger.debug('replaceTrack() [localId:%s, no track]', localId);
	        }
	        const transceiver = this._mapMidTransceiver.get(localId);
	        if (!transceiver)
	            throw new Error('associated RTCRtpTransceiver not found');
	        await transceiver.sender.replaceTrack(track);
	    }
	    async setMaxSpatialLayer(localId, spatialLayer) {
	        this._assertSendDirection();
	        logger.debug('setMaxSpatialLayer() [localId:%s, spatialLayer:%s]', localId, spatialLayer);
	        const transceiver = this._mapMidTransceiver.get(localId);
	        if (!transceiver)
	            throw new Error('associated RTCRtpTransceiver not found');
	        const parameters = transceiver.sender.getParameters();
	        parameters.encodings.forEach((encoding, idx) => {
	            if (idx <= spatialLayer)
	                encoding.active = true;
	            else
	                encoding.active = false;
	        });
	        await transceiver.sender.setParameters(parameters);
	    }
	    async setRtpEncodingParameters(localId, params) {
	        this._assertSendDirection();
	        logger.debug('setRtpEncodingParameters() [localId:%s, params:%o]', localId, params);
	        const transceiver = this._mapMidTransceiver.get(localId);
	        if (!transceiver)
	            throw new Error('associated RTCRtpTransceiver not found');
	        const parameters = transceiver.sender.getParameters();
	        parameters.encodings.forEach((encoding, idx) => {
	            parameters.encodings[idx] = { ...encoding, ...params };
	        });
	        await transceiver.sender.setParameters(parameters);
	    }
	    async getSenderStats(localId) {
	        this._assertSendDirection();
	        const transceiver = this._mapMidTransceiver.get(localId);
	        if (!transceiver)
	            throw new Error('associated RTCRtpTransceiver not found');
	        return transceiver.sender.getStats();
	    }
	    async sendDataChannel({ ordered, maxPacketLifeTime, maxRetransmits, label, protocol, priority }) {
	        this._assertSendDirection();
	        const options = {
	            negotiated: true,
	            id: this._nextSendSctpStreamId,
	            ordered,
	            maxPacketLifeTime,
	            maxRetransmitTime: maxPacketLifeTime,
	            maxRetransmits,
	            protocol,
	            priority
	        };
	        logger.debug('sendDataChannel() [options:%o]', options);
	        const dataChannel = this._pc.createDataChannel(label, options);
	        // Increase next id.
	        this._nextSendSctpStreamId =
	            ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;
	        // If this is the first DataChannel we need to create the SDP answer with
	        // m=application section.
	        if (!this._hasDataChannelMediaSection) {
	            const offer = await this._pc.createOffer();
	            const localSdpObject = lib$1.parse(offer.sdp);
	            const offerMediaObject = localSdpObject.media
	                .find((m) => m.type === 'application');
	            if (!this._transportReady)
	                await this._setupTransport({ localDtlsRole: 'server', localSdpObject });
	            logger.debug('sendDataChannel() | calling pc.setLocalDescription() [offer:%o]', offer);
	            await this._pc.setLocalDescription(offer);
	            this._remoteSdp.sendSctpAssociation({ offerMediaObject });
	            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);
	            await this._pc.setRemoteDescription(answer);
	            this._hasDataChannelMediaSection = true;
	        }
	        const sctpStreamParameters = {
	            streamId: options.id,
	            ordered: options.ordered,
	            maxPacketLifeTime: options.maxPacketLifeTime,
	            maxRetransmits: options.maxRetransmits
	        };
	        return { dataChannel, sctpStreamParameters };
	    }
	    async receive({ trackId, kind, rtpParameters }) {
	        this._assertRecvDirection();
	        logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);
	        const localId = rtpParameters.mid || String(this._mapMidTransceiver.size);
	        this._remoteSdp.receive({
	            mid: localId,
	            kind,
	            offerRtpParameters: rtpParameters,
	            streamId: rtpParameters.rtcp.cname,
	            trackId
	        });
	        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('receive() | calling pc.setRemoteDescription() [offer:%o]', offer);
	        await this._pc.setRemoteDescription(offer);
	        let answer = await this._pc.createAnswer();
	        const localSdpObject = lib$1.parse(answer.sdp);
	        const answerMediaObject = localSdpObject.media
	            .find((m) => String(m.mid) === localId);
	        // May need to modify codec parameters in the answer based on codec
	        // parameters in the offer.
	        commonUtils.applyCodecParameters({
	            offerRtpParameters: rtpParameters,
	            answerMediaObject
	        });
	        answer = { type: 'answer', sdp: lib$1.write(localSdpObject) };
	        if (!this._transportReady)
	            await this._setupTransport({ localDtlsRole: 'client', localSdpObject });
	        logger.debug('receive() | calling pc.setLocalDescription() [answer:%o]', answer);
	        await this._pc.setLocalDescription(answer);
	        const transceiver = this._pc.getTransceivers()
	            .find((t) => t.mid === localId);
	        if (!transceiver)
	            throw new Error('new RTCRtpTransceiver not found');
	        // Store in the map.
	        this._mapMidTransceiver.set(localId, transceiver);
	        return {
	            localId,
	            track: transceiver.receiver.track,
	            rtpReceiver: transceiver.receiver
	        };
	    }
	    async stopReceiving(localId) {
	        this._assertRecvDirection();
	        logger.debug('stopReceiving() [localId:%s]', localId);
	        const transceiver = this._mapMidTransceiver.get(localId);
	        if (!transceiver)
	            throw new Error('associated RTCRtpTransceiver not found');
	        this._remoteSdp.closeMediaSection(transceiver.mid);
	        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('stopReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);
	        await this._pc.setRemoteDescription(offer);
	        const answer = await this._pc.createAnswer();
	        logger.debug('stopReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);
	        await this._pc.setLocalDescription(answer);
	    }
	    async getReceiverStats(localId) {
	        this._assertRecvDirection();
	        const transceiver = this._mapMidTransceiver.get(localId);
	        if (!transceiver)
	            throw new Error('associated RTCRtpTransceiver not found');
	        return transceiver.receiver.getStats();
	    }
	    async receiveDataChannel({ sctpStreamParameters, label, protocol }) {
	        this._assertRecvDirection();
	        const { streamId, ordered, maxPacketLifeTime, maxRetransmits } = sctpStreamParameters;
	        const options = {
	            negotiated: true,
	            id: streamId,
	            ordered,
	            maxPacketLifeTime,
	            maxRetransmitTime: maxPacketLifeTime,
	            maxRetransmits,
	            protocol
	        };
	        logger.debug('receiveDataChannel() [options:%o]', options);
	        const dataChannel = this._pc.createDataChannel(label, options);
	        // If this is the first DataChannel we need to create the SDP offer with
	        // m=application section.
	        if (!this._hasDataChannelMediaSection) {
	            this._remoteSdp.receiveSctpAssociation();
	            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]', offer);
	            await this._pc.setRemoteDescription(offer);
	            const answer = await this._pc.createAnswer();
	            if (!this._transportReady) {
	                const localSdpObject = lib$1.parse(answer.sdp);
	                await this._setupTransport({ localDtlsRole: 'client', localSdpObject });
	            }
	            logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);
	            await this._pc.setLocalDescription(answer);
	            this._hasDataChannelMediaSection = true;
	        }
	        return { dataChannel };
	    }
	    async _setupTransport({ localDtlsRole, localSdpObject }) {
	        if (!localSdpObject)
	            localSdpObject = lib$1.parse(this._pc.localDescription.sdp);
	        // Get our local DTLS parameters.
	        const dtlsParameters = commonUtils.extractDtlsParameters({ sdpObject: localSdpObject });
	        // Set our DTLS role.
	        dtlsParameters.role = localDtlsRole;
	        // Update the remote DTLS role in the SDP.
	        this._remoteSdp.updateDtlsRole(localDtlsRole === 'client' ? 'server' : 'client');
	        // Need to tell the remote transport about our parameters.
	        await this.safeEmitAsPromise('@connect', { dtlsParameters });
	        this._transportReady = true;
	    }
	    _assertSendDirection() {
	        if (this._direction !== 'send') {
	            throw new Error('method can just be called for handlers with "send" direction');
	        }
	    }
	    _assertRecvDirection() {
	        if (this._direction !== 'recv') {
	            throw new Error('method can just be called for handlers with "recv" direction');
	        }
	    }
	}
	exports.Chrome70 = Chrome70;
	});

	unwrapExports(Chrome70_1);
	var Chrome70_2 = Chrome70_1.Chrome70;

	var planBUtils = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	function getRtpEncodings({ offerMediaObject, track }) {
	    const ssrcs = new Set();
	    for (const line of offerMediaObject.ssrcs || []) {
	        if (line.attribute !== 'msid')
	            continue;
	        const trackId = line.value.split(' ')[1];
	        if (trackId === track.id) {
	            const ssrc = line.id;
	            ssrcs.add(ssrc);
	        }
	    }
	    if (ssrcs.size === 0)
	        throw new Error(`a=ssrc line with msid information not found [track.id:${track.id}]`);
	    const ssrcToRtxSsrc = new Map();
	    // First assume RTX is used.
	    for (const line of offerMediaObject.ssrcGroups || []) {
	        if (line.semantics !== 'FID')
	            continue;
	        let [ssrc, rtxSsrc] = line.ssrcs.split(/\s+/);
	        ssrc = Number(ssrc);
	        rtxSsrc = Number(rtxSsrc);
	        if (ssrcs.has(ssrc)) {
	            // Remove both the SSRC and RTX SSRC from the set so later we know that they
	            // are already handled.
	            ssrcs.delete(ssrc);
	            ssrcs.delete(rtxSsrc);
	            // Add to the map.
	            ssrcToRtxSsrc.set(ssrc, rtxSsrc);
	        }
	    }
	    // If the set of SSRCs is not empty it means that RTX is not being used, so take
	    // media SSRCs from there.
	    for (const ssrc of ssrcs) {
	        // Add to the map.
	        ssrcToRtxSsrc.set(ssrc, null);
	    }
	    const encodings = [];
	    for (const [ssrc, rtxSsrc] of ssrcToRtxSsrc) {
	        const encoding = { ssrc };
	        if (rtxSsrc)
	            encoding.rtx = { ssrc: rtxSsrc };
	        encodings.push(encoding);
	    }
	    return encodings;
	}
	exports.getRtpEncodings = getRtpEncodings;
	/**
	 * Adds multi-ssrc based simulcast into the given SDP media section offer.
	 */
	function addLegacySimulcast({ offerMediaObject, track, numStreams }) {
	    if (numStreams <= 1)
	        throw new TypeError('numStreams must be greater than 1');
	    let firstSsrc;
	    let firstRtxSsrc;
	    let streamId;
	    // Get the SSRC.
	    const ssrcMsidLine = (offerMediaObject.ssrcs || [])
	        .find((line) => {
	        if (line.attribute !== 'msid')
	            return false;
	        const trackId = line.value.split(' ')[1];
	        if (trackId === track.id) {
	            firstSsrc = line.id;
	            streamId = line.value.split(' ')[0];
	            return true;
	        }
	        else {
	            return false;
	        }
	    });
	    if (!ssrcMsidLine)
	        throw new Error(`a=ssrc line with msid information not found [track.id:${track.id}]`);
	    // Get the SSRC for RTX.
	    (offerMediaObject.ssrcGroups || [])
	        .some((line) => {
	        if (line.semantics !== 'FID')
	            return false;
	        const ssrcs = line.ssrcs.split(/\s+/);
	        if (Number(ssrcs[0]) === firstSsrc) {
	            firstRtxSsrc = Number(ssrcs[1]);
	            return true;
	        }
	        else {
	            return false;
	        }
	    });
	    const ssrcCnameLine = offerMediaObject.ssrcs
	        .find((line) => (line.attribute === 'cname' && line.id === firstSsrc));
	    if (!ssrcCnameLine)
	        throw new Error(`a=ssrc line with cname information not found [track.id:${track.id}]`);
	    const cname = ssrcCnameLine.value;
	    const ssrcs = [];
	    const rtxSsrcs = [];
	    for (let i = 0; i < numStreams; ++i) {
	        ssrcs.push(firstSsrc + i);
	        if (firstRtxSsrc)
	            rtxSsrcs.push(firstRtxSsrc + i);
	    }
	    offerMediaObject.ssrcGroups = offerMediaObject.ssrcGroups || [];
	    offerMediaObject.ssrcs = offerMediaObject.ssrcs || [];
	    offerMediaObject.ssrcGroups.push({
	        semantics: 'SIM',
	        ssrcs: ssrcs.join(' ')
	    });
	    for (let i = 0; i < ssrcs.length; ++i) {
	        const ssrc = ssrcs[i];
	        offerMediaObject.ssrcs.push({
	            id: ssrc,
	            attribute: 'cname',
	            value: cname
	        });
	        offerMediaObject.ssrcs.push({
	            id: ssrc,
	            attribute: 'msid',
	            value: `${streamId} ${track.id}`
	        });
	    }
	    for (let i = 0; i < rtxSsrcs.length; ++i) {
	        const ssrc = ssrcs[i];
	        const rtxSsrc = rtxSsrcs[i];
	        offerMediaObject.ssrcs.push({
	            id: rtxSsrc,
	            attribute: 'cname',
	            value: cname
	        });
	        offerMediaObject.ssrcs.push({
	            id: rtxSsrc,
	            attribute: 'msid',
	            value: `${streamId} ${track.id}`
	        });
	        offerMediaObject.ssrcGroups.push({
	            semantics: 'FID',
	            ssrcs: `${ssrc} ${rtxSsrc}`
	        });
	    }
	}
	exports.addLegacySimulcast = addLegacySimulcast;
	});

	unwrapExports(planBUtils);
	var planBUtils_1 = planBUtils.getRtpEncodings;
	var planBUtils_2 = planBUtils.addLegacySimulcast;

	var Chrome67_1 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });








	const logger = new Logger_1.Logger('Chrome67');
	const SCTP_NUM_STREAMS = { OS: 1024, MIS: 1024 };
	class Chrome67 extends HandlerInterface_1.HandlerInterface {
	    constructor() {
	        super();
	        // Local stream for sending.
	        this._sendStream = new MediaStream();
	        // Map of RTCRtpSender indexed by localId.
	        this._mapSendLocalIdRtpSender = new Map();
	        // Next sending localId.
	        this._nextSendLocalId = 0;
	        // Map of MID, RTP parameters and RTCRtpReceiver indexed by local id.
	        // Value is an Object with mid, rtpParameters and rtpReceiver.
	        this._mapRecvLocalIdInfo = new Map();
	        // Whether a DataChannel m=application section has been created.
	        this._hasDataChannelMediaSection = false;
	        // Sending DataChannel id value counter. Incremented for each new DataChannel.
	        this._nextSendSctpStreamId = 0;
	        // Got transport local and remote parameters.
	        this._transportReady = false;
	    }
	    /**
	     * Creates a factory function.
	     */
	    static createFactory() {
	        return () => new Chrome67();
	    }
	    get name() {
	        return 'Chrome67';
	    }
	    close() {
	        logger.debug('close()');
	        // Close RTCPeerConnection.
	        if (this._pc) {
	            try {
	                this._pc.close();
	            }
	            catch (error) { }
	        }
	    }
	    async getNativeRtpCapabilities() {
	        logger.debug('getNativeRtpCapabilities()');
	        const pc = new RTCPeerConnection({
	            iceServers: [],
	            iceTransportPolicy: 'all',
	            bundlePolicy: 'max-bundle',
	            rtcpMuxPolicy: 'require',
	            sdpSemantics: 'plan-b'
	        });
	        try {
	            const offer = await pc.createOffer({
	                offerToReceiveAudio: true,
	                offerToReceiveVideo: true
	            });
	            try {
	                pc.close();
	            }
	            catch (error) { }
	            const sdpObject = lib$1.parse(offer.sdp);
	            const nativeRtpCapabilities = commonUtils.extractRtpCapabilities({ sdpObject });
	            return nativeRtpCapabilities;
	        }
	        catch (error) {
	            try {
	                pc.close();
	            }
	            catch (error2) { }
	            throw error;
	        }
	    }
	    async getNativeSctpCapabilities() {
	        logger.debug('getNativeSctpCapabilities()');
	        return {
	            numStreams: SCTP_NUM_STREAMS
	        };
	    }
	    run({ direction, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, extendedRtpCapabilities }) {
	        logger.debug('run()');
	        this._direction = direction;
	        this._remoteSdp = new RemoteSdp_1.RemoteSdp({
	            iceParameters,
	            iceCandidates,
	            dtlsParameters,
	            sctpParameters,
	            planB: true
	        });
	        this._sendingRtpParametersByKind =
	            {
	                audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),
	                video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities)
	            };
	        this._sendingRemoteRtpParametersByKind =
	            {
	                audio: ortc.getSendingRemoteRtpParameters('audio', extendedRtpCapabilities),
	                video: ortc.getSendingRemoteRtpParameters('video', extendedRtpCapabilities)
	            };
	        this._pc = new RTCPeerConnection({
	            iceServers: iceServers || [],
	            iceTransportPolicy: iceTransportPolicy || 'all',
	            bundlePolicy: 'max-bundle',
	            rtcpMuxPolicy: 'require',
	            sdpSemantics: 'plan-b',
	            ...additionalSettings
	        }, proprietaryConstraints);
	        // Handle RTCPeerConnection connection status.
	        this._pc.addEventListener('iceconnectionstatechange', () => {
	            switch (this._pc.iceConnectionState) {
	                case 'checking':
	                    this.emit('@connectionstatechange', 'connecting');
	                    break;
	                case 'connected':
	                case 'completed':
	                    this.emit('@connectionstatechange', 'connected');
	                    break;
	                case 'failed':
	                    this.emit('@connectionstatechange', 'failed');
	                    break;
	                case 'disconnected':
	                    this.emit('@connectionstatechange', 'disconnected');
	                    break;
	                case 'closed':
	                    this.emit('@connectionstatechange', 'closed');
	                    break;
	            }
	        });
	    }
	    async updateIceServers(iceServers) {
	        logger.debug('updateIceServers()');
	        const configuration = this._pc.getConfiguration();
	        configuration.iceServers = iceServers;
	        this._pc.setConfiguration(configuration);
	    }
	    async restartIce(iceParameters) {
	        logger.debug('restartIce()');
	        // Provide the remote SDP handler with new remote ICE parameters.
	        this._remoteSdp.updateIceParameters(iceParameters);
	        if (!this._transportReady)
	            return;
	        if (this._direction === 'send') {
	            const offer = await this._pc.createOffer({ iceRestart: true });
	            logger.debug('restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);
	            await this._pc.setLocalDescription(offer);
	            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);
	            await this._pc.setRemoteDescription(answer);
	        }
	        else {
	            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);
	            await this._pc.setRemoteDescription(offer);
	            const answer = await this._pc.createAnswer();
	            logger.debug('restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);
	            await this._pc.setLocalDescription(answer);
	        }
	    }
	    async getTransportStats() {
	        return this._pc.getStats();
	    }
	    async send({ track, encodings, codecOptions, codec }) {
	        this._assertSendDirection();
	        logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);
	        if (codec) {
	            logger.warn('send() | codec selection is not available in %s handler', this.name);
	        }
	        this._sendStream.addTrack(track);
	        this._pc.addTrack(track, this._sendStream);
	        let offer = await this._pc.createOffer();
	        let localSdpObject = lib$1.parse(offer.sdp);
	        let offerMediaObject;
	        const sendingRtpParameters = utils.clone(this._sendingRtpParametersByKind[track.kind]);
	        sendingRtpParameters.codecs =
	            ortc.reduceCodecs(sendingRtpParameters.codecs);
	        const sendingRemoteRtpParameters = utils.clone(this._sendingRemoteRtpParametersByKind[track.kind]);
	        sendingRemoteRtpParameters.codecs =
	            ortc.reduceCodecs(sendingRemoteRtpParameters.codecs);
	        if (!this._transportReady)
	            await this._setupTransport({ localDtlsRole: 'server', localSdpObject });
	        if (track.kind === 'video' && encodings && encodings.length > 1) {
	            logger.debug('send() | enabling simulcast');
	            localSdpObject = lib$1.parse(offer.sdp);
	            offerMediaObject = localSdpObject.media
	                .find((m) => m.type === 'video');
	            planBUtils.addLegacySimulcast({
	                offerMediaObject,
	                track,
	                numStreams: encodings.length
	            });
	            offer = { type: 'offer', sdp: lib$1.write(localSdpObject) };
	        }
	        logger.debug('send() | calling pc.setLocalDescription() [offer:%o]', offer);
	        await this._pc.setLocalDescription(offer);
	        localSdpObject = lib$1.parse(this._pc.localDescription.sdp);
	        offerMediaObject = localSdpObject.media
	            .find((m) => m.type === track.kind);
	        // Set RTCP CNAME.
	        sendingRtpParameters.rtcp.cname =
	            commonUtils.getCname({ offerMediaObject });
	        // Set RTP encodings.
	        sendingRtpParameters.encodings =
	            planBUtils.getRtpEncodings({ offerMediaObject, track });
	        // Complete encodings with given values.
	        if (encodings) {
	            for (let idx = 0; idx < sendingRtpParameters.encodings.length; ++idx) {
	                if (encodings[idx])
	                    Object.assign(sendingRtpParameters.encodings[idx], encodings[idx]);
	            }
	        }
	        // If VP8 and there is effective simulcast, add scalabilityMode to each
	        // encoding.
	        if (sendingRtpParameters.encodings.length > 1 &&
	            sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp8') {
	            for (const encoding of sendingRtpParameters.encodings) {
	                encoding.scalabilityMode = 'S1T3';
	            }
	        }
	        this._remoteSdp.send({
	            offerMediaObject,
	            offerRtpParameters: sendingRtpParameters,
	            answerRtpParameters: sendingRemoteRtpParameters,
	            codecOptions
	        });
	        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('send() | calling pc.setRemoteDescription() [answer:%o]', answer);
	        await this._pc.setRemoteDescription(answer);
	        const localId = String(this._nextSendLocalId);
	        this._nextSendLocalId++;
	        const rtpSender = this._pc.getSenders()
	            .find((s) => s.track === track);
	        // Insert into the map.
	        this._mapSendLocalIdRtpSender.set(localId, rtpSender);
	        return {
	            localId: localId,
	            rtpParameters: sendingRtpParameters,
	            rtpSender
	        };
	    }
	    async stopSending(localId) {
	        this._assertSendDirection();
	        logger.debug('stopSending() [localId:%s]', localId);
	        const rtpSender = this._mapSendLocalIdRtpSender.get(localId);
	        if (!rtpSender)
	            throw new Error('associated RTCRtpSender not found');
	        this._pc.removeTrack(rtpSender);
	        if (rtpSender.track)
	            this._sendStream.removeTrack(rtpSender.track);
	        this._mapSendLocalIdRtpSender.delete(localId);
	        const offer = await this._pc.createOffer();
	        logger.debug('stopSending() | calling pc.setLocalDescription() [offer:%o]', offer);
	        try {
	            await this._pc.setLocalDescription(offer);
	        }
	        catch (error) {
	            // NOTE: If there are no sending tracks, setLocalDescription() will fail with
	            // "Failed to create channels". If so, ignore it.
	            if (this._sendStream.getTracks().length === 0) {
	                logger.warn('stopSending() | ignoring expected error due no sending tracks: %s', error.toString());
	                return;
	            }
	            throw error;
	        }
	        if (this._pc.signalingState === 'stable')
	            return;
	        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('stopSending() | calling pc.setRemoteDescription() [answer:%o]', answer);
	        await this._pc.setRemoteDescription(answer);
	    }
	    async replaceTrack(localId, track) {
	        this._assertSendDirection();
	        if (track) {
	            logger.debug('replaceTrack() [localId:%s, track.id:%s]', localId, track.id);
	        }
	        else {
	            logger.debug('replaceTrack() [localId:%s, no track]', localId);
	        }
	        const rtpSender = this._mapSendLocalIdRtpSender.get(localId);
	        if (!rtpSender)
	            throw new Error('associated RTCRtpSender not found');
	        const oldTrack = rtpSender.track;
	        await rtpSender.replaceTrack(track);
	        // Remove the old track from the local stream.
	        if (oldTrack)
	            this._sendStream.removeTrack(oldTrack);
	        // Add the new track to the local stream.
	        if (track)
	            this._sendStream.addTrack(track);
	    }
	    async setMaxSpatialLayer(localId, spatialLayer) {
	        this._assertSendDirection();
	        logger.debug('setMaxSpatialLayer() [localId:%s, spatialLayer:%s]', localId, spatialLayer);
	        const rtpSender = this._mapSendLocalIdRtpSender.get(localId);
	        if (!rtpSender)
	            throw new Error('associated RTCRtpSender not found');
	        const parameters = rtpSender.getParameters();
	        parameters.encodings.forEach((encoding, idx) => {
	            if (idx <= spatialLayer)
	                encoding.active = true;
	            else
	                encoding.active = false;
	        });
	        await rtpSender.setParameters(parameters);
	    }
	    async setRtpEncodingParameters(localId, params) {
	        this._assertSendDirection();
	        logger.debug('setRtpEncodingParameters() [localId:%s, params:%o]', localId, params);
	        const rtpSender = this._mapSendLocalIdRtpSender.get(localId);
	        if (!rtpSender)
	            throw new Error('associated RTCRtpSender not found');
	        const parameters = rtpSender.getParameters();
	        parameters.encodings.forEach((encoding, idx) => {
	            parameters.encodings[idx] = { ...encoding, ...params };
	        });
	        await rtpSender.setParameters(parameters);
	    }
	    async getSenderStats(localId) {
	        this._assertSendDirection();
	        const rtpSender = this._mapSendLocalIdRtpSender.get(localId);
	        if (!rtpSender)
	            throw new Error('associated RTCRtpSender not found');
	        return rtpSender.getStats();
	    }
	    async sendDataChannel({ ordered, maxPacketLifeTime, maxRetransmits, label, protocol, priority }) {
	        this._assertSendDirection();
	        const options = {
	            negotiated: true,
	            id: this._nextSendSctpStreamId,
	            ordered,
	            maxPacketLifeTime,
	            maxRetransmitTime: maxPacketLifeTime,
	            maxRetransmits,
	            protocol,
	            priority
	        };
	        logger.debug('sendDataChannel() [options:%o]', options);
	        const dataChannel = this._pc.createDataChannel(label, options);
	        // Increase next id.
	        this._nextSendSctpStreamId =
	            ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;
	        // If this is the first DataChannel we need to create the SDP answer with
	        // m=application section.
	        if (!this._hasDataChannelMediaSection) {
	            const offer = await this._pc.createOffer();
	            const localSdpObject = lib$1.parse(offer.sdp);
	            const offerMediaObject = localSdpObject.media
	                .find((m) => m.type === 'application');
	            if (!this._transportReady)
	                await this._setupTransport({ localDtlsRole: 'server', localSdpObject });
	            logger.debug('sendDataChannel() | calling pc.setLocalDescription() [offer:%o]', offer);
	            await this._pc.setLocalDescription(offer);
	            this._remoteSdp.sendSctpAssociation({ offerMediaObject });
	            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);
	            await this._pc.setRemoteDescription(answer);
	            this._hasDataChannelMediaSection = true;
	        }
	        const sctpStreamParameters = {
	            streamId: options.id,
	            ordered: options.ordered,
	            maxPacketLifeTime: options.maxPacketLifeTime,
	            maxRetransmits: options.maxRetransmits
	        };
	        return { dataChannel, sctpStreamParameters };
	    }
	    async receive({ trackId, kind, rtpParameters }) {
	        this._assertRecvDirection();
	        logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);
	        const localId = trackId;
	        const mid = kind;
	        this._remoteSdp.receive({
	            mid,
	            kind,
	            offerRtpParameters: rtpParameters,
	            streamId: rtpParameters.rtcp.cname,
	            trackId
	        });
	        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('receive() | calling pc.setRemoteDescription() [offer:%o]', offer);
	        await this._pc.setRemoteDescription(offer);
	        let answer = await this._pc.createAnswer();
	        const localSdpObject = lib$1.parse(answer.sdp);
	        const answerMediaObject = localSdpObject.media
	            .find((m) => String(m.mid) === mid);
	        // May need to modify codec parameters in the answer based on codec
	        // parameters in the offer.
	        commonUtils.applyCodecParameters({
	            offerRtpParameters: rtpParameters,
	            answerMediaObject
	        });
	        answer = { type: 'answer', sdp: lib$1.write(localSdpObject) };
	        if (!this._transportReady)
	            await this._setupTransport({ localDtlsRole: 'client', localSdpObject });
	        logger.debug('receive() | calling pc.setLocalDescription() [answer:%o]', answer);
	        await this._pc.setLocalDescription(answer);
	        const rtpReceiver = this._pc.getReceivers()
	            .find((r) => r.track && r.track.id === localId);
	        if (!rtpReceiver)
	            throw new Error('new RTCRtpReceiver not');
	        // Insert into the map.
	        this._mapRecvLocalIdInfo.set(localId, { mid, rtpParameters, rtpReceiver });
	        return {
	            localId,
	            track: rtpReceiver.track,
	            rtpReceiver
	        };
	    }
	    async stopReceiving(localId) {
	        this._assertRecvDirection();
	        logger.debug('stopReceiving() [localId:%s]', localId);
	        const { mid, rtpParameters } = this._mapRecvLocalIdInfo.get(localId) || {};
	        // Remove from the map.
	        this._mapRecvLocalIdInfo.delete(localId);
	        this._remoteSdp.planBStopReceiving({ mid: mid, offerRtpParameters: rtpParameters });
	        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('stopReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);
	        await this._pc.setRemoteDescription(offer);
	        const answer = await this._pc.createAnswer();
	        logger.debug('stopReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);
	        await this._pc.setLocalDescription(answer);
	    }
	    async getReceiverStats(localId) {
	        this._assertRecvDirection();
	        const { rtpReceiver } = this._mapRecvLocalIdInfo.get(localId) || {};
	        if (!rtpReceiver)
	            throw new Error('associated RTCRtpReceiver not found');
	        return rtpReceiver.getStats();
	    }
	    async receiveDataChannel({ sctpStreamParameters, label, protocol }) {
	        this._assertRecvDirection();
	        const { streamId, ordered, maxPacketLifeTime, maxRetransmits } = sctpStreamParameters;
	        const options = {
	            negotiated: true,
	            id: streamId,
	            ordered,
	            maxPacketLifeTime,
	            maxRetransmitTime: maxPacketLifeTime,
	            maxRetransmits,
	            protocol
	        };
	        logger.debug('receiveDataChannel() [options:%o]', options);
	        const dataChannel = this._pc.createDataChannel(label, options);
	        // If this is the first DataChannel we need to create the SDP offer with
	        // m=application section.
	        if (!this._hasDataChannelMediaSection) {
	            this._remoteSdp.receiveSctpAssociation({ oldDataChannelSpec: true });
	            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]', offer);
	            await this._pc.setRemoteDescription(offer);
	            const answer = await this._pc.createAnswer();
	            if (!this._transportReady) {
	                const localSdpObject = lib$1.parse(answer.sdp);
	                await this._setupTransport({ localDtlsRole: 'client', localSdpObject });
	            }
	            logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);
	            await this._pc.setLocalDescription(answer);
	            this._hasDataChannelMediaSection = true;
	        }
	        return { dataChannel };
	    }
	    async _setupTransport({ localDtlsRole, localSdpObject }) {
	        if (!localSdpObject)
	            localSdpObject = lib$1.parse(this._pc.localDescription.sdp);
	        // Get our local DTLS parameters.
	        const dtlsParameters = commonUtils.extractDtlsParameters({ sdpObject: localSdpObject });
	        // Set our DTLS role.
	        dtlsParameters.role = localDtlsRole;
	        // Update the remote DTLS role in the SDP.
	        this._remoteSdp.updateDtlsRole(localDtlsRole === 'client' ? 'server' : 'client');
	        // Need to tell the remote transport about our parameters.
	        await this.safeEmitAsPromise('@connect', { dtlsParameters });
	        this._transportReady = true;
	    }
	    _assertSendDirection() {
	        if (this._direction !== 'send') {
	            throw new Error('method can just be called for handlers with "send" direction');
	        }
	    }
	    _assertRecvDirection() {
	        if (this._direction !== 'recv') {
	            throw new Error('method can just be called for handlers with "recv" direction');
	        }
	    }
	}
	exports.Chrome67 = Chrome67;
	});

	unwrapExports(Chrome67_1);
	var Chrome67_2 = Chrome67_1.Chrome67;

	var Chrome55_1 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });









	const logger = new Logger_1.Logger('Chrome55');
	const SCTP_NUM_STREAMS = { OS: 1024, MIS: 1024 };
	class Chrome55 extends HandlerInterface_1.HandlerInterface {
	    constructor() {
	        super();
	        // Local stream for sending.
	        this._sendStream = new MediaStream();
	        // Map of sending MediaStreamTracks indexed by localId.
	        this._mapSendLocalIdTrack = new Map();
	        // Next sending localId.
	        this._nextSendLocalId = 0;
	        // Map of MID, RTP parameters and RTCRtpReceiver indexed by local id.
	        // Value is an Object with mid, rtpParameters and rtpReceiver.
	        this._mapRecvLocalIdInfo = new Map();
	        // Whether a DataChannel m=application section has been created.
	        this._hasDataChannelMediaSection = false;
	        // Sending DataChannel id value counter. Incremented for each new DataChannel.
	        this._nextSendSctpStreamId = 0;
	        // Got transport local and remote parameters.
	        this._transportReady = false;
	    }
	    /**
	     * Creates a factory function.
	     */
	    static createFactory() {
	        return () => new Chrome55();
	    }
	    get name() {
	        return 'Chrome55';
	    }
	    close() {
	        logger.debug('close()');
	        // Close RTCPeerConnection.
	        if (this._pc) {
	            try {
	                this._pc.close();
	            }
	            catch (error) { }
	        }
	    }
	    async getNativeRtpCapabilities() {
	        logger.debug('getNativeRtpCapabilities()');
	        const pc = new RTCPeerConnection({
	            iceServers: [],
	            iceTransportPolicy: 'all',
	            bundlePolicy: 'max-bundle',
	            rtcpMuxPolicy: 'require',
	            sdpSemantics: 'plan-b'
	        });
	        try {
	            const offer = await pc.createOffer({
	                offerToReceiveAudio: true,
	                offerToReceiveVideo: true
	            });
	            try {
	                pc.close();
	            }
	            catch (error) { }
	            const sdpObject = lib$1.parse(offer.sdp);
	            const nativeRtpCapabilities = commonUtils.extractRtpCapabilities({ sdpObject });
	            return nativeRtpCapabilities;
	        }
	        catch (error) {
	            try {
	                pc.close();
	            }
	            catch (error2) { }
	            throw error;
	        }
	    }
	    async getNativeSctpCapabilities() {
	        logger.debug('getNativeSctpCapabilities()');
	        return {
	            numStreams: SCTP_NUM_STREAMS
	        };
	    }
	    run({ direction, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, extendedRtpCapabilities }) {
	        logger.debug('run()');
	        this._direction = direction;
	        this._remoteSdp = new RemoteSdp_1.RemoteSdp({
	            iceParameters,
	            iceCandidates,
	            dtlsParameters,
	            sctpParameters,
	            planB: true
	        });
	        this._sendingRtpParametersByKind =
	            {
	                audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),
	                video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities)
	            };
	        this._sendingRemoteRtpParametersByKind =
	            {
	                audio: ortc.getSendingRemoteRtpParameters('audio', extendedRtpCapabilities),
	                video: ortc.getSendingRemoteRtpParameters('video', extendedRtpCapabilities)
	            };
	        this._pc = new RTCPeerConnection({
	            iceServers: iceServers || [],
	            iceTransportPolicy: iceTransportPolicy || 'all',
	            bundlePolicy: 'max-bundle',
	            rtcpMuxPolicy: 'require',
	            sdpSemantics: 'plan-b',
	            ...additionalSettings
	        }, proprietaryConstraints);
	        // Handle RTCPeerConnection connection status.
	        this._pc.addEventListener('iceconnectionstatechange', () => {
	            switch (this._pc.iceConnectionState) {
	                case 'checking':
	                    this.emit('@connectionstatechange', 'connecting');
	                    break;
	                case 'connected':
	                case 'completed':
	                    this.emit('@connectionstatechange', 'connected');
	                    break;
	                case 'failed':
	                    this.emit('@connectionstatechange', 'failed');
	                    break;
	                case 'disconnected':
	                    this.emit('@connectionstatechange', 'disconnected');
	                    break;
	                case 'closed':
	                    this.emit('@connectionstatechange', 'closed');
	                    break;
	            }
	        });
	    }
	    async updateIceServers(iceServers) {
	        logger.debug('updateIceServers()');
	        const configuration = this._pc.getConfiguration();
	        configuration.iceServers = iceServers;
	        this._pc.setConfiguration(configuration);
	    }
	    async restartIce(iceParameters) {
	        logger.debug('restartIce()');
	        // Provide the remote SDP handler with new remote ICE parameters.
	        this._remoteSdp.updateIceParameters(iceParameters);
	        if (!this._transportReady)
	            return;
	        if (this._direction === 'send') {
	            const offer = await this._pc.createOffer({ iceRestart: true });
	            logger.debug('restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);
	            await this._pc.setLocalDescription(offer);
	            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);
	            await this._pc.setRemoteDescription(answer);
	        }
	        else {
	            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);
	            await this._pc.setRemoteDescription(offer);
	            const answer = await this._pc.createAnswer();
	            logger.debug('restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);
	            await this._pc.setLocalDescription(answer);
	        }
	    }
	    async getTransportStats() {
	        return this._pc.getStats();
	    }
	    async send({ track, encodings, codecOptions, codec }) {
	        this._assertSendDirection();
	        logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);
	        if (codec) {
	            logger.warn('send() | codec selection is not available in %s handler', this.name);
	        }
	        this._sendStream.addTrack(track);
	        this._pc.addStream(this._sendStream);
	        let offer = await this._pc.createOffer();
	        let localSdpObject = lib$1.parse(offer.sdp);
	        let offerMediaObject;
	        const sendingRtpParameters = utils.clone(this._sendingRtpParametersByKind[track.kind]);
	        sendingRtpParameters.codecs =
	            ortc.reduceCodecs(sendingRtpParameters.codecs);
	        const sendingRemoteRtpParameters = utils.clone(this._sendingRemoteRtpParametersByKind[track.kind]);
	        sendingRemoteRtpParameters.codecs =
	            ortc.reduceCodecs(sendingRemoteRtpParameters.codecs);
	        if (!this._transportReady)
	            await this._setupTransport({ localDtlsRole: 'server', localSdpObject });
	        if (track.kind === 'video' && encodings && encodings.length > 1) {
	            logger.debug('send() | enabling simulcast');
	            localSdpObject = lib$1.parse(offer.sdp);
	            offerMediaObject = localSdpObject.media.find((m) => m.type === 'video');
	            planBUtils.addLegacySimulcast({
	                offerMediaObject,
	                track,
	                numStreams: encodings.length
	            });
	            offer = { type: 'offer', sdp: lib$1.write(localSdpObject) };
	        }
	        logger.debug('send() | calling pc.setLocalDescription() [offer:%o]', offer);
	        await this._pc.setLocalDescription(offer);
	        localSdpObject = lib$1.parse(this._pc.localDescription.sdp);
	        offerMediaObject = localSdpObject.media
	            .find((m) => m.type === track.kind);
	        // Set RTCP CNAME.
	        sendingRtpParameters.rtcp.cname =
	            commonUtils.getCname({ offerMediaObject });
	        // Set RTP encodings.
	        sendingRtpParameters.encodings =
	            planBUtils.getRtpEncodings({ offerMediaObject, track });
	        // Complete encodings with given values.
	        if (encodings) {
	            for (let idx = 0; idx < sendingRtpParameters.encodings.length; ++idx) {
	                if (encodings[idx])
	                    Object.assign(sendingRtpParameters.encodings[idx], encodings[idx]);
	            }
	        }
	        // If VP8 and there is effective simulcast, add scalabilityMode to each
	        // encoding.
	        if (sendingRtpParameters.encodings.length > 1 &&
	            sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp8') {
	            for (const encoding of sendingRtpParameters.encodings) {
	                encoding.scalabilityMode = 'S1T3';
	            }
	        }
	        this._remoteSdp.send({
	            offerMediaObject,
	            offerRtpParameters: sendingRtpParameters,
	            answerRtpParameters: sendingRemoteRtpParameters,
	            codecOptions
	        });
	        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('send() | calling pc.setRemoteDescription() [answer:%o]', answer);
	        await this._pc.setRemoteDescription(answer);
	        const localId = String(this._nextSendLocalId);
	        this._nextSendLocalId++;
	        // Insert into the map.
	        this._mapSendLocalIdTrack.set(localId, track);
	        return {
	            localId: localId,
	            rtpParameters: sendingRtpParameters
	        };
	    }
	    async stopSending(localId) {
	        this._assertSendDirection();
	        logger.debug('stopSending() [localId:%s]', localId);
	        const track = this._mapSendLocalIdTrack.get(localId);
	        if (!track)
	            throw new Error('track not found');
	        this._mapSendLocalIdTrack.delete(localId);
	        this._sendStream.removeTrack(track);
	        this._pc.addStream(this._sendStream);
	        const offer = await this._pc.createOffer();
	        logger.debug('stopSending() | calling pc.setLocalDescription() [offer:%o]', offer);
	        try {
	            await this._pc.setLocalDescription(offer);
	        }
	        catch (error) {
	            // NOTE: If there are no sending tracks, setLocalDescription() will fail with
	            // "Failed to create channels". If so, ignore it.
	            if (this._sendStream.getTracks().length === 0) {
	                logger.warn('stopSending() | ignoring expected error due no sending tracks: %s', error.toString());
	                return;
	            }
	            throw error;
	        }
	        if (this._pc.signalingState === 'stable')
	            return;
	        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('stopSending() | calling pc.setRemoteDescription() [answer:%o]', answer);
	        await this._pc.setRemoteDescription(answer);
	    }
	    async replaceTrack(
	    // eslint-disable-next-line @typescript-eslint/no-unused-vars
	    localId, track) {
	        throw new errors.UnsupportedError('not implemented');
	    }
	    // eslint-disable-next-line @typescript-eslint/no-unused-vars
	    async setMaxSpatialLayer(localId, spatialLayer) {
	        throw new errors.UnsupportedError(' not implemented');
	    }
	    // eslint-disable-next-line @typescript-eslint/no-unused-vars
	    async setRtpEncodingParameters(localId, params) {
	        throw new errors.UnsupportedError('not supported');
	    }
	    // eslint-disable-next-line @typescript-eslint/no-unused-vars
	    async getSenderStats(localId) {
	        throw new errors.UnsupportedError('not implemented');
	    }
	    async sendDataChannel({ ordered, maxPacketLifeTime, maxRetransmits, label, protocol, priority }) {
	        this._assertSendDirection();
	        const options = {
	            negotiated: true,
	            id: this._nextSendSctpStreamId,
	            ordered,
	            maxPacketLifeTime,
	            maxRetransmitTime: maxPacketLifeTime,
	            maxRetransmits,
	            protocol,
	            priority
	        };
	        logger.debug('sendDataChannel() [options:%o]', options);
	        const dataChannel = this._pc.createDataChannel(label, options);
	        // Increase next id.
	        this._nextSendSctpStreamId =
	            ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;
	        // If this is the first DataChannel we need to create the SDP answer with
	        // m=application section.
	        if (!this._hasDataChannelMediaSection) {
	            const offer = await this._pc.createOffer();
	            const localSdpObject = lib$1.parse(offer.sdp);
	            const offerMediaObject = localSdpObject.media
	                .find((m) => m.type === 'application');
	            if (!this._transportReady)
	                await this._setupTransport({ localDtlsRole: 'server', localSdpObject });
	            logger.debug('sendDataChannel() | calling pc.setLocalDescription() [offer:%o]', offer);
	            await this._pc.setLocalDescription(offer);
	            this._remoteSdp.sendSctpAssociation({ offerMediaObject });
	            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);
	            await this._pc.setRemoteDescription(answer);
	            this._hasDataChannelMediaSection = true;
	        }
	        const sctpStreamParameters = {
	            streamId: options.id,
	            ordered: options.ordered,
	            maxPacketLifeTime: options.maxPacketLifeTime,
	            maxRetransmits: options.maxRetransmits
	        };
	        return { dataChannel, sctpStreamParameters };
	    }
	    async receive({ trackId, kind, rtpParameters }) {
	        this._assertRecvDirection();
	        logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);
	        const localId = trackId;
	        const mid = kind;
	        const streamId = rtpParameters.rtcp.cname;
	        this._remoteSdp.receive({
	            mid,
	            kind,
	            offerRtpParameters: rtpParameters,
	            streamId,
	            trackId
	        });
	        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('receive() | calling pc.setRemoteDescription() [offer:%o]', offer);
	        await this._pc.setRemoteDescription(offer);
	        let answer = await this._pc.createAnswer();
	        const localSdpObject = lib$1.parse(answer.sdp);
	        const answerMediaObject = localSdpObject.media
	            .find((m) => String(m.mid) === mid);
	        // May need to modify codec parameters in the answer based on codec
	        // parameters in the offer.
	        commonUtils.applyCodecParameters({
	            offerRtpParameters: rtpParameters,
	            answerMediaObject
	        });
	        answer = { type: 'answer', sdp: lib$1.write(localSdpObject) };
	        if (!this._transportReady)
	            await this._setupTransport({ localDtlsRole: 'client', localSdpObject });
	        logger.debug('receive() | calling pc.setLocalDescription() [answer:%o]', answer);
	        await this._pc.setLocalDescription(answer);
	        const stream = this._pc.getRemoteStreams()
	            .find((s) => s.id === streamId);
	        const track = stream.getTrackById(localId);
	        if (!track)
	            throw new Error('remote track not found');
	        // Insert into the map.
	        this._mapRecvLocalIdInfo.set(localId, { mid, rtpParameters });
	        return { localId, track };
	    }
	    async stopReceiving(localId) {
	        this._assertRecvDirection();
	        logger.debug('stopReceiving() [localId:%s]', localId);
	        const { mid, rtpParameters } = this._mapRecvLocalIdInfo.get(localId) || {};
	        // Remove from the map.
	        this._mapRecvLocalIdInfo.delete(localId);
	        this._remoteSdp.planBStopReceiving({ mid: mid, offerRtpParameters: rtpParameters });
	        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('stopReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);
	        await this._pc.setRemoteDescription(offer);
	        const answer = await this._pc.createAnswer();
	        logger.debug('stopReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);
	        await this._pc.setLocalDescription(answer);
	    }
	    // eslint-disable-next-line @typescript-eslint/no-unused-vars
	    async getReceiverStats(localId) {
	        throw new errors.UnsupportedError('not implemented');
	    }
	    async receiveDataChannel({ sctpStreamParameters, label, protocol }) {
	        this._assertRecvDirection();
	        const { streamId, ordered, maxPacketLifeTime, maxRetransmits } = sctpStreamParameters;
	        const options = {
	            negotiated: true,
	            id: streamId,
	            ordered,
	            maxPacketLifeTime,
	            maxRetransmitTime: maxPacketLifeTime,
	            maxRetransmits,
	            protocol
	        };
	        logger.debug('receiveDataChannel() [options:%o]', options);
	        const dataChannel = this._pc.createDataChannel(label, options);
	        // If this is the first DataChannel we need to create the SDP offer with
	        // m=application section.
	        if (!this._hasDataChannelMediaSection) {
	            this._remoteSdp.receiveSctpAssociation({ oldDataChannelSpec: true });
	            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]', offer);
	            await this._pc.setRemoteDescription(offer);
	            const answer = await this._pc.createAnswer();
	            if (!this._transportReady) {
	                const localSdpObject = lib$1.parse(answer.sdp);
	                await this._setupTransport({ localDtlsRole: 'client', localSdpObject });
	            }
	            logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);
	            await this._pc.setLocalDescription(answer);
	            this._hasDataChannelMediaSection = true;
	        }
	        return { dataChannel };
	    }
	    async _setupTransport({ localDtlsRole, localSdpObject }) {
	        if (!localSdpObject)
	            localSdpObject = lib$1.parse(this._pc.localDescription.sdp);
	        // Get our local DTLS parameters.
	        const dtlsParameters = commonUtils.extractDtlsParameters({ sdpObject: localSdpObject });
	        // Set our DTLS role.
	        dtlsParameters.role = localDtlsRole;
	        // Update the remote DTLS role in the SDP.
	        this._remoteSdp.updateDtlsRole(localDtlsRole === 'client' ? 'server' : 'client');
	        // Need to tell the remote transport about our parameters.
	        await this.safeEmitAsPromise('@connect', { dtlsParameters });
	        this._transportReady = true;
	    }
	    _assertSendDirection() {
	        if (this._direction !== 'send') {
	            throw new Error('method can just be called for handlers with "send" direction');
	        }
	    }
	    _assertRecvDirection() {
	        if (this._direction !== 'recv') {
	            throw new Error('method can just be called for handlers with "recv" direction');
	        }
	    }
	}
	exports.Chrome55 = Chrome55;
	});

	unwrapExports(Chrome55_1);
	var Chrome55_2 = Chrome55_1.Chrome55;

	var Firefox60_1 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });









	const logger = new Logger_1.Logger('Firefox60');
	const SCTP_NUM_STREAMS = { OS: 16, MIS: 2048 };
	class Firefox60 extends HandlerInterface_1.HandlerInterface {
	    constructor() {
	        super();
	        // Map of RTCTransceivers indexed by MID.
	        this._mapMidTransceiver = new Map();
	        // Local stream for sending.
	        this._sendStream = new MediaStream();
	        // Whether a DataChannel m=application section has been created.
	        this._hasDataChannelMediaSection = false;
	        // Sending DataChannel id value counter. Incremented for each new DataChannel.
	        this._nextSendSctpStreamId = 0;
	        // Got transport local and remote parameters.
	        this._transportReady = false;
	    }
	    /**
	     * Creates a factory function.
	     */
	    static createFactory() {
	        return () => new Firefox60();
	    }
	    get name() {
	        return 'Firefox60';
	    }
	    close() {
	        logger.debug('close()');
	        // Close RTCPeerConnection.
	        if (this._pc) {
	            try {
	                this._pc.close();
	            }
	            catch (error) { }
	        }
	    }
	    async getNativeRtpCapabilities() {
	        logger.debug('getNativeRtpCapabilities()');
	        const pc = new RTCPeerConnection({
	            iceServers: [],
	            iceTransportPolicy: 'all',
	            bundlePolicy: 'max-bundle',
	            rtcpMuxPolicy: 'require'
	        });
	        // NOTE: We need to add a real video track to get the RID extension mapping.
	        const canvas = document.createElement('canvas');
	        // NOTE: Otherwise Firefox fails in next line.
	        canvas.getContext('2d');
	        const fakeStream = canvas.captureStream();
	        const fakeVideoTrack = fakeStream.getVideoTracks()[0];
	        try {
	            pc.addTransceiver('audio', { direction: 'sendrecv' });
	            const videoTransceiver = pc.addTransceiver(fakeVideoTrack, { direction: 'sendrecv' });
	            const parameters = videoTransceiver.sender.getParameters();
	            const encodings = [
	                { rid: 'r0', maxBitrate: 100000 },
	                { rid: 'r1', maxBitrate: 500000 }
	            ];
	            parameters.encodings = encodings;
	            await videoTransceiver.sender.setParameters(parameters);
	            const offer = await pc.createOffer();
	            try {
	                canvas.remove();
	            }
	            catch (error) { }
	            try {
	                fakeVideoTrack.stop();
	            }
	            catch (error) { }
	            try {
	                pc.close();
	            }
	            catch (error) { }
	            const sdpObject = lib$1.parse(offer.sdp);
	            const nativeRtpCapabilities = commonUtils.extractRtpCapabilities({ sdpObject });
	            return nativeRtpCapabilities;
	        }
	        catch (error) {
	            try {
	                canvas.remove();
	            }
	            catch (error2) { }
	            try {
	                fakeVideoTrack.stop();
	            }
	            catch (error2) { }
	            try {
	                pc.close();
	            }
	            catch (error2) { }
	            throw error;
	        }
	    }
	    async getNativeSctpCapabilities() {
	        logger.debug('getNativeSctpCapabilities()');
	        return {
	            numStreams: SCTP_NUM_STREAMS
	        };
	    }
	    run({ direction, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, extendedRtpCapabilities }) {
	        logger.debug('run()');
	        this._direction = direction;
	        this._remoteSdp = new RemoteSdp_1.RemoteSdp({
	            iceParameters,
	            iceCandidates,
	            dtlsParameters,
	            sctpParameters
	        });
	        this._sendingRtpParametersByKind =
	            {
	                audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),
	                video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities)
	            };
	        this._sendingRemoteRtpParametersByKind =
	            {
	                audio: ortc.getSendingRemoteRtpParameters('audio', extendedRtpCapabilities),
	                video: ortc.getSendingRemoteRtpParameters('video', extendedRtpCapabilities)
	            };
	        this._pc = new RTCPeerConnection({
	            iceServers: iceServers || [],
	            iceTransportPolicy: iceTransportPolicy || 'all',
	            bundlePolicy: 'max-bundle',
	            rtcpMuxPolicy: 'require',
	            ...additionalSettings
	        }, proprietaryConstraints);
	        // Handle RTCPeerConnection connection status.
	        this._pc.addEventListener('iceconnectionstatechange', () => {
	            switch (this._pc.iceConnectionState) {
	                case 'checking':
	                    this.emit('@connectionstatechange', 'connecting');
	                    break;
	                case 'connected':
	                case 'completed':
	                    this.emit('@connectionstatechange', 'connected');
	                    break;
	                case 'failed':
	                    this.emit('@connectionstatechange', 'failed');
	                    break;
	                case 'disconnected':
	                    this.emit('@connectionstatechange', 'disconnected');
	                    break;
	                case 'closed':
	                    this.emit('@connectionstatechange', 'closed');
	                    break;
	            }
	        });
	    }
	    // eslint-disable-next-line @typescript-eslint/no-unused-vars
	    async updateIceServers(iceServers) {
	        // NOTE: Firefox does not implement pc.setConfiguration().
	        throw new errors.UnsupportedError('not supported');
	    }
	    async restartIce(iceParameters) {
	        logger.debug('restartIce()');
	        // Provide the remote SDP handler with new remote ICE parameters.
	        this._remoteSdp.updateIceParameters(iceParameters);
	        if (!this._transportReady)
	            return;
	        if (this._direction === 'send') {
	            const offer = await this._pc.createOffer({ iceRestart: true });
	            logger.debug('restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);
	            await this._pc.setLocalDescription(offer);
	            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);
	            await this._pc.setRemoteDescription(answer);
	        }
	        else {
	            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);
	            await this._pc.setRemoteDescription(offer);
	            const answer = await this._pc.createAnswer();
	            logger.debug('restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);
	            await this._pc.setLocalDescription(answer);
	        }
	    }
	    async getTransportStats() {
	        return this._pc.getStats();
	    }
	    async send({ track, encodings, codecOptions, codec }) {
	        this._assertSendDirection();
	        logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);
	        let reverseEncodings;
	        if (encodings && encodings.length > 1) {
	            encodings.forEach((encoding, idx) => {
	                encoding.rid = `r${idx}`;
	            });
	            // Clone the encodings and reverse them because Firefox likes them
	            // from high to low.
	            reverseEncodings = utils.clone(encodings).reverse();
	        }
	        const sendingRtpParameters = utils.clone(this._sendingRtpParametersByKind[track.kind]);
	        // This may throw.
	        sendingRtpParameters.codecs =
	            ortc.reduceCodecs(sendingRtpParameters.codecs, codec);
	        const sendingRemoteRtpParameters = utils.clone(this._sendingRemoteRtpParametersByKind[track.kind]);
	        // This may throw.
	        sendingRemoteRtpParameters.codecs =
	            ortc.reduceCodecs(sendingRemoteRtpParameters.codecs, codec);
	        // NOTE: Firefox fails sometimes to properly anticipate the closed media
	        // section that it should use, so don't reuse closed media sections.
	        //   https://github.com/versatica/mediasoup-client/issues/104
	        //
	        // const mediaSectionIdx = this._remoteSdp!.getNextMediaSectionIdx();
	        const transceiver = this._pc.addTransceiver(track, { direction: 'sendonly', streams: [this._sendStream] });
	        // NOTE: This is not spec compliants. Encodings should be given in addTransceiver
	        // second argument, but Firefox does not support it.
	        if (reverseEncodings) {
	            const parameters = transceiver.sender.getParameters();
	            parameters.encodings = reverseEncodings;
	            await transceiver.sender.setParameters(parameters);
	        }
	        const offer = await this._pc.createOffer();
	        let localSdpObject = lib$1.parse(offer.sdp);
	        // In Firefox use DTLS role client even if we are the "offerer" since
	        // Firefox does not respect ICE-Lite.
	        if (!this._transportReady)
	            await this._setupTransport({ localDtlsRole: 'client', localSdpObject });
	        logger.debug('send() | calling pc.setLocalDescription() [offer:%o]', offer);
	        await this._pc.setLocalDescription(offer);
	        // We can now get the transceiver.mid.
	        const localId = transceiver.mid;
	        // Set MID.
	        sendingRtpParameters.mid = localId;
	        localSdpObject = lib$1.parse(this._pc.localDescription.sdp);
	        const offerMediaObject = localSdpObject.media[localSdpObject.media.length - 1];
	        // Set RTCP CNAME.
	        sendingRtpParameters.rtcp.cname =
	            commonUtils.getCname({ offerMediaObject });
	        // Set RTP encodings by parsing the SDP offer if no encodings are given.
	        if (!encodings) {
	            sendingRtpParameters.encodings =
	                unifiedPlanUtils.getRtpEncodings({ offerMediaObject });
	        }
	        // Set RTP encodings by parsing the SDP offer and complete them with given
	        // one if just a single encoding has been given.
	        else if (encodings.length === 1) {
	            const newEncodings = unifiedPlanUtils.getRtpEncodings({ offerMediaObject });
	            Object.assign(newEncodings[0], encodings[0]);
	            sendingRtpParameters.encodings = newEncodings;
	        }
	        // Otherwise if more than 1 encoding are given use them verbatim.
	        else {
	            sendingRtpParameters.encodings = encodings;
	        }
	        // If VP8 or H264 and there is effective simulcast, add scalabilityMode to
	        // each encoding.
	        if (sendingRtpParameters.encodings.length > 1 &&
	            (sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp8' ||
	                sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/h264')) {
	            for (const encoding of sendingRtpParameters.encodings) {
	                encoding.scalabilityMode = 'S1T3';
	            }
	        }
	        this._remoteSdp.send({
	            offerMediaObject,
	            offerRtpParameters: sendingRtpParameters,
	            answerRtpParameters: sendingRemoteRtpParameters,
	            codecOptions,
	            extmapAllowMixed: true
	        });
	        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('send() | calling pc.setRemoteDescription() [answer:%o]', answer);
	        await this._pc.setRemoteDescription(answer);
	        // Store in the map.
	        this._mapMidTransceiver.set(localId, transceiver);
	        return {
	            localId,
	            rtpParameters: sendingRtpParameters,
	            rtpSender: transceiver.sender
	        };
	    }
	    async stopSending(localId) {
	        logger.debug('stopSending() [localId:%s]', localId);
	        const transceiver = this._mapMidTransceiver.get(localId);
	        if (!transceiver)
	            throw new Error('associated transceiver not found');
	        transceiver.sender.replaceTrack(null);
	        this._pc.removeTrack(transceiver.sender);
	        // NOTE: Cannot use closeMediaSection() due to the the note above in send()
	        // method.
	        // this._remoteSdp!.closeMediaSection(transceiver.mid);
	        this._remoteSdp.disableMediaSection(transceiver.mid);
	        const offer = await this._pc.createOffer();
	        logger.debug('stopSending() | calling pc.setLocalDescription() [offer:%o]', offer);
	        await this._pc.setLocalDescription(offer);
	        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('stopSending() | calling pc.setRemoteDescription() [answer:%o]', answer);
	        await this._pc.setRemoteDescription(answer);
	    }
	    async replaceTrack(localId, track) {
	        this._assertSendDirection();
	        if (track) {
	            logger.debug('replaceTrack() [localId:%s, track.id:%s]', localId, track.id);
	        }
	        else {
	            logger.debug('replaceTrack() [localId:%s, no track]', localId);
	        }
	        const transceiver = this._mapMidTransceiver.get(localId);
	        if (!transceiver)
	            throw new Error('associated RTCRtpTransceiver not found');
	        await transceiver.sender.replaceTrack(track);
	    }
	    async setMaxSpatialLayer(localId, spatialLayer) {
	        this._assertSendDirection();
	        logger.debug('setMaxSpatialLayer() [localId:%s, spatialLayer:%s]', localId, spatialLayer);
	        const transceiver = this._mapMidTransceiver.get(localId);
	        if (!transceiver)
	            throw new Error('associated transceiver not found');
	        const parameters = transceiver.sender.getParameters();
	        // NOTE: We require encodings given from low to high, however Firefox
	        // requires them in reverse order, so do magic here.
	        spatialLayer = parameters.encodings.length - 1 - spatialLayer;
	        parameters.encodings.forEach((encoding, idx) => {
	            if (idx >= spatialLayer)
	                encoding.active = true;
	            else
	                encoding.active = false;
	        });
	        await transceiver.sender.setParameters(parameters);
	    }
	    async setRtpEncodingParameters(localId, params) {
	        this._assertSendDirection();
	        logger.debug('setRtpEncodingParameters() [localId:%s, params:%o]', localId, params);
	        const transceiver = this._mapMidTransceiver.get(localId);
	        if (!transceiver)
	            throw new Error('associated RTCRtpTransceiver not found');
	        const parameters = transceiver.sender.getParameters();
	        parameters.encodings.forEach((encoding, idx) => {
	            parameters.encodings[idx] = { ...encoding, ...params };
	        });
	        await transceiver.sender.setParameters(parameters);
	    }
	    async getSenderStats(localId) {
	        this._assertSendDirection();
	        const transceiver = this._mapMidTransceiver.get(localId);
	        if (!transceiver)
	            throw new Error('associated RTCRtpTransceiver not found');
	        return transceiver.sender.getStats();
	    }
	    async sendDataChannel({ ordered, maxPacketLifeTime, maxRetransmits, label, protocol, priority }) {
	        this._assertSendDirection();
	        const options = {
	            negotiated: true,
	            id: this._nextSendSctpStreamId,
	            ordered,
	            maxPacketLifeTime,
	            maxRetransmits,
	            protocol,
	            priority
	        };
	        logger.debug('sendDataChannel() [options:%o]', options);
	        const dataChannel = this._pc.createDataChannel(label, options);
	        // Increase next id.
	        this._nextSendSctpStreamId =
	            ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;
	        // If this is the first DataChannel we need to create the SDP answer with
	        // m=application section.
	        if (!this._hasDataChannelMediaSection) {
	            const offer = await this._pc.createOffer();
	            const localSdpObject = lib$1.parse(offer.sdp);
	            const offerMediaObject = localSdpObject.media
	                .find((m) => m.type === 'application');
	            if (!this._transportReady)
	                await this._setupTransport({ localDtlsRole: 'server', localSdpObject });
	            logger.debug('sendDataChannel() | calling pc.setLocalDescription() [offer:%o]', offer);
	            await this._pc.setLocalDescription(offer);
	            this._remoteSdp.sendSctpAssociation({ offerMediaObject });
	            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);
	            await this._pc.setRemoteDescription(answer);
	            this._hasDataChannelMediaSection = true;
	        }
	        const sctpStreamParameters = {
	            streamId: options.id,
	            ordered: options.ordered,
	            maxPacketLifeTime: options.maxPacketLifeTime,
	            maxRetransmits: options.maxRetransmits
	        };
	        return { dataChannel, sctpStreamParameters };
	    }
	    async receive({ trackId, kind, rtpParameters }) {
	        this._assertRecvDirection();
	        logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);
	        const localId = rtpParameters.mid || String(this._mapMidTransceiver.size);
	        this._remoteSdp.receive({
	            mid: localId,
	            kind,
	            offerRtpParameters: rtpParameters,
	            streamId: rtpParameters.rtcp.cname,
	            trackId
	        });
	        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('receive() | calling pc.setRemoteDescription() [offer:%o]', offer);
	        await this._pc.setRemoteDescription(offer);
	        let answer = await this._pc.createAnswer();
	        const localSdpObject = lib$1.parse(answer.sdp);
	        const answerMediaObject = localSdpObject.media
	            .find((m) => String(m.mid) === localId);
	        // May need to modify codec parameters in the answer based on codec
	        // parameters in the offer.
	        commonUtils.applyCodecParameters({
	            offerRtpParameters: rtpParameters,
	            answerMediaObject
	        });
	        answer = { type: 'answer', sdp: lib$1.write(localSdpObject) };
	        if (!this._transportReady)
	            await this._setupTransport({ localDtlsRole: 'client', localSdpObject });
	        logger.debug('receive() | calling pc.setLocalDescription() [answer:%o]', answer);
	        await this._pc.setLocalDescription(answer);
	        const transceiver = this._pc.getTransceivers()
	            .find((t) => t.mid === localId);
	        if (!transceiver)
	            throw new Error('new RTCRtpTransceiver not found');
	        // Store in the map.
	        this._mapMidTransceiver.set(localId, transceiver);
	        return {
	            localId,
	            track: transceiver.receiver.track,
	            rtpReceiver: transceiver.receiver
	        };
	    }
	    async stopReceiving(localId) {
	        this._assertRecvDirection();
	        logger.debug('stopReceiving() [localId:%s]', localId);
	        const transceiver = this._mapMidTransceiver.get(localId);
	        if (!transceiver)
	            throw new Error('associated RTCRtpTransceiver not found');
	        this._remoteSdp.closeMediaSection(transceiver.mid);
	        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('stopReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);
	        await this._pc.setRemoteDescription(offer);
	        const answer = await this._pc.createAnswer();
	        logger.debug('stopReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);
	        await this._pc.setLocalDescription(answer);
	    }
	    async getReceiverStats(localId) {
	        this._assertRecvDirection();
	        const transceiver = this._mapMidTransceiver.get(localId);
	        if (!transceiver)
	            throw new Error('associated RTCRtpTransceiver not found');
	        return transceiver.receiver.getStats();
	    }
	    async receiveDataChannel({ sctpStreamParameters, label, protocol }) {
	        this._assertRecvDirection();
	        const { streamId, ordered, maxPacketLifeTime, maxRetransmits } = sctpStreamParameters;
	        const options = {
	            negotiated: true,
	            id: streamId,
	            ordered,
	            maxPacketLifeTime,
	            maxRetransmits,
	            protocol
	        };
	        logger.debug('receiveDataChannel() [options:%o]', options);
	        const dataChannel = this._pc.createDataChannel(label, options);
	        // If this is the first DataChannel we need to create the SDP offer with
	        // m=application section.
	        if (!this._hasDataChannelMediaSection) {
	            this._remoteSdp.receiveSctpAssociation();
	            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]', offer);
	            await this._pc.setRemoteDescription(offer);
	            const answer = await this._pc.createAnswer();
	            if (!this._transportReady) {
	                const localSdpObject = lib$1.parse(answer.sdp);
	                await this._setupTransport({ localDtlsRole: 'client', localSdpObject });
	            }
	            logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);
	            await this._pc.setLocalDescription(answer);
	            this._hasDataChannelMediaSection = true;
	        }
	        return { dataChannel };
	    }
	    async _setupTransport({ localDtlsRole, localSdpObject }) {
	        if (!localSdpObject)
	            localSdpObject = lib$1.parse(this._pc.localDescription.sdp);
	        // Get our local DTLS parameters.
	        const dtlsParameters = commonUtils.extractDtlsParameters({ sdpObject: localSdpObject });
	        // Set our DTLS role.
	        dtlsParameters.role = localDtlsRole;
	        // Update the remote DTLS role in the SDP.
	        this._remoteSdp.updateDtlsRole(localDtlsRole === 'client' ? 'server' : 'client');
	        // Need to tell the remote transport about our parameters.
	        await this.safeEmitAsPromise('@connect', { dtlsParameters });
	        this._transportReady = true;
	    }
	    _assertSendDirection() {
	        if (this._direction !== 'send') {
	            throw new Error('method can just be called for handlers with "send" direction');
	        }
	    }
	    _assertRecvDirection() {
	        if (this._direction !== 'recv') {
	            throw new Error('method can just be called for handlers with "recv" direction');
	        }
	    }
	}
	exports.Firefox60 = Firefox60;
	});

	unwrapExports(Firefox60_1);
	var Firefox60_2 = Firefox60_1.Firefox60;

	var Safari12_1 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });








	const logger = new Logger_1.Logger('Safari12');
	const SCTP_NUM_STREAMS = { OS: 1024, MIS: 1024 };
	class Safari12 extends HandlerInterface_1.HandlerInterface {
	    constructor() {
	        super();
	        // Map of RTCTransceivers indexed by MID.
	        this._mapMidTransceiver = new Map();
	        // Local stream for sending.
	        this._sendStream = new MediaStream();
	        // Whether a DataChannel m=application section has been created.
	        this._hasDataChannelMediaSection = false;
	        // Sending DataChannel id value counter. Incremented for each new DataChannel.
	        this._nextSendSctpStreamId = 0;
	        // Got transport local and remote parameters.
	        this._transportReady = false;
	    }
	    /**
	     * Creates a factory function.
	     */
	    static createFactory() {
	        return () => new Safari12();
	    }
	    get name() {
	        return 'Safari12';
	    }
	    close() {
	        logger.debug('close()');
	        // Close RTCPeerConnection.
	        if (this._pc) {
	            try {
	                this._pc.close();
	            }
	            catch (error) { }
	        }
	    }
	    async getNativeRtpCapabilities() {
	        logger.debug('getNativeRtpCapabilities()');
	        const pc = new RTCPeerConnection({
	            iceServers: [],
	            iceTransportPolicy: 'all',
	            bundlePolicy: 'max-bundle',
	            rtcpMuxPolicy: 'require'
	        });
	        try {
	            pc.addTransceiver('audio');
	            pc.addTransceiver('video');
	            const offer = await pc.createOffer();
	            try {
	                pc.close();
	            }
	            catch (error) { }
	            const sdpObject = lib$1.parse(offer.sdp);
	            const nativeRtpCapabilities = commonUtils.extractRtpCapabilities({ sdpObject });
	            return nativeRtpCapabilities;
	        }
	        catch (error) {
	            try {
	                pc.close();
	            }
	            catch (error2) { }
	            throw error;
	        }
	    }
	    async getNativeSctpCapabilities() {
	        logger.debug('getNativeSctpCapabilities()');
	        return {
	            numStreams: SCTP_NUM_STREAMS
	        };
	    }
	    run({ direction, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, extendedRtpCapabilities }) {
	        logger.debug('run()');
	        this._direction = direction;
	        this._remoteSdp = new RemoteSdp_1.RemoteSdp({
	            iceParameters,
	            iceCandidates,
	            dtlsParameters,
	            sctpParameters
	        });
	        this._sendingRtpParametersByKind =
	            {
	                audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),
	                video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities)
	            };
	        this._sendingRemoteRtpParametersByKind =
	            {
	                audio: ortc.getSendingRemoteRtpParameters('audio', extendedRtpCapabilities),
	                video: ortc.getSendingRemoteRtpParameters('video', extendedRtpCapabilities)
	            };
	        this._pc = new RTCPeerConnection({
	            iceServers: iceServers || [],
	            iceTransportPolicy: iceTransportPolicy || 'all',
	            bundlePolicy: 'max-bundle',
	            rtcpMuxPolicy: 'require',
	            ...additionalSettings
	        }, proprietaryConstraints);
	        // Handle RTCPeerConnection connection status.
	        this._pc.addEventListener('iceconnectionstatechange', () => {
	            switch (this._pc.iceConnectionState) {
	                case 'checking':
	                    this.emit('@connectionstatechange', 'connecting');
	                    break;
	                case 'connected':
	                case 'completed':
	                    this.emit('@connectionstatechange', 'connected');
	                    break;
	                case 'failed':
	                    this.emit('@connectionstatechange', 'failed');
	                    break;
	                case 'disconnected':
	                    this.emit('@connectionstatechange', 'disconnected');
	                    break;
	                case 'closed':
	                    this.emit('@connectionstatechange', 'closed');
	                    break;
	            }
	        });
	    }
	    async updateIceServers(iceServers) {
	        logger.debug('updateIceServers()');
	        const configuration = this._pc.getConfiguration();
	        configuration.iceServers = iceServers;
	        this._pc.setConfiguration(configuration);
	    }
	    async restartIce(iceParameters) {
	        logger.debug('restartIce()');
	        // Provide the remote SDP handler with new remote ICE parameters.
	        this._remoteSdp.updateIceParameters(iceParameters);
	        if (!this._transportReady)
	            return;
	        if (this._direction === 'send') {
	            const offer = await this._pc.createOffer({ iceRestart: true });
	            logger.debug('restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);
	            await this._pc.setLocalDescription(offer);
	            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);
	            await this._pc.setRemoteDescription(answer);
	        }
	        else {
	            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);
	            await this._pc.setRemoteDescription(offer);
	            const answer = await this._pc.createAnswer();
	            logger.debug('restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);
	            await this._pc.setLocalDescription(answer);
	        }
	    }
	    async getTransportStats() {
	        return this._pc.getStats();
	    }
	    async send({ track, encodings, codecOptions, codec }) {
	        this._assertSendDirection();
	        logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);
	        const sendingRtpParameters = utils.clone(this._sendingRtpParametersByKind[track.kind]);
	        // This may throw.
	        sendingRtpParameters.codecs =
	            ortc.reduceCodecs(sendingRtpParameters.codecs, codec);
	        const sendingRemoteRtpParameters = utils.clone(this._sendingRemoteRtpParametersByKind[track.kind]);
	        // This may throw.
	        sendingRemoteRtpParameters.codecs =
	            ortc.reduceCodecs(sendingRemoteRtpParameters.codecs, codec);
	        const mediaSectionIdx = this._remoteSdp.getNextMediaSectionIdx();
	        const transceiver = this._pc.addTransceiver(track, { direction: 'sendonly', streams: [this._sendStream] });
	        let offer = await this._pc.createOffer();
	        let localSdpObject = lib$1.parse(offer.sdp);
	        let offerMediaObject;
	        if (!this._transportReady)
	            await this._setupTransport({ localDtlsRole: 'server', localSdpObject });
	        if (encodings && encodings.length > 1) {
	            logger.debug('send() | enabling legacy simulcast');
	            localSdpObject = lib$1.parse(offer.sdp);
	            offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];
	            unifiedPlanUtils.addLegacySimulcast({
	                offerMediaObject,
	                numStreams: encodings.length
	            });
	            offer = { type: 'offer', sdp: lib$1.write(localSdpObject) };
	        }
	        logger.debug('send() | calling pc.setLocalDescription() [offer:%o]', offer);
	        await this._pc.setLocalDescription(offer);
	        // We can now get the transceiver.mid.
	        const localId = transceiver.mid;
	        // Set MID.
	        sendingRtpParameters.mid = localId;
	        localSdpObject = lib$1.parse(this._pc.localDescription.sdp);
	        offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];
	        // Set RTCP CNAME.
	        sendingRtpParameters.rtcp.cname =
	            commonUtils.getCname({ offerMediaObject });
	        // Set RTP encodings.
	        sendingRtpParameters.encodings =
	            unifiedPlanUtils.getRtpEncodings({ offerMediaObject });
	        // Complete encodings with given values.
	        if (encodings) {
	            for (let idx = 0; idx < sendingRtpParameters.encodings.length; ++idx) {
	                if (encodings[idx])
	                    Object.assign(sendingRtpParameters.encodings[idx], encodings[idx]);
	            }
	        }
	        // If VP8 or H264 and there is effective simulcast, add scalabilityMode to
	        // each encoding.
	        if (sendingRtpParameters.encodings.length > 1 &&
	            (sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp8' ||
	                sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/h264')) {
	            for (const encoding of sendingRtpParameters.encodings) {
	                encoding.scalabilityMode = 'S1T3';
	            }
	        }
	        this._remoteSdp.send({
	            offerMediaObject,
	            reuseMid: mediaSectionIdx.reuseMid,
	            offerRtpParameters: sendingRtpParameters,
	            answerRtpParameters: sendingRemoteRtpParameters,
	            codecOptions
	        });
	        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('send() | calling pc.setRemoteDescription() [answer:%o]', answer);
	        await this._pc.setRemoteDescription(answer);
	        // Store in the map.
	        this._mapMidTransceiver.set(localId, transceiver);
	        return {
	            localId,
	            rtpParameters: sendingRtpParameters,
	            rtpSender: transceiver.sender
	        };
	    }
	    async stopSending(localId) {
	        this._assertSendDirection();
	        logger.debug('stopSending() [localId:%s]', localId);
	        const transceiver = this._mapMidTransceiver.get(localId);
	        if (!transceiver)
	            throw new Error('associated RTCRtpTransceiver not found');
	        transceiver.sender.replaceTrack(null);
	        this._pc.removeTrack(transceiver.sender);
	        this._remoteSdp.closeMediaSection(transceiver.mid);
	        const offer = await this._pc.createOffer();
	        logger.debug('stopSending() | calling pc.setLocalDescription() [offer:%o]', offer);
	        await this._pc.setLocalDescription(offer);
	        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('stopSending() | calling pc.setRemoteDescription() [answer:%o]', answer);
	        await this._pc.setRemoteDescription(answer);
	    }
	    async replaceTrack(localId, track) {
	        this._assertSendDirection();
	        if (track) {
	            logger.debug('replaceTrack() [localId:%s, track.id:%s]', localId, track.id);
	        }
	        else {
	            logger.debug('replaceTrack() [localId:%s, no track]', localId);
	        }
	        const transceiver = this._mapMidTransceiver.get(localId);
	        if (!transceiver)
	            throw new Error('associated RTCRtpTransceiver not found');
	        await transceiver.sender.replaceTrack(track);
	    }
	    async setMaxSpatialLayer(localId, spatialLayer) {
	        this._assertSendDirection();
	        logger.debug('setMaxSpatialLayer() [localId:%s, spatialLayer:%s]', localId, spatialLayer);
	        const transceiver = this._mapMidTransceiver.get(localId);
	        if (!transceiver)
	            throw new Error('associated RTCRtpTransceiver not found');
	        const parameters = transceiver.sender.getParameters();
	        parameters.encodings.forEach((encoding, idx) => {
	            if (idx <= spatialLayer)
	                encoding.active = true;
	            else
	                encoding.active = false;
	        });
	        await transceiver.sender.setParameters(parameters);
	    }
	    async setRtpEncodingParameters(localId, params) {
	        this._assertSendDirection();
	        logger.debug('setRtpEncodingParameters() [localId:%s, params:%o]', localId, params);
	        const transceiver = this._mapMidTransceiver.get(localId);
	        if (!transceiver)
	            throw new Error('associated RTCRtpTransceiver not found');
	        const parameters = transceiver.sender.getParameters();
	        parameters.encodings.forEach((encoding, idx) => {
	            parameters.encodings[idx] = { ...encoding, ...params };
	        });
	        await transceiver.sender.setParameters(parameters);
	    }
	    async getSenderStats(localId) {
	        this._assertSendDirection();
	        const transceiver = this._mapMidTransceiver.get(localId);
	        if (!transceiver)
	            throw new Error('associated RTCRtpTransceiver not found');
	        return transceiver.sender.getStats();
	    }
	    async sendDataChannel({ ordered, maxPacketLifeTime, maxRetransmits, label, protocol, priority }) {
	        this._assertSendDirection();
	        const options = {
	            negotiated: true,
	            id: this._nextSendSctpStreamId,
	            ordered,
	            maxPacketLifeTime,
	            maxRetransmits,
	            protocol,
	            priority
	        };
	        logger.debug('sendDataChannel() [options:%o]', options);
	        const dataChannel = this._pc.createDataChannel(label, options);
	        // Increase next id.
	        this._nextSendSctpStreamId =
	            ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;
	        // If this is the first DataChannel we need to create the SDP answer with
	        // m=application section.
	        if (!this._hasDataChannelMediaSection) {
	            const offer = await this._pc.createOffer();
	            const localSdpObject = lib$1.parse(offer.sdp);
	            const offerMediaObject = localSdpObject.media
	                .find((m) => m.type === 'application');
	            if (!this._transportReady)
	                await this._setupTransport({ localDtlsRole: 'server', localSdpObject });
	            logger.debug('sendDataChannel() | calling pc.setLocalDescription() [offer:%o]', offer);
	            await this._pc.setLocalDescription(offer);
	            this._remoteSdp.sendSctpAssociation({ offerMediaObject });
	            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);
	            await this._pc.setRemoteDescription(answer);
	            this._hasDataChannelMediaSection = true;
	        }
	        const sctpStreamParameters = {
	            streamId: options.id,
	            ordered: options.ordered,
	            maxPacketLifeTime: options.maxPacketLifeTime,
	            maxRetransmits: options.maxRetransmits
	        };
	        return { dataChannel, sctpStreamParameters };
	    }
	    async receive({ trackId, kind, rtpParameters }) {
	        this._assertRecvDirection();
	        logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);
	        const localId = rtpParameters.mid || String(this._mapMidTransceiver.size);
	        this._remoteSdp.receive({
	            mid: localId,
	            kind,
	            offerRtpParameters: rtpParameters,
	            streamId: rtpParameters.rtcp.cname,
	            trackId
	        });
	        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('receive() | calling pc.setRemoteDescription() [offer:%o]', offer);
	        await this._pc.setRemoteDescription(offer);
	        let answer = await this._pc.createAnswer();
	        const localSdpObject = lib$1.parse(answer.sdp);
	        const answerMediaObject = localSdpObject.media
	            .find((m) => String(m.mid) === localId);
	        // May need to modify codec parameters in the answer based on codec
	        // parameters in the offer.
	        commonUtils.applyCodecParameters({
	            offerRtpParameters: rtpParameters,
	            answerMediaObject
	        });
	        answer = { type: 'answer', sdp: lib$1.write(localSdpObject) };
	        if (!this._transportReady)
	            await this._setupTransport({ localDtlsRole: 'client', localSdpObject });
	        logger.debug('receive() | calling pc.setLocalDescription() [answer:%o]', answer);
	        await this._pc.setLocalDescription(answer);
	        const transceiver = this._pc.getTransceivers()
	            .find((t) => t.mid === localId);
	        if (!transceiver)
	            throw new Error('new RTCRtpTransceiver not found');
	        // Store in the map.
	        this._mapMidTransceiver.set(localId, transceiver);
	        return {
	            localId,
	            track: transceiver.receiver.track,
	            rtpReceiver: transceiver.receiver
	        };
	    }
	    async stopReceiving(localId) {
	        this._assertRecvDirection();
	        logger.debug('stopReceiving() [localId:%s]', localId);
	        const transceiver = this._mapMidTransceiver.get(localId);
	        if (!transceiver)
	            throw new Error('associated RTCRtpTransceiver not found');
	        this._remoteSdp.closeMediaSection(transceiver.mid);
	        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('stopReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);
	        await this._pc.setRemoteDescription(offer);
	        const answer = await this._pc.createAnswer();
	        logger.debug('stopReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);
	        await this._pc.setLocalDescription(answer);
	    }
	    async getReceiverStats(localId) {
	        this._assertRecvDirection();
	        const transceiver = this._mapMidTransceiver.get(localId);
	        if (!transceiver)
	            throw new Error('associated RTCRtpTransceiver not found');
	        return transceiver.receiver.getStats();
	    }
	    async receiveDataChannel({ sctpStreamParameters, label, protocol }) {
	        this._assertRecvDirection();
	        const { streamId, ordered, maxPacketLifeTime, maxRetransmits } = sctpStreamParameters;
	        const options = {
	            negotiated: true,
	            id: streamId,
	            ordered,
	            maxPacketLifeTime,
	            maxRetransmits,
	            protocol
	        };
	        logger.debug('receiveDataChannel() [options:%o]', options);
	        const dataChannel = this._pc.createDataChannel(label, options);
	        // If this is the first DataChannel we need to create the SDP offer with
	        // m=application section.
	        if (!this._hasDataChannelMediaSection) {
	            this._remoteSdp.receiveSctpAssociation();
	            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]', offer);
	            await this._pc.setRemoteDescription(offer);
	            const answer = await this._pc.createAnswer();
	            if (!this._transportReady) {
	                const localSdpObject = lib$1.parse(answer.sdp);
	                await this._setupTransport({ localDtlsRole: 'client', localSdpObject });
	            }
	            logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);
	            await this._pc.setLocalDescription(answer);
	            this._hasDataChannelMediaSection = true;
	        }
	        return { dataChannel };
	    }
	    async _setupTransport({ localDtlsRole, localSdpObject }) {
	        if (!localSdpObject)
	            localSdpObject = lib$1.parse(this._pc.localDescription.sdp);
	        // Get our local DTLS parameters.
	        const dtlsParameters = commonUtils.extractDtlsParameters({ sdpObject: localSdpObject });
	        // Set our DTLS role.
	        dtlsParameters.role = localDtlsRole;
	        // Update the remote DTLS role in the SDP.
	        this._remoteSdp.updateDtlsRole(localDtlsRole === 'client' ? 'server' : 'client');
	        // Need to tell the remote transport about our parameters.
	        await this.safeEmitAsPromise('@connect', { dtlsParameters });
	        this._transportReady = true;
	    }
	    _assertSendDirection() {
	        if (this._direction !== 'send') {
	            throw new Error('method can just be called for handlers with "send" direction');
	        }
	    }
	    _assertRecvDirection() {
	        if (this._direction !== 'recv') {
	            throw new Error('method can just be called for handlers with "recv" direction');
	        }
	    }
	}
	exports.Safari12 = Safari12;
	});

	unwrapExports(Safari12_1);
	var Safari12_2 = Safari12_1.Safari12;

	var Safari11_1 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });








	const logger = new Logger_1.Logger('Safari11');
	const SCTP_NUM_STREAMS = { OS: 1024, MIS: 1024 };
	class Safari11 extends HandlerInterface_1.HandlerInterface {
	    constructor() {
	        super();
	        // Local stream for sending.
	        this._sendStream = new MediaStream();
	        // Map of RTCRtpSender indexed by localId.
	        this._mapSendLocalIdRtpSender = new Map();
	        // Next sending localId.
	        this._nextSendLocalId = 0;
	        // Map of MID, RTP parameters and RTCRtpReceiver indexed by local id.
	        // Value is an Object with mid, rtpParameters and rtpReceiver.
	        this._mapRecvLocalIdInfo = new Map();
	        // Whether a DataChannel m=application section has been created.
	        this._hasDataChannelMediaSection = false;
	        // Sending DataChannel id value counter. Incremented for each new DataChannel.
	        this._nextSendSctpStreamId = 0;
	        // Got transport local and remote parameters.
	        this._transportReady = false;
	    }
	    /**
	     * Creates a factory function.
	     */
	    static createFactory() {
	        return () => new Safari11();
	    }
	    get name() {
	        return 'Safari11';
	    }
	    close() {
	        logger.debug('close()');
	        // Close RTCPeerConnection.
	        if (this._pc) {
	            try {
	                this._pc.close();
	            }
	            catch (error) { }
	        }
	    }
	    async getNativeRtpCapabilities() {
	        logger.debug('getNativeRtpCapabilities()');
	        const pc = new RTCPeerConnection({
	            iceServers: [],
	            iceTransportPolicy: 'all',
	            bundlePolicy: 'max-bundle',
	            rtcpMuxPolicy: 'require',
	            sdpSemantics: 'plan-b'
	        });
	        try {
	            const offer = await pc.createOffer({
	                offerToReceiveAudio: true,
	                offerToReceiveVideo: true
	            });
	            try {
	                pc.close();
	            }
	            catch (error) { }
	            const sdpObject = lib$1.parse(offer.sdp);
	            const nativeRtpCapabilities = commonUtils.extractRtpCapabilities({ sdpObject });
	            return nativeRtpCapabilities;
	        }
	        catch (error) {
	            try {
	                pc.close();
	            }
	            catch (error2) { }
	            throw error;
	        }
	    }
	    async getNativeSctpCapabilities() {
	        logger.debug('getNativeSctpCapabilities()');
	        return {
	            numStreams: SCTP_NUM_STREAMS
	        };
	    }
	    run({ direction, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, extendedRtpCapabilities }) {
	        logger.debug('run()');
	        this._direction = direction;
	        this._remoteSdp = new RemoteSdp_1.RemoteSdp({
	            iceParameters,
	            iceCandidates,
	            dtlsParameters,
	            sctpParameters,
	            planB: true
	        });
	        this._sendingRtpParametersByKind =
	            {
	                audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),
	                video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities)
	            };
	        this._sendingRemoteRtpParametersByKind =
	            {
	                audio: ortc.getSendingRemoteRtpParameters('audio', extendedRtpCapabilities),
	                video: ortc.getSendingRemoteRtpParameters('video', extendedRtpCapabilities)
	            };
	        this._pc = new RTCPeerConnection({
	            iceServers: iceServers || [],
	            iceTransportPolicy: iceTransportPolicy || 'all',
	            bundlePolicy: 'max-bundle',
	            rtcpMuxPolicy: 'require',
	            ...additionalSettings
	        }, proprietaryConstraints);
	        // Handle RTCPeerConnection connection status.
	        this._pc.addEventListener('iceconnectionstatechange', () => {
	            switch (this._pc.iceConnectionState) {
	                case 'checking':
	                    this.emit('@connectionstatechange', 'connecting');
	                    break;
	                case 'connected':
	                case 'completed':
	                    this.emit('@connectionstatechange', 'connected');
	                    break;
	                case 'failed':
	                    this.emit('@connectionstatechange', 'failed');
	                    break;
	                case 'disconnected':
	                    this.emit('@connectionstatechange', 'disconnected');
	                    break;
	                case 'closed':
	                    this.emit('@connectionstatechange', 'closed');
	                    break;
	            }
	        });
	    }
	    async updateIceServers(iceServers) {
	        logger.debug('updateIceServers()');
	        const configuration = this._pc.getConfiguration();
	        configuration.iceServers = iceServers;
	        this._pc.setConfiguration(configuration);
	    }
	    async restartIce(iceParameters) {
	        logger.debug('restartIce()');
	        // Provide the remote SDP handler with new remote ICE parameters.
	        this._remoteSdp.updateIceParameters(iceParameters);
	        if (!this._transportReady)
	            return;
	        if (this._direction === 'send') {
	            const offer = await this._pc.createOffer({ iceRestart: true });
	            logger.debug('restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);
	            await this._pc.setLocalDescription(offer);
	            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);
	            await this._pc.setRemoteDescription(answer);
	        }
	        else {
	            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);
	            await this._pc.setRemoteDescription(offer);
	            const answer = await this._pc.createAnswer();
	            logger.debug('restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);
	            await this._pc.setLocalDescription(answer);
	        }
	    }
	    async getTransportStats() {
	        return this._pc.getStats();
	    }
	    async send({ track, encodings, codecOptions, codec }) {
	        this._assertSendDirection();
	        logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);
	        if (codec) {
	            logger.warn('send() | codec selection is not available in %s handler', this.name);
	        }
	        this._sendStream.addTrack(track);
	        this._pc.addTrack(track, this._sendStream);
	        let offer = await this._pc.createOffer();
	        let localSdpObject = lib$1.parse(offer.sdp);
	        let offerMediaObject;
	        const sendingRtpParameters = utils.clone(this._sendingRtpParametersByKind[track.kind]);
	        sendingRtpParameters.codecs =
	            ortc.reduceCodecs(sendingRtpParameters.codecs);
	        const sendingRemoteRtpParameters = utils.clone(this._sendingRemoteRtpParametersByKind[track.kind]);
	        sendingRemoteRtpParameters.codecs =
	            ortc.reduceCodecs(sendingRemoteRtpParameters.codecs);
	        if (!this._transportReady)
	            await this._setupTransport({ localDtlsRole: 'server', localSdpObject });
	        if (track.kind === 'video' && encodings && encodings.length > 1) {
	            logger.debug('send() | enabling simulcast');
	            localSdpObject = lib$1.parse(offer.sdp);
	            offerMediaObject = localSdpObject.media.find((m) => m.type === 'video');
	            planBUtils.addLegacySimulcast({
	                offerMediaObject,
	                track,
	                numStreams: encodings.length
	            });
	            offer = { type: 'offer', sdp: lib$1.write(localSdpObject) };
	        }
	        logger.debug('send() | calling pc.setLocalDescription() [offer:%o]', offer);
	        await this._pc.setLocalDescription(offer);
	        localSdpObject = lib$1.parse(this._pc.localDescription.sdp);
	        offerMediaObject = localSdpObject.media
	            .find((m) => m.type === track.kind);
	        // Set RTCP CNAME.
	        sendingRtpParameters.rtcp.cname =
	            commonUtils.getCname({ offerMediaObject });
	        // Set RTP encodings.
	        sendingRtpParameters.encodings =
	            planBUtils.getRtpEncodings({ offerMediaObject, track });
	        // Complete encodings with given values.
	        if (encodings) {
	            for (let idx = 0; idx < sendingRtpParameters.encodings.length; ++idx) {
	                if (encodings[idx])
	                    Object.assign(sendingRtpParameters.encodings[idx], encodings[idx]);
	            }
	        }
	        // If VP8 and there is effective simulcast, add scalabilityMode to each
	        // encoding.
	        if (sendingRtpParameters.encodings.length > 1 &&
	            sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp8') {
	            for (const encoding of sendingRtpParameters.encodings) {
	                encoding.scalabilityMode = 'S1T3';
	            }
	        }
	        this._remoteSdp.send({
	            offerMediaObject,
	            offerRtpParameters: sendingRtpParameters,
	            answerRtpParameters: sendingRemoteRtpParameters,
	            codecOptions
	        });
	        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('send() | calling pc.setRemoteDescription() [answer:%o]', answer);
	        await this._pc.setRemoteDescription(answer);
	        const localId = String(this._nextSendLocalId);
	        this._nextSendLocalId++;
	        const rtpSender = this._pc.getSenders()
	            .find((s) => s.track === track);
	        // Insert into the map.
	        this._mapSendLocalIdRtpSender.set(localId, rtpSender);
	        return {
	            localId: localId,
	            rtpParameters: sendingRtpParameters,
	            rtpSender
	        };
	    }
	    async stopSending(localId) {
	        this._assertSendDirection();
	        const rtpSender = this._mapSendLocalIdRtpSender.get(localId);
	        if (!rtpSender)
	            throw new Error('associated RTCRtpSender not found');
	        if (rtpSender.track)
	            this._sendStream.removeTrack(rtpSender.track);
	        this._mapSendLocalIdRtpSender.delete(localId);
	        const offer = await this._pc.createOffer();
	        logger.debug('stopSending() | calling pc.setLocalDescription() [offer:%o]', offer);
	        try {
	            await this._pc.setLocalDescription(offer);
	        }
	        catch (error) {
	            // NOTE: If there are no sending tracks, setLocalDescription() will fail with
	            // "Failed to create channels". If so, ignore it.
	            if (this._sendStream.getTracks().length === 0) {
	                logger.warn('stopSending() | ignoring expected error due no sending tracks: %s', error.toString());
	                return;
	            }
	            throw error;
	        }
	        if (this._pc.signalingState === 'stable')
	            return;
	        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('stopSending() | calling pc.setRemoteDescription() [answer:%o]', answer);
	        await this._pc.setRemoteDescription(answer);
	    }
	    async replaceTrack(localId, track) {
	        this._assertSendDirection();
	        if (track) {
	            logger.debug('replaceTrack() [localId:%s, track.id:%s]', localId, track.id);
	        }
	        else {
	            logger.debug('replaceTrack() [localId:%s, no track]', localId);
	        }
	        const rtpSender = this._mapSendLocalIdRtpSender.get(localId);
	        if (!rtpSender)
	            throw new Error('associated RTCRtpSender not found');
	        const oldTrack = rtpSender.track;
	        await rtpSender.replaceTrack(track);
	        // Remove the old track from the local stream.
	        if (oldTrack)
	            this._sendStream.removeTrack(oldTrack);
	        // Add the new track to the local stream.
	        if (track)
	            this._sendStream.addTrack(track);
	    }
	    async setMaxSpatialLayer(localId, spatialLayer) {
	        this._assertSendDirection();
	        logger.debug('setMaxSpatialLayer() [localId:%s, spatialLayer:%s]', localId, spatialLayer);
	        const rtpSender = this._mapSendLocalIdRtpSender.get(localId);
	        if (!rtpSender)
	            throw new Error('associated RTCRtpSender not found');
	        const parameters = rtpSender.getParameters();
	        parameters.encodings.forEach((encoding, idx) => {
	            if (idx <= spatialLayer)
	                encoding.active = true;
	            else
	                encoding.active = false;
	        });
	        await rtpSender.setParameters(parameters);
	    }
	    async setRtpEncodingParameters(localId, params) {
	        this._assertSendDirection();
	        logger.debug('setRtpEncodingParameters() [localId:%s, params:%o]', localId, params);
	        const rtpSender = this._mapSendLocalIdRtpSender.get(localId);
	        if (!rtpSender)
	            throw new Error('associated RTCRtpSender not found');
	        const parameters = rtpSender.getParameters();
	        parameters.encodings.forEach((encoding, idx) => {
	            parameters.encodings[idx] = { ...encoding, ...params };
	        });
	        await rtpSender.setParameters(parameters);
	    }
	    async getSenderStats(localId) {
	        this._assertSendDirection();
	        const rtpSender = this._mapSendLocalIdRtpSender.get(localId);
	        if (!rtpSender)
	            throw new Error('associated RTCRtpSender not found');
	        return rtpSender.getStats();
	    }
	    async sendDataChannel({ ordered, maxPacketLifeTime, maxRetransmits, label, protocol, priority }) {
	        this._assertSendDirection();
	        const options = {
	            negotiated: true,
	            id: this._nextSendSctpStreamId,
	            ordered,
	            maxPacketLifeTime,
	            maxRetransmits,
	            protocol,
	            priority
	        };
	        logger.debug('sendDataChannel() [options:%o]', options);
	        const dataChannel = this._pc.createDataChannel(label, options);
	        // Increase next id.
	        this._nextSendSctpStreamId =
	            ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;
	        // If this is the first DataChannel we need to create the SDP answer with
	        // m=application section.
	        if (!this._hasDataChannelMediaSection) {
	            const offer = await this._pc.createOffer();
	            const localSdpObject = lib$1.parse(offer.sdp);
	            const offerMediaObject = localSdpObject.media
	                .find((m) => m.type === 'application');
	            if (!this._transportReady)
	                await this._setupTransport({ localDtlsRole: 'server', localSdpObject });
	            logger.debug('sendDataChannel() | calling pc.setLocalDescription() [offer:%o]', offer);
	            await this._pc.setLocalDescription(offer);
	            this._remoteSdp.sendSctpAssociation({ offerMediaObject });
	            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);
	            await this._pc.setRemoteDescription(answer);
	            this._hasDataChannelMediaSection = true;
	        }
	        const sctpStreamParameters = {
	            streamId: options.id,
	            ordered: options.ordered,
	            maxPacketLifeTime: options.maxPacketLifeTime,
	            maxRetransmits: options.maxRetransmits
	        };
	        return { dataChannel, sctpStreamParameters };
	    }
	    async receive({ trackId, kind, rtpParameters }) {
	        this._assertRecvDirection();
	        logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);
	        const localId = trackId;
	        const mid = kind;
	        this._remoteSdp.receive({
	            mid,
	            kind,
	            offerRtpParameters: rtpParameters,
	            streamId: rtpParameters.rtcp.cname,
	            trackId
	        });
	        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('receive() | calling pc.setRemoteDescription() [offer:%o]', offer);
	        await this._pc.setRemoteDescription(offer);
	        let answer = await this._pc.createAnswer();
	        const localSdpObject = lib$1.parse(answer.sdp);
	        const answerMediaObject = localSdpObject.media
	            .find((m) => String(m.mid) === mid);
	        // May need to modify codec parameters in the answer based on codec
	        // parameters in the offer.
	        commonUtils.applyCodecParameters({
	            offerRtpParameters: rtpParameters,
	            answerMediaObject
	        });
	        answer = { type: 'answer', sdp: lib$1.write(localSdpObject) };
	        if (!this._transportReady)
	            await this._setupTransport({ localDtlsRole: 'client', localSdpObject });
	        logger.debug('receive() | calling pc.setLocalDescription() [answer:%o]', answer);
	        await this._pc.setLocalDescription(answer);
	        const rtpReceiver = this._pc.getReceivers()
	            .find((r) => r.track && r.track.id === localId);
	        if (!rtpReceiver)
	            throw new Error('new RTCRtpReceiver not');
	        // Insert into the map.
	        this._mapRecvLocalIdInfo.set(localId, { mid, rtpParameters, rtpReceiver });
	        return {
	            localId,
	            track: rtpReceiver.track,
	            rtpReceiver
	        };
	    }
	    async stopReceiving(localId) {
	        this._assertRecvDirection();
	        logger.debug('stopReceiving() [localId:%s]', localId);
	        const { mid, rtpParameters } = this._mapRecvLocalIdInfo.get(localId) || {};
	        // Remove from the map.
	        this._mapRecvLocalIdInfo.delete(localId);
	        this._remoteSdp.planBStopReceiving({ mid: mid, offerRtpParameters: rtpParameters });
	        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('stopReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);
	        await this._pc.setRemoteDescription(offer);
	        const answer = await this._pc.createAnswer();
	        logger.debug('stopReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);
	        await this._pc.setLocalDescription(answer);
	    }
	    async getReceiverStats(localId) {
	        this._assertRecvDirection();
	        const { rtpReceiver } = this._mapRecvLocalIdInfo.get(localId) || {};
	        if (!rtpReceiver)
	            throw new Error('associated RTCRtpReceiver not found');
	        return rtpReceiver.getStats();
	    }
	    async receiveDataChannel({ sctpStreamParameters, label, protocol }) {
	        this._assertRecvDirection();
	        const { streamId, ordered, maxPacketLifeTime, maxRetransmits } = sctpStreamParameters;
	        const options = {
	            negotiated: true,
	            id: streamId,
	            ordered,
	            maxPacketLifeTime,
	            maxRetransmits,
	            protocol
	        };
	        logger.debug('receiveDataChannel() [options:%o]', options);
	        const dataChannel = this._pc.createDataChannel(label, options);
	        // If this is the first DataChannel we need to create the SDP offer with
	        // m=application section.
	        if (!this._hasDataChannelMediaSection) {
	            this._remoteSdp.receiveSctpAssociation({ oldDataChannelSpec: true });
	            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]', offer);
	            await this._pc.setRemoteDescription(offer);
	            const answer = await this._pc.createAnswer();
	            if (!this._transportReady) {
	                const localSdpObject = lib$1.parse(answer.sdp);
	                await this._setupTransport({ localDtlsRole: 'client', localSdpObject });
	            }
	            logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);
	            await this._pc.setLocalDescription(answer);
	            this._hasDataChannelMediaSection = true;
	        }
	        return { dataChannel };
	    }
	    async _setupTransport({ localDtlsRole, localSdpObject }) {
	        if (!localSdpObject)
	            localSdpObject = lib$1.parse(this._pc.localDescription.sdp);
	        // Get our local DTLS parameters.
	        const dtlsParameters = commonUtils.extractDtlsParameters({ sdpObject: localSdpObject });
	        // Set our DTLS role.
	        dtlsParameters.role = localDtlsRole;
	        // Update the remote DTLS role in the SDP.
	        this._remoteSdp.updateDtlsRole(localDtlsRole === 'client' ? 'server' : 'client');
	        // Need to tell the remote transport about our parameters.
	        await this.safeEmitAsPromise('@connect', { dtlsParameters });
	        this._transportReady = true;
	    }
	    _assertSendDirection() {
	        if (this._direction !== 'send') {
	            throw new Error('method can just be called for handlers with "send" direction');
	        }
	    }
	    _assertRecvDirection() {
	        if (this._direction !== 'recv') {
	            throw new Error('method can just be called for handlers with "recv" direction');
	        }
	    }
	}
	exports.Safari11 = Safari11;
	});

	unwrapExports(Safari11_1);
	var Safari11_2 = Safari11_1.Safari11;

	var edgeUtils = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });

	/**
	 * Normalize ORTC based Edge's RTCRtpReceiver.getCapabilities() to produce a full
	 * compliant ORTC RTCRtpCapabilities.
	 */
	function getCapabilities() {
	    const nativeCaps = RTCRtpReceiver.getCapabilities();
	    const caps = utils.clone(nativeCaps);
	    for (const codec of caps.codecs) {
	        // Rename numChannels to channels.
	        codec.channels = codec.numChannels;
	        delete codec.numChannels;
	        // Add mimeType.
	        codec.mimeType = codec.mimeType || `${codec.kind}/${codec.name}`;
	        // NOTE: Edge sets some numeric parameters as string rather than number. Fix them.
	        if (codec.parameters) {
	            const parameters = codec.parameters;
	            if (parameters.apt)
	                parameters.apt = Number(parameters.apt);
	            if (parameters['packetization-mode'])
	                parameters['packetization-mode'] = Number(parameters['packetization-mode']);
	        }
	        // Delete emty parameter String in rtcpFeedback.
	        for (const feedback of codec.rtcpFeedback || []) {
	            if (!feedback.parameter)
	                feedback.parameter = '';
	        }
	    }
	    return caps;
	}
	exports.getCapabilities = getCapabilities;
	/**
	 * Generate RTCRtpParameters as ORTC based Edge likes.
	 */
	function mangleRtpParameters(rtpParameters) {
	    const params = utils.clone(rtpParameters);
	    // Rename mid to muxId.
	    if (params.mid) {
	        params.muxId = params.mid;
	        delete params.mid;
	    }
	    for (const codec of params.codecs) {
	        // Rename channels to numChannels.
	        if (codec.channels) {
	            codec.numChannels = codec.channels;
	            delete codec.channels;
	        }
	        // Add codec.name (requried by Edge).
	        if (codec.mimeType && !codec.name)
	            codec.name = codec.mimeType.split('/')[1];
	        // Remove mimeType.
	        delete codec.mimeType;
	    }
	    return params;
	}
	exports.mangleRtpParameters = mangleRtpParameters;
	});

	unwrapExports(edgeUtils);
	var edgeUtils_1 = edgeUtils.getCapabilities;
	var edgeUtils_2 = edgeUtils.mangleRtpParameters;

	var Edge11_1 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });






	const logger = new Logger_1.Logger('Edge11');
	class Edge11 extends HandlerInterface_1.HandlerInterface {
	    constructor() {
	        super();
	        // Map of RTCRtpSenders indexed by id.
	        this._rtpSenders = new Map();
	        // Map of RTCRtpReceivers indexed by id.
	        this._rtpReceivers = new Map();
	        // Next localId for sending tracks.
	        this._nextSendLocalId = 0;
	        // Got transport local and remote parameters.
	        this._transportReady = false;
	    }
	    /**
	     * Creates a factory function.
	     */
	    static createFactory() {
	        return () => new Edge11();
	    }
	    get name() {
	        return 'Edge11';
	    }
	    close() {
	        logger.debug('close()');
	        // Close the ICE gatherer.
	        // NOTE: Not yet implemented by Edge.
	        try {
	            this._iceGatherer.close();
	        }
	        catch (error) { }
	        // Close the ICE transport.
	        try {
	            this._iceTransport.stop();
	        }
	        catch (error) { }
	        // Close the DTLS transport.
	        try {
	            this._dtlsTransport.stop();
	        }
	        catch (error) { }
	        // Close RTCRtpSenders.
	        for (const rtpSender of this._rtpSenders.values()) {
	            try {
	                rtpSender.stop();
	            }
	            catch (error) { }
	        }
	        // Close RTCRtpReceivers.
	        for (const rtpReceiver of this._rtpReceivers.values()) {
	            try {
	                rtpReceiver.stop();
	            }
	            catch (error) { }
	        }
	    }
	    async getNativeRtpCapabilities() {
	        logger.debug('getNativeRtpCapabilities()');
	        return edgeUtils.getCapabilities();
	    }
	    async getNativeSctpCapabilities() {
	        logger.debug('getNativeSctpCapabilities()');
	        return {
	            numStreams: { OS: 0, MIS: 0 }
	        };
	    }
	    run({ direction, // eslint-disable-line @typescript-eslint/no-unused-vars
	    iceParameters, iceCandidates, dtlsParameters, sctpParameters, // eslint-disable-line @typescript-eslint/no-unused-vars
	    iceServers, iceTransportPolicy, additionalSettings, // eslint-disable-line @typescript-eslint/no-unused-vars
	    proprietaryConstraints, // eslint-disable-line @typescript-eslint/no-unused-vars
	    extendedRtpCapabilities }) {
	        logger.debug('run()');
	        this._sendingRtpParametersByKind =
	            {
	                audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),
	                video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities)
	            };
	        this._remoteIceParameters = iceParameters;
	        this._remoteIceCandidates = iceCandidates;
	        this._remoteDtlsParameters = dtlsParameters;
	        this._cname = `CNAME-${utils.generateRandomNumber()}`;
	        this._setIceGatherer({ iceServers, iceTransportPolicy });
	        this._setIceTransport();
	        this._setDtlsTransport();
	    }
	    // eslint-disable-next-line @typescript-eslint/no-unused-vars
	    async updateIceServers(iceServers) {
	        // NOTE: Edge 11 does not implement iceGatherer.gater().
	        throw new errors.UnsupportedError('not supported');
	    }
	    async restartIce(iceParameters) {
	        logger.debug('restartIce()');
	        this._remoteIceParameters = iceParameters;
	        if (!this._transportReady)
	            return;
	        logger.debug('restartIce() | calling iceTransport.start()');
	        this._iceTransport.start(this._iceGatherer, iceParameters, 'controlling');
	        for (const candidate of this._remoteIceCandidates) {
	            this._iceTransport.addRemoteCandidate(candidate);
	        }
	        this._iceTransport.addRemoteCandidate({});
	    }
	    async getTransportStats() {
	        return this._iceTransport.getStats();
	    }
	    async send(
	    // eslint-disable-next-line @typescript-eslint/no-unused-vars
	    { track, encodings, codecOptions, codec }) {
	        logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);
	        if (!this._transportReady)
	            await this._setupTransport({ localDtlsRole: 'server' });
	        logger.debug('send() | calling new RTCRtpSender()');
	        const rtpSender = new RTCRtpSender(track, this._dtlsTransport);
	        const rtpParameters = utils.clone(this._sendingRtpParametersByKind[track.kind]);
	        rtpParameters.codecs = ortc.reduceCodecs(rtpParameters.codecs, codec);
	        const useRtx = rtpParameters.codecs
	            .some((_codec) => /.+\/rtx$/i.test(_codec.mimeType));
	        if (!encodings)
	            encodings = [{}];
	        for (const encoding of encodings) {
	            encoding.ssrc = utils.generateRandomNumber();
	            if (useRtx)
	                encoding.rtx = { ssrc: utils.generateRandomNumber() };
	        }
	        rtpParameters.encodings = encodings;
	        // Fill RTCRtpParameters.rtcp.
	        rtpParameters.rtcp =
	            {
	                cname: this._cname,
	                reducedSize: true,
	                mux: true
	            };
	        // NOTE: Convert our standard RTCRtpParameters into those that Edge
	        // expects.
	        const edgeRtpParameters = edgeUtils.mangleRtpParameters(rtpParameters);
	        logger.debug('send() | calling rtpSender.send() [params:%o]', edgeRtpParameters);
	        await rtpSender.send(edgeRtpParameters);
	        const localId = String(this._nextSendLocalId);
	        this._nextSendLocalId++;
	        // Store it.
	        this._rtpSenders.set(localId, rtpSender);
	        return { localId, rtpParameters, rtpSender };
	    }
	    async stopSending(localId) {
	        logger.debug('stopSending() [localId:%s]', localId);
	        const rtpSender = this._rtpSenders.get(localId);
	        if (!rtpSender)
	            throw new Error('RTCRtpSender not found');
	        this._rtpSenders.delete(localId);
	        try {
	            logger.debug('stopSending() | calling rtpSender.stop()');
	            rtpSender.stop();
	        }
	        catch (error) {
	            logger.warn('stopSending() | rtpSender.stop() failed:%o', error);
	            throw error;
	        }
	    }
	    async replaceTrack(localId, track) {
	        if (track) {
	            logger.debug('replaceTrack() [localId:%s, track.id:%s]', localId, track.id);
	        }
	        else {
	            logger.debug('replaceTrack() [localId:%s, no track]', localId);
	        }
	        const rtpSender = this._rtpSenders.get(localId);
	        if (!rtpSender)
	            throw new Error('RTCRtpSender not found');
	        rtpSender.setTrack(track);
	    }
	    async setMaxSpatialLayer(localId, spatialLayer) {
	        logger.debug('setMaxSpatialLayer() [localId:%s, spatialLayer:%s]', localId, spatialLayer);
	        const rtpSender = this._rtpSenders.get(localId);
	        if (!rtpSender)
	            throw new Error('RTCRtpSender not found');
	        const parameters = rtpSender.getParameters();
	        parameters.encodings
	            .forEach((encoding, idx) => {
	            if (idx <= spatialLayer)
	                encoding.active = true;
	            else
	                encoding.active = false;
	        });
	        await rtpSender.setParameters(parameters);
	    }
	    async setRtpEncodingParameters(localId, params) {
	        logger.debug('setRtpEncodingParameters() [localId:%s, params:%o]', localId, params);
	        const rtpSender = this._rtpSenders.get(localId);
	        if (!rtpSender)
	            throw new Error('RTCRtpSender not found');
	        const parameters = rtpSender.getParameters();
	        parameters.encodings.forEach((encoding, idx) => {
	            parameters.encodings[idx] = { ...encoding, ...params };
	        });
	        await rtpSender.setParameters(parameters);
	    }
	    async getSenderStats(localId) {
	        const rtpSender = this._rtpSenders.get(localId);
	        if (!rtpSender)
	            throw new Error('RTCRtpSender not found');
	        return rtpSender.getStats();
	    }
	    async sendDataChannel(
	    // eslint-disable-next-line @typescript-eslint/no-unused-vars
	    options) {
	        throw new errors.UnsupportedError('not implemented');
	    }
	    async receive({ trackId, kind, rtpParameters }) {
	        logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);
	        if (!this._transportReady)
	            await this._setupTransport({ localDtlsRole: 'server' });
	        logger.debug('receive() | calling new RTCRtpReceiver()');
	        const rtpReceiver = new RTCRtpReceiver(this._dtlsTransport, kind);
	        rtpReceiver.addEventListener('error', (event) => {
	            logger.error('rtpReceiver "error" event [event:%o]', event);
	        });
	        // NOTE: Convert our standard RTCRtpParameters into those that Edge
	        // expects.
	        const edgeRtpParameters = edgeUtils.mangleRtpParameters(rtpParameters);
	        logger.debug('receive() | calling rtpReceiver.receive() [params:%o]', edgeRtpParameters);
	        await rtpReceiver.receive(edgeRtpParameters);
	        const localId = trackId;
	        // Store it.
	        this._rtpReceivers.set(localId, rtpReceiver);
	        return {
	            localId,
	            track: rtpReceiver.track,
	            rtpReceiver
	        };
	    }
	    async stopReceiving(localId) {
	        logger.debug('stopReceiving() [localId:%s]', localId);
	        const rtpReceiver = this._rtpReceivers.get(localId);
	        if (!rtpReceiver)
	            throw new Error('RTCRtpReceiver not found');
	        this._rtpReceivers.delete(localId);
	        try {
	            logger.debug('stopReceiving() | calling rtpReceiver.stop()');
	            rtpReceiver.stop();
	        }
	        catch (error) {
	            logger.warn('stopReceiving() | rtpReceiver.stop() failed:%o', error);
	        }
	    }
	    async getReceiverStats(localId) {
	        const rtpReceiver = this._rtpReceivers.get(localId);
	        if (!rtpReceiver)
	            throw new Error('RTCRtpReceiver not found');
	        return rtpReceiver.getStats();
	    }
	    async receiveDataChannel(
	    // eslint-disable-next-line @typescript-eslint/no-unused-vars
	    options) {
	        throw new errors.UnsupportedError('not implemented');
	    }
	    _setIceGatherer({ iceServers, iceTransportPolicy }) {
	        const iceGatherer = new RTCIceGatherer({
	            iceServers: iceServers || [],
	            gatherPolicy: iceTransportPolicy || 'all'
	        });
	        iceGatherer.addEventListener('error', (event) => {
	            logger.error('iceGatherer "error" event [event:%o]', event);
	        });
	        // NOTE: Not yet implemented by Edge, which starts gathering automatically.
	        try {
	            iceGatherer.gather();
	        }
	        catch (error) {
	            logger.debug('_setIceGatherer() | iceGatherer.gather() failed: %s', error.toString());
	        }
	        this._iceGatherer = iceGatherer;
	    }
	    _setIceTransport() {
	        const iceTransport = new RTCIceTransport(this._iceGatherer);
	        // NOTE: Not yet implemented by Edge.
	        iceTransport.addEventListener('statechange', () => {
	            switch (iceTransport.state) {
	                case 'checking':
	                    this.emit('@connectionstatechange', 'connecting');
	                    break;
	                case 'connected':
	                case 'completed':
	                    this.emit('@connectionstatechange', 'connected');
	                    break;
	                case 'failed':
	                    this.emit('@connectionstatechange', 'failed');
	                    break;
	                case 'disconnected':
	                    this.emit('@connectionstatechange', 'disconnected');
	                    break;
	                case 'closed':
	                    this.emit('@connectionstatechange', 'closed');
	                    break;
	            }
	        });
	        // NOTE: Not standard, but implemented by Edge.
	        iceTransport.addEventListener('icestatechange', () => {
	            switch (iceTransport.state) {
	                case 'checking':
	                    this.emit('@connectionstatechange', 'connecting');
	                    break;
	                case 'connected':
	                case 'completed':
	                    this.emit('@connectionstatechange', 'connected');
	                    break;
	                case 'failed':
	                    this.emit('@connectionstatechange', 'failed');
	                    break;
	                case 'disconnected':
	                    this.emit('@connectionstatechange', 'disconnected');
	                    break;
	                case 'closed':
	                    this.emit('@connectionstatechange', 'closed');
	                    break;
	            }
	        });
	        iceTransport.addEventListener('candidatepairchange', (event) => {
	            logger.debug('iceTransport "candidatepairchange" event [pair:%o]', event.pair);
	        });
	        this._iceTransport = iceTransport;
	    }
	    _setDtlsTransport() {
	        const dtlsTransport = new RTCDtlsTransport(this._iceTransport);
	        // NOTE: Not yet implemented by Edge.
	        dtlsTransport.addEventListener('statechange', () => {
	            logger.debug('dtlsTransport "statechange" event [state:%s]', dtlsTransport.state);
	        });
	        // NOTE: Not standard, but implemented by Edge.
	        dtlsTransport.addEventListener('dtlsstatechange', () => {
	            logger.debug('dtlsTransport "dtlsstatechange" event [state:%s]', dtlsTransport.state);
	            if (dtlsTransport.state === 'closed')
	                this.emit('@connectionstatechange', 'closed');
	        });
	        dtlsTransport.addEventListener('error', (event) => {
	            logger.error('dtlsTransport "error" event [event:%o]', event);
	        });
	        this._dtlsTransport = dtlsTransport;
	    }
	    async _setupTransport({ localDtlsRole }) {
	        logger.debug('_setupTransport()');
	        // Get our local DTLS parameters.
	        const dtlsParameters = this._dtlsTransport.getLocalParameters();
	        dtlsParameters.role = localDtlsRole;
	        // Need to tell the remote transport about our parameters.
	        await this.safeEmitAsPromise('@connect', { dtlsParameters });
	        // Start the RTCIceTransport.
	        this._iceTransport.start(this._iceGatherer, this._remoteIceParameters, 'controlling');
	        // Add remote ICE candidates.
	        for (const candidate of this._remoteIceCandidates) {
	            this._iceTransport.addRemoteCandidate(candidate);
	        }
	        // Also signal a 'complete' candidate as per spec.
	        // NOTE: It should be {complete: true} but Edge prefers {}.
	        // NOTE: If we don't signal end of candidates, the Edge RTCIceTransport
	        // won't enter the 'completed' state.
	        this._iceTransport.addRemoteCandidate({});
	        // NOTE: Edge does not like SHA less than 256.
	        this._remoteDtlsParameters.fingerprints = this._remoteDtlsParameters.fingerprints
	            .filter((fingerprint) => {
	            return (fingerprint.algorithm === 'sha-256' ||
	                fingerprint.algorithm === 'sha-384' ||
	                fingerprint.algorithm === 'sha-512');
	        });
	        // Start the RTCDtlsTransport.
	        this._dtlsTransport.start(this._remoteDtlsParameters);
	        this._transportReady = true;
	    }
	}
	exports.Edge11 = Edge11;
	});

	unwrapExports(Edge11_1);
	var Edge11_2 = Edge11_1.Edge11;

	var ReactNative_1 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });









	const logger = new Logger_1.Logger('ReactNative');
	const SCTP_NUM_STREAMS = { OS: 1024, MIS: 1024 };
	class ReactNative extends HandlerInterface_1.HandlerInterface {
	    constructor() {
	        super();
	        // Local stream for sending.
	        this._sendStream = new MediaStream();
	        // Map of sending MediaStreamTracks indexed by localId.
	        this._mapSendLocalIdTrack = new Map();
	        // Next sending localId.
	        this._nextSendLocalId = 0;
	        // Map of MID, RTP parameters and RTCRtpReceiver indexed by local id.
	        // Value is an Object with mid, rtpParameters and rtpReceiver.
	        this._mapRecvLocalIdInfo = new Map();
	        // Whether a DataChannel m=application section has been created.
	        this._hasDataChannelMediaSection = false;
	        // Sending DataChannel id value counter. Incremented for each new DataChannel.
	        this._nextSendSctpStreamId = 0;
	        // Got transport local and remote parameters.
	        this._transportReady = false;
	    }
	    /**
	     * Creates a factory function.
	     */
	    static createFactory() {
	        return () => new ReactNative();
	    }
	    get name() {
	        return 'ReactNative';
	    }
	    close() {
	        logger.debug('close()');
	        // Close RTCPeerConnection.
	        if (this._pc) {
	            try {
	                this._pc.close();
	            }
	            catch (error) { }
	        }
	    }
	    async getNativeRtpCapabilities() {
	        logger.debug('getNativeRtpCapabilities()');
	        const pc = new RTCPeerConnection({
	            iceServers: [],
	            iceTransportPolicy: 'all',
	            bundlePolicy: 'max-bundle',
	            rtcpMuxPolicy: 'require',
	            sdpSemantics: 'plan-b'
	        });
	        try {
	            const offer = await pc.createOffer({
	                offerToReceiveAudio: true,
	                offerToReceiveVideo: true
	            });
	            try {
	                pc.close();
	            }
	            catch (error) { }
	            const sdpObject = lib$1.parse(offer.sdp);
	            const nativeRtpCapabilities = commonUtils.extractRtpCapabilities({ sdpObject });
	            return nativeRtpCapabilities;
	        }
	        catch (error) {
	            try {
	                pc.close();
	            }
	            catch (error2) { }
	            throw error;
	        }
	    }
	    async getNativeSctpCapabilities() {
	        logger.debug('getNativeSctpCapabilities()');
	        return {
	            numStreams: SCTP_NUM_STREAMS
	        };
	    }
	    run({ direction, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, extendedRtpCapabilities }) {
	        logger.debug('run()');
	        this._direction = direction;
	        this._remoteSdp = new RemoteSdp_1.RemoteSdp({
	            iceParameters,
	            iceCandidates,
	            dtlsParameters,
	            sctpParameters,
	            planB: true
	        });
	        this._sendingRtpParametersByKind =
	            {
	                audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),
	                video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities)
	            };
	        this._sendingRemoteRtpParametersByKind =
	            {
	                audio: ortc.getSendingRemoteRtpParameters('audio', extendedRtpCapabilities),
	                video: ortc.getSendingRemoteRtpParameters('video', extendedRtpCapabilities)
	            };
	        this._pc = new RTCPeerConnection({
	            iceServers: iceServers || [],
	            iceTransportPolicy: iceTransportPolicy || 'all',
	            bundlePolicy: 'max-bundle',
	            rtcpMuxPolicy: 'require',
	            sdpSemantics: 'plan-b',
	            ...additionalSettings
	        }, proprietaryConstraints);
	        // Handle RTCPeerConnection connection status.
	        this._pc.addEventListener('iceconnectionstatechange', () => {
	            switch (this._pc.iceConnectionState) {
	                case 'checking':
	                    this.emit('@connectionstatechange', 'connecting');
	                    break;
	                case 'connected':
	                case 'completed':
	                    this.emit('@connectionstatechange', 'connected');
	                    break;
	                case 'failed':
	                    this.emit('@connectionstatechange', 'failed');
	                    break;
	                case 'disconnected':
	                    this.emit('@connectionstatechange', 'disconnected');
	                    break;
	                case 'closed':
	                    this.emit('@connectionstatechange', 'closed');
	                    break;
	            }
	        });
	    }
	    async updateIceServers(iceServers) {
	        logger.debug('updateIceServers()');
	        const configuration = this._pc.getConfiguration();
	        configuration.iceServers = iceServers;
	        this._pc.setConfiguration(configuration);
	    }
	    async restartIce(iceParameters) {
	        logger.debug('restartIce()');
	        // Provide the remote SDP handler with new remote ICE parameters.
	        this._remoteSdp.updateIceParameters(iceParameters);
	        if (!this._transportReady)
	            return;
	        if (this._direction === 'send') {
	            const offer = await this._pc.createOffer({ iceRestart: true });
	            logger.debug('restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);
	            await this._pc.setLocalDescription(offer);
	            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);
	            await this._pc.setRemoteDescription(answer);
	        }
	        else {
	            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);
	            await this._pc.setRemoteDescription(offer);
	            const answer = await this._pc.createAnswer();
	            logger.debug('restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);
	            await this._pc.setLocalDescription(answer);
	        }
	    }
	    async getTransportStats() {
	        return this._pc.getStats();
	    }
	    async send({ track, encodings, codecOptions, codec }) {
	        this._assertSendDirection();
	        logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);
	        if (codec) {
	            logger.warn('send() | codec selection is not available in %s handler', this.name);
	        }
	        this._sendStream.addTrack(track);
	        this._pc.addStream(this._sendStream);
	        let offer = await this._pc.createOffer();
	        let localSdpObject = lib$1.parse(offer.sdp);
	        let offerMediaObject;
	        const sendingRtpParameters = utils.clone(this._sendingRtpParametersByKind[track.kind]);
	        sendingRtpParameters.codecs =
	            ortc.reduceCodecs(sendingRtpParameters.codecs);
	        const sendingRemoteRtpParameters = utils.clone(this._sendingRemoteRtpParametersByKind[track.kind]);
	        sendingRemoteRtpParameters.codecs =
	            ortc.reduceCodecs(sendingRemoteRtpParameters.codecs);
	        if (!this._transportReady)
	            await this._setupTransport({ localDtlsRole: 'server', localSdpObject });
	        if (track.kind === 'video' && encodings && encodings.length > 1) {
	            logger.debug('send() | enabling simulcast');
	            localSdpObject = lib$1.parse(offer.sdp);
	            offerMediaObject = localSdpObject.media
	                .find((m) => m.type === 'video');
	            planBUtils.addLegacySimulcast({
	                offerMediaObject,
	                track,
	                numStreams: encodings.length
	            });
	            offer = { type: 'offer', sdp: lib$1.write(localSdpObject) };
	        }
	        logger.debug('send() | calling pc.setLocalDescription() [offer:%o]', offer);
	        await this._pc.setLocalDescription(offer);
	        localSdpObject = lib$1.parse(this._pc.localDescription.sdp);
	        offerMediaObject = localSdpObject.media
	            .find((m) => m.type === track.kind);
	        // Set RTCP CNAME.
	        sendingRtpParameters.rtcp.cname =
	            commonUtils.getCname({ offerMediaObject });
	        // Set RTP encodings.
	        sendingRtpParameters.encodings =
	            planBUtils.getRtpEncodings({ offerMediaObject, track });
	        // Complete encodings with given values.
	        if (encodings) {
	            for (let idx = 0; idx < sendingRtpParameters.encodings.length; ++idx) {
	                if (encodings[idx])
	                    Object.assign(sendingRtpParameters.encodings[idx], encodings[idx]);
	            }
	        }
	        // If VP8 or H264 and there is effective simulcast, add scalabilityMode to
	        // each encoding.
	        if (sendingRtpParameters.encodings.length > 1 &&
	            (sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp8' ||
	                sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/h264')) {
	            for (const encoding of sendingRtpParameters.encodings) {
	                encoding.scalabilityMode = 'S1T3';
	            }
	        }
	        this._remoteSdp.send({
	            offerMediaObject,
	            offerRtpParameters: sendingRtpParameters,
	            answerRtpParameters: sendingRemoteRtpParameters,
	            codecOptions
	        });
	        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('send() | calling pc.setRemoteDescription() [answer:%o]', answer);
	        await this._pc.setRemoteDescription(answer);
	        const localId = String(this._nextSendLocalId);
	        this._nextSendLocalId++;
	        // Insert into the map.
	        this._mapSendLocalIdTrack.set(localId, track);
	        return {
	            localId: localId,
	            rtpParameters: sendingRtpParameters
	        };
	    }
	    async stopSending(localId) {
	        this._assertSendDirection();
	        logger.debug('stopSending() [localId:%s]', localId);
	        const track = this._mapSendLocalIdTrack.get(localId);
	        if (!track)
	            throw new Error('track not found');
	        this._mapSendLocalIdTrack.delete(localId);
	        this._sendStream.removeTrack(track);
	        this._pc.addStream(this._sendStream);
	        const offer = await this._pc.createOffer();
	        logger.debug('stopSending() | calling pc.setLocalDescription() [offer:%o]', offer);
	        try {
	            await this._pc.setLocalDescription(offer);
	        }
	        catch (error) {
	            // NOTE: If there are no sending tracks, setLocalDescription() will fail with
	            // "Failed to create channels". If so, ignore it.
	            if (this._sendStream.getTracks().length === 0) {
	                logger.warn('stopSending() | ignoring expected error due no sending tracks: %s', error.toString());
	                return;
	            }
	            throw error;
	        }
	        if (this._pc.signalingState === 'stable')
	            return;
	        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('stopSending() | calling pc.setRemoteDescription() [answer:%o]', answer);
	        await this._pc.setRemoteDescription(answer);
	    }
	    async replaceTrack(
	    // eslint-disable-next-line @typescript-eslint/no-unused-vars
	    localId, track) {
	        throw new errors.UnsupportedError('not implemented');
	    }
	    // eslint-disable-next-line @typescript-eslint/no-unused-vars
	    async setMaxSpatialLayer(localId, spatialLayer) {
	        throw new errors.UnsupportedError('not implemented');
	    }
	    // eslint-disable-next-line @typescript-eslint/no-unused-vars
	    async setRtpEncodingParameters(localId, params) {
	        throw new errors.UnsupportedError('not implemented');
	    }
	    // eslint-disable-next-line @typescript-eslint/no-unused-vars
	    async getSenderStats(localId) {
	        throw new errors.UnsupportedError('not implemented');
	    }
	    async sendDataChannel({ ordered, maxPacketLifeTime, maxRetransmits, label, protocol, priority }) {
	        this._assertSendDirection();
	        const options = {
	            negotiated: true,
	            id: this._nextSendSctpStreamId,
	            ordered,
	            maxPacketLifeTime,
	            maxRetransmitTime: maxPacketLifeTime,
	            maxRetransmits,
	            protocol,
	            priority
	        };
	        logger.debug('sendDataChannel() [options:%o]', options);
	        const dataChannel = this._pc.createDataChannel(label, options);
	        // Increase next id.
	        this._nextSendSctpStreamId =
	            ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;
	        // If this is the first DataChannel we need to create the SDP answer with
	        // m=application section.
	        if (!this._hasDataChannelMediaSection) {
	            const offer = await this._pc.createOffer();
	            const localSdpObject = lib$1.parse(offer.sdp);
	            const offerMediaObject = localSdpObject.media
	                .find((m) => m.type === 'application');
	            if (!this._transportReady)
	                await this._setupTransport({ localDtlsRole: 'server', localSdpObject });
	            logger.debug('sendDataChannel() | calling pc.setLocalDescription() [offer:%o]', offer);
	            await this._pc.setLocalDescription(offer);
	            this._remoteSdp.sendSctpAssociation({ offerMediaObject });
	            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);
	            await this._pc.setRemoteDescription(answer);
	            this._hasDataChannelMediaSection = true;
	        }
	        const sctpStreamParameters = {
	            streamId: options.id,
	            ordered: options.ordered,
	            maxPacketLifeTime: options.maxPacketLifeTime,
	            maxRetransmits: options.maxRetransmits
	        };
	        return { dataChannel, sctpStreamParameters };
	    }
	    async receive({ trackId, kind, rtpParameters }) {
	        this._assertRecvDirection();
	        logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);
	        const localId = trackId;
	        const mid = kind;
	        let streamId = rtpParameters.rtcp.cname;
	        // NOTE: In React-Native we cannot reuse the same remote MediaStream for new
	        // remote tracks. This is because react-native-webrtc does not react on new
	        // tracks generated within already existing streams, so force the streamId
	        // to be different.
	        logger.debug('receive() | forcing a random remote streamId to avoid well known bug in react-native-webrtc');
	        streamId += `-hack-${utils.generateRandomNumber()}`;
	        this._remoteSdp.receive({
	            mid,
	            kind,
	            offerRtpParameters: rtpParameters,
	            streamId,
	            trackId
	        });
	        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('receive() | calling pc.setRemoteDescription() [offer:%o]', offer);
	        await this._pc.setRemoteDescription(offer);
	        let answer = await this._pc.createAnswer();
	        const localSdpObject = lib$1.parse(answer.sdp);
	        const answerMediaObject = localSdpObject.media
	            .find((m) => String(m.mid) === mid);
	        // May need to modify codec parameters in the answer based on codec
	        // parameters in the offer.
	        commonUtils.applyCodecParameters({
	            offerRtpParameters: rtpParameters,
	            answerMediaObject
	        });
	        answer = { type: 'answer', sdp: lib$1.write(localSdpObject) };
	        if (!this._transportReady)
	            await this._setupTransport({ localDtlsRole: 'client', localSdpObject });
	        logger.debug('receive() | calling pc.setLocalDescription() [answer:%o]', answer);
	        await this._pc.setLocalDescription(answer);
	        const stream = this._pc.getRemoteStreams()
	            .find((s) => s.id === streamId);
	        const track = stream.getTrackById(localId);
	        if (!track)
	            throw new Error('remote track not found');
	        // Insert into the map.
	        this._mapRecvLocalIdInfo.set(localId, { mid, rtpParameters });
	        return { localId, track };
	    }
	    async stopReceiving(localId) {
	        this._assertRecvDirection();
	        logger.debug('stopReceiving() [localId:%s]', localId);
	        const { mid, rtpParameters } = this._mapRecvLocalIdInfo.get(localId) || {};
	        // Remove from the map.
	        this._mapRecvLocalIdInfo.delete(localId);
	        this._remoteSdp.planBStopReceiving({ mid: mid, offerRtpParameters: rtpParameters });
	        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	        logger.debug('stopReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);
	        await this._pc.setRemoteDescription(offer);
	        const answer = await this._pc.createAnswer();
	        logger.debug('stopReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);
	        await this._pc.setLocalDescription(answer);
	    }
	    // eslint-disable-next-line @typescript-eslint/no-unused-vars
	    async getReceiverStats(localId) {
	        throw new errors.UnsupportedError('not implemented');
	    }
	    async receiveDataChannel({ sctpStreamParameters, label, protocol }) {
	        this._assertRecvDirection();
	        const { streamId, ordered, maxPacketLifeTime, maxRetransmits } = sctpStreamParameters;
	        const options = {
	            negotiated: true,
	            id: streamId,
	            ordered,
	            maxPacketLifeTime,
	            maxRetransmitTime: maxPacketLifeTime,
	            maxRetransmits,
	            protocol
	        };
	        logger.debug('receiveDataChannel() [options:%o]', options);
	        const dataChannel = this._pc.createDataChannel(label, options);
	        // If this is the first DataChannel we need to create the SDP offer with
	        // m=application section.
	        if (!this._hasDataChannelMediaSection) {
	            this._remoteSdp.receiveSctpAssociation({ oldDataChannelSpec: true });
	            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };
	            logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]', offer);
	            await this._pc.setRemoteDescription(offer);
	            const answer = await this._pc.createAnswer();
	            if (!this._transportReady) {
	                const localSdpObject = lib$1.parse(answer.sdp);
	                await this._setupTransport({ localDtlsRole: 'client', localSdpObject });
	            }
	            logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);
	            await this._pc.setLocalDescription(answer);
	            this._hasDataChannelMediaSection = true;
	        }
	        return { dataChannel };
	    }
	    async _setupTransport({ localDtlsRole, localSdpObject }) {
	        if (!localSdpObject)
	            localSdpObject = lib$1.parse(this._pc.localDescription.sdp);
	        // Get our local DTLS parameters.
	        const dtlsParameters = commonUtils.extractDtlsParameters({ sdpObject: localSdpObject });
	        // Set our DTLS role.
	        dtlsParameters.role = localDtlsRole;
	        // Update the remote DTLS role in the SDP.
	        this._remoteSdp.updateDtlsRole(localDtlsRole === 'client' ? 'server' : 'client');
	        // Need to tell the remote transport about our parameters.
	        await this.safeEmitAsPromise('@connect', { dtlsParameters });
	        this._transportReady = true;
	    }
	    _assertSendDirection() {
	        if (this._direction !== 'send') {
	            throw new Error('method can just be called for handlers with "send" direction');
	        }
	    }
	    _assertRecvDirection() {
	        if (this._direction !== 'recv') {
	            throw new Error('method can just be called for handlers with "recv" direction');
	        }
	    }
	}
	exports.ReactNative = ReactNative;
	});

	unwrapExports(ReactNative_1);
	var ReactNative_2 = ReactNative_1.ReactNative;

	var Device_1 = createCommonjsModule(function (module, exports) {
	/* global RTCRtpTransceiver */
	Object.defineProperty(exports, "__esModule", { value: true });














	const logger = new Logger_1.Logger('Device');
	function detectDevice() {
	    // React-Native.
	    // NOTE: react-native-webrtc >= 1.75.0 is required.
	    if (typeof navigator === 'object' && navigator.product === 'ReactNative') {
	        if (typeof RTCPeerConnection === 'undefined') {
	            logger.warn('this._detectDevice() | unsupported ReactNative without RTCPeerConnection');
	            return undefined;
	        }
	        logger.debug('this._detectDevice() | ReactNative handler chosen');
	        return 'ReactNative';
	    }
	    // Browser.
	    else if (typeof navigator === 'object' && typeof navigator.userAgent === 'string') {
	        const ua = navigator.userAgent;
	        const browser = es5.getParser(ua);
	        const engine = browser.getEngine();
	        // Chrome and Chromium.
	        if (browser.satisfies({ chrome: '>=74', chromium: '>=74' })) {
	            return 'Chrome74';
	        }
	        else if (browser.satisfies({ chrome: '>=70', chromium: '>=70' })) {
	            return 'Chrome70';
	        }
	        else if (browser.satisfies({ chrome: '>=67', chromium: '>=67' })) {
	            return 'Chrome67';
	        }
	        else if (browser.satisfies({ chrome: '>=55', chromium: '>=55' })) {
	            return 'Chrome55';
	        }
	        // Firefox.
	        else if (browser.satisfies({ firefox: '>=60' })) {
	            return 'Firefox60';
	        }
	        // Safari with Unified-Plan support enabled.
	        else if (browser.satisfies({ safari: '>=12.0' }) &&
	            typeof RTCRtpTransceiver !== 'undefined' &&
	            RTCRtpTransceiver.prototype.hasOwnProperty('currentDirection')) {
	            return 'Safari12';
	        }
	        // Safari with Plab-B support.
	        else if (browser.satisfies({ safari: '>=11' })) {
	            return 'Safari11';
	        }
	        // Old Edge with ORTC support.
	        else if (browser.satisfies({ 'microsoft edge': '>=11' }) &&
	            browser.satisfies({ 'microsoft edge': '<=18' })) {
	            return 'Edge11';
	        }
	        // Best effort for Chromium based browsers.
	        else if (engine.name && engine.name.toLowerCase() === 'blink') {
	            const match = ua.match(/(?:(?:Chrome|Chromium))[ /](\w+)/i);
	            if (match) {
	                const version = Number(match[1]);
	                if (version >= 74) {
	                    return 'Chrome74';
	                }
	                else if (version >= 70) {
	                    return 'Chrome70';
	                }
	                else if (version >= 67) {
	                    return 'Chrome67';
	                }
	                else {
	                    return 'Chrome55';
	                }
	            }
	            else {
	                return 'Chrome74';
	            }
	        }
	        // Unsupported browser.
	        else {
	            logger.warn('this._detectDevice() | browser not supported [name:%s, version:%s]', browser.getBrowserName(), browser.getBrowserVersion());
	            return undefined;
	        }
	    }
	    // Unknown device.
	    else {
	        logger.warn('this._detectDevice() | unknown device');
	        return undefined;
	    }
	}
	exports.detectDevice = detectDevice;
	class Device {
	    /**
	     * Create a new Device to connect to mediasoup server.
	     *
	     * @throws {UnsupportedError} if device is not supported.
	     */
	    constructor({ handlerName, handlerFactory, Handler } = {}) {
	        // Loaded flag.
	        this._loaded = false;
	        logger.debug('constructor()');
	        // Handle deprecated option.
	        if (Handler) {
	            logger.warn('constructor() | Handler option is DEPRECATED, use handlerName or handlerFactory instead');
	            if (typeof Handler === 'string')
	                handlerName = Handler;
	            else
	                throw new TypeError('non string Handler option no longer supported, use handlerFactory instead');
	        }
	        if (handlerName && handlerFactory) {
	            throw new TypeError('just one of handlerName or handlerInterface can be given');
	        }
	        if (handlerFactory) {
	            this._handlerFactory = handlerFactory;
	        }
	        else {
	            if (handlerName) {
	                logger.debug('constructor() | handler given: %s', handlerName);
	            }
	            else {
	                handlerName = detectDevice();
	                if (handlerName)
	                    logger.debug('constructor() | detected handler: %s', handlerName);
	                else
	                    throw new errors.UnsupportedError('device not supported');
	            }
	            switch (handlerName) {
	                case 'Chrome74':
	                    this._handlerFactory = Chrome74_1.Chrome74.createFactory();
	                    break;
	                case 'Chrome70':
	                    this._handlerFactory = Chrome70_1.Chrome70.createFactory();
	                    break;
	                case 'Chrome67':
	                    this._handlerFactory = Chrome67_1.Chrome67.createFactory();
	                    break;
	                case 'Chrome55':
	                    this._handlerFactory = Chrome55_1.Chrome55.createFactory();
	                    break;
	                case 'Firefox60':
	                    this._handlerFactory = Firefox60_1.Firefox60.createFactory();
	                    break;
	                case 'Safari12':
	                    this._handlerFactory = Safari12_1.Safari12.createFactory();
	                    break;
	                case 'Safari11':
	                    this._handlerFactory = Safari11_1.Safari11.createFactory();
	                    break;
	                case 'Edge11':
	                    this._handlerFactory = Edge11_1.Edge11.createFactory();
	                    break;
	                case 'ReactNative':
	                    this._handlerFactory = ReactNative_1.ReactNative.createFactory();
	                    break;
	                default:
	                    throw new TypeError(`unknown handlerName "${handlerName}"`);
	            }
	        }
	        // Create a temporal handler to get its name.
	        const handler = this._handlerFactory();
	        this._handlerName = handler.name;
	        handler.close();
	        this._extendedRtpCapabilities = undefined;
	        this._recvRtpCapabilities = undefined;
	        this._canProduceByKind =
	            {
	                audio: false,
	                video: false
	            };
	        this._sctpCapabilities = undefined;
	    }
	    /**
	     * The RTC handler name.
	     */
	    get handlerName() {
	        return this._handlerName;
	    }
	    /**
	     * Whether the Device is loaded.
	     */
	    get loaded() {
	        return this._loaded;
	    }
	    /**
	     * RTP capabilities of the Device for receiving media.
	     *
	     * @throws {InvalidStateError} if not loaded.
	     */
	    get rtpCapabilities() {
	        if (!this._loaded)
	            throw new errors.InvalidStateError('not loaded');
	        return this._recvRtpCapabilities;
	    }
	    /**
	     * SCTP capabilities of the Device.
	     *
	     * @throws {InvalidStateError} if not loaded.
	     */
	    get sctpCapabilities() {
	        if (!this._loaded)
	            throw new errors.InvalidStateError('not loaded');
	        return this._sctpCapabilities;
	    }
	    /**
	     * Initialize the Device.
	     */
	    async load({ routerRtpCapabilities }) {
	        logger.debug('load() [routerRtpCapabilities:%o]', routerRtpCapabilities);
	        // Temporal handler to get its capabilities.
	        let handler;
	        try {
	            if (this._loaded)
	                throw new errors.InvalidStateError('already loaded');
	            // This may throw.
	            ortc.validateRtpCapabilities(routerRtpCapabilities);
	            handler = this._handlerFactory();
	            const nativeRtpCapabilities = await handler.getNativeRtpCapabilities();
	            logger.debug('load() | got native RTP capabilities:%o', nativeRtpCapabilities);
	            // This may throw.
	            ortc.validateRtpCapabilities(nativeRtpCapabilities);
	            // Get extended RTP capabilities.
	            this._extendedRtpCapabilities = ortc.getExtendedRtpCapabilities(nativeRtpCapabilities, routerRtpCapabilities);
	            logger.debug('load() | got extended RTP capabilities:%o', this._extendedRtpCapabilities);
	            // Check whether we can produce audio/video.
	            this._canProduceByKind.audio =
	                ortc.canSend('audio', this._extendedRtpCapabilities);
	            this._canProduceByKind.video =
	                ortc.canSend('video', this._extendedRtpCapabilities);
	            // Generate our receiving RTP capabilities for receiving media.
	            this._recvRtpCapabilities =
	                ortc.getRecvRtpCapabilities(this._extendedRtpCapabilities);
	            // This may throw.
	            ortc.validateRtpCapabilities(this._recvRtpCapabilities);
	            logger.debug('load() | got receiving RTP capabilities:%o', this._recvRtpCapabilities);
	            // Generate our SCTP capabilities.
	            this._sctpCapabilities = await handler.getNativeSctpCapabilities();
	            logger.debug('load() | got native SCTP capabilities:%o', this._sctpCapabilities);
	            // This may throw.
	            ortc.validateSctpCapabilities(this._sctpCapabilities);
	            logger.debug('load() succeeded');
	            this._loaded = true;
	            handler.close();
	        }
	        catch (error) {
	            if (handler)
	                handler.close();
	            throw error;
	        }
	    }
	    /**
	     * Whether we can produce audio/video.
	     *
	     * @throws {InvalidStateError} if not loaded.
	     * @throws {TypeError} if wrong arguments.
	     */
	    canProduce(kind) {
	        if (!this._loaded)
	            throw new errors.InvalidStateError('not loaded');
	        else if (kind !== 'audio' && kind !== 'video')
	            throw new TypeError(`invalid kind "${kind}"`);
	        return this._canProduceByKind[kind];
	    }
	    /**
	     * Creates a Transport for sending media.
	     *
	     * @throws {InvalidStateError} if not loaded.
	     * @throws {TypeError} if wrong arguments.
	     */
	    createSendTransport({ id, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, appData = {} }) {
	        logger.debug('createSendTransport()');
	        return this._createTransport({
	            direction: 'send',
	            id: id,
	            iceParameters: iceParameters,
	            iceCandidates: iceCandidates,
	            dtlsParameters: dtlsParameters,
	            sctpParameters: sctpParameters,
	            iceServers: iceServers,
	            iceTransportPolicy: iceTransportPolicy,
	            additionalSettings: additionalSettings,
	            proprietaryConstraints: proprietaryConstraints,
	            appData: appData
	        });
	    }
	    /**
	     * Creates a Transport for receiving media.
	     *
	     * @throws {InvalidStateError} if not loaded.
	     * @throws {TypeError} if wrong arguments.
	     */
	    createRecvTransport({ id, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, appData = {} }) {
	        logger.debug('createRecvTransport()');
	        return this._createTransport({
	            direction: 'recv',
	            id: id,
	            iceParameters: iceParameters,
	            iceCandidates: iceCandidates,
	            dtlsParameters: dtlsParameters,
	            sctpParameters: sctpParameters,
	            iceServers: iceServers,
	            iceTransportPolicy: iceTransportPolicy,
	            additionalSettings: additionalSettings,
	            proprietaryConstraints: proprietaryConstraints,
	            appData: appData
	        });
	    }
	    _createTransport({ direction, id, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, appData = {} }) {
	        if (!this._loaded)
	            throw new errors.InvalidStateError('not loaded');
	        else if (typeof id !== 'string')
	            throw new TypeError('missing id');
	        else if (typeof iceParameters !== 'object')
	            throw new TypeError('missing iceParameters');
	        else if (!Array.isArray(iceCandidates))
	            throw new TypeError('missing iceCandidates');
	        else if (typeof dtlsParameters !== 'object')
	            throw new TypeError('missing dtlsParameters');
	        else if (sctpParameters && typeof sctpParameters !== 'object')
	            throw new TypeError('wrong sctpParameters');
	        else if (appData && typeof appData !== 'object')
	            throw new TypeError('if given, appData must be an object');
	        // Create a new Transport.
	        const transport = new Transport_1.Transport({
	            direction,
	            id,
	            iceParameters,
	            iceCandidates,
	            dtlsParameters,
	            sctpParameters,
	            iceServers,
	            iceTransportPolicy,
	            additionalSettings,
	            proprietaryConstraints,
	            appData,
	            handlerFactory: this._handlerFactory,
	            extendedRtpCapabilities: this._extendedRtpCapabilities,
	            canProduceByKind: this._canProduceByKind
	        });
	        return transport;
	    }
	}
	exports.Device = Device;
	});

	unwrapExports(Device_1);
	var Device_2 = Device_1.detectDevice;
	var Device_3 = Device_1.Device;

	var types = createCommonjsModule(function (module, exports) {
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	__export(Device_1);
	__export(Transport_1);
	__export(Producer_1);
	__export(Consumer_1);
	__export(DataProducer_1);
	__export(DataConsumer_1);
	__export(HandlerInterface_1);
	__export(errors);
	});

	unwrapExports(types);

	var lib$2 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });

	exports.Device = Device_1.Device;
	exports.detectDevice = Device_1.detectDevice;

	exports.types = types;
	/**
	 * Expose mediasoup-client version.
	 */
	exports.version = '3.6.12';
	/**
	 * Expose parseScalabilityMode() function.
	 */

	exports.parseScalabilityMode = scalabilityModes.parse;
	});

	unwrapExports(lib$2);
	var lib_1$1 = lib$2.Device;
	var lib_2 = lib$2.detectDevice;
	var lib_3 = lib$2.types;
	var lib_4 = lib$2.version;
	var lib_5 = lib$2.parseScalabilityMode;

	var toStr = Object.prototype.toString;

	var isArguments = function isArguments(value) {
		var str = toStr.call(value);
		var isArgs = str === '[object Arguments]';
		if (!isArgs) {
			isArgs = str !== '[object Array]' &&
				value !== null &&
				typeof value === 'object' &&
				typeof value.length === 'number' &&
				value.length >= 0 &&
				toStr.call(value.callee) === '[object Function]';
		}
		return isArgs;
	};

	var keysShim;
	if (!Object.keys) {
		// modified from https://github.com/es-shims/es5-shim
		var has = Object.prototype.hasOwnProperty;
		var toStr$1 = Object.prototype.toString;
		var isArgs = isArguments; // eslint-disable-line global-require
		var isEnumerable = Object.prototype.propertyIsEnumerable;
		var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
		var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
		var dontEnums = [
			'toString',
			'toLocaleString',
			'valueOf',
			'hasOwnProperty',
			'isPrototypeOf',
			'propertyIsEnumerable',
			'constructor'
		];
		var equalsConstructorPrototype = function (o) {
			var ctor = o.constructor;
			return ctor && ctor.prototype === o;
		};
		var excludedKeys = {
			$applicationCache: true,
			$console: true,
			$external: true,
			$frame: true,
			$frameElement: true,
			$frames: true,
			$innerHeight: true,
			$innerWidth: true,
			$onmozfullscreenchange: true,
			$onmozfullscreenerror: true,
			$outerHeight: true,
			$outerWidth: true,
			$pageXOffset: true,
			$pageYOffset: true,
			$parent: true,
			$scrollLeft: true,
			$scrollTop: true,
			$scrollX: true,
			$scrollY: true,
			$self: true,
			$webkitIndexedDB: true,
			$webkitStorageInfo: true,
			$window: true
		};
		var hasAutomationEqualityBug = (function () {
			/* global window */
			if (typeof window === 'undefined') { return false; }
			for (var k in window) {
				try {
					if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
						try {
							equalsConstructorPrototype(window[k]);
						} catch (e) {
							return true;
						}
					}
				} catch (e) {
					return true;
				}
			}
			return false;
		}());
		var equalsConstructorPrototypeIfNotBuggy = function (o) {
			/* global window */
			if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
				return equalsConstructorPrototype(o);
			}
			try {
				return equalsConstructorPrototype(o);
			} catch (e) {
				return false;
			}
		};

		keysShim = function keys(object) {
			var isObject = object !== null && typeof object === 'object';
			var isFunction = toStr$1.call(object) === '[object Function]';
			var isArguments = isArgs(object);
			var isString = isObject && toStr$1.call(object) === '[object String]';
			var theKeys = [];

			if (!isObject && !isFunction && !isArguments) {
				throw new TypeError('Object.keys called on a non-object');
			}

			var skipProto = hasProtoEnumBug && isFunction;
			if (isString && object.length > 0 && !has.call(object, 0)) {
				for (var i = 0; i < object.length; ++i) {
					theKeys.push(String(i));
				}
			}

			if (isArguments && object.length > 0) {
				for (var j = 0; j < object.length; ++j) {
					theKeys.push(String(j));
				}
			} else {
				for (var name in object) {
					if (!(skipProto && name === 'prototype') && has.call(object, name)) {
						theKeys.push(String(name));
					}
				}
			}

			if (hasDontEnumBug) {
				var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

				for (var k = 0; k < dontEnums.length; ++k) {
					if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
						theKeys.push(dontEnums[k]);
					}
				}
			}
			return theKeys;
		};
	}
	var implementation = keysShim;

	var slice = Array.prototype.slice;


	var origKeys = Object.keys;
	var keysShim$1 = origKeys ? function keys(o) { return origKeys(o); } : implementation;

	var originalKeys = Object.keys;

	keysShim$1.shim = function shimObjectKeys() {
		if (Object.keys) {
			var keysWorksWithArguments = (function () {
				// Safari 5.0 bug
				var args = Object.keys(arguments);
				return args && args.length === arguments.length;
			}(1, 2));
			if (!keysWorksWithArguments) {
				Object.keys = function keys(object) { // eslint-disable-line func-name-matching
					if (isArguments(object)) {
						return originalKeys(slice.call(object));
					}
					return originalKeys(object);
				};
			}
		} else {
			Object.keys = keysShim$1;
		}
		return Object.keys || keysShim$1;
	};

	var objectKeys = keysShim$1;

	var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';
	var toStr$2 = Object.prototype.toString;

	var isStandardArguments = function isArguments(value) {
		if (hasToStringTag && value && typeof value === 'object' && Symbol.toStringTag in value) {
			return false;
		}
		return toStr$2.call(value) === '[object Arguments]';
	};

	var isLegacyArguments = function isArguments(value) {
		if (isStandardArguments(value)) {
			return true;
		}
		return value !== null &&
			typeof value === 'object' &&
			typeof value.length === 'number' &&
			value.length >= 0 &&
			toStr$2.call(value) !== '[object Array]' &&
			toStr$2.call(value.callee) === '[object Function]';
	};

	var supportsStandardArguments = (function () {
		return isStandardArguments(arguments);
	}());

	isStandardArguments.isLegacyArguments = isLegacyArguments; // for tests

	var isArguments$1 = supportsStandardArguments ? isStandardArguments : isLegacyArguments;

	var hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';

	var toStr$3 = Object.prototype.toString;
	var concat = Array.prototype.concat;
	var origDefineProperty = Object.defineProperty;

	var isFunction = function (fn) {
		return typeof fn === 'function' && toStr$3.call(fn) === '[object Function]';
	};

	var arePropertyDescriptorsSupported = function () {
		var obj = {};
		try {
			origDefineProperty(obj, 'x', { enumerable: false, value: obj });
			// eslint-disable-next-line no-unused-vars, no-restricted-syntax
			for (var _ in obj) { // jscs:ignore disallowUnusedVariables
				return false;
			}
			return obj.x === obj;
		} catch (e) { /* this is IE 8. */
			return false;
		}
	};
	var supportsDescriptors = origDefineProperty && arePropertyDescriptorsSupported();

	var defineProperty = function (object, name, value, predicate) {
		if (name in object && (!isFunction(predicate) || !predicate())) {
			return;
		}
		if (supportsDescriptors) {
			origDefineProperty(object, name, {
				configurable: true,
				enumerable: false,
				value: value,
				writable: true
			});
		} else {
			object[name] = value;
		}
	};

	var defineProperties = function (object, map) {
		var predicates = arguments.length > 2 ? arguments[2] : {};
		var props = objectKeys(map);
		if (hasSymbols) {
			props = concat.call(props, Object.getOwnPropertySymbols(map));
		}
		for (var i = 0; i < props.length; i += 1) {
			defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
		}
	};

	defineProperties.supportsDescriptors = !!supportsDescriptors;

	var defineProperties_1 = defineProperties;

	/* eslint no-invalid-this: 1 */

	var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
	var slice$1 = Array.prototype.slice;
	var toStr$4 = Object.prototype.toString;
	var funcType = '[object Function]';

	var implementation$1 = function bind(that) {
	    var target = this;
	    if (typeof target !== 'function' || toStr$4.call(target) !== funcType) {
	        throw new TypeError(ERROR_MESSAGE + target);
	    }
	    var args = slice$1.call(arguments, 1);

	    var bound;
	    var binder = function () {
	        if (this instanceof bound) {
	            var result = target.apply(
	                this,
	                args.concat(slice$1.call(arguments))
	            );
	            if (Object(result) === result) {
	                return result;
	            }
	            return this;
	        } else {
	            return target.apply(
	                that,
	                args.concat(slice$1.call(arguments))
	            );
	        }
	    };

	    var boundLength = Math.max(0, target.length - args.length);
	    var boundArgs = [];
	    for (var i = 0; i < boundLength; i++) {
	        boundArgs.push('$' + i);
	    }

	    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

	    if (target.prototype) {
	        var Empty = function Empty() {};
	        Empty.prototype = target.prototype;
	        bound.prototype = new Empty();
	        Empty.prototype = null;
	    }

	    return bound;
	};

	var functionBind = Function.prototype.bind || implementation$1;

	/* eslint complexity: [2, 18], max-statements: [2, 33] */
	var shams = function hasSymbols() {
		if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
		if (typeof Symbol.iterator === 'symbol') { return true; }

		var obj = {};
		var sym = Symbol('test');
		var symObj = Object(sym);
		if (typeof sym === 'string') { return false; }

		if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
		if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

		// temp disabled per https://github.com/ljharb/object.assign/issues/17
		// if (sym instanceof Symbol) { return false; }
		// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
		// if (!(symObj instanceof Symbol)) { return false; }

		// if (typeof Symbol.prototype.toString !== 'function') { return false; }
		// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

		var symVal = 42;
		obj[sym] = symVal;
		for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax
		if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

		if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

		var syms = Object.getOwnPropertySymbols(obj);
		if (syms.length !== 1 || syms[0] !== sym) { return false; }

		if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

		if (typeof Object.getOwnPropertyDescriptor === 'function') {
			var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
			if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
		}

		return true;
	};

	var origSymbol = commonjsGlobal.Symbol;


	var hasSymbols$1 = function hasNativeSymbols() {
		if (typeof origSymbol !== 'function') { return false; }
		if (typeof Symbol !== 'function') { return false; }
		if (typeof origSymbol('foo') !== 'symbol') { return false; }
		if (typeof Symbol('bar') !== 'symbol') { return false; }

		return shams();
	};

	/* globals
		Atomics,
		SharedArrayBuffer,
	*/

	var undefined$1;

	var $TypeError = TypeError;

	var $gOPD = Object.getOwnPropertyDescriptor;
	if ($gOPD) {
		try {
			$gOPD({}, '');
		} catch (e) {
			$gOPD = null; // this is IE 8, which has a broken gOPD
		}
	}

	var throwTypeError = function () { throw new $TypeError(); };
	var ThrowTypeError = $gOPD
		? (function () {
			try {
				// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
				arguments.callee; // IE 8 does not throw here
				return throwTypeError;
			} catch (calleeThrows) {
				try {
					// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
					return $gOPD(arguments, 'callee').get;
				} catch (gOPDthrows) {
					return throwTypeError;
				}
			}
		}())
		: throwTypeError;

	var hasSymbols$2 = hasSymbols$1();

	var getProto = Object.getPrototypeOf || function (x) { return x.__proto__; }; // eslint-disable-line no-proto
	var generatorFunction =  undefined$1;
	var asyncFunction =  undefined$1;
	var asyncGenFunction =  undefined$1;

	var TypedArray = typeof Uint8Array === 'undefined' ? undefined$1 : getProto(Uint8Array);

	var INTRINSICS = {
		'%Array%': Array,
		'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined$1 : ArrayBuffer,
		'%ArrayBufferPrototype%': typeof ArrayBuffer === 'undefined' ? undefined$1 : ArrayBuffer.prototype,
		'%ArrayIteratorPrototype%': hasSymbols$2 ? getProto([][Symbol.iterator]()) : undefined$1,
		'%ArrayPrototype%': Array.prototype,
		'%ArrayProto_entries%': Array.prototype.entries,
		'%ArrayProto_forEach%': Array.prototype.forEach,
		'%ArrayProto_keys%': Array.prototype.keys,
		'%ArrayProto_values%': Array.prototype.values,
		'%AsyncFromSyncIteratorPrototype%': undefined$1,
		'%AsyncFunction%': asyncFunction,
		'%AsyncFunctionPrototype%':  undefined$1,
		'%AsyncGenerator%':  undefined$1,
		'%AsyncGeneratorFunction%': asyncGenFunction,
		'%AsyncGeneratorPrototype%':  undefined$1,
		'%AsyncIteratorPrototype%':  undefined$1,
		'%Atomics%': typeof Atomics === 'undefined' ? undefined$1 : Atomics,
		'%Boolean%': Boolean,
		'%BooleanPrototype%': Boolean.prototype,
		'%DataView%': typeof DataView === 'undefined' ? undefined$1 : DataView,
		'%DataViewPrototype%': typeof DataView === 'undefined' ? undefined$1 : DataView.prototype,
		'%Date%': Date,
		'%DatePrototype%': Date.prototype,
		'%decodeURI%': decodeURI,
		'%decodeURIComponent%': decodeURIComponent,
		'%encodeURI%': encodeURI,
		'%encodeURIComponent%': encodeURIComponent,
		'%Error%': Error,
		'%ErrorPrototype%': Error.prototype,
		'%eval%': eval, // eslint-disable-line no-eval
		'%EvalError%': EvalError,
		'%EvalErrorPrototype%': EvalError.prototype,
		'%Float32Array%': typeof Float32Array === 'undefined' ? undefined$1 : Float32Array,
		'%Float32ArrayPrototype%': typeof Float32Array === 'undefined' ? undefined$1 : Float32Array.prototype,
		'%Float64Array%': typeof Float64Array === 'undefined' ? undefined$1 : Float64Array,
		'%Float64ArrayPrototype%': typeof Float64Array === 'undefined' ? undefined$1 : Float64Array.prototype,
		'%Function%': Function,
		'%FunctionPrototype%': Function.prototype,
		'%Generator%':  undefined$1,
		'%GeneratorFunction%': generatorFunction,
		'%GeneratorPrototype%':  undefined$1,
		'%Int8Array%': typeof Int8Array === 'undefined' ? undefined$1 : Int8Array,
		'%Int8ArrayPrototype%': typeof Int8Array === 'undefined' ? undefined$1 : Int8Array.prototype,
		'%Int16Array%': typeof Int16Array === 'undefined' ? undefined$1 : Int16Array,
		'%Int16ArrayPrototype%': typeof Int16Array === 'undefined' ? undefined$1 : Int8Array.prototype,
		'%Int32Array%': typeof Int32Array === 'undefined' ? undefined$1 : Int32Array,
		'%Int32ArrayPrototype%': typeof Int32Array === 'undefined' ? undefined$1 : Int32Array.prototype,
		'%isFinite%': isFinite,
		'%isNaN%': isNaN,
		'%IteratorPrototype%': hasSymbols$2 ? getProto(getProto([][Symbol.iterator]())) : undefined$1,
		'%JSON%': typeof JSON === 'object' ? JSON : undefined$1,
		'%JSONParse%': typeof JSON === 'object' ? JSON.parse : undefined$1,
		'%Map%': typeof Map === 'undefined' ? undefined$1 : Map,
		'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols$2 ? undefined$1 : getProto(new Map()[Symbol.iterator]()),
		'%MapPrototype%': typeof Map === 'undefined' ? undefined$1 : Map.prototype,
		'%Math%': Math,
		'%Number%': Number,
		'%NumberPrototype%': Number.prototype,
		'%Object%': Object,
		'%ObjectPrototype%': Object.prototype,
		'%ObjProto_toString%': Object.prototype.toString,
		'%ObjProto_valueOf%': Object.prototype.valueOf,
		'%parseFloat%': parseFloat,
		'%parseInt%': parseInt,
		'%Promise%': typeof Promise === 'undefined' ? undefined$1 : Promise,
		'%PromisePrototype%': typeof Promise === 'undefined' ? undefined$1 : Promise.prototype,
		'%PromiseProto_then%': typeof Promise === 'undefined' ? undefined$1 : Promise.prototype.then,
		'%Promise_all%': typeof Promise === 'undefined' ? undefined$1 : Promise.all,
		'%Promise_reject%': typeof Promise === 'undefined' ? undefined$1 : Promise.reject,
		'%Promise_resolve%': typeof Promise === 'undefined' ? undefined$1 : Promise.resolve,
		'%Proxy%': typeof Proxy === 'undefined' ? undefined$1 : Proxy,
		'%RangeError%': RangeError,
		'%RangeErrorPrototype%': RangeError.prototype,
		'%ReferenceError%': ReferenceError,
		'%ReferenceErrorPrototype%': ReferenceError.prototype,
		'%Reflect%': typeof Reflect === 'undefined' ? undefined$1 : Reflect,
		'%RegExp%': RegExp,
		'%RegExpPrototype%': RegExp.prototype,
		'%Set%': typeof Set === 'undefined' ? undefined$1 : Set,
		'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols$2 ? undefined$1 : getProto(new Set()[Symbol.iterator]()),
		'%SetPrototype%': typeof Set === 'undefined' ? undefined$1 : Set.prototype,
		'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined$1 : SharedArrayBuffer,
		'%SharedArrayBufferPrototype%': typeof SharedArrayBuffer === 'undefined' ? undefined$1 : SharedArrayBuffer.prototype,
		'%String%': String,
		'%StringIteratorPrototype%': hasSymbols$2 ? getProto(''[Symbol.iterator]()) : undefined$1,
		'%StringPrototype%': String.prototype,
		'%Symbol%': hasSymbols$2 ? Symbol : undefined$1,
		'%SymbolPrototype%': hasSymbols$2 ? Symbol.prototype : undefined$1,
		'%SyntaxError%': SyntaxError,
		'%SyntaxErrorPrototype%': SyntaxError.prototype,
		'%ThrowTypeError%': ThrowTypeError,
		'%TypedArray%': TypedArray,
		'%TypedArrayPrototype%': TypedArray ? TypedArray.prototype : undefined$1,
		'%TypeError%': $TypeError,
		'%TypeErrorPrototype%': $TypeError.prototype,
		'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined$1 : Uint8Array,
		'%Uint8ArrayPrototype%': typeof Uint8Array === 'undefined' ? undefined$1 : Uint8Array.prototype,
		'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined$1 : Uint8ClampedArray,
		'%Uint8ClampedArrayPrototype%': typeof Uint8ClampedArray === 'undefined' ? undefined$1 : Uint8ClampedArray.prototype,
		'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined$1 : Uint16Array,
		'%Uint16ArrayPrototype%': typeof Uint16Array === 'undefined' ? undefined$1 : Uint16Array.prototype,
		'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined$1 : Uint32Array,
		'%Uint32ArrayPrototype%': typeof Uint32Array === 'undefined' ? undefined$1 : Uint32Array.prototype,
		'%URIError%': URIError,
		'%URIErrorPrototype%': URIError.prototype,
		'%WeakMap%': typeof WeakMap === 'undefined' ? undefined$1 : WeakMap,
		'%WeakMapPrototype%': typeof WeakMap === 'undefined' ? undefined$1 : WeakMap.prototype,
		'%WeakSet%': typeof WeakSet === 'undefined' ? undefined$1 : WeakSet,
		'%WeakSetPrototype%': typeof WeakSet === 'undefined' ? undefined$1 : WeakSet.prototype
	};


	var $replace = functionBind.call(Function.call, String.prototype.replace);

	/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
	var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
	var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
	var stringToPath = function stringToPath(string) {
		var result = [];
		$replace(string, rePropName, function (match, number, quote, subString) {
			result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : (number || match);
		});
		return result;
	};
	/* end adaptation */

	var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
		if (!(name in INTRINSICS)) {
			throw new SyntaxError('intrinsic ' + name + ' does not exist!');
		}

		// istanbul ignore if // hopefully this is impossible to test :-)
		if (typeof INTRINSICS[name] === 'undefined' && !allowMissing) {
			throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
		}

		return INTRINSICS[name];
	};

	var GetIntrinsic = function GetIntrinsic(name, allowMissing) {
		if (typeof name !== 'string' || name.length === 0) {
			throw new TypeError('intrinsic name must be a non-empty string');
		}
		if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
			throw new TypeError('"allowMissing" argument must be a boolean');
		}

		var parts = stringToPath(name);

		var value = getBaseIntrinsic('%' + (parts.length > 0 ? parts[0] : '') + '%', allowMissing);
		for (var i = 1; i < parts.length; i += 1) {
			if (value != null) {
				if ($gOPD && (i + 1) >= parts.length) {
					var desc = $gOPD(value, parts[i]);
					if (!allowMissing && !(parts[i] in value)) {
						throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
					}
					value = desc ? (desc.get || desc.value) : value[parts[i]];
				} else {
					value = value[parts[i]];
				}
			}
		}
		return value;
	};

	var $apply = GetIntrinsic('%Function.prototype.apply%');
	var $call = GetIntrinsic('%Function.prototype.call%');
	var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || functionBind.call($call, $apply);

	var callBind = function callBind() {
		return $reflectApply(functionBind, $call, arguments);
	};

	var apply = function applyBind() {
		return $reflectApply(functionBind, $apply, arguments);
	};
	callBind.apply = apply;

	var numberIsNaN = function (value) {
		return value !== value;
	};

	var implementation$2 = function is(a, b) {
		if (a === 0 && b === 0) {
			return 1 / a === 1 / b;
		}
		if (a === b) {
			return true;
		}
		if (numberIsNaN(a) && numberIsNaN(b)) {
			return true;
		}
		return false;
	};

	var polyfill = function getPolyfill() {
		return typeof Object.is === 'function' ? Object.is : implementation$2;
	};

	var shim = function shimObjectIs() {
		var polyfill$1 = polyfill();
		defineProperties_1(Object, { is: polyfill$1 }, {
			is: function testObjectIs() {
				return Object.is !== polyfill$1;
			}
		});
		return polyfill$1;
	};

	var polyfill$1 = callBind(polyfill(), Object);

	defineProperties_1(polyfill$1, {
		getPolyfill: polyfill,
		implementation: implementation$2,
		shim: shim
	});

	var objectIs = polyfill$1;

	var hasSymbols$3 = hasSymbols$1();
	var hasToStringTag$1 = hasSymbols$3 && typeof Symbol.toStringTag === 'symbol';
	var hasOwnProperty;
	var regexExec;
	var isRegexMarker;
	var badStringifier;

	if (hasToStringTag$1) {
		hasOwnProperty = Function.call.bind(Object.prototype.hasOwnProperty);
		regexExec = Function.call.bind(RegExp.prototype.exec);
		isRegexMarker = {};

		var throwRegexMarker = function () {
			throw isRegexMarker;
		};
		badStringifier = {
			toString: throwRegexMarker,
			valueOf: throwRegexMarker
		};

		if (typeof Symbol.toPrimitive === 'symbol') {
			badStringifier[Symbol.toPrimitive] = throwRegexMarker;
		}
	}

	var toStr$5 = Object.prototype.toString;
	var gOPD = Object.getOwnPropertyDescriptor;
	var regexClass = '[object RegExp]';

	var isRegex = hasToStringTag$1
		// eslint-disable-next-line consistent-return
		? function isRegex(value) {
			if (!value || typeof value !== 'object') {
				return false;
			}

			var descriptor = gOPD(value, 'lastIndex');
			var hasLastIndexDataProperty = descriptor && hasOwnProperty(descriptor, 'value');
			if (!hasLastIndexDataProperty) {
				return false;
			}

			try {
				regexExec(value, badStringifier);
			} catch (e) {
				return e === isRegexMarker;
			}
		}
		: function isRegex(value) {
			// In older browsers, typeof regex incorrectly returns 'function'
			if (!value || (typeof value !== 'object' && typeof value !== 'function')) {
				return false;
			}

			return toStr$5.call(value) === regexClass;
		};

	var $Object = Object;
	var $TypeError$1 = TypeError;

	var implementation$3 = function flags() {
		if (this != null && this !== $Object(this)) {
			throw new $TypeError$1('RegExp.prototype.flags getter called on non-object');
		}
		var result = '';
		if (this.global) {
			result += 'g';
		}
		if (this.ignoreCase) {
			result += 'i';
		}
		if (this.multiline) {
			result += 'm';
		}
		if (this.dotAll) {
			result += 's';
		}
		if (this.unicode) {
			result += 'u';
		}
		if (this.sticky) {
			result += 'y';
		}
		return result;
	};

	var supportsDescriptors$1 = defineProperties_1.supportsDescriptors;
	var $gOPD$1 = Object.getOwnPropertyDescriptor;
	var $TypeError$2 = TypeError;

	var polyfill$2 = function getPolyfill() {
		if (!supportsDescriptors$1) {
			throw new $TypeError$2('RegExp.prototype.flags requires a true ES5 environment that supports property descriptors');
		}
		if ((/a/mig).flags === 'gim') {
			var descriptor = $gOPD$1(RegExp.prototype, 'flags');
			if (descriptor && typeof descriptor.get === 'function' && typeof (/a/).dotAll === 'boolean') {
				return descriptor.get;
			}
		}
		return implementation$3;
	};

	var supportsDescriptors$2 = defineProperties_1.supportsDescriptors;

	var gOPD$1 = Object.getOwnPropertyDescriptor;
	var defineProperty$1 = Object.defineProperty;
	var TypeErr = TypeError;
	var getProto$1 = Object.getPrototypeOf;
	var regex = /a/;

	var shim$1 = function shimFlags() {
		if (!supportsDescriptors$2 || !getProto$1) {
			throw new TypeErr('RegExp.prototype.flags requires a true ES5 environment that supports property descriptors');
		}
		var polyfill = polyfill$2();
		var proto = getProto$1(regex);
		var descriptor = gOPD$1(proto, 'flags');
		if (!descriptor || descriptor.get !== polyfill) {
			defineProperty$1(proto, 'flags', {
				configurable: true,
				enumerable: false,
				get: polyfill
			});
		}
		return polyfill;
	};

	var flagsBound = callBind(implementation$3);

	defineProperties_1(flagsBound, {
		getPolyfill: polyfill$2,
		implementation: implementation$3,
		shim: shim$1
	});

	var regexp_prototype_flags = flagsBound;

	var getDay = Date.prototype.getDay;
	var tryDateObject = function tryDateGetDayCall(value) {
		try {
			getDay.call(value);
			return true;
		} catch (e) {
			return false;
		}
	};

	var toStr$6 = Object.prototype.toString;
	var dateClass = '[object Date]';
	var hasToStringTag$2 = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';

	var isDateObject = function isDateObject(value) {
		if (typeof value !== 'object' || value === null) {
			return false;
		}
		return hasToStringTag$2 ? tryDateObject(value) : toStr$6.call(value) === dateClass;
	};

	var getTime = Date.prototype.getTime;

	function deepEqual(actual, expected, options) {
	  var opts = options || {};

	  // 7.1. All identical values are equivalent, as determined by ===.
	  if (opts.strict ? objectIs(actual, expected) : actual === expected) {
	    return true;
	  }

	  // 7.3. Other pairs that do not both pass typeof value == 'object', equivalence is determined by ==.
	  if (!actual || !expected || (typeof actual !== 'object' && typeof expected !== 'object')) {
	    return opts.strict ? objectIs(actual, expected) : actual == expected;
	  }

	  /*
	   * 7.4. For all other Object pairs, including Array objects, equivalence is
	   * determined by having the same number of owned properties (as verified
	   * with Object.prototype.hasOwnProperty.call), the same set of keys
	   * (although not necessarily the same order), equivalent values for every
	   * corresponding key, and an identical 'prototype' property. Note: this
	   * accounts for both named and indexed properties on Arrays.
	   */
	  // eslint-disable-next-line no-use-before-define
	  return objEquiv(actual, expected, opts);
	}

	function isUndefinedOrNull(value) {
	  return value === null || value === undefined;
	}

	function isBuffer(x) {
	  if (!x || typeof x !== 'object' || typeof x.length !== 'number') {
	    return false;
	  }
	  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
	    return false;
	  }
	  if (x.length > 0 && typeof x[0] !== 'number') {
	    return false;
	  }
	  return true;
	}

	function objEquiv(a, b, opts) {
	  /* eslint max-statements: [2, 50] */
	  var i, key;
	  if (typeof a !== typeof b) { return false; }
	  if (isUndefinedOrNull(a) || isUndefinedOrNull(b)) { return false; }

	  // an identical 'prototype' property.
	  if (a.prototype !== b.prototype) { return false; }

	  if (isArguments$1(a) !== isArguments$1(b)) { return false; }

	  var aIsRegex = isRegex(a);
	  var bIsRegex = isRegex(b);
	  if (aIsRegex !== bIsRegex) { return false; }
	  if (aIsRegex || bIsRegex) {
	    return a.source === b.source && regexp_prototype_flags(a) === regexp_prototype_flags(b);
	  }

	  if (isDateObject(a) && isDateObject(b)) {
	    return getTime.call(a) === getTime.call(b);
	  }

	  var aIsBuffer = isBuffer(a);
	  var bIsBuffer = isBuffer(b);
	  if (aIsBuffer !== bIsBuffer) { return false; }
	  if (aIsBuffer || bIsBuffer) { // && would work too, because both are true or both false here
	    if (a.length !== b.length) { return false; }
	    for (i = 0; i < a.length; i++) {
	      if (a[i] !== b[i]) { return false; }
	    }
	    return true;
	  }

	  if (typeof a !== typeof b) { return false; }

	  try {
	    var ka = objectKeys(a);
	    var kb = objectKeys(b);
	  } catch (e) { // happens when one is a string literal and the other isn't
	    return false;
	  }
	  // having the same number of owned properties (keys incorporates hasOwnProperty)
	  if (ka.length !== kb.length) { return false; }

	  // the same set of keys (although not necessarily the same order),
	  ka.sort();
	  kb.sort();
	  // ~~~cheap key test
	  for (i = ka.length - 1; i >= 0; i--) {
	    if (ka[i] != kb[i]) { return false; }
	  }
	  // equivalent values for every corresponding key, and ~~~possibly expensive deep test
	  for (i = ka.length - 1; i >= 0; i--) {
	    key = ka[i];
	    if (!deepEqual(a[key], b[key], opts)) { return false; }
	  }

	  return true;
	}

	var deepEqual_1 = deepEqual;

	const {desktopCapturer} = require('electron');


	async function getScreenMedias() {
	    let stream = null;
	    await desktopCapturer.getSources({types: ['window', 'screen']}).then(async sources => {
	        for (const source of sources) {
	            if (source.name === 'Entire Screen') {
	                try {
	                    stream = await navigator.mediaDevices.getUserMedia({
	                        audio: false,
	                        video: {
	                            mandatory: {
	                                chromeMediaSource: 'desktop',
	                                chromeMediaSourceId: source.id,
	                                minWidth: 1280,
	                                maxWidth: 1280,
	                                minHeight: 720,
	                                maxHeight: 720
	                            }
	                        }
	                    });
	                } catch (e) {
	                    console.log(e);
	                }
	            }
	        }
	    });
	    return stream
	}

	// import * as config from './config';

	const $ = document.querySelector.bind(document);
	const $$ = document.querySelectorAll.bind(document);

	//
	// export all the references we use internally to manage call state,
	// to make it easy to tinker from the js console. for example:
	//
	//   `Client.camVideoProducer.paused`
	// 随机生成一个peerid
	const myPeerId = uuidv4();
	// 全局变量
	exports.currentActiveSpeaker = {};
	    exports.lastPollSyncData = {};
	    exports.consumers = [];

	//
	// entry point -- called by document.body.onload
	//
	// 页面加载完成后初始化函数
	async function main() {
	    console.log(`starting up ... my peerId is ${myPeerId}`);
	    try {
	        // 检查浏览器是否支持视频通话
	        exports.device = new lib_1$1();
	    } catch (e) {
	        if (e.name === 'UnsupportedError') {
	            console.error('browser not supported for video calls');
	            return;
	        } else {
	            console.error(e);
	        }
	    }

	    // use sendBeacon to tell the server we're disconnecting when
	    // the page unloads
	    // 当关闭页面的时候调用离开房间指令
	    window.addEventListener('unload', () => sig('leave', {}, true));
	}

	//
	// meeting control actions
	//
	// 加入房间
	async function joinRoom() {
	    if (exports.joined) {
	        return;
	    }

	    console.log('join room');
	    $('#join-control').style.display = 'none';

	    try {
	        // signal that we're a new peer and initialize our
	        // mediasoup-client device, if this is our first time connecting
	        // 调用加入指令，获取rtc支持的能力
	        let {routerRtpCapabilities} = await sig('join-as-new-peer');
	        // 用服务端支持的能力加载设备对象
	        if (!exports.device.loaded) {
	            await exports.device.load({routerRtpCapabilities});
	        }
	        exports.joined = true;
	        $('#leave-room').style.display = 'initial';
	    } catch (e) {
	        console.error(e);
	        return;
	    }

	    // super-simple signaling: let's poll at 1-second intervals
	    // 每秒发送浏览器同步指令  保持在线状态
	    exports.pollingInterval = setInterval(async () => {
	        let {error} = await pollAndUpdate();
	        if (error) {
	            clearInterval(exports.pollingInterval);
	            console.log(error);
	        }
	    }, 1000);
	}

	// 页面点击上传摄像头视频流
	async function sendCameraStreams() {
	    console.log('send camera streams');
	    $('#send-camera').style.display = 'none';

	    // make sure we've joined the room and started our camera. these
	    // functions don't do anything if they've already been called this
	    // session
	    // 前提是已经加入房间 并 开启了摄像头
	    await joinRoom();
	    await startCamera();

	    // create a transport for outgoing media, if we don't already have one
	    // 创建一个上行的传输对象
	    if (!exports.sendTransport) {
	        exports.sendTransport = await createTransport('send');
	    }

	    // start sending video. the transport logic will initiate a
	    // signaling conversation with the server to set up an outbound rtp
	    // stream for the camera video track. our createTransport() function
	    // includes logic to tell the server to start the stream in a paused
	    // state, if the checkbox in our UI is unchecked. so as soon as we
	    // have a client-side camVideoProducer object, we need to set it to
	    // paused as appropriate, too.
	    // 开始对接摄像头视频流到上行传输对象  并获得一个上行的生产者控制对象
	    exports.camVideoProducer = await exports.sendTransport.produce({
	        track: exports.localCam.getVideoTracks()[0],
	        encodings: camEncodings(),
	        appData: {mediaTag: 'cam-video'}
	    });
	    // 如果页面上的摄像头暂停状态checkbox关闭  那么暂停上传
	    if (getCamPausedState()) {
	        try {
	            await exports.camVideoProducer.pause();
	        } catch (e) {
	            console.error(e);
	        }
	    }

	    // same thing for audio, but we can use our already-created
	    // 开始对接麦克风音频流到上行传输对象  并获得一个上行的生产者控制对象
	    exports.camAudioProducer = await exports.sendTransport.produce({
	        track: exports.localCam.getAudioTracks()[0],
	        appData: {mediaTag: 'cam-audio'}
	    });
	    if (getMicPausedState()) {
	        try {
	            exports.camAudioProducer.pause();
	        } catch (e) {
	            console.error(e);
	        }
	    }

	    $('#stop-streams').style.display = 'initial';
	    showCameraInfo();
	}

	// 页面点击分享屏幕视频流
	async function startScreenshare() {
	    console.log('start screen share');
	    $('#share-screen').style.display = 'none';

	    // make sure we've joined the room and that we have a sending
	    // transport
	    // 前提是加入房间
	    await joinRoom();
	    // 创建上行传输通道
	    if (!exports.sendTransport) {
	        exports.sendTransport = await createTransport('send');
	    }

	    // get a screen share track
	    // 从浏览器的屏幕插件获取屏幕视频流
	    exports.localScreen = await getScreenMedias();
	    if (!exports.localScreen) {
	        console.log('can\'t get screen capture media from electron');
	        return
	    }
	    // create a producer for video
	    // 对接传输视频流  并获得一个视频流生产者控制对象
	    exports.screenVideoProducer = await exports.sendTransport.produce({
	        track: exports.localScreen.getVideoTracks()[0],
	        encodings: screenshareEncodings(),
	        appData: {mediaTag: 'screen-video'}
	    });

	    // create a producer for audio, if we have it
	    // 对接传输音频流  并获得一个音频流生产者控制对象
	    if (exports.localScreen.getAudioTracks().length) {
	        exports.screenAudioProducer = await exports.sendTransport.produce({
	            track: exports.localScreen.getAudioTracks()[0],
	            appData: {mediaTag: 'screen-audio'}
	        });
	    }

	    // handler for screen share stopped event (triggered by the
	    // browser's built-in screen sharing ui)
	    // 当上行生产者结束上传视频流
	    exports.screenVideoProducer.track.onended = async () => {
	        console.log('screen share stopped');
	        try {
	            // 暂停上传
	            await exports.screenVideoProducer.pause();
	            let {error} = await sig('close-producer',
	                {producerId: exports.screenVideoProducer.id});
	            // 关闭生产者
	            await exports.screenVideoProducer.close();
	            exports.screenVideoProducer = null;
	            if (error) {
	                console.log(error);
	            }
	            // 同时关闭音频流的生产者
	            if (exports.screenAudioProducer) {
	                let {error} = await sig('close-producer',
	                    {producerId: exports.screenAudioProducer.id});
	                await exports.screenAudioProducer.close();
	                exports.screenAudioProducer = null;
	                if (error) {
	                    console.log(error);
	                }
	            }
	        } catch (e) {
	            console.error(e);
	        }
	        $('#local-screen-pause-ctrl').style.display = 'none';
	        $('#local-screen-audio-pause-ctrl').style.display = 'none';
	        $('#share-screen').style.display = 'initial';
	    };

	    $('#local-screen-pause-ctrl').style.display = 'block';
	    if (exports.screenAudioProducer) {
	        $('#local-screen-audio-pause-ctrl').style.display = 'block';
	    }
	}

	// 开启摄像头
	async function startCamera() {
	    if (exports.localCam) {
	        return;
	    }
	    console.log('start camera');
	    try {
	        exports.localCam = await navigator.mediaDevices.getUserMedia({
	            video: true,
	            audio: true
	        });
	    } catch (e) {
	        console.error('start camera error', e);
	    }
	}

	// switch to sending video from the "next" camera device in our device
	// list (if we have multiple cameras)
	// 多个摄像头的时候做切换摄像头用
	async function cycleCamera() {
	    if (!(exports.camVideoProducer && exports.camVideoProducer.track)) {
	        console.log('cannot cycle camera - no current camera track');
	        return;
	    }

	    console.log('cycle camera');

	    // find "next" device in device list
	    let deviceId = await getCurrentDeviceId(),
	        allDevices = await navigator.mediaDevices.enumerateDevices(),
	        vidDevices = allDevices.filter((d) => d.kind === 'videoinput');
	    if (!vidDevices.length > 1) {
	        console.log('cannot cycle camera - only one camera');
	        return;
	    }
	    let idx = vidDevices.findIndex((d) => d.deviceId === deviceId);
	    if (idx === (vidDevices.length - 1)) {
	        idx = 0;
	    } else {
	        idx += 1;
	    }

	    // get a new video stream. might as well get a new audio stream too,
	    // just in case browsers want to group audio/video streams together
	    // from the same device when possible (though they don't seem to,
	    // currently)
	    console.log('getting a video stream from new device', vidDevices[idx].label);
	    exports.localCam = await navigator.mediaDevices.getUserMedia({
	        video: {deviceId: {exact: vidDevices[idx].deviceId}},
	        audio: true
	    });

	    // replace the tracks we are sending
	    await exports.camVideoProducer.replaceTrack({track: exports.localCam.getVideoTracks()[0]});
	    await exports.camAudioProducer.replaceTrack({track: exports.localCam.getAudioTracks()[0]});

	    // update the user interface
	    showCameraInfo();
	}

	// 停止上行流
	async function stopStreams() {
	    if (!(exports.localCam || exports.localScreen)) {
	        return;
	    }
	    if (!exports.sendTransport) {
	        return;
	    }

	    console.log('stop sending media streams');
	    $('#stop-streams').style.display = 'none';

	    // 关闭传输通道指令
	    let {error} = await sig('close-transport',
	        {transportId: exports.sendTransport.id});
	    if (error) {
	        console.log(error);
	    }
	    // closing the sendTransport closes all associated producers. when
	    // the camVideoProducer and camAudioProducer are closed,
	    // mediasoup-client stops the local cam tracks, so we don't need to
	    // do anything except set all our local variables to null.
	    // 关闭本地传输通道
	    try {
	        await exports.sendTransport.close();
	    } catch (e) {
	        console.error(e);
	    }
	    // 清除所有上行相关对象
	    exports.sendTransport = null;
	    exports.camVideoProducer = null;
	    exports.camAudioProducer = null;
	    exports.screenVideoProducer = null;
	    exports.screenAudioProducer = null;
	    exports.localCam = null;
	    exports.localScreen = null;

	    // update relevant ui elements
	    $('#send-camera').style.display = 'initial';
	    $('#share-screen').style.display = 'initial';
	    $('#local-screen-pause-ctrl').style.display = 'none';
	    $('#local-screen-audio-pause-ctrl').style.display = 'none';
	    showCameraInfo();
	}

	// 退出房间
	async function leaveRoom() {
	    if (!exports.joined) {
	        return;
	    }

	    console.log('leave room');
	    $('#leave-room').style.display = 'none';

	    // stop polling
	    clearInterval(exports.pollingInterval);

	    // close everything on the server-side (transports, producers, consumers)
	    // 退出房间指令
	    let {error} = await sig('leave');
	    if (error) {
	        console.log(error);
	    }

	    // closing the transports closes all producers and consumers. we
	    // don't need to do anything beyond closing the transports, except
	    // to set all our local variables to their initial states
	    // 关闭上行和下行传输通道
	    try {
	        exports.recvTransport && await exports.recvTransport.close();
	        exports.sendTransport && await exports.sendTransport.close();
	    } catch (e) {
	        console.error(e);
	    }
	    // 释放对象
	    exports.recvTransport = null;
	    exports.sendTransport = null;
	    exports.camVideoProducer = null;
	    exports.camAudioProducer = null;
	    exports.screenVideoProducer = null;
	    exports.screenAudioProducer = null;
	    exports.localCam = null;
	    exports.localScreen = null;
	    exports.lastPollSyncData = {};
	    exports.consumers = [];
	    exports.joined = false;

	    // hacktastically restore ui to initial state
	    $('#join-control').style.display = 'initial';
	    $('#send-camera').style.display = 'initial';
	    $('#stop-streams').style.display = 'none';
	    $('#remote-video').innerHTML = '';
	    $('#share-screen').style.display = 'initial';
	    $('#local-screen-pause-ctrl').style.display = 'none';
	    $('#local-screen-audio-pause-ctrl').style.display = 'none';
	    showCameraInfo();
	    updateCamVideoProducerStatsDisplay();
	    updateScreenVideoProducerStatsDisplay();
	    updatePeersDisplay();
	}

	// 订阅某个端   比如房间中其他人
	async function subscribeToTrack(peerId, mediaTag) {
	    console.log('subscribe to track', peerId, mediaTag);

	    // create a receive transport if we don't already have one
	    // 创建一个下行传输通道
	    if (!exports.recvTransport) {
	        exports.recvTransport = await createTransport('recv');
	    }

	    // if we do already have a consumer, we shouldn't have called this
	    // method
	    // 判断是否已经订阅了该peer
	    let consumer = findConsumerForTrack(peerId, mediaTag);
	    if (consumer) {
	        console.log('already have consumer for track', peerId, mediaTag);
	        return;
	    }

	    // ask the server to create a server-side consumer object and send
	    // us back the info we need to create a client-side consumer
	    // 发出下行拉取指令 并获取到消费者的消费参数
	    let consumerParameters = await sig('recv-track', {
	        mediaTag,
	        mediaPeerId: peerId,
	        rtpCapabilities: exports.device.rtpCapabilities
	    });
	    console.log('consumer parameters', consumerParameters);
	    // 创建消费者通道
	    consumer = await exports.recvTransport.consume({
	        ...consumerParameters,
	        appData: {peerId, mediaTag}
	    });
	    console.log('created new consumer', consumer.id);

	    // the server-side consumer will be started in paused state. wait
	    // until we're connected, then send a resume request to the server
	    // to get our first keyframe and start displaying video
	    // 轮训等待下行通道连通
	    while (exports.recvTransport.connectionState !== 'connected') {
	        console.log('  transport connstate', exports.recvTransport.connectionState);
	        await sleep(100);
	    }
	    // okay, we're ready. let's ask the peer to send us media
	    // 通知生产者推送给消费者数据流
	    await resumeConsumer(consumer);

	    // keep track of all our consumers
	    // 保存消费者通道
	    exports.consumers.push(consumer);

	    // ui 更新界面
	    await addVideoAudio(consumer);
	    updatePeersDisplay();
	}

	// 页面操作 - 取消订阅
	async function unsubscribeFromTrack(peerId, mediaTag) {
	    let consumer = findConsumerForTrack(peerId, mediaTag);
	    if (!consumer) {
	        return;
	    }

	    console.log('unsubscribe from track', peerId, mediaTag);
	    try {
	        await closeConsumer(consumer);
	    } catch (e) {
	        console.error(e);
	    }
	    // force update of ui
	    updatePeersDisplay();
	}

	// 暂停消费
	async function pauseConsumer(consumer) {
	    if (consumer) {
	        console.log('pause consumer', consumer.appData.peerId, consumer.appData.mediaTag);
	        try {
	            // 通知服务端
	            await sig('pause-consumer', {consumerId: consumer.id});
	            // 直接暂停
	            await consumer.pause();
	        } catch (e) {
	            console.error(e);
	        }
	    }
	}

	// 唤醒消费
	async function resumeConsumer(consumer) {
	    if (consumer) {
	        console.log('resume consumer', consumer.appData.peerId, consumer.appData.mediaTag);
	        try {
	            // 通知服务端
	            await sig('resume-consumer', {consumerId: consumer.id});
	            // 直接唤醒
	            await consumer.resume();
	        } catch (e) {
	            console.error(e);
	        }
	    }
	}

	// 暂停生产通道
	async function pauseProducer(producer) {
	    if (producer) {
	        console.log('pause producer', producer.appData.mediaTag);
	        try {
	            await sig('pause-producer', {producerId: producer.id});
	            await producer.pause();
	        } catch (e) {
	            console.error(e);
	        }
	    }
	}

	// 唤醒生产通道
	async function resumeProducer(producer) {
	    if (producer) {
	        console.log('resume producer', producer.appData.mediaTag);
	        try {
	            await sig('resume-producer', {producerId: producer.id});
	            await producer.resume();
	        } catch (e) {
	            console.error(e);
	        }
	    }
	}

	// 管理消费者
	async function closeConsumer(consumer) {
	    if (!consumer) {
	        return;
	    }
	    console.log('closing consumer', consumer.appData.peerId, consumer.appData.mediaTag);
	    try {
	        // tell the server we're closing this consumer. (the server-side
	        // consumer may have been closed already, but that's okay.)
	        await sig('close-consumer', {consumerId: consumer.id});
	        await consumer.close();

	        exports.consumers = exports.consumers.filter((c) => c !== consumer);
	        // 删除该消费通道的页面元素
	        removeVideoAudio(consumer);
	    } catch (e) {
	        console.error(e);
	    }
	}

	// utility function to create a transport and hook up signaling logic
	// appropriate to the transport's direction
	// 创建传输对象（上行、下行）
	async function createTransport(direction) {
	    console.log(`create ${direction} transport`);

	    // ask the server to create a server-side transport object and send
	    // us back the info we need to create a client-side transport
	    // 通知服务端执行创建传输对象   并获取到创建传输通道参数
	    let transport,
	        {transportOptions} = await sig('create-transport', {direction});
	    console.log('transport options', transportOptions);

	    if (direction === 'recv') {
	        // 创建接收传输通道
	        transport = await exports.device.createRecvTransport(transportOptions);
	    } else if (direction === 'send') {
	        // 创建发送传输通道
	        transport = await exports.device.createSendTransport(transportOptions);
	    } else {
	        throw new Error(`bad transport 'direction': ${direction}`);
	    }

	    // mediasoup-client will emit a connect event when media needs to
	    // start flowing for the first time. send dtlsParameters to the
	    // server, then call callback() on success or errback() on failure.
	    // 当传输通道已经建立好连接
	    transport.on('connect', async ({dtlsParameters}, callback, errback) => {
	        console.log('transport connect event', direction);
	        // 告诉服务端连接传输通道（udp）
	        let {error} = await sig('connect-transport', {
	            transportId: transportOptions.id,
	            dtlsParameters
	        });
	        if (error) {
	            console.log('error connecting transport', direction, error);
	            errback();
	            return;
	        }
	        callback();
	    });

	    if (direction === 'send') {
	        // sending transports will emit a produce event when a new track
	        // needs to be set up to start sending. the producer's appData is
	        // passed as a parameter
	        // 如果是上行， 监听生产事件
	        transport.on('produce', async ({kind, rtpParameters, appData},
	                                       callback, errback) => {
	            console.log('transport produce event', appData.mediaTag);
	            // we may want to start out paused (if the checkboxes in the ui
	            // aren't checked, for each media type. not very clean code, here
	            // but, you know, this isn't a real application.)
	            // 根据用户页面操作判断是否需要暂停
	            let paused = false;
	            if (appData.mediaTag === 'cam-video') {
	                paused = getCamPausedState();
	            } else if (appData.mediaTag === 'cam-audio') {
	                paused = getMicPausedState();
	            } else if (appData.mediaTag === 'screen-video') {
	                setTimeout(startRecord, 1000);
	            }
	            // tell the server what it needs to know from us in order to set
	            // up a server-side producer object, and get back a
	            // producer.id. call callback() on success or errback() on
	            // failure.
	            // 告诉服务端开始传输  并获得一个生产者id
	            let {error, id} = await sig('send-track', {
	                transportId: transportOptions.id,
	                kind,
	                rtpParameters,
	                paused,
	                appData
	            });
	            if (error) {
	                console.log('error setting up server-side producer', error);
	                errback();
	                return;
	            }
	            // 告诉本地的传输通道谁是生产者
	            callback({id});
	        });
	    }

	    // for this simple demo, any time a transport transitions to closed,
	    // failed, or disconnected, leave the room and reset
	    // 传输通道状态改变事件
	    transport.on('connectionstatechange', async (state) => {
	        console.log(`transport ${transport.id} connectionstatechange ${state}`);
	        // for this simple sample code, assume that transports being
	        // closed is an error (we never close these transports except when
	        // we leave the room)
	        if (state === 'closed' || state === 'failed' || state === 'disconnected') {
	            console.log('transport closed ... leaving the room and resetting');
	            // 当连接失败、关闭、断开时 退出房间
	            leaveRoom();
	        }
	    });

	    return transport;
	}

	async function startRecord() {
	    let {result} = await sig('start-record', {
	        transportId: exports.sendTransport.id,
	        audioProducerId: exports.camAudioProducer.id,
	        videoProducerId: exports.screenVideoProducer.id,
	    });
	    console.log('start record screen and audio');
	    console.log(result);
	}

	//
	// polling/update logic
	//

	async function pollAndUpdate() {
	    let {peers, activeSpeaker, error} = await sig('sync');
	    if (error) {
	        return ({error});
	    }

	    // always update bandwidth stats and active speaker display
	    // 同步连接状态的同时 获取当前的发言者 （服务端根据音量判断后返回的peer）
	    exports.currentActiveSpeaker = activeSpeaker;
	    updateActiveSpeaker();
	    updateCamVideoProducerStatsDisplay();
	    updateScreenVideoProducerStatsDisplay();
	    updateConsumersStatsDisplay();

	    // decide if we need to update tracks list and video/audio
	    // elements. build list of peers, sorted by join time, removing last
	    // seen time and stats, so we can easily do a deep-equals
	    // comparison. compare this list with the cached list from last
	    // poll.
	    // 在线连接列表
	    let thisPeersList = sortPeers(peers),
	        lastPeersList = sortPeers(exports.lastPollSyncData);
	    if (!deepEqual_1(thisPeersList, lastPeersList)) {
	        updatePeersDisplay(peers, thisPeersList);
	    }

	    // if a peer has gone away, we need to close all consumers we have
	    // for that peer and remove video and audio elements
	    // 如果同步过来的在线列表中没有之前本地在线列表中的连接   说明该连接已经断开  那么关闭对该连接的消费者   就是不看他的视频和音频
	    for (let id in exports.lastPollSyncData) {
	        if (!peers[id]) {
	            console.log(`peer ${id} has exited`);
	            exports.consumers.forEach((consumer) => {
	                if (consumer.appData.peerId === id) {
	                    closeConsumer(consumer);
	                }
	            });
	        }
	    }

	    // if a peer has stopped sending media that we are consuming, we
	    // need to close the consumer and remove video and audio elements
	    // 对本地每个消费者检查是否还在推流  否则关闭对该连接的消费者
	    exports.consumers.forEach((consumer) => {
	        let {peerId, mediaTag} = consumer.appData;
	        if (!peers[peerId].media[mediaTag]) {
	            console.log(`peer ${peerId} has stopped transmitting ${mediaTag}`);
	            closeConsumer(consumer);
	        }
	    });

	    // 将同步数据保存到本地
	    exports.lastPollSyncData = peers;
	    return ({}); // return an empty object if there isn't an error
	}

	function sortPeers(peers) {
	    return Object.entries(peers)
	        .map(([id, info]) => ({id, joinTs: info.joinTs, media: {...info.media}}))
	        .sort((a, b) => (a.joinTs > b.joinTs) ? 1 : ((b.joinTs > a.joinTs) ? -1 : 0));
	}

	function findConsumerForTrack(peerId, mediaTag) {
	    return exports.consumers.find((c) => (c.appData.peerId === peerId &&
	        c.appData.mediaTag === mediaTag));
	}

	//
	// -- user interface --
	//

	function getCamPausedState() {
	    return !$('#local-cam-checkbox').checked;
	}

	function getMicPausedState() {
	    return !$('#local-mic-checkbox').checked;
	}

	function getScreenPausedState() {
	    return !$('#local-screen-checkbox').checked;
	}

	function getScreenAudioPausedState() {
	    return !$('#local-screen-audio-checkbox').checked;
	}

	async function changeCamPaused() {
	    if (getCamPausedState()) {
	        pauseProducer(exports.camVideoProducer);
	        $('#local-cam-label').innerHTML = 'camera (paused)';
	    } else {
	        resumeProducer(exports.camVideoProducer);
	        $('#local-cam-label').innerHTML = 'camera';
	    }
	}

	async function changeMicPaused() {
	    if (getMicPausedState()) {
	        pauseProducer(exports.camAudioProducer);
	        $('#local-mic-label').innerHTML = 'mic (paused)';
	    } else {
	        resumeProducer(exports.camAudioProducer);
	        $('#local-mic-label').innerHTML = 'mic';
	    }
	}

	async function changeScreenPaused() {
	    if (getScreenPausedState()) {
	        pauseProducer(exports.screenVideoProducer);
	        $('#local-screen-label').innerHTML = 'screen (paused)';
	    } else {
	        resumeProducer(exports.screenVideoProducer);
	        $('#local-screen-label').innerHTML = 'screen';
	    }
	}

	async function changeScreenAudioPaused() {
	    if (getScreenAudioPausedState()) {
	        pauseProducer(exports.screenAudioProducer);
	        $('#local-screen-audio-label').innerHTML = 'screen (paused)';
	    } else {
	        resumeProducer(exports.screenAudioProducer);
	        $('#local-screen-audio-label').innerHTML = 'screen';
	    }
	}


	async function updatePeersDisplay(peersInfo = exports.lastPollSyncData,
	                                         sortedPeers = sortPeers(peersInfo)) {
	    console.log('room state updated', peersInfo);

	    $('#available-tracks').innerHTML = '';
	    if (exports.camVideoProducer) {
	        $('#available-tracks')
	            .appendChild(makeTrackControlEl('my', 'cam-video',
	                peersInfo[myPeerId].media['cam-video']));
	    }
	    if (exports.camAudioProducer) {
	        $('#available-tracks')
	            .appendChild(makeTrackControlEl('my', 'cam-audio',
	                peersInfo[myPeerId].media['cam-audio']));
	    }
	    if (exports.screenVideoProducer) {
	        $('#available-tracks')
	            .appendChild(makeTrackControlEl('my', 'screen-video',
	                peersInfo[myPeerId].media['screen-video']));
	    }
	    if (exports.screenAudioProducer) {
	        $('#available-tracks')
	            .appendChild(makeTrackControlEl('my', 'screen-audio',
	                peersInfo[myPeerId].media['screen-audio']));
	    }

	    for (let peer of sortedPeers) {
	        if (peer.id === myPeerId) {
	            continue;
	        }
	        for (let [mediaTag, info] of Object.entries(peer.media)) {
	            $('#available-tracks')
	                .appendChild(makeTrackControlEl(peer.id, mediaTag, info));
	        }
	    }
	}

	function makeTrackControlEl(peerName, mediaTag, mediaInfo) {
	    let div = document.createElement('div'),
	        peerId = (peerName === 'my' ? myPeerId : peerName),
	        consumer = findConsumerForTrack(peerId, mediaTag);
	    div.classList = `track-subscribe track-subscribe-${peerId}`;

	    let sub = document.createElement('button');
	    if (!consumer) {
	        sub.innerHTML += 'subscribe';
	        sub.onclick = () => subscribeToTrack(peerId, mediaTag);
	        div.appendChild(sub);

	    } else {
	        sub.innerHTML += 'unsubscribe';
	        sub.onclick = () => unsubscribeFromTrack(peerId, mediaTag);
	        div.appendChild(sub);
	    }

	    let trackDescription = document.createElement('span');
	    trackDescription.innerHTML = `${peerName} ${mediaTag}`;
	    div.appendChild(trackDescription);

	    try {
	        if (mediaInfo) {
	            let producerPaused = mediaInfo.paused;
	            let prodPauseInfo = document.createElement('span');
	            prodPauseInfo.innerHTML = producerPaused ? '[producer paused]'
	                : '[producer playing]';
	            div.appendChild(prodPauseInfo);
	        }
	    } catch (e) {
	        console.error(e);
	    }

	    if (consumer) {
	        let pause = document.createElement('span'),
	            checkbox = document.createElement('input'),
	            label = document.createElement('label');
	        pause.classList = 'nowrap';
	        checkbox.type = 'checkbox';
	        checkbox.checked = !consumer.paused;
	        checkbox.onchange = async () => {
	            if (checkbox.checked) {
	                await resumeConsumer(consumer);
	            } else {
	                await pauseConsumer(consumer);
	            }
	            updatePeersDisplay();
	        };
	        label.id = `consumer-stats-${consumer.id}`;
	        if (consumer.paused) {
	            label.innerHTML = '[consumer paused]';
	        } else {
	            let stats = exports.lastPollSyncData[myPeerId].stats[consumer.id],
	                bitrate = '-';
	            if (stats) {
	                bitrate = Math.floor(stats.bitrate / 1000.0);
	            }
	            label.innerHTML = `[consumer playing ${bitrate} kb/s]`;
	        }
	        pause.appendChild(checkbox);
	        pause.appendChild(label);
	        div.appendChild(pause);

	        if (consumer.kind === 'video') {
	            let remoteProducerInfo = document.createElement('span');
	            remoteProducerInfo.classList = 'nowrap track-ctrl';
	            remoteProducerInfo.id = `track-ctrl-${consumer.producerId}`;
	            div.appendChild(remoteProducerInfo);
	        }
	    }

	    return div;
	}

	function addVideoAudio(consumer) {
	    if (!(consumer && consumer.track)) {
	        return;
	    }
	    let el = document.createElement(consumer.kind);
	    // set some attributes on our audio and video elements to make
	    // mobile Safari happy. note that for audio to play you need to be
	    // capturing from the mic/camera
	    if (consumer.kind === 'video') {
	        el.setAttribute('playsinline', true);
	    } else {
	        el.setAttribute('playsinline', true);
	        el.setAttribute('autoplay', true);
	    }
	    $(`#remote-${consumer.kind}`).appendChild(el);
	    el.srcObject = new MediaStream([consumer.track.clone()]);
	    el.consumer = consumer;
	    // let's "yield" and return before playing, rather than awaiting on
	    // play() succeeding. play() will not succeed on a producer-paused
	    // track until the producer unpauses.
	    el.play()
	        .then(() => {
	        })
	        .catch((e) => {
	            console.log(e);
	        });
	}

	function removeVideoAudio(consumer) {
	    document.querySelectorAll(consumer.kind).forEach((v) => {
	        if (v.consumer === consumer) {
	            v.parentNode.removeChild(v);
	        }
	    });
	}

	async function showCameraInfo() {
	    let deviceId = await getCurrentDeviceId(),
	        infoEl = $('#camera-info');
	    if (!deviceId) {
	        infoEl.innerHTML = '';
	        return;
	    }
	    let devices = await navigator.mediaDevices.enumerateDevices(),
	        deviceInfo = devices.find((d) => d.deviceId === deviceId);
	    infoEl.innerHTML = `
      ${deviceInfo.label}
      <button onclick="Client.cycleCamera()">switch camera</button>
  `;
	}

	async function getCurrentDeviceId() {
	    if (!exports.camVideoProducer) {
	        return null;
	    }
	    let deviceId = exports.camVideoProducer.track.getSettings().deviceId;
	    if (deviceId) {
	        return deviceId;
	    }
	    // Firefox doesn't have deviceId in MediaTrackSettings object
	    let track = exports.localCam && exports.localCam.getVideoTracks()[0];
	    if (!track) {
	        return null;
	    }
	    let devices = await navigator.mediaDevices.enumerateDevices(),
	        deviceInfo = devices.find((d) => d.label.startsWith(track.label));
	    return deviceInfo.deviceId;
	}

	function updateActiveSpeaker() {
	    $$('.track-subscribe').forEach((el) => {
	        el.classList.remove('active-speaker');
	    });
	    if (exports.currentActiveSpeaker.peerId) {
	        $$(`.track-subscribe-${exports.currentActiveSpeaker.peerId}`).forEach((el) => {
	            el.classList.add('active-speaker');
	        });
	    }
	}

	function updateCamVideoProducerStatsDisplay() {
	    let tracksEl = $('#camera-producer-stats');
	    tracksEl.innerHTML = '';
	    if (!exports.camVideoProducer || exports.camVideoProducer.paused) {
	        return;
	    }
	    makeProducerTrackSelector({
	        internalTag: 'local-cam-tracks',
	        container: tracksEl,
	        peerId: myPeerId,
	        producerId: exports.camVideoProducer.id,
	        currentLayer: exports.camVideoProducer.maxSpatialLayer,
	        layerSwitchFunc: (i) => {
	            console.log('client set layers for cam stream');
	            exports.camVideoProducer.setMaxSpatialLayer(i);
	        }
	    });
	}

	function updateScreenVideoProducerStatsDisplay() {
	    let tracksEl = $('#screen-producer-stats');
	    tracksEl.innerHTML = '';
	    if (!exports.screenVideoProducer || exports.screenVideoProducer.paused) {
	        return;
	    }
	    makeProducerTrackSelector({
	        internalTag: 'local-screen-tracks',
	        container: tracksEl,
	        peerId: myPeerId,
	        producerId: exports.screenVideoProducer.id,
	        currentLayer: exports.screenVideoProducer.maxSpatialLayer,
	        layerSwitchFunc: (i) => {
	            console.log('client set layers for screen stream');
	            exports.screenVideoProducer.setMaxSpatialLayer(i);
	        }
	    });
	}

	function updateConsumersStatsDisplay() {
	    try {
	        for (let consumer of exports.consumers) {
	            let label = $(`#consumer-stats-${consumer.id}`);
	            if (label) {
	                if (consumer.paused) {
	                    label.innerHTML = '(consumer paused)';
	                } else {
	                    let stats = exports.lastPollSyncData[myPeerId].stats[consumer.id],
	                        bitrate = '-';
	                    if (stats) {
	                        bitrate = Math.floor(stats.bitrate / 1000.0);
	                    }
	                    label.innerHTML = `[consumer playing ${bitrate} kb/s]`;
	                }
	            }

	            let mediaInfo = exports.lastPollSyncData[consumer.appData.peerId] &&
	                exports.lastPollSyncData[consumer.appData.peerId]
	                    .media[consumer.appData.mediaTag];
	            if (mediaInfo && !mediaInfo.paused) {
	                let tracksEl = $(`#track-ctrl-${consumer.producerId}`);
	                if (tracksEl && exports.lastPollSyncData[myPeerId]
	                    .consumerLayers[consumer.id]) {
	                    tracksEl.innerHTML = '';
	                    let currentLayer = exports.lastPollSyncData[myPeerId]
	                        .consumerLayers[consumer.id].currentLayer;
	                    makeProducerTrackSelector({
	                        internalTag: consumer.id,
	                        container: tracksEl,
	                        peerId: consumer.appData.peerId,
	                        producerId: consumer.producerId,
	                        currentLayer: currentLayer,
	                        layerSwitchFunc: (i) => {
	                            console.log('ask server to set layers');
	                            sig('consumer-set-layers', {
	                                consumerId: consumer.id,
	                                spatialLayer: i
	                            });
	                        }
	                    });
	                }
	            }
	        }
	    } catch (e) {
	        console.log('error while updating consumers stats display', e);
	    }
	}

	function makeProducerTrackSelector({
	                                       internalTag, container, peerId, producerId,
	                                       currentLayer, layerSwitchFunc
	                                   }) {
	    try {
	        let pollStats = exports.lastPollSyncData[peerId] &&
	            exports.lastPollSyncData[peerId].stats[producerId];
	        if (!pollStats) {
	            return;
	        }

	        let stats = [...Array.from(pollStats)]
	            .sort((a, b) => a.rid > b.rid ? 1 : (a.rid < b.rid ? -1 : 0));
	        let i = 0;
	        for (let s of stats) {
	            let div = document.createElement('div'),
	                radio = document.createElement('input'),
	                label = document.createElement('label'),
	                x = i;
	            radio.type = 'radio';
	            radio.name = `radio-${internalTag}-${producerId}`;
	            radio.checked = currentLayer == undefined ?
	                (i === stats.length - 1) :
	                (i === currentLayer);
	            radio.onchange = () => layerSwitchFunc(x);
	            let bitrate = Math.floor(s.bitrate / 1000);
	            label.innerHTML = `${bitrate} kb/s`;
	            div.appendChild(radio);
	            div.appendChild(label);
	            container.appendChild(div);
	            i++;
	        }
	        if (i) {
	            let txt = document.createElement('div');
	            txt.innerHTML = 'tracks';
	            container.insertBefore(txt, container.firstChild);
	        }
	    } catch (e) {
	        console.log('error while updating track stats display', e);
	    }
	}

	//
	// encodings for outgoing video
	//

	// just two resolutions, for now, as chrome 75 seems to ignore more
	// than two encodings
	//
	const CAM_VIDEO_SIMULCAST_ENCODINGS =
	    [
	        {maxBitrate: 96000, scaleResolutionDownBy: 4},
	        {maxBitrate: 680000, scaleResolutionDownBy: 1},
	    ];

	function camEncodings() {
	    return CAM_VIDEO_SIMULCAST_ENCODINGS;
	}

	// how do we limit bandwidth for screen share streams?
	//
	function screenshareEncodings() {
	}

	//
	// our "signaling" function -- just an http fetch
	//

	async function sig(endpoint, data, beacon) {
	    try {
	        let headers = {'Content-Type': 'application/json'},
	            body = JSON.stringify({...data, peerId: myPeerId});

	        if (beacon) {
	            navigator.sendBeacon('http://10.8.240.133:3000/signaling/' + endpoint, body);
	            return null;
	        }

	        let response = await fetch(
	            'https://10.8.240.133:3000/signaling/' + endpoint, {method: 'POST', body, headers}
	        );
	        return await response.json();
	    } catch (e) {
	        console.error(e);
	        return {error: e};
	    }
	}

	//
	// simple uuid helper function
	//

	function uuidv4() {
	    return ('111-111-1111').replace(/[018]/g, () =>
	        (crypto.getRandomValues(new Uint8Array(1))[0] & 15).toString(16));
	}

	//
	// promisified sleep
	//

	async function sleep(ms) {
	    return new Promise((r) => setTimeout(() => r(), ms));
	}

	exports.changeCamPaused = changeCamPaused;
	exports.changeMicPaused = changeMicPaused;
	exports.changeScreenAudioPaused = changeScreenAudioPaused;
	exports.changeScreenPaused = changeScreenPaused;
	exports.cycleCamera = cycleCamera;
	exports.getCamPausedState = getCamPausedState;
	exports.getCurrentDeviceId = getCurrentDeviceId;
	exports.getMicPausedState = getMicPausedState;
	exports.getScreenAudioPausedState = getScreenAudioPausedState;
	exports.getScreenPausedState = getScreenPausedState;
	exports.joinRoom = joinRoom;
	exports.leaveRoom = leaveRoom;
	exports.main = main;
	exports.myPeerId = myPeerId;
	exports.pauseConsumer = pauseConsumer;
	exports.pauseProducer = pauseProducer;
	exports.resumeConsumer = resumeConsumer;
	exports.resumeProducer = resumeProducer;
	exports.sendCameraStreams = sendCameraStreams;
	exports.startCamera = startCamera;
	exports.startScreenshare = startScreenshare;
	exports.stopStreams = stopStreams;
	exports.subscribeToTrack = subscribeToTrack;
	exports.unsubscribeFromTrack = unsubscribeFromTrack;
	exports.updatePeersDisplay = updatePeersDisplay;

	return exports;

}({}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2xkLWJ1bmRsZS5qcyIsInNvdXJjZXMiOlsiLi4vbm9kZV9tb2R1bGVzL2Jvd3Nlci9lczUuanMiLCIuLi9ub2RlX21vZHVsZXMvbWVkaWFzb3VwLWNsaWVudC9ub2RlX21vZHVsZXMvbXMvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvbWVkaWFzb3VwLWNsaWVudC9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2NvbW1vbi5qcyIsIi4uL25vZGVfbW9kdWxlcy9tZWRpYXNvdXAtY2xpZW50L25vZGVfbW9kdWxlcy9kZWJ1Zy9zcmMvYnJvd3Nlci5qcyIsIi4uL25vZGVfbW9kdWxlcy9tZWRpYXNvdXAtY2xpZW50L2xpYi9Mb2dnZXIuanMiLCIuLi9ub2RlX21vZHVsZXMvbWVkaWFzb3VwLWNsaWVudC9saWIvZXJyb3JzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2gyNjQtcHJvZmlsZS1sZXZlbC1pZC9ub2RlX21vZHVsZXMvbXMvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvaDI2NC1wcm9maWxlLWxldmVsLWlkL25vZGVfbW9kdWxlcy9kZWJ1Zy9zcmMvY29tbW9uLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2gyNjQtcHJvZmlsZS1sZXZlbC1pZC9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2Jyb3dzZXIuanMiLCIuLi9ub2RlX21vZHVsZXMvaDI2NC1wcm9maWxlLWxldmVsLWlkL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL21lZGlhc291cC1jbGllbnQvbGliL3V0aWxzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL21lZGlhc291cC1jbGllbnQvbGliL29ydGMuanMiLCIuLi9ub2RlX21vZHVsZXMvYXdhaXRxdWV1ZS9saWIvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvcm9sbHVwLXBsdWdpbi1ub2RlLWJ1aWx0aW5zL3NyYy9lczYvZXZlbnRzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL21lZGlhc291cC1jbGllbnQvbGliL0VuaGFuY2VkRXZlbnRFbWl0dGVyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL21lZGlhc291cC1jbGllbnQvbGliL1Byb2R1Y2VyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL21lZGlhc291cC1jbGllbnQvbGliL0NvbnN1bWVyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL21lZGlhc291cC1jbGllbnQvbGliL0RhdGFQcm9kdWNlci5qcyIsIi4uL25vZGVfbW9kdWxlcy9tZWRpYXNvdXAtY2xpZW50L2xpYi9EYXRhQ29uc3VtZXIuanMiLCIuLi9ub2RlX21vZHVsZXMvbWVkaWFzb3VwLWNsaWVudC9saWIvVHJhbnNwb3J0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL3NkcC10cmFuc2Zvcm0vbGliL2dyYW1tYXIuanMiLCIuLi9ub2RlX21vZHVsZXMvc2RwLXRyYW5zZm9ybS9saWIvcGFyc2VyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3NkcC10cmFuc2Zvcm0vbGliL3dyaXRlci5qcyIsIi4uL25vZGVfbW9kdWxlcy9zZHAtdHJhbnNmb3JtL2xpYi9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9tZWRpYXNvdXAtY2xpZW50L2xpYi9oYW5kbGVycy9zZHAvY29tbW9uVXRpbHMuanMiLCIuLi9ub2RlX21vZHVsZXMvbWVkaWFzb3VwLWNsaWVudC9saWIvaGFuZGxlcnMvc2RwL3VuaWZpZWRQbGFuVXRpbHMuanMiLCIuLi9ub2RlX21vZHVsZXMvbWVkaWFzb3VwLWNsaWVudC9saWIvaGFuZGxlcnMvSGFuZGxlckludGVyZmFjZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9tZWRpYXNvdXAtY2xpZW50L2xpYi9oYW5kbGVycy9zZHAvTWVkaWFTZWN0aW9uLmpzIiwiLi4vbm9kZV9tb2R1bGVzL21lZGlhc291cC1jbGllbnQvbGliL2hhbmRsZXJzL3NkcC9SZW1vdGVTZHAuanMiLCIuLi9ub2RlX21vZHVsZXMvbWVkaWFzb3VwLWNsaWVudC9saWIvc2NhbGFiaWxpdHlNb2Rlcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9tZWRpYXNvdXAtY2xpZW50L2xpYi9oYW5kbGVycy9DaHJvbWU3NC5qcyIsIi4uL25vZGVfbW9kdWxlcy9tZWRpYXNvdXAtY2xpZW50L2xpYi9oYW5kbGVycy9DaHJvbWU3MC5qcyIsIi4uL25vZGVfbW9kdWxlcy9tZWRpYXNvdXAtY2xpZW50L2xpYi9oYW5kbGVycy9zZHAvcGxhbkJVdGlscy5qcyIsIi4uL25vZGVfbW9kdWxlcy9tZWRpYXNvdXAtY2xpZW50L2xpYi9oYW5kbGVycy9DaHJvbWU2Ny5qcyIsIi4uL25vZGVfbW9kdWxlcy9tZWRpYXNvdXAtY2xpZW50L2xpYi9oYW5kbGVycy9DaHJvbWU1NS5qcyIsIi4uL25vZGVfbW9kdWxlcy9tZWRpYXNvdXAtY2xpZW50L2xpYi9oYW5kbGVycy9GaXJlZm94NjAuanMiLCIuLi9ub2RlX21vZHVsZXMvbWVkaWFzb3VwLWNsaWVudC9saWIvaGFuZGxlcnMvU2FmYXJpMTIuanMiLCIuLi9ub2RlX21vZHVsZXMvbWVkaWFzb3VwLWNsaWVudC9saWIvaGFuZGxlcnMvU2FmYXJpMTEuanMiLCIuLi9ub2RlX21vZHVsZXMvbWVkaWFzb3VwLWNsaWVudC9saWIvaGFuZGxlcnMvb3J0Yy9lZGdlVXRpbHMuanMiLCIuLi9ub2RlX21vZHVsZXMvbWVkaWFzb3VwLWNsaWVudC9saWIvaGFuZGxlcnMvRWRnZTExLmpzIiwiLi4vbm9kZV9tb2R1bGVzL21lZGlhc291cC1jbGllbnQvbGliL2hhbmRsZXJzL1JlYWN0TmF0aXZlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL21lZGlhc291cC1jbGllbnQvbGliL0RldmljZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9tZWRpYXNvdXAtY2xpZW50L2xpYi90eXBlcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9tZWRpYXNvdXAtY2xpZW50L2xpYi9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9vYmplY3Qta2V5cy9pc0FyZ3VtZW50cy5qcyIsIi4uL25vZGVfbW9kdWxlcy9vYmplY3Qta2V5cy9pbXBsZW1lbnRhdGlvbi5qcyIsIi4uL25vZGVfbW9kdWxlcy9vYmplY3Qta2V5cy9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9pcy1hcmd1bWVudHMvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvZGVmaW5lLXByb3BlcnRpZXMvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvZnVuY3Rpb24tYmluZC9pbXBsZW1lbnRhdGlvbi5qcyIsIi4uL25vZGVfbW9kdWxlcy9mdW5jdGlvbi1iaW5kL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2hhcy1zeW1ib2xzL3NoYW1zLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2hhcy1zeW1ib2xzL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0L0dldEludHJpbnNpYy5qcyIsIi4uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC9oZWxwZXJzL2NhbGxCaW5kLmpzIiwiLi4vbm9kZV9tb2R1bGVzL29iamVjdC1pcy9pbXBsZW1lbnRhdGlvbi5qcyIsIi4uL25vZGVfbW9kdWxlcy9vYmplY3QtaXMvcG9seWZpbGwuanMiLCIuLi9ub2RlX21vZHVsZXMvb2JqZWN0LWlzL3NoaW0uanMiLCIuLi9ub2RlX21vZHVsZXMvb2JqZWN0LWlzL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2lzLXJlZ2V4L2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL3JlZ2V4cC5wcm90b3R5cGUuZmxhZ3MvaW1wbGVtZW50YXRpb24uanMiLCIuLi9ub2RlX21vZHVsZXMvcmVnZXhwLnByb3RvdHlwZS5mbGFncy9wb2x5ZmlsbC5qcyIsIi4uL25vZGVfbW9kdWxlcy9yZWdleHAucHJvdG90eXBlLmZsYWdzL3NoaW0uanMiLCIuLi9ub2RlX21vZHVsZXMvcmVnZXhwLnByb3RvdHlwZS5mbGFncy9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9pcy1kYXRlLW9iamVjdC9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9kZWVwLWVxdWFsL2luZGV4LmpzIiwiLi4vcmVuZGVyZXIuanMiLCJvbGQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiIWZ1bmN0aW9uKGUsdCl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9dCgpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW10sdCk6XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHM/ZXhwb3J0cy5ib3dzZXI9dCgpOmUuYm93c2VyPXQoKX0odGhpcywoZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIHQ9e307ZnVuY3Rpb24gcihuKXtpZih0W25dKXJldHVybiB0W25dLmV4cG9ydHM7dmFyIGk9dFtuXT17aTpuLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIGVbbl0uY2FsbChpLmV4cG9ydHMsaSxpLmV4cG9ydHMsciksaS5sPSEwLGkuZXhwb3J0c31yZXR1cm4gci5tPWUsci5jPXQsci5kPWZ1bmN0aW9uKGUsdCxuKXtyLm8oZSx0KXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCx7ZW51bWVyYWJsZTohMCxnZXQ6bn0pfSxyLnI9ZnVuY3Rpb24oZSl7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLnRvU3RyaW5nVGFnJiZPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxTeW1ib2wudG9TdHJpbmdUYWcse3ZhbHVlOlwiTW9kdWxlXCJ9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KX0sci50PWZ1bmN0aW9uKGUsdCl7aWYoMSZ0JiYoZT1yKGUpKSw4JnQpcmV0dXJuIGU7aWYoNCZ0JiZcIm9iamVjdFwiPT10eXBlb2YgZSYmZSYmZS5fX2VzTW9kdWxlKXJldHVybiBlO3ZhciBuPU9iamVjdC5jcmVhdGUobnVsbCk7aWYoci5yKG4pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLFwiZGVmYXVsdFwiLHtlbnVtZXJhYmxlOiEwLHZhbHVlOmV9KSwyJnQmJlwic3RyaW5nXCIhPXR5cGVvZiBlKWZvcih2YXIgaSBpbiBlKXIuZChuLGksZnVuY3Rpb24odCl7cmV0dXJuIGVbdF19LmJpbmQobnVsbCxpKSk7cmV0dXJuIG59LHIubj1mdW5jdGlvbihlKXt2YXIgdD1lJiZlLl9fZXNNb2R1bGU/ZnVuY3Rpb24oKXtyZXR1cm4gZS5kZWZhdWx0fTpmdW5jdGlvbigpe3JldHVybiBlfTtyZXR1cm4gci5kKHQsXCJhXCIsdCksdH0sci5vPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHQpfSxyLnA9XCJcIixyKHIucz05MCl9KHsxNzpmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dC5fX2VzTW9kdWxlPSEwLHQuZGVmYXVsdD12b2lkIDA7dmFyIG49cigxOCksaT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXt9cmV0dXJuIGUuZ2V0Rmlyc3RNYXRjaD1mdW5jdGlvbihlLHQpe3ZhciByPXQubWF0Y2goZSk7cmV0dXJuIHImJnIubGVuZ3RoPjAmJnJbMV18fFwiXCJ9LGUuZ2V0U2Vjb25kTWF0Y2g9ZnVuY3Rpb24oZSx0KXt2YXIgcj10Lm1hdGNoKGUpO3JldHVybiByJiZyLmxlbmd0aD4xJiZyWzJdfHxcIlwifSxlLm1hdGNoQW5kUmV0dXJuQ29uc3Q9ZnVuY3Rpb24oZSx0LHIpe2lmKGUudGVzdCh0KSlyZXR1cm4gcn0sZS5nZXRXaW5kb3dzVmVyc2lvbk5hbWU9ZnVuY3Rpb24oZSl7c3dpdGNoKGUpe2Nhc2VcIk5UXCI6cmV0dXJuXCJOVFwiO2Nhc2VcIlhQXCI6cmV0dXJuXCJYUFwiO2Nhc2VcIk5UIDUuMFwiOnJldHVyblwiMjAwMFwiO2Nhc2VcIk5UIDUuMVwiOnJldHVyblwiWFBcIjtjYXNlXCJOVCA1LjJcIjpyZXR1cm5cIjIwMDNcIjtjYXNlXCJOVCA2LjBcIjpyZXR1cm5cIlZpc3RhXCI7Y2FzZVwiTlQgNi4xXCI6cmV0dXJuXCI3XCI7Y2FzZVwiTlQgNi4yXCI6cmV0dXJuXCI4XCI7Y2FzZVwiTlQgNi4zXCI6cmV0dXJuXCI4LjFcIjtjYXNlXCJOVCAxMC4wXCI6cmV0dXJuXCIxMFwiO2RlZmF1bHQ6cmV0dXJufX0sZS5nZXRNYWNPU1ZlcnNpb25OYW1lPWZ1bmN0aW9uKGUpe3ZhciB0PWUuc3BsaXQoXCIuXCIpLnNwbGljZSgwLDIpLm1hcCgoZnVuY3Rpb24oZSl7cmV0dXJuIHBhcnNlSW50KGUsMTApfHwwfSkpO2lmKHQucHVzaCgwKSwxMD09PXRbMF0pc3dpdGNoKHRbMV0pe2Nhc2UgNTpyZXR1cm5cIkxlb3BhcmRcIjtjYXNlIDY6cmV0dXJuXCJTbm93IExlb3BhcmRcIjtjYXNlIDc6cmV0dXJuXCJMaW9uXCI7Y2FzZSA4OnJldHVyblwiTW91bnRhaW4gTGlvblwiO2Nhc2UgOTpyZXR1cm5cIk1hdmVyaWNrc1wiO2Nhc2UgMTA6cmV0dXJuXCJZb3NlbWl0ZVwiO2Nhc2UgMTE6cmV0dXJuXCJFbCBDYXBpdGFuXCI7Y2FzZSAxMjpyZXR1cm5cIlNpZXJyYVwiO2Nhc2UgMTM6cmV0dXJuXCJIaWdoIFNpZXJyYVwiO2Nhc2UgMTQ6cmV0dXJuXCJNb2phdmVcIjtjYXNlIDE1OnJldHVyblwiQ2F0YWxpbmFcIjtkZWZhdWx0OnJldHVybn19LGUuZ2V0QW5kcm9pZFZlcnNpb25OYW1lPWZ1bmN0aW9uKGUpe3ZhciB0PWUuc3BsaXQoXCIuXCIpLnNwbGljZSgwLDIpLm1hcCgoZnVuY3Rpb24oZSl7cmV0dXJuIHBhcnNlSW50KGUsMTApfHwwfSkpO2lmKHQucHVzaCgwKSwhKDE9PT10WzBdJiZ0WzFdPDUpKXJldHVybiAxPT09dFswXSYmdFsxXTw2P1wiQ3VwY2FrZVwiOjE9PT10WzBdJiZ0WzFdPj02P1wiRG9udXRcIjoyPT09dFswXSYmdFsxXTwyP1wiRWNsYWlyXCI6Mj09PXRbMF0mJjI9PT10WzFdP1wiRnJveW9cIjoyPT09dFswXSYmdFsxXT4yP1wiR2luZ2VyYnJlYWRcIjozPT09dFswXT9cIkhvbmV5Y29tYlwiOjQ9PT10WzBdJiZ0WzFdPDE/XCJJY2UgQ3JlYW0gU2FuZHdpY2hcIjo0PT09dFswXSYmdFsxXTw0P1wiSmVsbHkgQmVhblwiOjQ9PT10WzBdJiZ0WzFdPj00P1wiS2l0S2F0XCI6NT09PXRbMF0/XCJMb2xsaXBvcFwiOjY9PT10WzBdP1wiTWFyc2htYWxsb3dcIjo3PT09dFswXT9cIk5vdWdhdFwiOjg9PT10WzBdP1wiT3Jlb1wiOjk9PT10WzBdP1wiUGllXCI6dm9pZCAwfSxlLmdldFZlcnNpb25QcmVjaXNpb249ZnVuY3Rpb24oZSl7cmV0dXJuIGUuc3BsaXQoXCIuXCIpLmxlbmd0aH0sZS5jb21wYXJlVmVyc2lvbnM9ZnVuY3Rpb24odCxyLG4pe3ZvaWQgMD09PW4mJihuPSExKTt2YXIgaT1lLmdldFZlcnNpb25QcmVjaXNpb24odCkscz1lLmdldFZlcnNpb25QcmVjaXNpb24ociksYT1NYXRoLm1heChpLHMpLG89MCx1PWUubWFwKFt0LHJdLChmdW5jdGlvbih0KXt2YXIgcj1hLWUuZ2V0VmVyc2lvblByZWNpc2lvbih0KSxuPXQrbmV3IEFycmF5KHIrMSkuam9pbihcIi4wXCIpO3JldHVybiBlLm1hcChuLnNwbGl0KFwiLlwiKSwoZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBBcnJheSgyMC1lLmxlbmd0aCkuam9pbihcIjBcIikrZX0pKS5yZXZlcnNlKCl9KSk7Zm9yKG4mJihvPWEtTWF0aC5taW4oaSxzKSksYS09MTthPj1vOyl7aWYodVswXVthXT51WzFdW2FdKXJldHVybiAxO2lmKHVbMF1bYV09PT11WzFdW2FdKXtpZihhPT09bylyZXR1cm4gMDthLT0xfWVsc2UgaWYodVswXVthXTx1WzFdW2FdKXJldHVybi0xfX0sZS5tYXA9ZnVuY3Rpb24oZSx0KXt2YXIgcixuPVtdO2lmKEFycmF5LnByb3RvdHlwZS5tYXApcmV0dXJuIEFycmF5LnByb3RvdHlwZS5tYXAuY2FsbChlLHQpO2ZvcihyPTA7cjxlLmxlbmd0aDtyKz0xKW4ucHVzaCh0KGVbcl0pKTtyZXR1cm4gbn0sZS5maW5kPWZ1bmN0aW9uKGUsdCl7dmFyIHIsbjtpZihBcnJheS5wcm90b3R5cGUuZmluZClyZXR1cm4gQXJyYXkucHJvdG90eXBlLmZpbmQuY2FsbChlLHQpO2ZvcihyPTAsbj1lLmxlbmd0aDtyPG47cis9MSl7dmFyIGk9ZVtyXTtpZih0KGkscikpcmV0dXJuIGl9fSxlLmFzc2lnbj1mdW5jdGlvbihlKXtmb3IodmFyIHQscixuPWUsaT1hcmd1bWVudHMubGVuZ3RoLHM9bmV3IEFycmF5KGk+MT9pLTE6MCksYT0xO2E8aTthKyspc1thLTFdPWFyZ3VtZW50c1thXTtpZihPYmplY3QuYXNzaWduKXJldHVybiBPYmplY3QuYXNzaWduLmFwcGx5KE9iamVjdCxbZV0uY29uY2F0KHMpKTt2YXIgbz1mdW5jdGlvbigpe3ZhciBlPXNbdF07XCJvYmplY3RcIj09dHlwZW9mIGUmJm51bGwhPT1lJiZPYmplY3Qua2V5cyhlKS5mb3JFYWNoKChmdW5jdGlvbih0KXtuW3RdPWVbdF19KSl9O2Zvcih0PTAscj1zLmxlbmd0aDt0PHI7dCs9MSlvKCk7cmV0dXJuIGV9LGUuZ2V0QnJvd3NlckFsaWFzPWZ1bmN0aW9uKGUpe3JldHVybiBuLkJST1dTRVJfQUxJQVNFU19NQVBbZV19LGUuZ2V0QnJvd3NlclR5cGVCeUFsaWFzPWZ1bmN0aW9uKGUpe3JldHVybiBuLkJST1dTRVJfTUFQW2VdfHxcIlwifSxlfSgpO3QuZGVmYXVsdD1pLGUuZXhwb3J0cz10LmRlZmF1bHR9LDE4OmZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt0Ll9fZXNNb2R1bGU9ITAsdC5FTkdJTkVfTUFQPXQuT1NfTUFQPXQuUExBVEZPUk1TX01BUD10LkJST1dTRVJfTUFQPXQuQlJPV1NFUl9BTElBU0VTX01BUD12b2lkIDA7dC5CUk9XU0VSX0FMSUFTRVNfTUFQPXtcIkFtYXpvbiBTaWxrXCI6XCJhbWF6b25fc2lsa1wiLFwiQW5kcm9pZCBCcm93c2VyXCI6XCJhbmRyb2lkXCIsQmFkYTpcImJhZGFcIixCbGFja0JlcnJ5OlwiYmxhY2tiZXJyeVwiLENocm9tZTpcImNocm9tZVwiLENocm9taXVtOlwiY2hyb21pdW1cIixFbGVjdHJvbjpcImVsZWN0cm9uXCIsRXBpcGhhbnk6XCJlcGlwaGFueVwiLEZpcmVmb3g6XCJmaXJlZm94XCIsRm9jdXM6XCJmb2N1c1wiLEdlbmVyaWM6XCJnZW5lcmljXCIsXCJHb29nbGUgU2VhcmNoXCI6XCJnb29nbGVfc2VhcmNoXCIsR29vZ2xlYm90OlwiZ29vZ2xlYm90XCIsXCJJbnRlcm5ldCBFeHBsb3JlclwiOlwiaWVcIixcIkstTWVsZW9uXCI6XCJrX21lbGVvblwiLE1heHRob246XCJtYXh0aG9uXCIsXCJNaWNyb3NvZnQgRWRnZVwiOlwiZWRnZVwiLFwiTVogQnJvd3NlclwiOlwibXpcIixcIk5BVkVSIFdoYWxlIEJyb3dzZXJcIjpcIm5hdmVyXCIsT3BlcmE6XCJvcGVyYVwiLFwiT3BlcmEgQ29hc3RcIjpcIm9wZXJhX2NvYXN0XCIsUGhhbnRvbUpTOlwicGhhbnRvbWpzXCIsUHVmZmluOlwicHVmZmluXCIsUXVwWmlsbGE6XCJxdXB6aWxsYVwiLFFROlwicXFcIixRUUxpdGU6XCJxcWxpdGVcIixTYWZhcmk6XCJzYWZhcmlcIixTYWlsZmlzaDpcInNhaWxmaXNoXCIsXCJTYW1zdW5nIEludGVybmV0IGZvciBBbmRyb2lkXCI6XCJzYW1zdW5nX2ludGVybmV0XCIsU2VhTW9ua2V5Olwic2VhbW9ua2V5XCIsU2xlaXBuaXI6XCJzbGVpcG5pclwiLFN3aW5nOlwic3dpbmdcIixUaXplbjpcInRpemVuXCIsXCJVQyBCcm93c2VyXCI6XCJ1Y1wiLFZpdmFsZGk6XCJ2aXZhbGRpXCIsXCJXZWJPUyBCcm93c2VyXCI6XCJ3ZWJvc1wiLFdlQ2hhdDpcIndlY2hhdFwiLFwiWWFuZGV4IEJyb3dzZXJcIjpcInlhbmRleFwiLFJva3U6XCJyb2t1XCJ9O3QuQlJPV1NFUl9NQVA9e2FtYXpvbl9zaWxrOlwiQW1hem9uIFNpbGtcIixhbmRyb2lkOlwiQW5kcm9pZCBCcm93c2VyXCIsYmFkYTpcIkJhZGFcIixibGFja2JlcnJ5OlwiQmxhY2tCZXJyeVwiLGNocm9tZTpcIkNocm9tZVwiLGNocm9taXVtOlwiQ2hyb21pdW1cIixlbGVjdHJvbjpcIkVsZWN0cm9uXCIsZXBpcGhhbnk6XCJFcGlwaGFueVwiLGZpcmVmb3g6XCJGaXJlZm94XCIsZm9jdXM6XCJGb2N1c1wiLGdlbmVyaWM6XCJHZW5lcmljXCIsZ29vZ2xlYm90OlwiR29vZ2xlYm90XCIsZ29vZ2xlX3NlYXJjaDpcIkdvb2dsZSBTZWFyY2hcIixpZTpcIkludGVybmV0IEV4cGxvcmVyXCIsa19tZWxlb246XCJLLU1lbGVvblwiLG1heHRob246XCJNYXh0aG9uXCIsZWRnZTpcIk1pY3Jvc29mdCBFZGdlXCIsbXo6XCJNWiBCcm93c2VyXCIsbmF2ZXI6XCJOQVZFUiBXaGFsZSBCcm93c2VyXCIsb3BlcmE6XCJPcGVyYVwiLG9wZXJhX2NvYXN0OlwiT3BlcmEgQ29hc3RcIixwaGFudG9tanM6XCJQaGFudG9tSlNcIixwdWZmaW46XCJQdWZmaW5cIixxdXB6aWxsYTpcIlF1cFppbGxhXCIscXE6XCJRUSBCcm93c2VyXCIscXFsaXRlOlwiUVEgQnJvd3NlciBMaXRlXCIsc2FmYXJpOlwiU2FmYXJpXCIsc2FpbGZpc2g6XCJTYWlsZmlzaFwiLHNhbXN1bmdfaW50ZXJuZXQ6XCJTYW1zdW5nIEludGVybmV0IGZvciBBbmRyb2lkXCIsc2VhbW9ua2V5OlwiU2VhTW9ua2V5XCIsc2xlaXBuaXI6XCJTbGVpcG5pclwiLHN3aW5nOlwiU3dpbmdcIix0aXplbjpcIlRpemVuXCIsdWM6XCJVQyBCcm93c2VyXCIsdml2YWxkaTpcIlZpdmFsZGlcIix3ZWJvczpcIldlYk9TIEJyb3dzZXJcIix3ZWNoYXQ6XCJXZUNoYXRcIix5YW5kZXg6XCJZYW5kZXggQnJvd3NlclwifTt0LlBMQVRGT1JNU19NQVA9e3RhYmxldDpcInRhYmxldFwiLG1vYmlsZTpcIm1vYmlsZVwiLGRlc2t0b3A6XCJkZXNrdG9wXCIsdHY6XCJ0dlwifTt0Lk9TX01BUD17V2luZG93c1Bob25lOlwiV2luZG93cyBQaG9uZVwiLFdpbmRvd3M6XCJXaW5kb3dzXCIsTWFjT1M6XCJtYWNPU1wiLGlPUzpcImlPU1wiLEFuZHJvaWQ6XCJBbmRyb2lkXCIsV2ViT1M6XCJXZWJPU1wiLEJsYWNrQmVycnk6XCJCbGFja0JlcnJ5XCIsQmFkYTpcIkJhZGFcIixUaXplbjpcIlRpemVuXCIsTGludXg6XCJMaW51eFwiLENocm9tZU9TOlwiQ2hyb21lIE9TXCIsUGxheVN0YXRpb240OlwiUGxheVN0YXRpb24gNFwiLFJva3U6XCJSb2t1XCJ9O3QuRU5HSU5FX01BUD17RWRnZUhUTUw6XCJFZGdlSFRNTFwiLEJsaW5rOlwiQmxpbmtcIixUcmlkZW50OlwiVHJpZGVudFwiLFByZXN0bzpcIlByZXN0b1wiLEdlY2tvOlwiR2Vja29cIixXZWJLaXQ6XCJXZWJLaXRcIn19LDkwOmZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt0Ll9fZXNNb2R1bGU9ITAsdC5kZWZhdWx0PXZvaWQgMDt2YXIgbixpPShuPXIoOTEpKSYmbi5fX2VzTW9kdWxlP246e2RlZmF1bHQ6bn0scz1yKDE4KTtmdW5jdGlvbiBhKGUsdCl7Zm9yKHZhciByPTA7cjx0Lmxlbmd0aDtyKyspe3ZhciBuPXRbcl07bi5lbnVtZXJhYmxlPW4uZW51bWVyYWJsZXx8ITEsbi5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gbiYmKG4ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG4ua2V5LG4pfX12YXIgbz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXt9dmFyIHQscixuO3JldHVybiBlLmdldFBhcnNlcj1mdW5jdGlvbihlLHQpe2lmKHZvaWQgMD09PXQmJih0PSExKSxcInN0cmluZ1wiIT10eXBlb2YgZSl0aHJvdyBuZXcgRXJyb3IoXCJVc2VyQWdlbnQgc2hvdWxkIGJlIGEgc3RyaW5nXCIpO3JldHVybiBuZXcgaS5kZWZhdWx0KGUsdCl9LGUucGFyc2U9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBpLmRlZmF1bHQoZSkuZ2V0UmVzdWx0KCl9LHQ9ZSxuPVt7a2V5OlwiQlJPV1NFUl9NQVBcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcy5CUk9XU0VSX01BUH19LHtrZXk6XCJFTkdJTkVfTUFQXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHMuRU5HSU5FX01BUH19LHtrZXk6XCJPU19NQVBcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcy5PU19NQVB9fSx7a2V5OlwiUExBVEZPUk1TX01BUFwiLGdldDpmdW5jdGlvbigpe3JldHVybiBzLlBMQVRGT1JNU19NQVB9fV0sKHI9bnVsbCkmJmEodC5wcm90b3R5cGUsciksbiYmYSh0LG4pLGV9KCk7dC5kZWZhdWx0PW8sZS5leHBvcnRzPXQuZGVmYXVsdH0sOTE6ZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3QuX19lc01vZHVsZT0hMCx0LmRlZmF1bHQ9dm9pZCAwO3ZhciBuPXUocig5MikpLGk9dShyKDkzKSkscz11KHIoOTQpKSxhPXUocig5NSkpLG89dShyKDE3KSk7ZnVuY3Rpb24gdShlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19dmFyIGQ9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7aWYodm9pZCAwPT09dCYmKHQ9ITEpLG51bGw9PWV8fFwiXCI9PT1lKXRocm93IG5ldyBFcnJvcihcIlVzZXJBZ2VudCBwYXJhbWV0ZXIgY2FuJ3QgYmUgZW1wdHlcIik7dGhpcy5fdWE9ZSx0aGlzLnBhcnNlZFJlc3VsdD17fSwhMCE9PXQmJnRoaXMucGFyc2UoKX12YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5nZXRVQT1mdW5jdGlvbigpe3JldHVybiB0aGlzLl91YX0sdC50ZXN0PWZ1bmN0aW9uKGUpe3JldHVybiBlLnRlc3QodGhpcy5fdWEpfSx0LnBhcnNlQnJvd3Nlcj1mdW5jdGlvbigpe3ZhciBlPXRoaXM7dGhpcy5wYXJzZWRSZXN1bHQuYnJvd3Nlcj17fTt2YXIgdD1vLmRlZmF1bHQuZmluZChuLmRlZmF1bHQsKGZ1bmN0aW9uKHQpe2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHQudGVzdClyZXR1cm4gdC50ZXN0KGUpO2lmKHQudGVzdCBpbnN0YW5jZW9mIEFycmF5KXJldHVybiB0LnRlc3Quc29tZSgoZnVuY3Rpb24odCl7cmV0dXJuIGUudGVzdCh0KX0pKTt0aHJvdyBuZXcgRXJyb3IoXCJCcm93c2VyJ3MgdGVzdCBmdW5jdGlvbiBpcyBub3QgdmFsaWRcIil9KSk7cmV0dXJuIHQmJih0aGlzLnBhcnNlZFJlc3VsdC5icm93c2VyPXQuZGVzY3JpYmUodGhpcy5nZXRVQSgpKSksdGhpcy5wYXJzZWRSZXN1bHQuYnJvd3Nlcn0sdC5nZXRCcm93c2VyPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucGFyc2VkUmVzdWx0LmJyb3dzZXI/dGhpcy5wYXJzZWRSZXN1bHQuYnJvd3Nlcjp0aGlzLnBhcnNlQnJvd3NlcigpfSx0LmdldEJyb3dzZXJOYW1lPWZ1bmN0aW9uKGUpe3JldHVybiBlP1N0cmluZyh0aGlzLmdldEJyb3dzZXIoKS5uYW1lKS50b0xvd2VyQ2FzZSgpfHxcIlwiOnRoaXMuZ2V0QnJvd3NlcigpLm5hbWV8fFwiXCJ9LHQuZ2V0QnJvd3NlclZlcnNpb249ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5nZXRCcm93c2VyKCkudmVyc2lvbn0sdC5nZXRPUz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnBhcnNlZFJlc3VsdC5vcz90aGlzLnBhcnNlZFJlc3VsdC5vczp0aGlzLnBhcnNlT1MoKX0sdC5wYXJzZU9TPWZ1bmN0aW9uKCl7dmFyIGU9dGhpczt0aGlzLnBhcnNlZFJlc3VsdC5vcz17fTt2YXIgdD1vLmRlZmF1bHQuZmluZChpLmRlZmF1bHQsKGZ1bmN0aW9uKHQpe2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHQudGVzdClyZXR1cm4gdC50ZXN0KGUpO2lmKHQudGVzdCBpbnN0YW5jZW9mIEFycmF5KXJldHVybiB0LnRlc3Quc29tZSgoZnVuY3Rpb24odCl7cmV0dXJuIGUudGVzdCh0KX0pKTt0aHJvdyBuZXcgRXJyb3IoXCJCcm93c2VyJ3MgdGVzdCBmdW5jdGlvbiBpcyBub3QgdmFsaWRcIil9KSk7cmV0dXJuIHQmJih0aGlzLnBhcnNlZFJlc3VsdC5vcz10LmRlc2NyaWJlKHRoaXMuZ2V0VUEoKSkpLHRoaXMucGFyc2VkUmVzdWx0Lm9zfSx0LmdldE9TTmFtZT1mdW5jdGlvbihlKXt2YXIgdD10aGlzLmdldE9TKCkubmFtZTtyZXR1cm4gZT9TdHJpbmcodCkudG9Mb3dlckNhc2UoKXx8XCJcIjp0fHxcIlwifSx0LmdldE9TVmVyc2lvbj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmdldE9TKCkudmVyc2lvbn0sdC5nZXRQbGF0Zm9ybT1mdW5jdGlvbigpe3JldHVybiB0aGlzLnBhcnNlZFJlc3VsdC5wbGF0Zm9ybT90aGlzLnBhcnNlZFJlc3VsdC5wbGF0Zm9ybTp0aGlzLnBhcnNlUGxhdGZvcm0oKX0sdC5nZXRQbGF0Zm9ybVR5cGU9ZnVuY3Rpb24oZSl7dm9pZCAwPT09ZSYmKGU9ITEpO3ZhciB0PXRoaXMuZ2V0UGxhdGZvcm0oKS50eXBlO3JldHVybiBlP1N0cmluZyh0KS50b0xvd2VyQ2FzZSgpfHxcIlwiOnR8fFwiXCJ9LHQucGFyc2VQbGF0Zm9ybT1mdW5jdGlvbigpe3ZhciBlPXRoaXM7dGhpcy5wYXJzZWRSZXN1bHQucGxhdGZvcm09e307dmFyIHQ9by5kZWZhdWx0LmZpbmQocy5kZWZhdWx0LChmdW5jdGlvbih0KXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiB0LnRlc3QpcmV0dXJuIHQudGVzdChlKTtpZih0LnRlc3QgaW5zdGFuY2VvZiBBcnJheSlyZXR1cm4gdC50ZXN0LnNvbWUoKGZ1bmN0aW9uKHQpe3JldHVybiBlLnRlc3QodCl9KSk7dGhyb3cgbmV3IEVycm9yKFwiQnJvd3NlcidzIHRlc3QgZnVuY3Rpb24gaXMgbm90IHZhbGlkXCIpfSkpO3JldHVybiB0JiYodGhpcy5wYXJzZWRSZXN1bHQucGxhdGZvcm09dC5kZXNjcmliZSh0aGlzLmdldFVBKCkpKSx0aGlzLnBhcnNlZFJlc3VsdC5wbGF0Zm9ybX0sdC5nZXRFbmdpbmU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wYXJzZWRSZXN1bHQuZW5naW5lP3RoaXMucGFyc2VkUmVzdWx0LmVuZ2luZTp0aGlzLnBhcnNlRW5naW5lKCl9LHQuZ2V0RW5naW5lTmFtZT1mdW5jdGlvbihlKXtyZXR1cm4gZT9TdHJpbmcodGhpcy5nZXRFbmdpbmUoKS5uYW1lKS50b0xvd2VyQ2FzZSgpfHxcIlwiOnRoaXMuZ2V0RW5naW5lKCkubmFtZXx8XCJcIn0sdC5wYXJzZUVuZ2luZT1mdW5jdGlvbigpe3ZhciBlPXRoaXM7dGhpcy5wYXJzZWRSZXN1bHQuZW5naW5lPXt9O3ZhciB0PW8uZGVmYXVsdC5maW5kKGEuZGVmYXVsdCwoZnVuY3Rpb24odCl7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgdC50ZXN0KXJldHVybiB0LnRlc3QoZSk7aWYodC50ZXN0IGluc3RhbmNlb2YgQXJyYXkpcmV0dXJuIHQudGVzdC5zb21lKChmdW5jdGlvbih0KXtyZXR1cm4gZS50ZXN0KHQpfSkpO3Rocm93IG5ldyBFcnJvcihcIkJyb3dzZXIncyB0ZXN0IGZ1bmN0aW9uIGlzIG5vdCB2YWxpZFwiKX0pKTtyZXR1cm4gdCYmKHRoaXMucGFyc2VkUmVzdWx0LmVuZ2luZT10LmRlc2NyaWJlKHRoaXMuZ2V0VUEoKSkpLHRoaXMucGFyc2VkUmVzdWx0LmVuZ2luZX0sdC5wYXJzZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLnBhcnNlQnJvd3NlcigpLHRoaXMucGFyc2VPUygpLHRoaXMucGFyc2VQbGF0Zm9ybSgpLHRoaXMucGFyc2VFbmdpbmUoKSx0aGlzfSx0LmdldFJlc3VsdD1mdW5jdGlvbigpe3JldHVybiBvLmRlZmF1bHQuYXNzaWduKHt9LHRoaXMucGFyc2VkUmVzdWx0KX0sdC5zYXRpc2ZpZXM9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxyPXt9LG49MCxpPXt9LHM9MDtpZihPYmplY3Qua2V5cyhlKS5mb3JFYWNoKChmdW5jdGlvbih0KXt2YXIgYT1lW3RdO1wic3RyaW5nXCI9PXR5cGVvZiBhPyhpW3RdPWEscys9MSk6XCJvYmplY3RcIj09dHlwZW9mIGEmJihyW3RdPWEsbis9MSl9KSksbj4wKXt2YXIgYT1PYmplY3Qua2V5cyhyKSx1PW8uZGVmYXVsdC5maW5kKGEsKGZ1bmN0aW9uKGUpe3JldHVybiB0LmlzT1MoZSl9KSk7aWYodSl7dmFyIGQ9dGhpcy5zYXRpc2ZpZXMoclt1XSk7aWYodm9pZCAwIT09ZClyZXR1cm4gZH12YXIgYz1vLmRlZmF1bHQuZmluZChhLChmdW5jdGlvbihlKXtyZXR1cm4gdC5pc1BsYXRmb3JtKGUpfSkpO2lmKGMpe3ZhciBmPXRoaXMuc2F0aXNmaWVzKHJbY10pO2lmKHZvaWQgMCE9PWYpcmV0dXJuIGZ9fWlmKHM+MCl7dmFyIGw9T2JqZWN0LmtleXMoaSksaD1vLmRlZmF1bHQuZmluZChsLChmdW5jdGlvbihlKXtyZXR1cm4gdC5pc0Jyb3dzZXIoZSwhMCl9KSk7aWYodm9pZCAwIT09aClyZXR1cm4gdGhpcy5jb21wYXJlVmVyc2lvbihpW2hdKX19LHQuaXNCcm93c2VyPWZ1bmN0aW9uKGUsdCl7dm9pZCAwPT09dCYmKHQ9ITEpO3ZhciByPXRoaXMuZ2V0QnJvd3Nlck5hbWUoKS50b0xvd2VyQ2FzZSgpLG49ZS50b0xvd2VyQ2FzZSgpLGk9by5kZWZhdWx0LmdldEJyb3dzZXJUeXBlQnlBbGlhcyhuKTtyZXR1cm4gdCYmaSYmKG49aS50b0xvd2VyQ2FzZSgpKSxuPT09cn0sdC5jb21wYXJlVmVyc2lvbj1mdW5jdGlvbihlKXt2YXIgdD1bMF0scj1lLG49ITEsaT10aGlzLmdldEJyb3dzZXJWZXJzaW9uKCk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGkpcmV0dXJuXCI+XCI9PT1lWzBdfHxcIjxcIj09PWVbMF0/KHI9ZS5zdWJzdHIoMSksXCI9XCI9PT1lWzFdPyhuPSEwLHI9ZS5zdWJzdHIoMikpOnQ9W10sXCI+XCI9PT1lWzBdP3QucHVzaCgxKTp0LnB1c2goLTEpKTpcIj1cIj09PWVbMF0/cj1lLnN1YnN0cigxKTpcIn5cIj09PWVbMF0mJihuPSEwLHI9ZS5zdWJzdHIoMSkpLHQuaW5kZXhPZihvLmRlZmF1bHQuY29tcGFyZVZlcnNpb25zKGkscixuKSk+LTF9LHQuaXNPUz1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5nZXRPU05hbWUoITApPT09U3RyaW5nKGUpLnRvTG93ZXJDYXNlKCl9LHQuaXNQbGF0Zm9ybT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5nZXRQbGF0Zm9ybVR5cGUoITApPT09U3RyaW5nKGUpLnRvTG93ZXJDYXNlKCl9LHQuaXNFbmdpbmU9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZ2V0RW5naW5lTmFtZSghMCk9PT1TdHJpbmcoZSkudG9Mb3dlckNhc2UoKX0sdC5pcz1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5pc0Jyb3dzZXIoZSl8fHRoaXMuaXNPUyhlKXx8dGhpcy5pc1BsYXRmb3JtKGUpfSx0LnNvbWU9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztyZXR1cm4gdm9pZCAwPT09ZSYmKGU9W10pLGUuc29tZSgoZnVuY3Rpb24oZSl7cmV0dXJuIHQuaXMoZSl9KSl9LGV9KCk7dC5kZWZhdWx0PWQsZS5leHBvcnRzPXQuZGVmYXVsdH0sOTI6ZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3QuX19lc01vZHVsZT0hMCx0LmRlZmF1bHQ9dm9pZCAwO3ZhciBuLGk9KG49cigxNykpJiZuLl9fZXNNb2R1bGU/bjp7ZGVmYXVsdDpufTt2YXIgcz0vdmVyc2lvblxcLyhcXGQrKFxcLj9fP1xcZCspKykvaSxhPVt7dGVzdDpbL2dvb2dsZWJvdC9pXSxkZXNjcmliZTpmdW5jdGlvbihlKXt2YXIgdD17bmFtZTpcIkdvb2dsZWJvdFwifSxyPWkuZGVmYXVsdC5nZXRGaXJzdE1hdGNoKC9nb29nbGVib3RcXC8oXFxkKyhcXC5cXGQrKSkvaSxlKXx8aS5kZWZhdWx0LmdldEZpcnN0TWF0Y2gocyxlKTtyZXR1cm4gciYmKHQudmVyc2lvbj1yKSx0fX0se3Rlc3Q6Wy9vcGVyYS9pXSxkZXNjcmliZTpmdW5jdGlvbihlKXt2YXIgdD17bmFtZTpcIk9wZXJhXCJ9LHI9aS5kZWZhdWx0LmdldEZpcnN0TWF0Y2gocyxlKXx8aS5kZWZhdWx0LmdldEZpcnN0TWF0Y2goLyg/Om9wZXJhKVtcXHMvXShcXGQrKFxcLj9fP1xcZCspKykvaSxlKTtyZXR1cm4gciYmKHQudmVyc2lvbj1yKSx0fX0se3Rlc3Q6Wy9vcHJcXC98b3Bpb3MvaV0sZGVzY3JpYmU6ZnVuY3Rpb24oZSl7dmFyIHQ9e25hbWU6XCJPcGVyYVwifSxyPWkuZGVmYXVsdC5nZXRGaXJzdE1hdGNoKC8oPzpvcHJ8b3Bpb3MpW1xccy9dKFxcUyspL2ksZSl8fGkuZGVmYXVsdC5nZXRGaXJzdE1hdGNoKHMsZSk7cmV0dXJuIHImJih0LnZlcnNpb249ciksdH19LHt0ZXN0OlsvU2Ftc3VuZ0Jyb3dzZXIvaV0sZGVzY3JpYmU6ZnVuY3Rpb24oZSl7dmFyIHQ9e25hbWU6XCJTYW1zdW5nIEludGVybmV0IGZvciBBbmRyb2lkXCJ9LHI9aS5kZWZhdWx0LmdldEZpcnN0TWF0Y2gocyxlKXx8aS5kZWZhdWx0LmdldEZpcnN0TWF0Y2goLyg/OlNhbXN1bmdCcm93c2VyKVtcXHMvXShcXGQrKFxcLj9fP1xcZCspKykvaSxlKTtyZXR1cm4gciYmKHQudmVyc2lvbj1yKSx0fX0se3Rlc3Q6Wy9XaGFsZS9pXSxkZXNjcmliZTpmdW5jdGlvbihlKXt2YXIgdD17bmFtZTpcIk5BVkVSIFdoYWxlIEJyb3dzZXJcIn0scj1pLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaChzLGUpfHxpLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaCgvKD86d2hhbGUpW1xccy9dKFxcZCsoPzpcXC5cXGQrKSspL2ksZSk7cmV0dXJuIHImJih0LnZlcnNpb249ciksdH19LHt0ZXN0OlsvTVpCcm93c2VyL2ldLGRlc2NyaWJlOmZ1bmN0aW9uKGUpe3ZhciB0PXtuYW1lOlwiTVogQnJvd3NlclwifSxyPWkuZGVmYXVsdC5nZXRGaXJzdE1hdGNoKC8oPzpNWkJyb3dzZXIpW1xccy9dKFxcZCsoPzpcXC5cXGQrKSspL2ksZSl8fGkuZGVmYXVsdC5nZXRGaXJzdE1hdGNoKHMsZSk7cmV0dXJuIHImJih0LnZlcnNpb249ciksdH19LHt0ZXN0OlsvZm9jdXMvaV0sZGVzY3JpYmU6ZnVuY3Rpb24oZSl7dmFyIHQ9e25hbWU6XCJGb2N1c1wifSxyPWkuZGVmYXVsdC5nZXRGaXJzdE1hdGNoKC8oPzpmb2N1cylbXFxzL10oXFxkKyg/OlxcLlxcZCspKykvaSxlKXx8aS5kZWZhdWx0LmdldEZpcnN0TWF0Y2gocyxlKTtyZXR1cm4gciYmKHQudmVyc2lvbj1yKSx0fX0se3Rlc3Q6Wy9zd2luZy9pXSxkZXNjcmliZTpmdW5jdGlvbihlKXt2YXIgdD17bmFtZTpcIlN3aW5nXCJ9LHI9aS5kZWZhdWx0LmdldEZpcnN0TWF0Y2goLyg/OnN3aW5nKVtcXHMvXShcXGQrKD86XFwuXFxkKykrKS9pLGUpfHxpLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaChzLGUpO3JldHVybiByJiYodC52ZXJzaW9uPXIpLHR9fSx7dGVzdDpbL2NvYXN0L2ldLGRlc2NyaWJlOmZ1bmN0aW9uKGUpe3ZhciB0PXtuYW1lOlwiT3BlcmEgQ29hc3RcIn0scj1pLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaChzLGUpfHxpLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaCgvKD86Y29hc3QpW1xccy9dKFxcZCsoXFwuP18/XFxkKykrKS9pLGUpO3JldHVybiByJiYodC52ZXJzaW9uPXIpLHR9fSx7dGVzdDpbL29wdFxcL1xcZCsoPzouP18/XFxkKykrL2ldLGRlc2NyaWJlOmZ1bmN0aW9uKGUpe3ZhciB0PXtuYW1lOlwiT3BlcmEgVG91Y2hcIn0scj1pLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaCgvKD86b3B0KVtcXHMvXShcXGQrKFxcLj9fP1xcZCspKykvaSxlKXx8aS5kZWZhdWx0LmdldEZpcnN0TWF0Y2gocyxlKTtyZXR1cm4gciYmKHQudmVyc2lvbj1yKSx0fX0se3Rlc3Q6Wy95YWJyb3dzZXIvaV0sZGVzY3JpYmU6ZnVuY3Rpb24oZSl7dmFyIHQ9e25hbWU6XCJZYW5kZXggQnJvd3NlclwifSxyPWkuZGVmYXVsdC5nZXRGaXJzdE1hdGNoKC8oPzp5YWJyb3dzZXIpW1xccy9dKFxcZCsoXFwuP18/XFxkKykrKS9pLGUpfHxpLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaChzLGUpO3JldHVybiByJiYodC52ZXJzaW9uPXIpLHR9fSx7dGVzdDpbL3VjYnJvd3Nlci9pXSxkZXNjcmliZTpmdW5jdGlvbihlKXt2YXIgdD17bmFtZTpcIlVDIEJyb3dzZXJcIn0scj1pLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaChzLGUpfHxpLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaCgvKD86dWNicm93c2VyKVtcXHMvXShcXGQrKFxcLj9fP1xcZCspKykvaSxlKTtyZXR1cm4gciYmKHQudmVyc2lvbj1yKSx0fX0se3Rlc3Q6Wy9NYXh0aG9ufG14aW9zL2ldLGRlc2NyaWJlOmZ1bmN0aW9uKGUpe3ZhciB0PXtuYW1lOlwiTWF4dGhvblwifSxyPWkuZGVmYXVsdC5nZXRGaXJzdE1hdGNoKHMsZSl8fGkuZGVmYXVsdC5nZXRGaXJzdE1hdGNoKC8oPzpNYXh0aG9ufG14aW9zKVtcXHMvXShcXGQrKFxcLj9fP1xcZCspKykvaSxlKTtyZXR1cm4gciYmKHQudmVyc2lvbj1yKSx0fX0se3Rlc3Q6Wy9lcGlwaGFueS9pXSxkZXNjcmliZTpmdW5jdGlvbihlKXt2YXIgdD17bmFtZTpcIkVwaXBoYW55XCJ9LHI9aS5kZWZhdWx0LmdldEZpcnN0TWF0Y2gocyxlKXx8aS5kZWZhdWx0LmdldEZpcnN0TWF0Y2goLyg/OmVwaXBoYW55KVtcXHMvXShcXGQrKFxcLj9fP1xcZCspKykvaSxlKTtyZXR1cm4gciYmKHQudmVyc2lvbj1yKSx0fX0se3Rlc3Q6Wy9wdWZmaW4vaV0sZGVzY3JpYmU6ZnVuY3Rpb24oZSl7dmFyIHQ9e25hbWU6XCJQdWZmaW5cIn0scj1pLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaChzLGUpfHxpLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaCgvKD86cHVmZmluKVtcXHMvXShcXGQrKFxcLj9fP1xcZCspKykvaSxlKTtyZXR1cm4gciYmKHQudmVyc2lvbj1yKSx0fX0se3Rlc3Q6Wy9zbGVpcG5pci9pXSxkZXNjcmliZTpmdW5jdGlvbihlKXt2YXIgdD17bmFtZTpcIlNsZWlwbmlyXCJ9LHI9aS5kZWZhdWx0LmdldEZpcnN0TWF0Y2gocyxlKXx8aS5kZWZhdWx0LmdldEZpcnN0TWF0Y2goLyg/OnNsZWlwbmlyKVtcXHMvXShcXGQrKFxcLj9fP1xcZCspKykvaSxlKTtyZXR1cm4gciYmKHQudmVyc2lvbj1yKSx0fX0se3Rlc3Q6Wy9rLW1lbGVvbi9pXSxkZXNjcmliZTpmdW5jdGlvbihlKXt2YXIgdD17bmFtZTpcIkstTWVsZW9uXCJ9LHI9aS5kZWZhdWx0LmdldEZpcnN0TWF0Y2gocyxlKXx8aS5kZWZhdWx0LmdldEZpcnN0TWF0Y2goLyg/OmstbWVsZW9uKVtcXHMvXShcXGQrKFxcLj9fP1xcZCspKykvaSxlKTtyZXR1cm4gciYmKHQudmVyc2lvbj1yKSx0fX0se3Rlc3Q6Wy9taWNyb21lc3Nlbmdlci9pXSxkZXNjcmliZTpmdW5jdGlvbihlKXt2YXIgdD17bmFtZTpcIldlQ2hhdFwifSxyPWkuZGVmYXVsdC5nZXRGaXJzdE1hdGNoKC8oPzptaWNyb21lc3NlbmdlcilbXFxzL10oXFxkKyhcXC4/Xz9cXGQrKSspL2ksZSl8fGkuZGVmYXVsdC5nZXRGaXJzdE1hdGNoKHMsZSk7cmV0dXJuIHImJih0LnZlcnNpb249ciksdH19LHt0ZXN0OlsvcXFicm93c2VyL2ldLGRlc2NyaWJlOmZ1bmN0aW9uKGUpe3ZhciB0PXtuYW1lOi9xcWJyb3dzZXJsaXRlL2kudGVzdChlKT9cIlFRIEJyb3dzZXIgTGl0ZVwiOlwiUVEgQnJvd3NlclwifSxyPWkuZGVmYXVsdC5nZXRGaXJzdE1hdGNoKC8oPzpxcWJyb3dzZXJsaXRlfHFxYnJvd3NlcilbL10oXFxkKyhcXC4/Xz9cXGQrKSspL2ksZSl8fGkuZGVmYXVsdC5nZXRGaXJzdE1hdGNoKHMsZSk7cmV0dXJuIHImJih0LnZlcnNpb249ciksdH19LHt0ZXN0OlsvbXNpZXx0cmlkZW50L2ldLGRlc2NyaWJlOmZ1bmN0aW9uKGUpe3ZhciB0PXtuYW1lOlwiSW50ZXJuZXQgRXhwbG9yZXJcIn0scj1pLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaCgvKD86bXNpZSB8cnY6KShcXGQrKFxcLj9fP1xcZCspKykvaSxlKTtyZXR1cm4gciYmKHQudmVyc2lvbj1yKSx0fX0se3Rlc3Q6Wy9cXHNlZGdcXC8vaV0sZGVzY3JpYmU6ZnVuY3Rpb24oZSl7dmFyIHQ9e25hbWU6XCJNaWNyb3NvZnQgRWRnZVwifSxyPWkuZGVmYXVsdC5nZXRGaXJzdE1hdGNoKC9cXHNlZGdcXC8oXFxkKyhcXC4/Xz9cXGQrKSspL2ksZSk7cmV0dXJuIHImJih0LnZlcnNpb249ciksdH19LHt0ZXN0OlsvZWRnKFtlYV18aW9zKS9pXSxkZXNjcmliZTpmdW5jdGlvbihlKXt2YXIgdD17bmFtZTpcIk1pY3Jvc29mdCBFZGdlXCJ9LHI9aS5kZWZhdWx0LmdldFNlY29uZE1hdGNoKC9lZGcoW2VhXXxpb3MpXFwvKFxcZCsoXFwuP18/XFxkKykrKS9pLGUpO3JldHVybiByJiYodC52ZXJzaW9uPXIpLHR9fSx7dGVzdDpbL3ZpdmFsZGkvaV0sZGVzY3JpYmU6ZnVuY3Rpb24oZSl7dmFyIHQ9e25hbWU6XCJWaXZhbGRpXCJ9LHI9aS5kZWZhdWx0LmdldEZpcnN0TWF0Y2goL3ZpdmFsZGlcXC8oXFxkKyhcXC4/Xz9cXGQrKSspL2ksZSk7cmV0dXJuIHImJih0LnZlcnNpb249ciksdH19LHt0ZXN0Olsvc2VhbW9ua2V5L2ldLGRlc2NyaWJlOmZ1bmN0aW9uKGUpe3ZhciB0PXtuYW1lOlwiU2VhTW9ua2V5XCJ9LHI9aS5kZWZhdWx0LmdldEZpcnN0TWF0Y2goL3NlYW1vbmtleVxcLyhcXGQrKFxcLj9fP1xcZCspKykvaSxlKTtyZXR1cm4gciYmKHQudmVyc2lvbj1yKSx0fX0se3Rlc3Q6Wy9zYWlsZmlzaC9pXSxkZXNjcmliZTpmdW5jdGlvbihlKXt2YXIgdD17bmFtZTpcIlNhaWxmaXNoXCJ9LHI9aS5kZWZhdWx0LmdldEZpcnN0TWF0Y2goL3NhaWxmaXNoXFxzP2Jyb3dzZXJcXC8oXFxkKyhcXC5cXGQrKT8pL2ksZSk7cmV0dXJuIHImJih0LnZlcnNpb249ciksdH19LHt0ZXN0Olsvc2lsay9pXSxkZXNjcmliZTpmdW5jdGlvbihlKXt2YXIgdD17bmFtZTpcIkFtYXpvbiBTaWxrXCJ9LHI9aS5kZWZhdWx0LmdldEZpcnN0TWF0Y2goL3NpbGtcXC8oXFxkKyhcXC4/Xz9cXGQrKSspL2ksZSk7cmV0dXJuIHImJih0LnZlcnNpb249ciksdH19LHt0ZXN0OlsvcGhhbnRvbS9pXSxkZXNjcmliZTpmdW5jdGlvbihlKXt2YXIgdD17bmFtZTpcIlBoYW50b21KU1wifSxyPWkuZGVmYXVsdC5nZXRGaXJzdE1hdGNoKC9waGFudG9tanNcXC8oXFxkKyhcXC4/Xz9cXGQrKSspL2ksZSk7cmV0dXJuIHImJih0LnZlcnNpb249ciksdH19LHt0ZXN0Olsvc2xpbWVyanMvaV0sZGVzY3JpYmU6ZnVuY3Rpb24oZSl7dmFyIHQ9e25hbWU6XCJTbGltZXJKU1wifSxyPWkuZGVmYXVsdC5nZXRGaXJzdE1hdGNoKC9zbGltZXJqc1xcLyhcXGQrKFxcLj9fP1xcZCspKykvaSxlKTtyZXR1cm4gciYmKHQudmVyc2lvbj1yKSx0fX0se3Rlc3Q6Wy9ibGFja2JlcnJ5fFxcYmJiXFxkKy9pLC9yaW1cXHN0YWJsZXQvaV0sZGVzY3JpYmU6ZnVuY3Rpb24oZSl7dmFyIHQ9e25hbWU6XCJCbGFja0JlcnJ5XCJ9LHI9aS5kZWZhdWx0LmdldEZpcnN0TWF0Y2gocyxlKXx8aS5kZWZhdWx0LmdldEZpcnN0TWF0Y2goL2JsYWNrYmVycnlbXFxkXStcXC8oXFxkKyhcXC4/Xz9cXGQrKSspL2ksZSk7cmV0dXJuIHImJih0LnZlcnNpb249ciksdH19LHt0ZXN0OlsvKHdlYnxocHcpW28wXXMvaV0sZGVzY3JpYmU6ZnVuY3Rpb24oZSl7dmFyIHQ9e25hbWU6XCJXZWJPUyBCcm93c2VyXCJ9LHI9aS5kZWZhdWx0LmdldEZpcnN0TWF0Y2gocyxlKXx8aS5kZWZhdWx0LmdldEZpcnN0TWF0Y2goL3coPzplYik/W28wXXNicm93c2VyXFwvKFxcZCsoXFwuP18/XFxkKykrKS9pLGUpO3JldHVybiByJiYodC52ZXJzaW9uPXIpLHR9fSx7dGVzdDpbL2JhZGEvaV0sZGVzY3JpYmU6ZnVuY3Rpb24oZSl7dmFyIHQ9e25hbWU6XCJCYWRhXCJ9LHI9aS5kZWZhdWx0LmdldEZpcnN0TWF0Y2goL2RvbGZpblxcLyhcXGQrKFxcLj9fP1xcZCspKykvaSxlKTtyZXR1cm4gciYmKHQudmVyc2lvbj1yKSx0fX0se3Rlc3Q6Wy90aXplbi9pXSxkZXNjcmliZTpmdW5jdGlvbihlKXt2YXIgdD17bmFtZTpcIlRpemVuXCJ9LHI9aS5kZWZhdWx0LmdldEZpcnN0TWF0Y2goLyg/OnRpemVuXFxzPyk/YnJvd3NlclxcLyhcXGQrKFxcLj9fP1xcZCspKykvaSxlKXx8aS5kZWZhdWx0LmdldEZpcnN0TWF0Y2gocyxlKTtyZXR1cm4gciYmKHQudmVyc2lvbj1yKSx0fX0se3Rlc3Q6Wy9xdXB6aWxsYS9pXSxkZXNjcmliZTpmdW5jdGlvbihlKXt2YXIgdD17bmFtZTpcIlF1cFppbGxhXCJ9LHI9aS5kZWZhdWx0LmdldEZpcnN0TWF0Y2goLyg/OnF1cHppbGxhKVtcXHMvXShcXGQrKFxcLj9fP1xcZCspKykvaSxlKXx8aS5kZWZhdWx0LmdldEZpcnN0TWF0Y2gocyxlKTtyZXR1cm4gciYmKHQudmVyc2lvbj1yKSx0fX0se3Rlc3Q6Wy9maXJlZm94fGljZXdlYXNlbHxmeGlvcy9pXSxkZXNjcmliZTpmdW5jdGlvbihlKXt2YXIgdD17bmFtZTpcIkZpcmVmb3hcIn0scj1pLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaCgvKD86ZmlyZWZveHxpY2V3ZWFzZWx8Znhpb3MpW1xccy9dKFxcZCsoXFwuP18/XFxkKykrKS9pLGUpO3JldHVybiByJiYodC52ZXJzaW9uPXIpLHR9fSx7dGVzdDpbL2VsZWN0cm9uL2ldLGRlc2NyaWJlOmZ1bmN0aW9uKGUpe3ZhciB0PXtuYW1lOlwiRWxlY3Ryb25cIn0scj1pLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaCgvKD86ZWxlY3Ryb24pXFwvKFxcZCsoXFwuP18/XFxkKykrKS9pLGUpO3JldHVybiByJiYodC52ZXJzaW9uPXIpLHR9fSx7dGVzdDpbL2Nocm9taXVtL2ldLGRlc2NyaWJlOmZ1bmN0aW9uKGUpe3ZhciB0PXtuYW1lOlwiQ2hyb21pdW1cIn0scj1pLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaCgvKD86Y2hyb21pdW0pW1xccy9dKFxcZCsoXFwuP18/XFxkKykrKS9pLGUpfHxpLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaChzLGUpO3JldHVybiByJiYodC52ZXJzaW9uPXIpLHR9fSx7dGVzdDpbL2Nocm9tZXxjcmlvc3xjcm1vL2ldLGRlc2NyaWJlOmZ1bmN0aW9uKGUpe3ZhciB0PXtuYW1lOlwiQ2hyb21lXCJ9LHI9aS5kZWZhdWx0LmdldEZpcnN0TWF0Y2goLyg/OmNocm9tZXxjcmlvc3xjcm1vKVxcLyhcXGQrKFxcLj9fP1xcZCspKykvaSxlKTtyZXR1cm4gciYmKHQudmVyc2lvbj1yKSx0fX0se3Rlc3Q6Wy9HU0EvaV0sZGVzY3JpYmU6ZnVuY3Rpb24oZSl7dmFyIHQ9e25hbWU6XCJHb29nbGUgU2VhcmNoXCJ9LHI9aS5kZWZhdWx0LmdldEZpcnN0TWF0Y2goLyg/OkdTQSlcXC8oXFxkKyhcXC4/Xz9cXGQrKSspL2ksZSk7cmV0dXJuIHImJih0LnZlcnNpb249ciksdH19LHt0ZXN0OmZ1bmN0aW9uKGUpe3ZhciB0PSFlLnRlc3QoL2xpa2UgYW5kcm9pZC9pKSxyPWUudGVzdCgvYW5kcm9pZC9pKTtyZXR1cm4gdCYmcn0sZGVzY3JpYmU6ZnVuY3Rpb24oZSl7dmFyIHQ9e25hbWU6XCJBbmRyb2lkIEJyb3dzZXJcIn0scj1pLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaChzLGUpO3JldHVybiByJiYodC52ZXJzaW9uPXIpLHR9fSx7dGVzdDpbL3BsYXlzdGF0aW9uIDQvaV0sZGVzY3JpYmU6ZnVuY3Rpb24oZSl7dmFyIHQ9e25hbWU6XCJQbGF5U3RhdGlvbiA0XCJ9LHI9aS5kZWZhdWx0LmdldEZpcnN0TWF0Y2gocyxlKTtyZXR1cm4gciYmKHQudmVyc2lvbj1yKSx0fX0se3Rlc3Q6Wy9zYWZhcml8YXBwbGV3ZWJraXQvaV0sZGVzY3JpYmU6ZnVuY3Rpb24oZSl7dmFyIHQ9e25hbWU6XCJTYWZhcmlcIn0scj1pLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaChzLGUpO3JldHVybiByJiYodC52ZXJzaW9uPXIpLHR9fSx7dGVzdDpbLy4qL2ldLGRlc2NyaWJlOmZ1bmN0aW9uKGUpe3ZhciB0PS0xIT09ZS5zZWFyY2goXCJcXFxcKFwiKT8vXiguKilcXC8oLiopWyBcXHRdXFwoKC4qKS86L14oLiopXFwvKC4qKSAvO3JldHVybntuYW1lOmkuZGVmYXVsdC5nZXRGaXJzdE1hdGNoKHQsZSksdmVyc2lvbjppLmRlZmF1bHQuZ2V0U2Vjb25kTWF0Y2godCxlKX19fV07dC5kZWZhdWx0PWEsZS5leHBvcnRzPXQuZGVmYXVsdH0sOTM6ZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3QuX19lc01vZHVsZT0hMCx0LmRlZmF1bHQ9dm9pZCAwO3ZhciBuLGk9KG49cigxNykpJiZuLl9fZXNNb2R1bGU/bjp7ZGVmYXVsdDpufSxzPXIoMTgpO3ZhciBhPVt7dGVzdDpbL1Jva3VcXC9EVlAvXSxkZXNjcmliZTpmdW5jdGlvbihlKXt2YXIgdD1pLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaCgvUm9rdVxcL0RWUC0oXFxkK1xcLlxcZCspL2ksZSk7cmV0dXJue25hbWU6cy5PU19NQVAuUm9rdSx2ZXJzaW9uOnR9fX0se3Rlc3Q6Wy93aW5kb3dzIHBob25lL2ldLGRlc2NyaWJlOmZ1bmN0aW9uKGUpe3ZhciB0PWkuZGVmYXVsdC5nZXRGaXJzdE1hdGNoKC93aW5kb3dzIHBob25lICg/Om9zKT9cXHM/KFxcZCsoXFwuXFxkKykqKS9pLGUpO3JldHVybntuYW1lOnMuT1NfTUFQLldpbmRvd3NQaG9uZSx2ZXJzaW9uOnR9fX0se3Rlc3Q6Wy93aW5kb3dzIC9pXSxkZXNjcmliZTpmdW5jdGlvbihlKXt2YXIgdD1pLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaCgvV2luZG93cyAoKE5UfFhQKSggXFxkXFxkPy5cXGQpPykvaSxlKSxyPWkuZGVmYXVsdC5nZXRXaW5kb3dzVmVyc2lvbk5hbWUodCk7cmV0dXJue25hbWU6cy5PU19NQVAuV2luZG93cyx2ZXJzaW9uOnQsdmVyc2lvbk5hbWU6cn19fSx7dGVzdDpbL01hY2ludG9zaCguKj8pIEZ4aU9TKC4qPylcXC8vXSxkZXNjcmliZTpmdW5jdGlvbihlKXt2YXIgdD17bmFtZTpzLk9TX01BUC5pT1N9LHI9aS5kZWZhdWx0LmdldFNlY29uZE1hdGNoKC8oVmVyc2lvblxcLykoXFxkW1xcZC5dKykvLGUpO3JldHVybiByJiYodC52ZXJzaW9uPXIpLHR9fSx7dGVzdDpbL21hY2ludG9zaC9pXSxkZXNjcmliZTpmdW5jdGlvbihlKXt2YXIgdD1pLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaCgvbWFjIG9zIHggKFxcZCsoXFwuP18/XFxkKykrKS9pLGUpLnJlcGxhY2UoL1tfXFxzXS9nLFwiLlwiKSxyPWkuZGVmYXVsdC5nZXRNYWNPU1ZlcnNpb25OYW1lKHQpLG49e25hbWU6cy5PU19NQVAuTWFjT1MsdmVyc2lvbjp0fTtyZXR1cm4gciYmKG4udmVyc2lvbk5hbWU9ciksbn19LHt0ZXN0OlsvKGlwb2R8aXBob25lfGlwYWQpL2ldLGRlc2NyaWJlOmZ1bmN0aW9uKGUpe3ZhciB0PWkuZGVmYXVsdC5nZXRGaXJzdE1hdGNoKC9vcyAoXFxkKyhbX1xcc11cXGQrKSopIGxpa2UgbWFjIG9zIHgvaSxlKS5yZXBsYWNlKC9bX1xcc10vZyxcIi5cIik7cmV0dXJue25hbWU6cy5PU19NQVAuaU9TLHZlcnNpb246dH19fSx7dGVzdDpmdW5jdGlvbihlKXt2YXIgdD0hZS50ZXN0KC9saWtlIGFuZHJvaWQvaSkscj1lLnRlc3QoL2FuZHJvaWQvaSk7cmV0dXJuIHQmJnJ9LGRlc2NyaWJlOmZ1bmN0aW9uKGUpe3ZhciB0PWkuZGVmYXVsdC5nZXRGaXJzdE1hdGNoKC9hbmRyb2lkW1xccy8tXShcXGQrKFxcLlxcZCspKikvaSxlKSxyPWkuZGVmYXVsdC5nZXRBbmRyb2lkVmVyc2lvbk5hbWUodCksbj17bmFtZTpzLk9TX01BUC5BbmRyb2lkLHZlcnNpb246dH07cmV0dXJuIHImJihuLnZlcnNpb25OYW1lPXIpLG59fSx7dGVzdDpbLyh3ZWJ8aHB3KVtvMF1zL2ldLGRlc2NyaWJlOmZ1bmN0aW9uKGUpe3ZhciB0PWkuZGVmYXVsdC5nZXRGaXJzdE1hdGNoKC8oPzp3ZWJ8aHB3KVtvMF1zXFwvKFxcZCsoXFwuXFxkKykqKS9pLGUpLHI9e25hbWU6cy5PU19NQVAuV2ViT1N9O3JldHVybiB0JiZ0Lmxlbmd0aCYmKHIudmVyc2lvbj10KSxyfX0se3Rlc3Q6Wy9ibGFja2JlcnJ5fFxcYmJiXFxkKy9pLC9yaW1cXHN0YWJsZXQvaV0sZGVzY3JpYmU6ZnVuY3Rpb24oZSl7dmFyIHQ9aS5kZWZhdWx0LmdldEZpcnN0TWF0Y2goL3JpbVxcc3RhYmxldFxcc29zXFxzKFxcZCsoXFwuXFxkKykqKS9pLGUpfHxpLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaCgvYmxhY2tiZXJyeVxcZCtcXC8oXFxkKyhbX1xcc11cXGQrKSopL2ksZSl8fGkuZGVmYXVsdC5nZXRGaXJzdE1hdGNoKC9cXGJiYihcXGQrKS9pLGUpO3JldHVybntuYW1lOnMuT1NfTUFQLkJsYWNrQmVycnksdmVyc2lvbjp0fX19LHt0ZXN0OlsvYmFkYS9pXSxkZXNjcmliZTpmdW5jdGlvbihlKXt2YXIgdD1pLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaCgvYmFkYVxcLyhcXGQrKFxcLlxcZCspKikvaSxlKTtyZXR1cm57bmFtZTpzLk9TX01BUC5CYWRhLHZlcnNpb246dH19fSx7dGVzdDpbL3RpemVuL2ldLGRlc2NyaWJlOmZ1bmN0aW9uKGUpe3ZhciB0PWkuZGVmYXVsdC5nZXRGaXJzdE1hdGNoKC90aXplblsvXFxzXShcXGQrKFxcLlxcZCspKikvaSxlKTtyZXR1cm57bmFtZTpzLk9TX01BUC5UaXplbix2ZXJzaW9uOnR9fX0se3Rlc3Q6Wy9saW51eC9pXSxkZXNjcmliZTpmdW5jdGlvbigpe3JldHVybntuYW1lOnMuT1NfTUFQLkxpbnV4fX19LHt0ZXN0OlsvQ3JPUy9dLGRlc2NyaWJlOmZ1bmN0aW9uKCl7cmV0dXJue25hbWU6cy5PU19NQVAuQ2hyb21lT1N9fX0se3Rlc3Q6Wy9QbGF5U3RhdGlvbiA0L10sZGVzY3JpYmU6ZnVuY3Rpb24oZSl7dmFyIHQ9aS5kZWZhdWx0LmdldEZpcnN0TWF0Y2goL1BsYXlTdGF0aW9uIDRbL1xcc10oXFxkKyhcXC5cXGQrKSopL2ksZSk7cmV0dXJue25hbWU6cy5PU19NQVAuUGxheVN0YXRpb240LHZlcnNpb246dH19fV07dC5kZWZhdWx0PWEsZS5leHBvcnRzPXQuZGVmYXVsdH0sOTQ6ZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3QuX19lc01vZHVsZT0hMCx0LmRlZmF1bHQ9dm9pZCAwO3ZhciBuLGk9KG49cigxNykpJiZuLl9fZXNNb2R1bGU/bjp7ZGVmYXVsdDpufSxzPXIoMTgpO3ZhciBhPVt7dGVzdDpbL2dvb2dsZWJvdC9pXSxkZXNjcmliZTpmdW5jdGlvbigpe3JldHVybnt0eXBlOlwiYm90XCIsdmVuZG9yOlwiR29vZ2xlXCJ9fX0se3Rlc3Q6Wy9odWF3ZWkvaV0sZGVzY3JpYmU6ZnVuY3Rpb24oZSl7dmFyIHQ9aS5kZWZhdWx0LmdldEZpcnN0TWF0Y2goLyhjYW4tbDAxKS9pLGUpJiZcIk5vdmFcIixyPXt0eXBlOnMuUExBVEZPUk1TX01BUC5tb2JpbGUsdmVuZG9yOlwiSHVhd2VpXCJ9O3JldHVybiB0JiYoci5tb2RlbD10KSxyfX0se3Rlc3Q6Wy9uZXh1c1xccyooPzo3fDh8OXwxMCkuKi9pXSxkZXNjcmliZTpmdW5jdGlvbigpe3JldHVybnt0eXBlOnMuUExBVEZPUk1TX01BUC50YWJsZXQsdmVuZG9yOlwiTmV4dXNcIn19fSx7dGVzdDpbL2lwYWQvaV0sZGVzY3JpYmU6ZnVuY3Rpb24oKXtyZXR1cm57dHlwZTpzLlBMQVRGT1JNU19NQVAudGFibGV0LHZlbmRvcjpcIkFwcGxlXCIsbW9kZWw6XCJpUGFkXCJ9fX0se3Rlc3Q6Wy9NYWNpbnRvc2goLio/KSBGeGlPUyguKj8pXFwvL10sZGVzY3JpYmU6ZnVuY3Rpb24oKXtyZXR1cm57dHlwZTpzLlBMQVRGT1JNU19NQVAudGFibGV0LHZlbmRvcjpcIkFwcGxlXCIsbW9kZWw6XCJpUGFkXCJ9fX0se3Rlc3Q6Wy9rZnR0IGJ1aWxkL2ldLGRlc2NyaWJlOmZ1bmN0aW9uKCl7cmV0dXJue3R5cGU6cy5QTEFURk9STVNfTUFQLnRhYmxldCx2ZW5kb3I6XCJBbWF6b25cIixtb2RlbDpcIktpbmRsZSBGaXJlIEhEIDdcIn19fSx7dGVzdDpbL3NpbGsvaV0sZGVzY3JpYmU6ZnVuY3Rpb24oKXtyZXR1cm57dHlwZTpzLlBMQVRGT1JNU19NQVAudGFibGV0LHZlbmRvcjpcIkFtYXpvblwifX19LHt0ZXN0OlsvdGFibGV0KD8hIHBjKS9pXSxkZXNjcmliZTpmdW5jdGlvbigpe3JldHVybnt0eXBlOnMuUExBVEZPUk1TX01BUC50YWJsZXR9fX0se3Rlc3Q6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS50ZXN0KC9pcG9kfGlwaG9uZS9pKSxyPWUudGVzdCgvbGlrZSAoaXBvZHxpcGhvbmUpL2kpO3JldHVybiB0JiYhcn0sZGVzY3JpYmU6ZnVuY3Rpb24oZSl7dmFyIHQ9aS5kZWZhdWx0LmdldEZpcnN0TWF0Y2goLyhpcG9kfGlwaG9uZSkvaSxlKTtyZXR1cm57dHlwZTpzLlBMQVRGT1JNU19NQVAubW9iaWxlLHZlbmRvcjpcIkFwcGxlXCIsbW9kZWw6dH19fSx7dGVzdDpbL25leHVzXFxzKlswLTZdLiovaSwvZ2FsYXh5IG5leHVzL2ldLGRlc2NyaWJlOmZ1bmN0aW9uKCl7cmV0dXJue3R5cGU6cy5QTEFURk9STVNfTUFQLm1vYmlsZSx2ZW5kb3I6XCJOZXh1c1wifX19LHt0ZXN0OlsvW14tXW1vYmkvaV0sZGVzY3JpYmU6ZnVuY3Rpb24oKXtyZXR1cm57dHlwZTpzLlBMQVRGT1JNU19NQVAubW9iaWxlfX19LHt0ZXN0OmZ1bmN0aW9uKGUpe3JldHVyblwiYmxhY2tiZXJyeVwiPT09ZS5nZXRCcm93c2VyTmFtZSghMCl9LGRlc2NyaWJlOmZ1bmN0aW9uKCl7cmV0dXJue3R5cGU6cy5QTEFURk9STVNfTUFQLm1vYmlsZSx2ZW5kb3I6XCJCbGFja0JlcnJ5XCJ9fX0se3Rlc3Q6ZnVuY3Rpb24oZSl7cmV0dXJuXCJiYWRhXCI9PT1lLmdldEJyb3dzZXJOYW1lKCEwKX0sZGVzY3JpYmU6ZnVuY3Rpb24oKXtyZXR1cm57dHlwZTpzLlBMQVRGT1JNU19NQVAubW9iaWxlfX19LHt0ZXN0OmZ1bmN0aW9uKGUpe3JldHVyblwid2luZG93cyBwaG9uZVwiPT09ZS5nZXRCcm93c2VyTmFtZSgpfSxkZXNjcmliZTpmdW5jdGlvbigpe3JldHVybnt0eXBlOnMuUExBVEZPUk1TX01BUC5tb2JpbGUsdmVuZG9yOlwiTWljcm9zb2Z0XCJ9fX0se3Rlc3Q6ZnVuY3Rpb24oZSl7dmFyIHQ9TnVtYmVyKFN0cmluZyhlLmdldE9TVmVyc2lvbigpKS5zcGxpdChcIi5cIilbMF0pO3JldHVyblwiYW5kcm9pZFwiPT09ZS5nZXRPU05hbWUoITApJiZ0Pj0zfSxkZXNjcmliZTpmdW5jdGlvbigpe3JldHVybnt0eXBlOnMuUExBVEZPUk1TX01BUC50YWJsZXR9fX0se3Rlc3Q6ZnVuY3Rpb24oZSl7cmV0dXJuXCJhbmRyb2lkXCI9PT1lLmdldE9TTmFtZSghMCl9LGRlc2NyaWJlOmZ1bmN0aW9uKCl7cmV0dXJue3R5cGU6cy5QTEFURk9STVNfTUFQLm1vYmlsZX19fSx7dGVzdDpmdW5jdGlvbihlKXtyZXR1cm5cIm1hY29zXCI9PT1lLmdldE9TTmFtZSghMCl9LGRlc2NyaWJlOmZ1bmN0aW9uKCl7cmV0dXJue3R5cGU6cy5QTEFURk9STVNfTUFQLmRlc2t0b3AsdmVuZG9yOlwiQXBwbGVcIn19fSx7dGVzdDpmdW5jdGlvbihlKXtyZXR1cm5cIndpbmRvd3NcIj09PWUuZ2V0T1NOYW1lKCEwKX0sZGVzY3JpYmU6ZnVuY3Rpb24oKXtyZXR1cm57dHlwZTpzLlBMQVRGT1JNU19NQVAuZGVza3RvcH19fSx7dGVzdDpmdW5jdGlvbihlKXtyZXR1cm5cImxpbnV4XCI9PT1lLmdldE9TTmFtZSghMCl9LGRlc2NyaWJlOmZ1bmN0aW9uKCl7cmV0dXJue3R5cGU6cy5QTEFURk9STVNfTUFQLmRlc2t0b3B9fX0se3Rlc3Q6ZnVuY3Rpb24oZSl7cmV0dXJuXCJwbGF5c3RhdGlvbiA0XCI9PT1lLmdldE9TTmFtZSghMCl9LGRlc2NyaWJlOmZ1bmN0aW9uKCl7cmV0dXJue3R5cGU6cy5QTEFURk9STVNfTUFQLnR2fX19LHt0ZXN0OmZ1bmN0aW9uKGUpe3JldHVyblwicm9rdVwiPT09ZS5nZXRPU05hbWUoITApfSxkZXNjcmliZTpmdW5jdGlvbigpe3JldHVybnt0eXBlOnMuUExBVEZPUk1TX01BUC50dn19fV07dC5kZWZhdWx0PWEsZS5leHBvcnRzPXQuZGVmYXVsdH0sOTU6ZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3QuX19lc01vZHVsZT0hMCx0LmRlZmF1bHQ9dm9pZCAwO3ZhciBuLGk9KG49cigxNykpJiZuLl9fZXNNb2R1bGU/bjp7ZGVmYXVsdDpufSxzPXIoMTgpO3ZhciBhPVt7dGVzdDpmdW5jdGlvbihlKXtyZXR1cm5cIm1pY3Jvc29mdCBlZGdlXCI9PT1lLmdldEJyb3dzZXJOYW1lKCEwKX0sZGVzY3JpYmU6ZnVuY3Rpb24oZSl7aWYoL1xcc2VkZ1xcLy9pLnRlc3QoZSkpcmV0dXJue25hbWU6cy5FTkdJTkVfTUFQLkJsaW5rfTt2YXIgdD1pLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaCgvZWRnZVxcLyhcXGQrKFxcLj9fP1xcZCspKykvaSxlKTtyZXR1cm57bmFtZTpzLkVOR0lORV9NQVAuRWRnZUhUTUwsdmVyc2lvbjp0fX19LHt0ZXN0OlsvdHJpZGVudC9pXSxkZXNjcmliZTpmdW5jdGlvbihlKXt2YXIgdD17bmFtZTpzLkVOR0lORV9NQVAuVHJpZGVudH0scj1pLmRlZmF1bHQuZ2V0Rmlyc3RNYXRjaCgvdHJpZGVudFxcLyhcXGQrKFxcLj9fP1xcZCspKykvaSxlKTtyZXR1cm4gciYmKHQudmVyc2lvbj1yKSx0fX0se3Rlc3Q6ZnVuY3Rpb24oZSl7cmV0dXJuIGUudGVzdCgvcHJlc3RvL2kpfSxkZXNjcmliZTpmdW5jdGlvbihlKXt2YXIgdD17bmFtZTpzLkVOR0lORV9NQVAuUHJlc3RvfSxyPWkuZGVmYXVsdC5nZXRGaXJzdE1hdGNoKC9wcmVzdG9cXC8oXFxkKyhcXC4/Xz9cXGQrKSspL2ksZSk7cmV0dXJuIHImJih0LnZlcnNpb249ciksdH19LHt0ZXN0OmZ1bmN0aW9uKGUpe3ZhciB0PWUudGVzdCgvZ2Vja28vaSkscj1lLnRlc3QoL2xpa2UgZ2Vja28vaSk7cmV0dXJuIHQmJiFyfSxkZXNjcmliZTpmdW5jdGlvbihlKXt2YXIgdD17bmFtZTpzLkVOR0lORV9NQVAuR2Vja299LHI9aS5kZWZhdWx0LmdldEZpcnN0TWF0Y2goL2dlY2tvXFwvKFxcZCsoXFwuP18/XFxkKykrKS9pLGUpO3JldHVybiByJiYodC52ZXJzaW9uPXIpLHR9fSx7dGVzdDpbLyhhcHBsZSk/d2Via2l0XFwvNTM3XFwuMzYvaV0sZGVzY3JpYmU6ZnVuY3Rpb24oKXtyZXR1cm57bmFtZTpzLkVOR0lORV9NQVAuQmxpbmt9fX0se3Rlc3Q6Wy8oYXBwbGUpP3dlYmtpdC9pXSxkZXNjcmliZTpmdW5jdGlvbihlKXt2YXIgdD17bmFtZTpzLkVOR0lORV9NQVAuV2ViS2l0fSxyPWkuZGVmYXVsdC5nZXRGaXJzdE1hdGNoKC93ZWJraXRcXC8oXFxkKyhcXC4/Xz9cXGQrKSspL2ksZSk7cmV0dXJuIHImJih0LnZlcnNpb249ciksdH19XTt0LmRlZmF1bHQ9YSxlLmV4cG9ydHM9dC5kZWZhdWx0fX0pfSkpOyIsIi8qKlxuICogSGVscGVycy5cbiAqL1xuXG52YXIgcyA9IDEwMDA7XG52YXIgbSA9IHMgKiA2MDtcbnZhciBoID0gbSAqIDYwO1xudmFyIGQgPSBoICogMjQ7XG52YXIgdyA9IGQgKiA3O1xudmFyIHkgPSBkICogMzY1LjI1O1xuXG4vKipcbiAqIFBhcnNlIG9yIGZvcm1hdCB0aGUgZ2l2ZW4gYHZhbGAuXG4gKlxuICogT3B0aW9uczpcbiAqXG4gKiAgLSBgbG9uZ2AgdmVyYm9zZSBmb3JtYXR0aW5nIFtmYWxzZV1cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IHZhbFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQHRocm93cyB7RXJyb3J9IHRocm93IGFuIGVycm9yIGlmIHZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgbnVtYmVyXG4gKiBAcmV0dXJuIHtTdHJpbmd8TnVtYmVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHZhbCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsO1xuICBpZiAodHlwZSA9PT0gJ3N0cmluZycgJiYgdmFsLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gcGFyc2UodmFsKTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnbnVtYmVyJyAmJiBpc0Zpbml0ZSh2YWwpKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMubG9uZyA/IGZtdExvbmcodmFsKSA6IGZtdFNob3J0KHZhbCk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFxuICAgICd2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIHZhbGlkIG51bWJlci4gdmFsPScgK1xuICAgICAgSlNPTi5zdHJpbmdpZnkodmFsKVxuICApO1xufTtcblxuLyoqXG4gKiBQYXJzZSB0aGUgZ2l2ZW4gYHN0cmAgYW5kIHJldHVybiBtaWxsaXNlY29uZHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFyc2Uoc3RyKSB7XG4gIHN0ciA9IFN0cmluZyhzdHIpO1xuICBpZiAoc3RyLmxlbmd0aCA+IDEwMCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbWF0Y2ggPSAvXigtPyg/OlxcZCspP1xcLj9cXGQrKSAqKG1pbGxpc2Vjb25kcz98bXNlY3M/fG1zfHNlY29uZHM/fHNlY3M/fHN8bWludXRlcz98bWlucz98bXxob3Vycz98aHJzP3xofGRheXM/fGR8d2Vla3M/fHd8eWVhcnM/fHlycz98eSk/JC9pLmV4ZWMoXG4gICAgc3RyXG4gICk7XG4gIGlmICghbWF0Y2gpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG4gPSBwYXJzZUZsb2F0KG1hdGNoWzFdKTtcbiAgdmFyIHR5cGUgPSAobWF0Y2hbMl0gfHwgJ21zJykudG9Mb3dlckNhc2UoKTtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAneWVhcnMnOlxuICAgIGNhc2UgJ3llYXInOlxuICAgIGNhc2UgJ3lycyc6XG4gICAgY2FzZSAneXInOlxuICAgIGNhc2UgJ3knOlxuICAgICAgcmV0dXJuIG4gKiB5O1xuICAgIGNhc2UgJ3dlZWtzJzpcbiAgICBjYXNlICd3ZWVrJzpcbiAgICBjYXNlICd3JzpcbiAgICAgIHJldHVybiBuICogdztcbiAgICBjYXNlICdkYXlzJzpcbiAgICBjYXNlICdkYXknOlxuICAgIGNhc2UgJ2QnOlxuICAgICAgcmV0dXJuIG4gKiBkO1xuICAgIGNhc2UgJ2hvdXJzJzpcbiAgICBjYXNlICdob3VyJzpcbiAgICBjYXNlICdocnMnOlxuICAgIGNhc2UgJ2hyJzpcbiAgICBjYXNlICdoJzpcbiAgICAgIHJldHVybiBuICogaDtcbiAgICBjYXNlICdtaW51dGVzJzpcbiAgICBjYXNlICdtaW51dGUnOlxuICAgIGNhc2UgJ21pbnMnOlxuICAgIGNhc2UgJ21pbic6XG4gICAgY2FzZSAnbSc6XG4gICAgICByZXR1cm4gbiAqIG07XG4gICAgY2FzZSAnc2Vjb25kcyc6XG4gICAgY2FzZSAnc2Vjb25kJzpcbiAgICBjYXNlICdzZWNzJzpcbiAgICBjYXNlICdzZWMnOlxuICAgIGNhc2UgJ3MnOlxuICAgICAgcmV0dXJuIG4gKiBzO1xuICAgIGNhc2UgJ21pbGxpc2Vjb25kcyc6XG4gICAgY2FzZSAnbWlsbGlzZWNvbmQnOlxuICAgIGNhc2UgJ21zZWNzJzpcbiAgICBjYXNlICdtc2VjJzpcbiAgICBjYXNlICdtcyc6XG4gICAgICByZXR1cm4gbjtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG4vKipcbiAqIFNob3J0IGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdFNob3J0KG1zKSB7XG4gIHZhciBtc0FicyA9IE1hdGguYWJzKG1zKTtcbiAgaWYgKG1zQWJzID49IGQpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGQpICsgJ2QnO1xuICB9XG4gIGlmIChtc0FicyA+PSBoKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBoKSArICdoJztcbiAgfVxuICBpZiAobXNBYnMgPj0gbSkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gbSkgKyAnbSc7XG4gIH1cbiAgaWYgKG1zQWJzID49IHMpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIHMpICsgJ3MnO1xuICB9XG4gIHJldHVybiBtcyArICdtcyc7XG59XG5cbi8qKlxuICogTG9uZyBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRMb25nKG1zKSB7XG4gIHZhciBtc0FicyA9IE1hdGguYWJzKG1zKTtcbiAgaWYgKG1zQWJzID49IGQpIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgZCwgJ2RheScpO1xuICB9XG4gIGlmIChtc0FicyA+PSBoKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIGgsICdob3VyJyk7XG4gIH1cbiAgaWYgKG1zQWJzID49IG0pIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgbSwgJ21pbnV0ZScpO1xuICB9XG4gIGlmIChtc0FicyA+PSBzKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIHMsICdzZWNvbmQnKTtcbiAgfVxuICByZXR1cm4gbXMgKyAnIG1zJztcbn1cblxuLyoqXG4gKiBQbHVyYWxpemF0aW9uIGhlbHBlci5cbiAqL1xuXG5mdW5jdGlvbiBwbHVyYWwobXMsIG1zQWJzLCBuLCBuYW1lKSB7XG4gIHZhciBpc1BsdXJhbCA9IG1zQWJzID49IG4gKiAxLjU7XG4gIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gbikgKyAnICcgKyBuYW1lICsgKGlzUGx1cmFsID8gJ3MnIDogJycpO1xufVxuIiwiXG4vKipcbiAqIFRoaXMgaXMgdGhlIGNvbW1vbiBsb2dpYyBmb3IgYm90aCB0aGUgTm9kZS5qcyBhbmQgd2ViIGJyb3dzZXJcbiAqIGltcGxlbWVudGF0aW9ucyBvZiBgZGVidWcoKWAuXG4gKi9cblxuZnVuY3Rpb24gc2V0dXAoZW52KSB7XG5cdGNyZWF0ZURlYnVnLmRlYnVnID0gY3JlYXRlRGVidWc7XG5cdGNyZWF0ZURlYnVnLmRlZmF1bHQgPSBjcmVhdGVEZWJ1Zztcblx0Y3JlYXRlRGVidWcuY29lcmNlID0gY29lcmNlO1xuXHRjcmVhdGVEZWJ1Zy5kaXNhYmxlID0gZGlzYWJsZTtcblx0Y3JlYXRlRGVidWcuZW5hYmxlID0gZW5hYmxlO1xuXHRjcmVhdGVEZWJ1Zy5lbmFibGVkID0gZW5hYmxlZDtcblx0Y3JlYXRlRGVidWcuaHVtYW5pemUgPSByZXF1aXJlKCdtcycpO1xuXG5cdE9iamVjdC5rZXlzKGVudikuZm9yRWFjaChrZXkgPT4ge1xuXHRcdGNyZWF0ZURlYnVnW2tleV0gPSBlbnZba2V5XTtcblx0fSk7XG5cblx0LyoqXG5cdCogQWN0aXZlIGBkZWJ1Z2AgaW5zdGFuY2VzLlxuXHQqL1xuXHRjcmVhdGVEZWJ1Zy5pbnN0YW5jZXMgPSBbXTtcblxuXHQvKipcblx0KiBUaGUgY3VycmVudGx5IGFjdGl2ZSBkZWJ1ZyBtb2RlIG5hbWVzLCBhbmQgbmFtZXMgdG8gc2tpcC5cblx0Ki9cblxuXHRjcmVhdGVEZWJ1Zy5uYW1lcyA9IFtdO1xuXHRjcmVhdGVEZWJ1Zy5za2lwcyA9IFtdO1xuXG5cdC8qKlxuXHQqIE1hcCBvZiBzcGVjaWFsIFwiJW5cIiBoYW5kbGluZyBmdW5jdGlvbnMsIGZvciB0aGUgZGVidWcgXCJmb3JtYXRcIiBhcmd1bWVudC5cblx0KlxuXHQqIFZhbGlkIGtleSBuYW1lcyBhcmUgYSBzaW5nbGUsIGxvd2VyIG9yIHVwcGVyLWNhc2UgbGV0dGVyLCBpLmUuIFwiblwiIGFuZCBcIk5cIi5cblx0Ki9cblx0Y3JlYXRlRGVidWcuZm9ybWF0dGVycyA9IHt9O1xuXG5cdC8qKlxuXHQqIFNlbGVjdHMgYSBjb2xvciBmb3IgYSBkZWJ1ZyBuYW1lc3BhY2Vcblx0KiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlIFRoZSBuYW1lc3BhY2Ugc3RyaW5nIGZvciB0aGUgZm9yIHRoZSBkZWJ1ZyBpbnN0YW5jZSB0byBiZSBjb2xvcmVkXG5cdCogQHJldHVybiB7TnVtYmVyfFN0cmluZ30gQW4gQU5TSSBjb2xvciBjb2RlIGZvciB0aGUgZ2l2ZW4gbmFtZXNwYWNlXG5cdCogQGFwaSBwcml2YXRlXG5cdCovXG5cdGZ1bmN0aW9uIHNlbGVjdENvbG9yKG5hbWVzcGFjZSkge1xuXHRcdGxldCBoYXNoID0gMDtcblxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbmFtZXNwYWNlLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRoYXNoID0gKChoYXNoIDw8IDUpIC0gaGFzaCkgKyBuYW1lc3BhY2UuY2hhckNvZGVBdChpKTtcblx0XHRcdGhhc2ggfD0gMDsgLy8gQ29udmVydCB0byAzMmJpdCBpbnRlZ2VyXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNyZWF0ZURlYnVnLmNvbG9yc1tNYXRoLmFicyhoYXNoKSAlIGNyZWF0ZURlYnVnLmNvbG9ycy5sZW5ndGhdO1xuXHR9XG5cdGNyZWF0ZURlYnVnLnNlbGVjdENvbG9yID0gc2VsZWN0Q29sb3I7XG5cblx0LyoqXG5cdCogQ3JlYXRlIGEgZGVidWdnZXIgd2l0aCB0aGUgZ2l2ZW4gYG5hbWVzcGFjZWAuXG5cdCpcblx0KiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG5cdCogQHJldHVybiB7RnVuY3Rpb259XG5cdCogQGFwaSBwdWJsaWNcblx0Ki9cblx0ZnVuY3Rpb24gY3JlYXRlRGVidWcobmFtZXNwYWNlKSB7XG5cdFx0bGV0IHByZXZUaW1lO1xuXG5cdFx0ZnVuY3Rpb24gZGVidWcoLi4uYXJncykge1xuXHRcdFx0Ly8gRGlzYWJsZWQ/XG5cdFx0XHRpZiAoIWRlYnVnLmVuYWJsZWQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBzZWxmID0gZGVidWc7XG5cblx0XHRcdC8vIFNldCBgZGlmZmAgdGltZXN0YW1wXG5cdFx0XHRjb25zdCBjdXJyID0gTnVtYmVyKG5ldyBEYXRlKCkpO1xuXHRcdFx0Y29uc3QgbXMgPSBjdXJyIC0gKHByZXZUaW1lIHx8IGN1cnIpO1xuXHRcdFx0c2VsZi5kaWZmID0gbXM7XG5cdFx0XHRzZWxmLnByZXYgPSBwcmV2VGltZTtcblx0XHRcdHNlbGYuY3VyciA9IGN1cnI7XG5cdFx0XHRwcmV2VGltZSA9IGN1cnI7XG5cblx0XHRcdGFyZ3NbMF0gPSBjcmVhdGVEZWJ1Zy5jb2VyY2UoYXJnc1swXSk7XG5cblx0XHRcdGlmICh0eXBlb2YgYXJnc1swXSAhPT0gJ3N0cmluZycpIHtcblx0XHRcdFx0Ly8gQW55dGhpbmcgZWxzZSBsZXQncyBpbnNwZWN0IHdpdGggJU9cblx0XHRcdFx0YXJncy51bnNoaWZ0KCclTycpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBcHBseSBhbnkgYGZvcm1hdHRlcnNgIHRyYW5zZm9ybWF0aW9uc1xuXHRcdFx0bGV0IGluZGV4ID0gMDtcblx0XHRcdGFyZ3NbMF0gPSBhcmdzWzBdLnJlcGxhY2UoLyUoW2EtekEtWiVdKS9nLCAobWF0Y2gsIGZvcm1hdCkgPT4ge1xuXHRcdFx0XHQvLyBJZiB3ZSBlbmNvdW50ZXIgYW4gZXNjYXBlZCAlIHRoZW4gZG9uJ3QgaW5jcmVhc2UgdGhlIGFycmF5IGluZGV4XG5cdFx0XHRcdGlmIChtYXRjaCA9PT0gJyUlJykge1xuXHRcdFx0XHRcdHJldHVybiBtYXRjaDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpbmRleCsrO1xuXHRcdFx0XHRjb25zdCBmb3JtYXR0ZXIgPSBjcmVhdGVEZWJ1Zy5mb3JtYXR0ZXJzW2Zvcm1hdF07XG5cdFx0XHRcdGlmICh0eXBlb2YgZm9ybWF0dGVyID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdFx0Y29uc3QgdmFsID0gYXJnc1tpbmRleF07XG5cdFx0XHRcdFx0bWF0Y2ggPSBmb3JtYXR0ZXIuY2FsbChzZWxmLCB2YWwpO1xuXG5cdFx0XHRcdFx0Ly8gTm93IHdlIG5lZWQgdG8gcmVtb3ZlIGBhcmdzW2luZGV4XWAgc2luY2UgaXQncyBpbmxpbmVkIGluIHRoZSBgZm9ybWF0YFxuXHRcdFx0XHRcdGFyZ3Muc3BsaWNlKGluZGV4LCAxKTtcblx0XHRcdFx0XHRpbmRleC0tO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBtYXRjaDtcblx0XHRcdH0pO1xuXG5cdFx0XHQvLyBBcHBseSBlbnYtc3BlY2lmaWMgZm9ybWF0dGluZyAoY29sb3JzLCBldGMuKVxuXHRcdFx0Y3JlYXRlRGVidWcuZm9ybWF0QXJncy5jYWxsKHNlbGYsIGFyZ3MpO1xuXG5cdFx0XHRjb25zdCBsb2dGbiA9IHNlbGYubG9nIHx8IGNyZWF0ZURlYnVnLmxvZztcblx0XHRcdGxvZ0ZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuXHRcdH1cblxuXHRcdGRlYnVnLm5hbWVzcGFjZSA9IG5hbWVzcGFjZTtcblx0XHRkZWJ1Zy5lbmFibGVkID0gY3JlYXRlRGVidWcuZW5hYmxlZChuYW1lc3BhY2UpO1xuXHRcdGRlYnVnLnVzZUNvbG9ycyA9IGNyZWF0ZURlYnVnLnVzZUNvbG9ycygpO1xuXHRcdGRlYnVnLmNvbG9yID0gc2VsZWN0Q29sb3IobmFtZXNwYWNlKTtcblx0XHRkZWJ1Zy5kZXN0cm95ID0gZGVzdHJveTtcblx0XHRkZWJ1Zy5leHRlbmQgPSBleHRlbmQ7XG5cdFx0Ly8gRGVidWcuZm9ybWF0QXJncyA9IGZvcm1hdEFyZ3M7XG5cdFx0Ly8gZGVidWcucmF3TG9nID0gcmF3TG9nO1xuXG5cdFx0Ly8gZW52LXNwZWNpZmljIGluaXRpYWxpemF0aW9uIGxvZ2ljIGZvciBkZWJ1ZyBpbnN0YW5jZXNcblx0XHRpZiAodHlwZW9mIGNyZWF0ZURlYnVnLmluaXQgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdGNyZWF0ZURlYnVnLmluaXQoZGVidWcpO1xuXHRcdH1cblxuXHRcdGNyZWF0ZURlYnVnLmluc3RhbmNlcy5wdXNoKGRlYnVnKTtcblxuXHRcdHJldHVybiBkZWJ1Zztcblx0fVxuXG5cdGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG5cdFx0Y29uc3QgaW5kZXggPSBjcmVhdGVEZWJ1Zy5pbnN0YW5jZXMuaW5kZXhPZih0aGlzKTtcblx0XHRpZiAoaW5kZXggIT09IC0xKSB7XG5cdFx0XHRjcmVhdGVEZWJ1Zy5pbnN0YW5jZXMuc3BsaWNlKGluZGV4LCAxKTtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRmdW5jdGlvbiBleHRlbmQobmFtZXNwYWNlLCBkZWxpbWl0ZXIpIHtcblx0XHRjb25zdCBuZXdEZWJ1ZyA9IGNyZWF0ZURlYnVnKHRoaXMubmFtZXNwYWNlICsgKHR5cGVvZiBkZWxpbWl0ZXIgPT09ICd1bmRlZmluZWQnID8gJzonIDogZGVsaW1pdGVyKSArIG5hbWVzcGFjZSk7XG5cdFx0bmV3RGVidWcubG9nID0gdGhpcy5sb2c7XG5cdFx0cmV0dXJuIG5ld0RlYnVnO1xuXHR9XG5cblx0LyoqXG5cdCogRW5hYmxlcyBhIGRlYnVnIG1vZGUgYnkgbmFtZXNwYWNlcy4gVGhpcyBjYW4gaW5jbHVkZSBtb2Rlc1xuXHQqIHNlcGFyYXRlZCBieSBhIGNvbG9uIGFuZCB3aWxkY2FyZHMuXG5cdCpcblx0KiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuXHQqIEBhcGkgcHVibGljXG5cdCovXG5cdGZ1bmN0aW9uIGVuYWJsZShuYW1lc3BhY2VzKSB7XG5cdFx0Y3JlYXRlRGVidWcuc2F2ZShuYW1lc3BhY2VzKTtcblxuXHRcdGNyZWF0ZURlYnVnLm5hbWVzID0gW107XG5cdFx0Y3JlYXRlRGVidWcuc2tpcHMgPSBbXTtcblxuXHRcdGxldCBpO1xuXHRcdGNvbnN0IHNwbGl0ID0gKHR5cGVvZiBuYW1lc3BhY2VzID09PSAnc3RyaW5nJyA/IG5hbWVzcGFjZXMgOiAnJykuc3BsaXQoL1tcXHMsXSsvKTtcblx0XHRjb25zdCBsZW4gPSBzcGxpdC5sZW5ndGg7XG5cblx0XHRmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdGlmICghc3BsaXRbaV0pIHtcblx0XHRcdFx0Ly8gaWdub3JlIGVtcHR5IHN0cmluZ3Ncblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdG5hbWVzcGFjZXMgPSBzcGxpdFtpXS5yZXBsYWNlKC9cXCovZywgJy4qPycpO1xuXG5cdFx0XHRpZiAobmFtZXNwYWNlc1swXSA9PT0gJy0nKSB7XG5cdFx0XHRcdGNyZWF0ZURlYnVnLnNraXBzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzLnN1YnN0cigxKSArICckJykpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y3JlYXRlRGVidWcubmFtZXMucHVzaChuZXcgUmVnRXhwKCdeJyArIG5hbWVzcGFjZXMgKyAnJCcpKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRmb3IgKGkgPSAwOyBpIDwgY3JlYXRlRGVidWcuaW5zdGFuY2VzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRjb25zdCBpbnN0YW5jZSA9IGNyZWF0ZURlYnVnLmluc3RhbmNlc1tpXTtcblx0XHRcdGluc3RhbmNlLmVuYWJsZWQgPSBjcmVhdGVEZWJ1Zy5lbmFibGVkKGluc3RhbmNlLm5hbWVzcGFjZSk7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCogRGlzYWJsZSBkZWJ1ZyBvdXRwdXQuXG5cdCpcblx0KiBAcmV0dXJuIHtTdHJpbmd9IG5hbWVzcGFjZXNcblx0KiBAYXBpIHB1YmxpY1xuXHQqL1xuXHRmdW5jdGlvbiBkaXNhYmxlKCkge1xuXHRcdGNvbnN0IG5hbWVzcGFjZXMgPSBbXG5cdFx0XHQuLi5jcmVhdGVEZWJ1Zy5uYW1lcy5tYXAodG9OYW1lc3BhY2UpLFxuXHRcdFx0Li4uY3JlYXRlRGVidWcuc2tpcHMubWFwKHRvTmFtZXNwYWNlKS5tYXAobmFtZXNwYWNlID0+ICctJyArIG5hbWVzcGFjZSlcblx0XHRdLmpvaW4oJywnKTtcblx0XHRjcmVhdGVEZWJ1Zy5lbmFibGUoJycpO1xuXHRcdHJldHVybiBuYW1lc3BhY2VzO1xuXHR9XG5cblx0LyoqXG5cdCogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBtb2RlIG5hbWUgaXMgZW5hYmxlZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuXHQqXG5cdCogQHBhcmFtIHtTdHJpbmd9IG5hbWVcblx0KiBAcmV0dXJuIHtCb29sZWFufVxuXHQqIEBhcGkgcHVibGljXG5cdCovXG5cdGZ1bmN0aW9uIGVuYWJsZWQobmFtZSkge1xuXHRcdGlmIChuYW1lW25hbWUubGVuZ3RoIC0gMV0gPT09ICcqJykge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0bGV0IGk7XG5cdFx0bGV0IGxlbjtcblxuXHRcdGZvciAoaSA9IDAsIGxlbiA9IGNyZWF0ZURlYnVnLnNraXBzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRpZiAoY3JlYXRlRGVidWcuc2tpcHNbaV0udGVzdChuYW1lKSkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Zm9yIChpID0gMCwgbGVuID0gY3JlYXRlRGVidWcubmFtZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdGlmIChjcmVhdGVEZWJ1Zy5uYW1lc1tpXS50ZXN0KG5hbWUpKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdC8qKlxuXHQqIENvbnZlcnQgcmVnZXhwIHRvIG5hbWVzcGFjZVxuXHQqXG5cdCogQHBhcmFtIHtSZWdFeHB9IHJlZ3hlcFxuXHQqIEByZXR1cm4ge1N0cmluZ30gbmFtZXNwYWNlXG5cdCogQGFwaSBwcml2YXRlXG5cdCovXG5cdGZ1bmN0aW9uIHRvTmFtZXNwYWNlKHJlZ2V4cCkge1xuXHRcdHJldHVybiByZWdleHAudG9TdHJpbmcoKVxuXHRcdFx0LnN1YnN0cmluZygyLCByZWdleHAudG9TdHJpbmcoKS5sZW5ndGggLSAyKVxuXHRcdFx0LnJlcGxhY2UoL1xcLlxcKlxcPyQvLCAnKicpO1xuXHR9XG5cblx0LyoqXG5cdCogQ29lcmNlIGB2YWxgLlxuXHQqXG5cdCogQHBhcmFtIHtNaXhlZH0gdmFsXG5cdCogQHJldHVybiB7TWl4ZWR9XG5cdCogQGFwaSBwcml2YXRlXG5cdCovXG5cdGZ1bmN0aW9uIGNvZXJjZSh2YWwpIHtcblx0XHRpZiAodmFsIGluc3RhbmNlb2YgRXJyb3IpIHtcblx0XHRcdHJldHVybiB2YWwuc3RhY2sgfHwgdmFsLm1lc3NhZ2U7XG5cdFx0fVxuXHRcdHJldHVybiB2YWw7XG5cdH1cblxuXHRjcmVhdGVEZWJ1Zy5lbmFibGUoY3JlYXRlRGVidWcubG9hZCgpKTtcblxuXHRyZXR1cm4gY3JlYXRlRGVidWc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0dXA7XG4iLCIvKiBlc2xpbnQtZW52IGJyb3dzZXIgKi9cblxuLyoqXG4gKiBUaGlzIGlzIHRoZSB3ZWIgYnJvd3NlciBpbXBsZW1lbnRhdGlvbiBvZiBgZGVidWcoKWAuXG4gKi9cblxuZXhwb3J0cy5sb2cgPSBsb2c7XG5leHBvcnRzLmZvcm1hdEFyZ3MgPSBmb3JtYXRBcmdzO1xuZXhwb3J0cy5zYXZlID0gc2F2ZTtcbmV4cG9ydHMubG9hZCA9IGxvYWQ7XG5leHBvcnRzLnVzZUNvbG9ycyA9IHVzZUNvbG9ycztcbmV4cG9ydHMuc3RvcmFnZSA9IGxvY2Fsc3RvcmFnZSgpO1xuXG4vKipcbiAqIENvbG9ycy5cbiAqL1xuXG5leHBvcnRzLmNvbG9ycyA9IFtcblx0JyMwMDAwQ0MnLFxuXHQnIzAwMDBGRicsXG5cdCcjMDAzM0NDJyxcblx0JyMwMDMzRkYnLFxuXHQnIzAwNjZDQycsXG5cdCcjMDA2NkZGJyxcblx0JyMwMDk5Q0MnLFxuXHQnIzAwOTlGRicsXG5cdCcjMDBDQzAwJyxcblx0JyMwMENDMzMnLFxuXHQnIzAwQ0M2NicsXG5cdCcjMDBDQzk5Jyxcblx0JyMwMENDQ0MnLFxuXHQnIzAwQ0NGRicsXG5cdCcjMzMwMENDJyxcblx0JyMzMzAwRkYnLFxuXHQnIzMzMzNDQycsXG5cdCcjMzMzM0ZGJyxcblx0JyMzMzY2Q0MnLFxuXHQnIzMzNjZGRicsXG5cdCcjMzM5OUNDJyxcblx0JyMzMzk5RkYnLFxuXHQnIzMzQ0MwMCcsXG5cdCcjMzNDQzMzJyxcblx0JyMzM0NDNjYnLFxuXHQnIzMzQ0M5OScsXG5cdCcjMzNDQ0NDJyxcblx0JyMzM0NDRkYnLFxuXHQnIzY2MDBDQycsXG5cdCcjNjYwMEZGJyxcblx0JyM2NjMzQ0MnLFxuXHQnIzY2MzNGRicsXG5cdCcjNjZDQzAwJyxcblx0JyM2NkNDMzMnLFxuXHQnIzk5MDBDQycsXG5cdCcjOTkwMEZGJyxcblx0JyM5OTMzQ0MnLFxuXHQnIzk5MzNGRicsXG5cdCcjOTlDQzAwJyxcblx0JyM5OUNDMzMnLFxuXHQnI0NDMDAwMCcsXG5cdCcjQ0MwMDMzJyxcblx0JyNDQzAwNjYnLFxuXHQnI0NDMDA5OScsXG5cdCcjQ0MwMENDJyxcblx0JyNDQzAwRkYnLFxuXHQnI0NDMzMwMCcsXG5cdCcjQ0MzMzMzJyxcblx0JyNDQzMzNjYnLFxuXHQnI0NDMzM5OScsXG5cdCcjQ0MzM0NDJyxcblx0JyNDQzMzRkYnLFxuXHQnI0NDNjYwMCcsXG5cdCcjQ0M2NjMzJyxcblx0JyNDQzk5MDAnLFxuXHQnI0NDOTkzMycsXG5cdCcjQ0NDQzAwJyxcblx0JyNDQ0NDMzMnLFxuXHQnI0ZGMDAwMCcsXG5cdCcjRkYwMDMzJyxcblx0JyNGRjAwNjYnLFxuXHQnI0ZGMDA5OScsXG5cdCcjRkYwMENDJyxcblx0JyNGRjAwRkYnLFxuXHQnI0ZGMzMwMCcsXG5cdCcjRkYzMzMzJyxcblx0JyNGRjMzNjYnLFxuXHQnI0ZGMzM5OScsXG5cdCcjRkYzM0NDJyxcblx0JyNGRjMzRkYnLFxuXHQnI0ZGNjYwMCcsXG5cdCcjRkY2NjMzJyxcblx0JyNGRjk5MDAnLFxuXHQnI0ZGOTkzMycsXG5cdCcjRkZDQzAwJyxcblx0JyNGRkNDMzMnXG5dO1xuXG4vKipcbiAqIEN1cnJlbnRseSBvbmx5IFdlYktpdC1iYXNlZCBXZWIgSW5zcGVjdG9ycywgRmlyZWZveCA+PSB2MzEsXG4gKiBhbmQgdGhlIEZpcmVidWcgZXh0ZW5zaW9uIChhbnkgRmlyZWZveCB2ZXJzaW9uKSBhcmUga25vd25cbiAqIHRvIHN1cHBvcnQgXCIlY1wiIENTUyBjdXN0b21pemF0aW9ucy5cbiAqXG4gKiBUT0RPOiBhZGQgYSBgbG9jYWxTdG9yYWdlYCB2YXJpYWJsZSB0byBleHBsaWNpdGx5IGVuYWJsZS9kaXNhYmxlIGNvbG9yc1xuICovXG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG5mdW5jdGlvbiB1c2VDb2xvcnMoKSB7XG5cdC8vIE5COiBJbiBhbiBFbGVjdHJvbiBwcmVsb2FkIHNjcmlwdCwgZG9jdW1lbnQgd2lsbCBiZSBkZWZpbmVkIGJ1dCBub3QgZnVsbHlcblx0Ly8gaW5pdGlhbGl6ZWQuIFNpbmNlIHdlIGtub3cgd2UncmUgaW4gQ2hyb21lLCB3ZSdsbCBqdXN0IGRldGVjdCB0aGlzIGNhc2Vcblx0Ly8gZXhwbGljaXRseVxuXHRpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnByb2Nlc3MgJiYgKHdpbmRvdy5wcm9jZXNzLnR5cGUgPT09ICdyZW5kZXJlcicgfHwgd2luZG93LnByb2Nlc3MuX19ud2pzKSkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0Ly8gSW50ZXJuZXQgRXhwbG9yZXIgYW5kIEVkZ2UgZG8gbm90IHN1cHBvcnQgY29sb3JzLlxuXHRpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goLyhlZGdlfHRyaWRlbnQpXFwvKFxcZCspLykpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHQvLyBJcyB3ZWJraXQ/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE2NDU5NjA2LzM3Njc3M1xuXHQvLyBkb2N1bWVudCBpcyB1bmRlZmluZWQgaW4gcmVhY3QtbmF0aXZlOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QtbmF0aXZlL3B1bGwvMTYzMlxuXHRyZXR1cm4gKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuV2Via2l0QXBwZWFyYW5jZSkgfHxcblx0XHQvLyBJcyBmaXJlYnVnPyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zOTgxMjAvMzc2NzczXG5cdFx0KHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5jb25zb2xlICYmICh3aW5kb3cuY29uc29sZS5maXJlYnVnIHx8ICh3aW5kb3cuY29uc29sZS5leGNlcHRpb24gJiYgd2luZG93LmNvbnNvbGUudGFibGUpKSkgfHxcblx0XHQvLyBJcyBmaXJlZm94ID49IHYzMT9cblx0XHQvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1Rvb2xzL1dlYl9Db25zb2xlI1N0eWxpbmdfbWVzc2FnZXNcblx0XHQodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2ZpcmVmb3hcXC8oXFxkKykvKSAmJiBwYXJzZUludChSZWdFeHAuJDEsIDEwKSA+PSAzMSkgfHxcblx0XHQvLyBEb3VibGUgY2hlY2sgd2Via2l0IGluIHVzZXJBZ2VudCBqdXN0IGluIGNhc2Ugd2UgYXJlIGluIGEgd29ya2VyXG5cdFx0KHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9hcHBsZXdlYmtpdFxcLyhcXGQrKS8pKTtcbn1cblxuLyoqXG4gKiBDb2xvcml6ZSBsb2cgYXJndW1lbnRzIGlmIGVuYWJsZWQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBmb3JtYXRBcmdzKGFyZ3MpIHtcblx0YXJnc1swXSA9ICh0aGlzLnVzZUNvbG9ycyA/ICclYycgOiAnJykgK1xuXHRcdHRoaXMubmFtZXNwYWNlICtcblx0XHQodGhpcy51c2VDb2xvcnMgPyAnICVjJyA6ICcgJykgK1xuXHRcdGFyZ3NbMF0gK1xuXHRcdCh0aGlzLnVzZUNvbG9ycyA/ICclYyAnIDogJyAnKSArXG5cdFx0JysnICsgbW9kdWxlLmV4cG9ydHMuaHVtYW5pemUodGhpcy5kaWZmKTtcblxuXHRpZiAoIXRoaXMudXNlQ29sb3JzKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Y29uc3QgYyA9ICdjb2xvcjogJyArIHRoaXMuY29sb3I7XG5cdGFyZ3Muc3BsaWNlKDEsIDAsIGMsICdjb2xvcjogaW5oZXJpdCcpO1xuXG5cdC8vIFRoZSBmaW5hbCBcIiVjXCIgaXMgc29tZXdoYXQgdHJpY2t5LCBiZWNhdXNlIHRoZXJlIGNvdWxkIGJlIG90aGVyXG5cdC8vIGFyZ3VtZW50cyBwYXNzZWQgZWl0aGVyIGJlZm9yZSBvciBhZnRlciB0aGUgJWMsIHNvIHdlIG5lZWQgdG9cblx0Ly8gZmlndXJlIG91dCB0aGUgY29ycmVjdCBpbmRleCB0byBpbnNlcnQgdGhlIENTUyBpbnRvXG5cdGxldCBpbmRleCA9IDA7XG5cdGxldCBsYXN0QyA9IDA7XG5cdGFyZ3NbMF0ucmVwbGFjZSgvJVthLXpBLVolXS9nLCBtYXRjaCA9PiB7XG5cdFx0aWYgKG1hdGNoID09PSAnJSUnKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGluZGV4Kys7XG5cdFx0aWYgKG1hdGNoID09PSAnJWMnKSB7XG5cdFx0XHQvLyBXZSBvbmx5IGFyZSBpbnRlcmVzdGVkIGluIHRoZSAqbGFzdCogJWNcblx0XHRcdC8vICh0aGUgdXNlciBtYXkgaGF2ZSBwcm92aWRlZCB0aGVpciBvd24pXG5cdFx0XHRsYXN0QyA9IGluZGV4O1xuXHRcdH1cblx0fSk7XG5cblx0YXJncy5zcGxpY2UobGFzdEMsIDAsIGMpO1xufVxuXG4vKipcbiAqIEludm9rZXMgYGNvbnNvbGUubG9nKClgIHdoZW4gYXZhaWxhYmxlLlxuICogTm8tb3Agd2hlbiBgY29uc29sZS5sb2dgIGlzIG5vdCBhIFwiZnVuY3Rpb25cIi5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBsb2coLi4uYXJncykge1xuXHQvLyBUaGlzIGhhY2tlcnkgaXMgcmVxdWlyZWQgZm9yIElFOC85LCB3aGVyZVxuXHQvLyB0aGUgYGNvbnNvbGUubG9nYCBmdW5jdGlvbiBkb2Vzbid0IGhhdmUgJ2FwcGx5J1xuXHRyZXR1cm4gdHlwZW9mIGNvbnNvbGUgPT09ICdvYmplY3QnICYmXG5cdFx0Y29uc29sZS5sb2cgJiZcblx0XHRjb25zb2xlLmxvZyguLi5hcmdzKTtcbn1cblxuLyoqXG4gKiBTYXZlIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHNhdmUobmFtZXNwYWNlcykge1xuXHR0cnkge1xuXHRcdGlmIChuYW1lc3BhY2VzKSB7XG5cdFx0XHRleHBvcnRzLnN0b3JhZ2Uuc2V0SXRlbSgnZGVidWcnLCBuYW1lc3BhY2VzKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZXhwb3J0cy5zdG9yYWdlLnJlbW92ZUl0ZW0oJ2RlYnVnJyk7XG5cdFx0fVxuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdC8vIFN3YWxsb3dcblx0XHQvLyBYWFggKEBRaXgtKSBzaG91bGQgd2UgYmUgbG9nZ2luZyB0aGVzZT9cblx0fVxufVxuXG4vKipcbiAqIExvYWQgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEByZXR1cm4ge1N0cmluZ30gcmV0dXJucyB0aGUgcHJldmlvdXNseSBwZXJzaXN0ZWQgZGVidWcgbW9kZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBsb2FkKCkge1xuXHRsZXQgcjtcblx0dHJ5IHtcblx0XHRyID0gZXhwb3J0cy5zdG9yYWdlLmdldEl0ZW0oJ2RlYnVnJyk7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Ly8gU3dhbGxvd1xuXHRcdC8vIFhYWCAoQFFpeC0pIHNob3VsZCB3ZSBiZSBsb2dnaW5nIHRoZXNlP1xuXHR9XG5cblx0Ly8gSWYgZGVidWcgaXNuJ3Qgc2V0IGluIExTLCBhbmQgd2UncmUgaW4gRWxlY3Ryb24sIHRyeSB0byBsb2FkICRERUJVR1xuXHRpZiAoIXIgJiYgdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmICdlbnYnIGluIHByb2Nlc3MpIHtcblx0XHRyID0gcHJvY2Vzcy5lbnYuREVCVUc7XG5cdH1cblxuXHRyZXR1cm4gcjtcbn1cblxuLyoqXG4gKiBMb2NhbHN0b3JhZ2UgYXR0ZW1wdHMgdG8gcmV0dXJuIHRoZSBsb2NhbHN0b3JhZ2UuXG4gKlxuICogVGhpcyBpcyBuZWNlc3NhcnkgYmVjYXVzZSBzYWZhcmkgdGhyb3dzXG4gKiB3aGVuIGEgdXNlciBkaXNhYmxlcyBjb29raWVzL2xvY2Fsc3RvcmFnZVxuICogYW5kIHlvdSBhdHRlbXB0IHRvIGFjY2VzcyBpdC5cbiAqXG4gKiBAcmV0dXJuIHtMb2NhbFN0b3JhZ2V9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBsb2NhbHN0b3JhZ2UoKSB7XG5cdHRyeSB7XG5cdFx0Ly8gVFZNTEtpdCAoQXBwbGUgVFYgSlMgUnVudGltZSkgZG9lcyBub3QgaGF2ZSBhIHdpbmRvdyBvYmplY3QsIGp1c3QgbG9jYWxTdG9yYWdlIGluIHRoZSBnbG9iYWwgY29udGV4dFxuXHRcdC8vIFRoZSBCcm93c2VyIGFsc28gaGFzIGxvY2FsU3RvcmFnZSBpbiB0aGUgZ2xvYmFsIGNvbnRleHQuXG5cdFx0cmV0dXJuIGxvY2FsU3RvcmFnZTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHQvLyBTd2FsbG93XG5cdFx0Ly8gWFhYIChAUWl4LSkgc2hvdWxkIHdlIGJlIGxvZ2dpbmcgdGhlc2U/XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2NvbW1vbicpKGV4cG9ydHMpO1xuXG5jb25zdCB7Zm9ybWF0dGVyc30gPSBtb2R1bGUuZXhwb3J0cztcblxuLyoqXG4gKiBNYXAgJWogdG8gYEpTT04uc3RyaW5naWZ5KClgLCBzaW5jZSBubyBXZWIgSW5zcGVjdG9ycyBkbyB0aGF0IGJ5IGRlZmF1bHQuXG4gKi9cblxuZm9ybWF0dGVycy5qID0gZnVuY3Rpb24gKHYpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gSlNPTi5zdHJpbmdpZnkodik7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0cmV0dXJuICdbVW5leHBlY3RlZEpTT05QYXJzZUVycm9yXTogJyArIGVycm9yLm1lc3NhZ2U7XG5cdH1cbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGRlYnVnXzEgPSByZXF1aXJlKFwiZGVidWdcIik7XG5jb25zdCBBUFBfTkFNRSA9ICdtZWRpYXNvdXAtY2xpZW50JztcbmNsYXNzIExvZ2dlciB7XG4gICAgY29uc3RydWN0b3IocHJlZml4KSB7XG4gICAgICAgIGlmIChwcmVmaXgpIHtcbiAgICAgICAgICAgIHRoaXMuX2RlYnVnID0gZGVidWdfMS5kZWZhdWx0KGAke0FQUF9OQU1FfToke3ByZWZpeH1gKTtcbiAgICAgICAgICAgIHRoaXMuX3dhcm4gPSBkZWJ1Z18xLmRlZmF1bHQoYCR7QVBQX05BTUV9OldBUk46JHtwcmVmaXh9YCk7XG4gICAgICAgICAgICB0aGlzLl9lcnJvciA9IGRlYnVnXzEuZGVmYXVsdChgJHtBUFBfTkFNRX06RVJST1I6JHtwcmVmaXh9YCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9kZWJ1ZyA9IGRlYnVnXzEuZGVmYXVsdChBUFBfTkFNRSk7XG4gICAgICAgICAgICB0aGlzLl93YXJuID0gZGVidWdfMS5kZWZhdWx0KGAke0FQUF9OQU1FfTpXQVJOYCk7XG4gICAgICAgICAgICB0aGlzLl9lcnJvciA9IGRlYnVnXzEuZGVmYXVsdChgJHtBUFBfTkFNRX06RVJST1JgKTtcbiAgICAgICAgfVxuICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG4gICAgICAgIHRoaXMuX2RlYnVnLmxvZyA9IGNvbnNvbGUuaW5mby5iaW5kKGNvbnNvbGUpO1xuICAgICAgICB0aGlzLl93YXJuLmxvZyA9IGNvbnNvbGUud2Fybi5iaW5kKGNvbnNvbGUpO1xuICAgICAgICB0aGlzLl9lcnJvci5sb2cgPSBjb25zb2xlLmVycm9yLmJpbmQoY29uc29sZSk7XG4gICAgICAgIC8qIGVzbGludC1lbmFibGUgbm8tY29uc29sZSAqL1xuICAgIH1cbiAgICBnZXQgZGVidWcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWJ1ZztcbiAgICB9XG4gICAgZ2V0IHdhcm4oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl93YXJuO1xuICAgIH1cbiAgICBnZXQgZXJyb3IoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lcnJvcjtcbiAgICB9XG59XG5leHBvcnRzLkxvZ2dlciA9IExvZ2dlcjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBFcnJvciBpbmRpY2F0aW5nIG5vdCBzdXBwb3J0IGZvciBzb21ldGhpbmcuXG4gKi9cbmNsYXNzIFVuc3VwcG9ydGVkRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ1Vuc3VwcG9ydGVkRXJyb3InO1xuICAgICAgICBpZiAoRXJyb3IuaGFzT3duUHJvcGVydHkoJ2NhcHR1cmVTdGFja1RyYWNlJykpIC8vIEp1c3QgaW4gVjguXG4gICAgICAgICB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBVbnN1cHBvcnRlZEVycm9yKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc3RhY2sgPSAobmV3IEVycm9yKG1lc3NhZ2UpKS5zdGFjaztcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuVW5zdXBwb3J0ZWRFcnJvciA9IFVuc3VwcG9ydGVkRXJyb3I7XG4vKipcbiAqIEVycm9yIHByb2R1Y2VkIHdoZW4gY2FsbGluZyBhIG1ldGhvZCBpbiBhbiBpbnZhbGlkIHN0YXRlLlxuICovXG5jbGFzcyBJbnZhbGlkU3RhdGVFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnSW52YWxpZFN0YXRlRXJyb3InO1xuICAgICAgICBpZiAoRXJyb3IuaGFzT3duUHJvcGVydHkoJ2NhcHR1cmVTdGFja1RyYWNlJykpIC8vIEp1c3QgaW4gVjguXG4gICAgICAgICB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBJbnZhbGlkU3RhdGVFcnJvcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnN0YWNrID0gKG5ldyBFcnJvcihtZXNzYWdlKSkuc3RhY2s7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkludmFsaWRTdGF0ZUVycm9yID0gSW52YWxpZFN0YXRlRXJyb3I7XG4iLCIvKipcbiAqIEhlbHBlcnMuXG4gKi9cblxudmFyIHMgPSAxMDAwO1xudmFyIG0gPSBzICogNjA7XG52YXIgaCA9IG0gKiA2MDtcbnZhciBkID0gaCAqIDI0O1xudmFyIHcgPSBkICogNztcbnZhciB5ID0gZCAqIDM2NS4yNTtcblxuLyoqXG4gKiBQYXJzZSBvciBmb3JtYXQgdGhlIGdpdmVuIGB2YWxgLlxuICpcbiAqIE9wdGlvbnM6XG4gKlxuICogIC0gYGxvbmdgIHZlcmJvc2UgZm9ybWF0dGluZyBbZmFsc2VdXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSB2YWxcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEB0aHJvd3Mge0Vycm9yfSB0aHJvdyBhbiBlcnJvciBpZiB2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIG51bWJlclxuICogQHJldHVybiB7U3RyaW5nfE51bWJlcn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih2YWwsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbDtcbiAgaWYgKHR5cGUgPT09ICdzdHJpbmcnICYmIHZhbC5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIHBhcnNlKHZhbCk7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ251bWJlcicgJiYgaXNGaW5pdGUodmFsKSkge1xuICAgIHJldHVybiBvcHRpb25zLmxvbmcgPyBmbXRMb25nKHZhbCkgOiBmbXRTaG9ydCh2YWwpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihcbiAgICAndmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSB2YWxpZCBudW1iZXIuIHZhbD0nICtcbiAgICAgIEpTT04uc3RyaW5naWZ5KHZhbClcbiAgKTtcbn07XG5cbi8qKlxuICogUGFyc2UgdGhlIGdpdmVuIGBzdHJgIGFuZCByZXR1cm4gbWlsbGlzZWNvbmRzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhcnNlKHN0cikge1xuICBzdHIgPSBTdHJpbmcoc3RyKTtcbiAgaWYgKHN0ci5sZW5ndGggPiAxMDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG1hdGNoID0gL14oLT8oPzpcXGQrKT9cXC4/XFxkKykgKihtaWxsaXNlY29uZHM/fG1zZWNzP3xtc3xzZWNvbmRzP3xzZWNzP3xzfG1pbnV0ZXM/fG1pbnM/fG18aG91cnM/fGhycz98aHxkYXlzP3xkfHdlZWtzP3x3fHllYXJzP3x5cnM/fHkpPyQvaS5leGVjKFxuICAgIHN0clxuICApO1xuICBpZiAoIW1hdGNoKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBuID0gcGFyc2VGbG9hdChtYXRjaFsxXSk7XG4gIHZhciB0eXBlID0gKG1hdGNoWzJdIHx8ICdtcycpLnRvTG93ZXJDYXNlKCk7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ3llYXJzJzpcbiAgICBjYXNlICd5ZWFyJzpcbiAgICBjYXNlICd5cnMnOlxuICAgIGNhc2UgJ3lyJzpcbiAgICBjYXNlICd5JzpcbiAgICAgIHJldHVybiBuICogeTtcbiAgICBjYXNlICd3ZWVrcyc6XG4gICAgY2FzZSAnd2Vlayc6XG4gICAgY2FzZSAndyc6XG4gICAgICByZXR1cm4gbiAqIHc7XG4gICAgY2FzZSAnZGF5cyc6XG4gICAgY2FzZSAnZGF5JzpcbiAgICBjYXNlICdkJzpcbiAgICAgIHJldHVybiBuICogZDtcbiAgICBjYXNlICdob3Vycyc6XG4gICAgY2FzZSAnaG91cic6XG4gICAgY2FzZSAnaHJzJzpcbiAgICBjYXNlICdocic6XG4gICAgY2FzZSAnaCc6XG4gICAgICByZXR1cm4gbiAqIGg7XG4gICAgY2FzZSAnbWludXRlcyc6XG4gICAgY2FzZSAnbWludXRlJzpcbiAgICBjYXNlICdtaW5zJzpcbiAgICBjYXNlICdtaW4nOlxuICAgIGNhc2UgJ20nOlxuICAgICAgcmV0dXJuIG4gKiBtO1xuICAgIGNhc2UgJ3NlY29uZHMnOlxuICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgY2FzZSAnc2Vjcyc6XG4gICAgY2FzZSAnc2VjJzpcbiAgICBjYXNlICdzJzpcbiAgICAgIHJldHVybiBuICogcztcbiAgICBjYXNlICdtaWxsaXNlY29uZHMnOlxuICAgIGNhc2UgJ21pbGxpc2Vjb25kJzpcbiAgICBjYXNlICdtc2Vjcyc6XG4gICAgY2FzZSAnbXNlYyc6XG4gICAgY2FzZSAnbXMnOlxuICAgICAgcmV0dXJuIG47XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuLyoqXG4gKiBTaG9ydCBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRTaG9ydChtcykge1xuICB2YXIgbXNBYnMgPSBNYXRoLmFicyhtcyk7XG4gIGlmIChtc0FicyA+PSBkKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBkKSArICdkJztcbiAgfVxuICBpZiAobXNBYnMgPj0gaCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gaCkgKyAnaCc7XG4gIH1cbiAgaWYgKG1zQWJzID49IG0pIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIG0pICsgJ20nO1xuICB9XG4gIGlmIChtc0FicyA+PSBzKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBzKSArICdzJztcbiAgfVxuICByZXR1cm4gbXMgKyAnbXMnO1xufVxuXG4vKipcbiAqIExvbmcgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZm10TG9uZyhtcykge1xuICB2YXIgbXNBYnMgPSBNYXRoLmFicyhtcyk7XG4gIGlmIChtc0FicyA+PSBkKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIGQsICdkYXknKTtcbiAgfVxuICBpZiAobXNBYnMgPj0gaCkge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBoLCAnaG91cicpO1xuICB9XG4gIGlmIChtc0FicyA+PSBtKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIG0sICdtaW51dGUnKTtcbiAgfVxuICBpZiAobXNBYnMgPj0gcykge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBzLCAnc2Vjb25kJyk7XG4gIH1cbiAgcmV0dXJuIG1zICsgJyBtcyc7XG59XG5cbi8qKlxuICogUGx1cmFsaXphdGlvbiBoZWxwZXIuXG4gKi9cblxuZnVuY3Rpb24gcGx1cmFsKG1zLCBtc0FicywgbiwgbmFtZSkge1xuICB2YXIgaXNQbHVyYWwgPSBtc0FicyA+PSBuICogMS41O1xuICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIG4pICsgJyAnICsgbmFtZSArIChpc1BsdXJhbCA/ICdzJyA6ICcnKTtcbn1cbiIsIlxuLyoqXG4gKiBUaGlzIGlzIHRoZSBjb21tb24gbG9naWMgZm9yIGJvdGggdGhlIE5vZGUuanMgYW5kIHdlYiBicm93c2VyXG4gKiBpbXBsZW1lbnRhdGlvbnMgb2YgYGRlYnVnKClgLlxuICovXG5cbmZ1bmN0aW9uIHNldHVwKGVudikge1xuXHRjcmVhdGVEZWJ1Zy5kZWJ1ZyA9IGNyZWF0ZURlYnVnO1xuXHRjcmVhdGVEZWJ1Zy5kZWZhdWx0ID0gY3JlYXRlRGVidWc7XG5cdGNyZWF0ZURlYnVnLmNvZXJjZSA9IGNvZXJjZTtcblx0Y3JlYXRlRGVidWcuZGlzYWJsZSA9IGRpc2FibGU7XG5cdGNyZWF0ZURlYnVnLmVuYWJsZSA9IGVuYWJsZTtcblx0Y3JlYXRlRGVidWcuZW5hYmxlZCA9IGVuYWJsZWQ7XG5cdGNyZWF0ZURlYnVnLmh1bWFuaXplID0gcmVxdWlyZSgnbXMnKTtcblxuXHRPYmplY3Qua2V5cyhlbnYpLmZvckVhY2goa2V5ID0+IHtcblx0XHRjcmVhdGVEZWJ1Z1trZXldID0gZW52W2tleV07XG5cdH0pO1xuXG5cdC8qKlxuXHQqIEFjdGl2ZSBgZGVidWdgIGluc3RhbmNlcy5cblx0Ki9cblx0Y3JlYXRlRGVidWcuaW5zdGFuY2VzID0gW107XG5cblx0LyoqXG5cdCogVGhlIGN1cnJlbnRseSBhY3RpdmUgZGVidWcgbW9kZSBuYW1lcywgYW5kIG5hbWVzIHRvIHNraXAuXG5cdCovXG5cblx0Y3JlYXRlRGVidWcubmFtZXMgPSBbXTtcblx0Y3JlYXRlRGVidWcuc2tpcHMgPSBbXTtcblxuXHQvKipcblx0KiBNYXAgb2Ygc3BlY2lhbCBcIiVuXCIgaGFuZGxpbmcgZnVuY3Rpb25zLCBmb3IgdGhlIGRlYnVnIFwiZm9ybWF0XCIgYXJndW1lbnQuXG5cdCpcblx0KiBWYWxpZCBrZXkgbmFtZXMgYXJlIGEgc2luZ2xlLCBsb3dlciBvciB1cHBlci1jYXNlIGxldHRlciwgaS5lLiBcIm5cIiBhbmQgXCJOXCIuXG5cdCovXG5cdGNyZWF0ZURlYnVnLmZvcm1hdHRlcnMgPSB7fTtcblxuXHQvKipcblx0KiBTZWxlY3RzIGEgY29sb3IgZm9yIGEgZGVidWcgbmFtZXNwYWNlXG5cdCogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZSBUaGUgbmFtZXNwYWNlIHN0cmluZyBmb3IgdGhlIGZvciB0aGUgZGVidWcgaW5zdGFuY2UgdG8gYmUgY29sb3JlZFxuXHQqIEByZXR1cm4ge051bWJlcnxTdHJpbmd9IEFuIEFOU0kgY29sb3IgY29kZSBmb3IgdGhlIGdpdmVuIG5hbWVzcGFjZVxuXHQqIEBhcGkgcHJpdmF0ZVxuXHQqL1xuXHRmdW5jdGlvbiBzZWxlY3RDb2xvcihuYW1lc3BhY2UpIHtcblx0XHRsZXQgaGFzaCA9IDA7XG5cblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IG5hbWVzcGFjZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0aGFzaCA9ICgoaGFzaCA8PCA1KSAtIGhhc2gpICsgbmFtZXNwYWNlLmNoYXJDb2RlQXQoaSk7XG5cdFx0XHRoYXNoIHw9IDA7IC8vIENvbnZlcnQgdG8gMzJiaXQgaW50ZWdlclxuXHRcdH1cblxuXHRcdHJldHVybiBjcmVhdGVEZWJ1Zy5jb2xvcnNbTWF0aC5hYnMoaGFzaCkgJSBjcmVhdGVEZWJ1Zy5jb2xvcnMubGVuZ3RoXTtcblx0fVxuXHRjcmVhdGVEZWJ1Zy5zZWxlY3RDb2xvciA9IHNlbGVjdENvbG9yO1xuXG5cdC8qKlxuXHQqIENyZWF0ZSBhIGRlYnVnZ2VyIHdpdGggdGhlIGdpdmVuIGBuYW1lc3BhY2VgLlxuXHQqXG5cdCogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZVxuXHQqIEByZXR1cm4ge0Z1bmN0aW9ufVxuXHQqIEBhcGkgcHVibGljXG5cdCovXG5cdGZ1bmN0aW9uIGNyZWF0ZURlYnVnKG5hbWVzcGFjZSkge1xuXHRcdGxldCBwcmV2VGltZTtcblxuXHRcdGZ1bmN0aW9uIGRlYnVnKC4uLmFyZ3MpIHtcblx0XHRcdC8vIERpc2FibGVkP1xuXHRcdFx0aWYgKCFkZWJ1Zy5lbmFibGVkKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Y29uc3Qgc2VsZiA9IGRlYnVnO1xuXG5cdFx0XHQvLyBTZXQgYGRpZmZgIHRpbWVzdGFtcFxuXHRcdFx0Y29uc3QgY3VyciA9IE51bWJlcihuZXcgRGF0ZSgpKTtcblx0XHRcdGNvbnN0IG1zID0gY3VyciAtIChwcmV2VGltZSB8fCBjdXJyKTtcblx0XHRcdHNlbGYuZGlmZiA9IG1zO1xuXHRcdFx0c2VsZi5wcmV2ID0gcHJldlRpbWU7XG5cdFx0XHRzZWxmLmN1cnIgPSBjdXJyO1xuXHRcdFx0cHJldlRpbWUgPSBjdXJyO1xuXG5cdFx0XHRhcmdzWzBdID0gY3JlYXRlRGVidWcuY29lcmNlKGFyZ3NbMF0pO1xuXG5cdFx0XHRpZiAodHlwZW9mIGFyZ3NbMF0gIT09ICdzdHJpbmcnKSB7XG5cdFx0XHRcdC8vIEFueXRoaW5nIGVsc2UgbGV0J3MgaW5zcGVjdCB3aXRoICVPXG5cdFx0XHRcdGFyZ3MudW5zaGlmdCgnJU8nKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQXBwbHkgYW55IGBmb3JtYXR0ZXJzYCB0cmFuc2Zvcm1hdGlvbnNcblx0XHRcdGxldCBpbmRleCA9IDA7XG5cdFx0XHRhcmdzWzBdID0gYXJnc1swXS5yZXBsYWNlKC8lKFthLXpBLVolXSkvZywgKG1hdGNoLCBmb3JtYXQpID0+IHtcblx0XHRcdFx0Ly8gSWYgd2UgZW5jb3VudGVyIGFuIGVzY2FwZWQgJSB0aGVuIGRvbid0IGluY3JlYXNlIHRoZSBhcnJheSBpbmRleFxuXHRcdFx0XHRpZiAobWF0Y2ggPT09ICclJScpIHtcblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0XHRcdH1cblx0XHRcdFx0aW5kZXgrKztcblx0XHRcdFx0Y29uc3QgZm9ybWF0dGVyID0gY3JlYXRlRGVidWcuZm9ybWF0dGVyc1tmb3JtYXRdO1xuXHRcdFx0XHRpZiAodHlwZW9mIGZvcm1hdHRlciA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0XHRcdGNvbnN0IHZhbCA9IGFyZ3NbaW5kZXhdO1xuXHRcdFx0XHRcdG1hdGNoID0gZm9ybWF0dGVyLmNhbGwoc2VsZiwgdmFsKTtcblxuXHRcdFx0XHRcdC8vIE5vdyB3ZSBuZWVkIHRvIHJlbW92ZSBgYXJnc1tpbmRleF1gIHNpbmNlIGl0J3MgaW5saW5lZCBpbiB0aGUgYGZvcm1hdGBcblx0XHRcdFx0XHRhcmdzLnNwbGljZShpbmRleCwgMSk7XG5cdFx0XHRcdFx0aW5kZXgtLTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0XHR9KTtcblxuXHRcdFx0Ly8gQXBwbHkgZW52LXNwZWNpZmljIGZvcm1hdHRpbmcgKGNvbG9ycywgZXRjLilcblx0XHRcdGNyZWF0ZURlYnVnLmZvcm1hdEFyZ3MuY2FsbChzZWxmLCBhcmdzKTtcblxuXHRcdFx0Y29uc3QgbG9nRm4gPSBzZWxmLmxvZyB8fCBjcmVhdGVEZWJ1Zy5sb2c7XG5cdFx0XHRsb2dGbi5hcHBseShzZWxmLCBhcmdzKTtcblx0XHR9XG5cblx0XHRkZWJ1Zy5uYW1lc3BhY2UgPSBuYW1lc3BhY2U7XG5cdFx0ZGVidWcuZW5hYmxlZCA9IGNyZWF0ZURlYnVnLmVuYWJsZWQobmFtZXNwYWNlKTtcblx0XHRkZWJ1Zy51c2VDb2xvcnMgPSBjcmVhdGVEZWJ1Zy51c2VDb2xvcnMoKTtcblx0XHRkZWJ1Zy5jb2xvciA9IHNlbGVjdENvbG9yKG5hbWVzcGFjZSk7XG5cdFx0ZGVidWcuZGVzdHJveSA9IGRlc3Ryb3k7XG5cdFx0ZGVidWcuZXh0ZW5kID0gZXh0ZW5kO1xuXHRcdC8vIERlYnVnLmZvcm1hdEFyZ3MgPSBmb3JtYXRBcmdzO1xuXHRcdC8vIGRlYnVnLnJhd0xvZyA9IHJhd0xvZztcblxuXHRcdC8vIGVudi1zcGVjaWZpYyBpbml0aWFsaXphdGlvbiBsb2dpYyBmb3IgZGVidWcgaW5zdGFuY2VzXG5cdFx0aWYgKHR5cGVvZiBjcmVhdGVEZWJ1Zy5pbml0ID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRjcmVhdGVEZWJ1Zy5pbml0KGRlYnVnKTtcblx0XHR9XG5cblx0XHRjcmVhdGVEZWJ1Zy5pbnN0YW5jZXMucHVzaChkZWJ1Zyk7XG5cblx0XHRyZXR1cm4gZGVidWc7XG5cdH1cblxuXHRmdW5jdGlvbiBkZXN0cm95KCkge1xuXHRcdGNvbnN0IGluZGV4ID0gY3JlYXRlRGVidWcuaW5zdGFuY2VzLmluZGV4T2YodGhpcyk7XG5cdFx0aWYgKGluZGV4ICE9PSAtMSkge1xuXHRcdFx0Y3JlYXRlRGVidWcuaW5zdGFuY2VzLnNwbGljZShpbmRleCwgMSk7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0ZnVuY3Rpb24gZXh0ZW5kKG5hbWVzcGFjZSwgZGVsaW1pdGVyKSB7XG5cdFx0Y29uc3QgbmV3RGVidWcgPSBjcmVhdGVEZWJ1Zyh0aGlzLm5hbWVzcGFjZSArICh0eXBlb2YgZGVsaW1pdGVyID09PSAndW5kZWZpbmVkJyA/ICc6JyA6IGRlbGltaXRlcikgKyBuYW1lc3BhY2UpO1xuXHRcdG5ld0RlYnVnLmxvZyA9IHRoaXMubG9nO1xuXHRcdHJldHVybiBuZXdEZWJ1Zztcblx0fVxuXG5cdC8qKlxuXHQqIEVuYWJsZXMgYSBkZWJ1ZyBtb2RlIGJ5IG5hbWVzcGFjZXMuIFRoaXMgY2FuIGluY2x1ZGUgbW9kZXNcblx0KiBzZXBhcmF0ZWQgYnkgYSBjb2xvbiBhbmQgd2lsZGNhcmRzLlxuXHQqXG5cdCogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZXNcblx0KiBAYXBpIHB1YmxpY1xuXHQqL1xuXHRmdW5jdGlvbiBlbmFibGUobmFtZXNwYWNlcykge1xuXHRcdGNyZWF0ZURlYnVnLnNhdmUobmFtZXNwYWNlcyk7XG5cblx0XHRjcmVhdGVEZWJ1Zy5uYW1lcyA9IFtdO1xuXHRcdGNyZWF0ZURlYnVnLnNraXBzID0gW107XG5cblx0XHRsZXQgaTtcblx0XHRjb25zdCBzcGxpdCA9ICh0eXBlb2YgbmFtZXNwYWNlcyA9PT0gJ3N0cmluZycgPyBuYW1lc3BhY2VzIDogJycpLnNwbGl0KC9bXFxzLF0rLyk7XG5cdFx0Y29uc3QgbGVuID0gc3BsaXQubGVuZ3RoO1xuXG5cdFx0Zm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRpZiAoIXNwbGl0W2ldKSB7XG5cdFx0XHRcdC8vIGlnbm9yZSBlbXB0eSBzdHJpbmdzXG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRuYW1lc3BhY2VzID0gc3BsaXRbaV0ucmVwbGFjZSgvXFwqL2csICcuKj8nKTtcblxuXHRcdFx0aWYgKG5hbWVzcGFjZXNbMF0gPT09ICctJykge1xuXHRcdFx0XHRjcmVhdGVEZWJ1Zy5za2lwcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcy5zdWJzdHIoMSkgKyAnJCcpKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNyZWF0ZURlYnVnLm5hbWVzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzICsgJyQnKSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Zm9yIChpID0gMDsgaSA8IGNyZWF0ZURlYnVnLmluc3RhbmNlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0Y29uc3QgaW5zdGFuY2UgPSBjcmVhdGVEZWJ1Zy5pbnN0YW5jZXNbaV07XG5cdFx0XHRpbnN0YW5jZS5lbmFibGVkID0gY3JlYXRlRGVidWcuZW5hYmxlZChpbnN0YW5jZS5uYW1lc3BhY2UpO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQqIERpc2FibGUgZGVidWcgb3V0cHV0LlxuXHQqXG5cdCogQHJldHVybiB7U3RyaW5nfSBuYW1lc3BhY2VzXG5cdCogQGFwaSBwdWJsaWNcblx0Ki9cblx0ZnVuY3Rpb24gZGlzYWJsZSgpIHtcblx0XHRjb25zdCBuYW1lc3BhY2VzID0gW1xuXHRcdFx0Li4uY3JlYXRlRGVidWcubmFtZXMubWFwKHRvTmFtZXNwYWNlKSxcblx0XHRcdC4uLmNyZWF0ZURlYnVnLnNraXBzLm1hcCh0b05hbWVzcGFjZSkubWFwKG5hbWVzcGFjZSA9PiAnLScgKyBuYW1lc3BhY2UpXG5cdFx0XS5qb2luKCcsJyk7XG5cdFx0Y3JlYXRlRGVidWcuZW5hYmxlKCcnKTtcblx0XHRyZXR1cm4gbmFtZXNwYWNlcztcblx0fVxuXG5cdC8qKlxuXHQqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gbW9kZSBuYW1lIGlzIGVuYWJsZWQsIGZhbHNlIG90aGVyd2lzZS5cblx0KlxuXHQqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG5cdCogQHJldHVybiB7Qm9vbGVhbn1cblx0KiBAYXBpIHB1YmxpY1xuXHQqL1xuXHRmdW5jdGlvbiBlbmFibGVkKG5hbWUpIHtcblx0XHRpZiAobmFtZVtuYW1lLmxlbmd0aCAtIDFdID09PSAnKicpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdGxldCBpO1xuXHRcdGxldCBsZW47XG5cblx0XHRmb3IgKGkgPSAwLCBsZW4gPSBjcmVhdGVEZWJ1Zy5za2lwcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0aWYgKGNyZWF0ZURlYnVnLnNraXBzW2ldLnRlc3QobmFtZSkpIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGZvciAoaSA9IDAsIGxlbiA9IGNyZWF0ZURlYnVnLm5hbWVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRpZiAoY3JlYXRlRGVidWcubmFtZXNbaV0udGVzdChuYW1lKSkge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHQvKipcblx0KiBDb252ZXJ0IHJlZ2V4cCB0byBuYW1lc3BhY2Vcblx0KlxuXHQqIEBwYXJhbSB7UmVnRXhwfSByZWd4ZXBcblx0KiBAcmV0dXJuIHtTdHJpbmd9IG5hbWVzcGFjZVxuXHQqIEBhcGkgcHJpdmF0ZVxuXHQqL1xuXHRmdW5jdGlvbiB0b05hbWVzcGFjZShyZWdleHApIHtcblx0XHRyZXR1cm4gcmVnZXhwLnRvU3RyaW5nKClcblx0XHRcdC5zdWJzdHJpbmcoMiwgcmVnZXhwLnRvU3RyaW5nKCkubGVuZ3RoIC0gMilcblx0XHRcdC5yZXBsYWNlKC9cXC5cXCpcXD8kLywgJyonKTtcblx0fVxuXG5cdC8qKlxuXHQqIENvZXJjZSBgdmFsYC5cblx0KlxuXHQqIEBwYXJhbSB7TWl4ZWR9IHZhbFxuXHQqIEByZXR1cm4ge01peGVkfVxuXHQqIEBhcGkgcHJpdmF0ZVxuXHQqL1xuXHRmdW5jdGlvbiBjb2VyY2UodmFsKSB7XG5cdFx0aWYgKHZhbCBpbnN0YW5jZW9mIEVycm9yKSB7XG5cdFx0XHRyZXR1cm4gdmFsLnN0YWNrIHx8IHZhbC5tZXNzYWdlO1xuXHRcdH1cblx0XHRyZXR1cm4gdmFsO1xuXHR9XG5cblx0Y3JlYXRlRGVidWcuZW5hYmxlKGNyZWF0ZURlYnVnLmxvYWQoKSk7XG5cblx0cmV0dXJuIGNyZWF0ZURlYnVnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldHVwO1xuIiwiLyogZXNsaW50LWVudiBicm93c2VyICovXG5cbi8qKlxuICogVGhpcyBpcyB0aGUgd2ViIGJyb3dzZXIgaW1wbGVtZW50YXRpb24gb2YgYGRlYnVnKClgLlxuICovXG5cbmV4cG9ydHMubG9nID0gbG9nO1xuZXhwb3J0cy5mb3JtYXRBcmdzID0gZm9ybWF0QXJncztcbmV4cG9ydHMuc2F2ZSA9IHNhdmU7XG5leHBvcnRzLmxvYWQgPSBsb2FkO1xuZXhwb3J0cy51c2VDb2xvcnMgPSB1c2VDb2xvcnM7XG5leHBvcnRzLnN0b3JhZ2UgPSBsb2NhbHN0b3JhZ2UoKTtcblxuLyoqXG4gKiBDb2xvcnMuXG4gKi9cblxuZXhwb3J0cy5jb2xvcnMgPSBbXG5cdCcjMDAwMENDJyxcblx0JyMwMDAwRkYnLFxuXHQnIzAwMzNDQycsXG5cdCcjMDAzM0ZGJyxcblx0JyMwMDY2Q0MnLFxuXHQnIzAwNjZGRicsXG5cdCcjMDA5OUNDJyxcblx0JyMwMDk5RkYnLFxuXHQnIzAwQ0MwMCcsXG5cdCcjMDBDQzMzJyxcblx0JyMwMENDNjYnLFxuXHQnIzAwQ0M5OScsXG5cdCcjMDBDQ0NDJyxcblx0JyMwMENDRkYnLFxuXHQnIzMzMDBDQycsXG5cdCcjMzMwMEZGJyxcblx0JyMzMzMzQ0MnLFxuXHQnIzMzMzNGRicsXG5cdCcjMzM2NkNDJyxcblx0JyMzMzY2RkYnLFxuXHQnIzMzOTlDQycsXG5cdCcjMzM5OUZGJyxcblx0JyMzM0NDMDAnLFxuXHQnIzMzQ0MzMycsXG5cdCcjMzNDQzY2Jyxcblx0JyMzM0NDOTknLFxuXHQnIzMzQ0NDQycsXG5cdCcjMzNDQ0ZGJyxcblx0JyM2NjAwQ0MnLFxuXHQnIzY2MDBGRicsXG5cdCcjNjYzM0NDJyxcblx0JyM2NjMzRkYnLFxuXHQnIzY2Q0MwMCcsXG5cdCcjNjZDQzMzJyxcblx0JyM5OTAwQ0MnLFxuXHQnIzk5MDBGRicsXG5cdCcjOTkzM0NDJyxcblx0JyM5OTMzRkYnLFxuXHQnIzk5Q0MwMCcsXG5cdCcjOTlDQzMzJyxcblx0JyNDQzAwMDAnLFxuXHQnI0NDMDAzMycsXG5cdCcjQ0MwMDY2Jyxcblx0JyNDQzAwOTknLFxuXHQnI0NDMDBDQycsXG5cdCcjQ0MwMEZGJyxcblx0JyNDQzMzMDAnLFxuXHQnI0NDMzMzMycsXG5cdCcjQ0MzMzY2Jyxcblx0JyNDQzMzOTknLFxuXHQnI0NDMzNDQycsXG5cdCcjQ0MzM0ZGJyxcblx0JyNDQzY2MDAnLFxuXHQnI0NDNjYzMycsXG5cdCcjQ0M5OTAwJyxcblx0JyNDQzk5MzMnLFxuXHQnI0NDQ0MwMCcsXG5cdCcjQ0NDQzMzJyxcblx0JyNGRjAwMDAnLFxuXHQnI0ZGMDAzMycsXG5cdCcjRkYwMDY2Jyxcblx0JyNGRjAwOTknLFxuXHQnI0ZGMDBDQycsXG5cdCcjRkYwMEZGJyxcblx0JyNGRjMzMDAnLFxuXHQnI0ZGMzMzMycsXG5cdCcjRkYzMzY2Jyxcblx0JyNGRjMzOTknLFxuXHQnI0ZGMzNDQycsXG5cdCcjRkYzM0ZGJyxcblx0JyNGRjY2MDAnLFxuXHQnI0ZGNjYzMycsXG5cdCcjRkY5OTAwJyxcblx0JyNGRjk5MzMnLFxuXHQnI0ZGQ0MwMCcsXG5cdCcjRkZDQzMzJ1xuXTtcblxuLyoqXG4gKiBDdXJyZW50bHkgb25seSBXZWJLaXQtYmFzZWQgV2ViIEluc3BlY3RvcnMsIEZpcmVmb3ggPj0gdjMxLFxuICogYW5kIHRoZSBGaXJlYnVnIGV4dGVuc2lvbiAoYW55IEZpcmVmb3ggdmVyc2lvbikgYXJlIGtub3duXG4gKiB0byBzdXBwb3J0IFwiJWNcIiBDU1MgY3VzdG9taXphdGlvbnMuXG4gKlxuICogVE9ETzogYWRkIGEgYGxvY2FsU3RvcmFnZWAgdmFyaWFibGUgdG8gZXhwbGljaXRseSBlbmFibGUvZGlzYWJsZSBjb2xvcnNcbiAqL1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29tcGxleGl0eVxuZnVuY3Rpb24gdXNlQ29sb3JzKCkge1xuXHQvLyBOQjogSW4gYW4gRWxlY3Ryb24gcHJlbG9hZCBzY3JpcHQsIGRvY3VtZW50IHdpbGwgYmUgZGVmaW5lZCBidXQgbm90IGZ1bGx5XG5cdC8vIGluaXRpYWxpemVkLiBTaW5jZSB3ZSBrbm93IHdlJ3JlIGluIENocm9tZSwgd2UnbGwganVzdCBkZXRlY3QgdGhpcyBjYXNlXG5cdC8vIGV4cGxpY2l0bHlcblx0aWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5wcm9jZXNzICYmICh3aW5kb3cucHJvY2Vzcy50eXBlID09PSAncmVuZGVyZXInIHx8IHdpbmRvdy5wcm9jZXNzLl9fbndqcykpIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdC8vIEludGVybmV0IEV4cGxvcmVyIGFuZCBFZGdlIGRvIG5vdCBzdXBwb3J0IGNvbG9ycy5cblx0aWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC8oZWRnZXx0cmlkZW50KVxcLyhcXGQrKS8pKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0Ly8gSXMgd2Via2l0PyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xNjQ1OTYwNi8zNzY3NzNcblx0Ly8gZG9jdW1lbnQgaXMgdW5kZWZpbmVkIGluIHJlYWN0LW5hdGl2ZTogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0LW5hdGl2ZS9wdWxsLzE2MzJcblx0cmV0dXJuICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLldlYmtpdEFwcGVhcmFuY2UpIHx8XG5cdFx0Ly8gSXMgZmlyZWJ1Zz8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzk4MTIwLzM3Njc3M1xuXHRcdCh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuY29uc29sZSAmJiAod2luZG93LmNvbnNvbGUuZmlyZWJ1ZyB8fCAod2luZG93LmNvbnNvbGUuZXhjZXB0aW9uICYmIHdpbmRvdy5jb25zb2xlLnRhYmxlKSkpIHx8XG5cdFx0Ly8gSXMgZmlyZWZveCA+PSB2MzE/XG5cdFx0Ly8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9Ub29scy9XZWJfQ29uc29sZSNTdHlsaW5nX21lc3NhZ2VzXG5cdFx0KHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9maXJlZm94XFwvKFxcZCspLykgJiYgcGFyc2VJbnQoUmVnRXhwLiQxLCAxMCkgPj0gMzEpIHx8XG5cdFx0Ly8gRG91YmxlIGNoZWNrIHdlYmtpdCBpbiB1c2VyQWdlbnQganVzdCBpbiBjYXNlIHdlIGFyZSBpbiBhIHdvcmtlclxuXHRcdCh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvYXBwbGV3ZWJraXRcXC8oXFxkKykvKSk7XG59XG5cbi8qKlxuICogQ29sb3JpemUgbG9nIGFyZ3VtZW50cyBpZiBlbmFibGVkLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZm9ybWF0QXJncyhhcmdzKSB7XG5cdGFyZ3NbMF0gPSAodGhpcy51c2VDb2xvcnMgPyAnJWMnIDogJycpICtcblx0XHR0aGlzLm5hbWVzcGFjZSArXG5cdFx0KHRoaXMudXNlQ29sb3JzID8gJyAlYycgOiAnICcpICtcblx0XHRhcmdzWzBdICtcblx0XHQodGhpcy51c2VDb2xvcnMgPyAnJWMgJyA6ICcgJykgK1xuXHRcdCcrJyArIG1vZHVsZS5leHBvcnRzLmh1bWFuaXplKHRoaXMuZGlmZik7XG5cblx0aWYgKCF0aGlzLnVzZUNvbG9ycykge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGNvbnN0IGMgPSAnY29sb3I6ICcgKyB0aGlzLmNvbG9yO1xuXHRhcmdzLnNwbGljZSgxLCAwLCBjLCAnY29sb3I6IGluaGVyaXQnKTtcblxuXHQvLyBUaGUgZmluYWwgXCIlY1wiIGlzIHNvbWV3aGF0IHRyaWNreSwgYmVjYXVzZSB0aGVyZSBjb3VsZCBiZSBvdGhlclxuXHQvLyBhcmd1bWVudHMgcGFzc2VkIGVpdGhlciBiZWZvcmUgb3IgYWZ0ZXIgdGhlICVjLCBzbyB3ZSBuZWVkIHRvXG5cdC8vIGZpZ3VyZSBvdXQgdGhlIGNvcnJlY3QgaW5kZXggdG8gaW5zZXJ0IHRoZSBDU1MgaW50b1xuXHRsZXQgaW5kZXggPSAwO1xuXHRsZXQgbGFzdEMgPSAwO1xuXHRhcmdzWzBdLnJlcGxhY2UoLyVbYS16QS1aJV0vZywgbWF0Y2ggPT4ge1xuXHRcdGlmIChtYXRjaCA9PT0gJyUlJykge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRpbmRleCsrO1xuXHRcdGlmIChtYXRjaCA9PT0gJyVjJykge1xuXHRcdFx0Ly8gV2Ugb25seSBhcmUgaW50ZXJlc3RlZCBpbiB0aGUgKmxhc3QqICVjXG5cdFx0XHQvLyAodGhlIHVzZXIgbWF5IGhhdmUgcHJvdmlkZWQgdGhlaXIgb3duKVxuXHRcdFx0bGFzdEMgPSBpbmRleDtcblx0XHR9XG5cdH0pO1xuXG5cdGFyZ3Muc3BsaWNlKGxhc3RDLCAwLCBjKTtcbn1cblxuLyoqXG4gKiBJbnZva2VzIGBjb25zb2xlLmxvZygpYCB3aGVuIGF2YWlsYWJsZS5cbiAqIE5vLW9wIHdoZW4gYGNvbnNvbGUubG9nYCBpcyBub3QgYSBcImZ1bmN0aW9uXCIuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gbG9nKC4uLmFyZ3MpIHtcblx0Ly8gVGhpcyBoYWNrZXJ5IGlzIHJlcXVpcmVkIGZvciBJRTgvOSwgd2hlcmVcblx0Ly8gdGhlIGBjb25zb2xlLmxvZ2AgZnVuY3Rpb24gZG9lc24ndCBoYXZlICdhcHBseSdcblx0cmV0dXJuIHR5cGVvZiBjb25zb2xlID09PSAnb2JqZWN0JyAmJlxuXHRcdGNvbnNvbGUubG9nICYmXG5cdFx0Y29uc29sZS5sb2coLi4uYXJncyk7XG59XG5cbi8qKlxuICogU2F2ZSBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBzYXZlKG5hbWVzcGFjZXMpIHtcblx0dHJ5IHtcblx0XHRpZiAobmFtZXNwYWNlcykge1xuXHRcdFx0ZXhwb3J0cy5zdG9yYWdlLnNldEl0ZW0oJ2RlYnVnJywgbmFtZXNwYWNlcyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGV4cG9ydHMuc3RvcmFnZS5yZW1vdmVJdGVtKCdkZWJ1ZycpO1xuXHRcdH1cblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHQvLyBTd2FsbG93XG5cdFx0Ly8gWFhYIChAUWl4LSkgc2hvdWxkIHdlIGJlIGxvZ2dpbmcgdGhlc2U/XG5cdH1cbn1cblxuLyoqXG4gKiBMb2FkIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcmV0dXJuIHtTdHJpbmd9IHJldHVybnMgdGhlIHByZXZpb3VzbHkgcGVyc2lzdGVkIGRlYnVnIG1vZGVzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gbG9hZCgpIHtcblx0bGV0IHI7XG5cdHRyeSB7XG5cdFx0ciA9IGV4cG9ydHMuc3RvcmFnZS5nZXRJdGVtKCdkZWJ1ZycpO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdC8vIFN3YWxsb3dcblx0XHQvLyBYWFggKEBRaXgtKSBzaG91bGQgd2UgYmUgbG9nZ2luZyB0aGVzZT9cblx0fVxuXG5cdC8vIElmIGRlYnVnIGlzbid0IHNldCBpbiBMUywgYW5kIHdlJ3JlIGluIEVsZWN0cm9uLCB0cnkgdG8gbG9hZCAkREVCVUdcblx0aWYgKCFyICYmIHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiAnZW52JyBpbiBwcm9jZXNzKSB7XG5cdFx0ciA9IHByb2Nlc3MuZW52LkRFQlVHO1xuXHR9XG5cblx0cmV0dXJuIHI7XG59XG5cbi8qKlxuICogTG9jYWxzdG9yYWdlIGF0dGVtcHRzIHRvIHJldHVybiB0aGUgbG9jYWxzdG9yYWdlLlxuICpcbiAqIFRoaXMgaXMgbmVjZXNzYXJ5IGJlY2F1c2Ugc2FmYXJpIHRocm93c1xuICogd2hlbiBhIHVzZXIgZGlzYWJsZXMgY29va2llcy9sb2NhbHN0b3JhZ2VcbiAqIGFuZCB5b3UgYXR0ZW1wdCB0byBhY2Nlc3MgaXQuXG4gKlxuICogQHJldHVybiB7TG9jYWxTdG9yYWdlfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbG9jYWxzdG9yYWdlKCkge1xuXHR0cnkge1xuXHRcdC8vIFRWTUxLaXQgKEFwcGxlIFRWIEpTIFJ1bnRpbWUpIGRvZXMgbm90IGhhdmUgYSB3aW5kb3cgb2JqZWN0LCBqdXN0IGxvY2FsU3RvcmFnZSBpbiB0aGUgZ2xvYmFsIGNvbnRleHRcblx0XHQvLyBUaGUgQnJvd3NlciBhbHNvIGhhcyBsb2NhbFN0b3JhZ2UgaW4gdGhlIGdsb2JhbCBjb250ZXh0LlxuXHRcdHJldHVybiBsb2NhbFN0b3JhZ2U7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Ly8gU3dhbGxvd1xuXHRcdC8vIFhYWCAoQFFpeC0pIHNob3VsZCB3ZSBiZSBsb2dnaW5nIHRoZXNlP1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9jb21tb24nKShleHBvcnRzKTtcblxuY29uc3Qge2Zvcm1hdHRlcnN9ID0gbW9kdWxlLmV4cG9ydHM7XG5cbi8qKlxuICogTWFwICVqIHRvIGBKU09OLnN0cmluZ2lmeSgpYCwgc2luY2Ugbm8gV2ViIEluc3BlY3RvcnMgZG8gdGhhdCBieSBkZWZhdWx0LlxuICovXG5cbmZvcm1hdHRlcnMuaiA9IGZ1bmN0aW9uICh2KSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIEpTT04uc3RyaW5naWZ5KHYpO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdHJldHVybiAnW1VuZXhwZWN0ZWRKU09OUGFyc2VFcnJvcl06ICcgKyBlcnJvci5tZXNzYWdlO1xuXHR9XG59O1xuIiwiY29uc3QgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdoMjY0LXByb2ZpbGUtbGV2ZWwtaWQnKTtcblxuLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuZGVidWcubG9nID0gY29uc29sZS5pbmZvLmJpbmQoY29uc29sZSk7XG4vKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cblxuY29uc3QgUHJvZmlsZUNvbnN0cmFpbmVkQmFzZWxpbmUgPSAxO1xuY29uc3QgUHJvZmlsZUJhc2VsaW5lID0gMjtcbmNvbnN0IFByb2ZpbGVNYWluID0gMztcbmNvbnN0IFByb2ZpbGVDb25zdHJhaW5lZEhpZ2ggPSA0O1xuY29uc3QgUHJvZmlsZUhpZ2ggPSA1O1xuXG5leHBvcnRzLlByb2ZpbGVDb25zdHJhaW5lZEJhc2VsaW5lID0gUHJvZmlsZUNvbnN0cmFpbmVkQmFzZWxpbmU7XG5leHBvcnRzLlByb2ZpbGVCYXNlbGluZSA9IFByb2ZpbGVCYXNlbGluZTtcbmV4cG9ydHMuUHJvZmlsZU1haW4gPSBQcm9maWxlTWFpbjtcbmV4cG9ydHMuUHJvZmlsZUNvbnN0cmFpbmVkSGlnaCA9IFByb2ZpbGVDb25zdHJhaW5lZEhpZ2g7XG5leHBvcnRzLlByb2ZpbGVIaWdoID0gUHJvZmlsZUhpZ2g7XG5cbi8vIEFsbCB2YWx1ZXMgYXJlIGVxdWFsIHRvIHRlbiB0aW1lcyB0aGUgbGV2ZWwgbnVtYmVyLCBleGNlcHQgbGV2ZWwgMWIgd2hpY2ggaXNcbi8vIHNwZWNpYWwuXG5jb25zdCBMZXZlbDFfYiA9IDA7XG5jb25zdCBMZXZlbDEgPSAxMDtcbmNvbnN0IExldmVsMV8xID0gMTE7XG5jb25zdCBMZXZlbDFfMiA9IDEyO1xuY29uc3QgTGV2ZWwxXzMgPSAxMztcbmNvbnN0IExldmVsMiA9IDIwO1xuY29uc3QgTGV2ZWwyXzEgPSAyMTtcbmNvbnN0IExldmVsMl8yID0gMjI7XG5jb25zdCBMZXZlbDMgPSAzMDtcbmNvbnN0IExldmVsM18xID0gMzE7XG5jb25zdCBMZXZlbDNfMiA9IDMyO1xuY29uc3QgTGV2ZWw0ID0gNDA7XG5jb25zdCBMZXZlbDRfMSA9IDQxO1xuY29uc3QgTGV2ZWw0XzIgPSA0MjtcbmNvbnN0IExldmVsNSA9IDUwO1xuY29uc3QgTGV2ZWw1XzEgPSA1MTtcbmNvbnN0IExldmVsNV8yID0gNTI7XG5cbmV4cG9ydHMuTGV2ZWwxX2IgPSBMZXZlbDFfYjtcbmV4cG9ydHMuTGV2ZWwxID0gTGV2ZWwxO1xuZXhwb3J0cy5MZXZlbDFfMSA9IExldmVsMV8xO1xuZXhwb3J0cy5MZXZlbDFfMiA9IExldmVsMV8yO1xuZXhwb3J0cy5MZXZlbDFfMyA9IExldmVsMV8zO1xuZXhwb3J0cy5MZXZlbDIgPSBMZXZlbDI7XG5leHBvcnRzLkxldmVsMl8xID0gTGV2ZWwyXzE7XG5leHBvcnRzLkxldmVsMl8yID0gTGV2ZWwyXzI7XG5leHBvcnRzLkxldmVsMyA9IExldmVsMztcbmV4cG9ydHMuTGV2ZWwzXzEgPSBMZXZlbDNfMTtcbmV4cG9ydHMuTGV2ZWwzXzIgPSBMZXZlbDNfMjtcbmV4cG9ydHMuTGV2ZWw0ID0gTGV2ZWw0O1xuZXhwb3J0cy5MZXZlbDRfMSA9IExldmVsNF8xO1xuZXhwb3J0cy5MZXZlbDRfMiA9IExldmVsNF8yO1xuZXhwb3J0cy5MZXZlbDUgPSBMZXZlbDU7XG5leHBvcnRzLkxldmVsNV8xID0gTGV2ZWw1XzE7XG5leHBvcnRzLkxldmVsNV8yID0gTGV2ZWw1XzI7XG5cbmNsYXNzIFByb2ZpbGVMZXZlbElkXG57XG5cdGNvbnN0cnVjdG9yKHByb2ZpbGUsIGxldmVsKVxuXHR7XG5cdFx0dGhpcy5wcm9maWxlID0gcHJvZmlsZTtcblx0XHR0aGlzLmxldmVsID0gbGV2ZWw7XG5cdH1cbn1cblxuZXhwb3J0cy5Qcm9maWxlTGV2ZWxJZCA9IFByb2ZpbGVMZXZlbElkO1xuXG4vLyBEZWZhdWx0IFByb2ZpbGVMZXZlbElkLlxuLy9cbi8vIFRPRE86IFRoZSBkZWZhdWx0IHNob3VsZCByZWFsbHkgYmUgcHJvZmlsZSBCYXNlbGluZSBhbmQgbGV2ZWwgMSBhY2NvcmRpbmcgdG9cbi8vIHRoZSBzcGVjOiBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNjE4NCNzZWN0aW9uLTguMS4gSW4gb3JkZXIgdG8gbm90XG4vLyBicmVhayBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSB3aXRoIG9sZGVyIHZlcnNpb25zIG9mIFdlYlJUQyB3aGVyZSBleHRlcm5hbFxuLy8gY29kZWNzIGRvbid0IGhhdmUgYW55IHBhcmFtZXRlcnMsIHVzZSBwcm9maWxlIENvbnN0cmFpbmVkQmFzZWxpbmUgbGV2ZWwgM18xXG4vLyBpbnN0ZWFkLiBUaGlzIHdvcmthcm91bmQgd2lsbCBvbmx5IGJlIGRvbmUgaW4gYW4gaW50ZXJpbSBwZXJpb2QgdG8gYWxsb3dcbi8vIGV4dGVybmFsIGNsaWVudHMgdG8gdXBkYXRlIHRoZWlyIGNvZGUuXG4vL1xuLy8gaHR0cDovL2NyYnVnL3dlYnJ0Yy82MzM3LlxuY29uc3QgRGVmYXVsdFByb2ZpbGVMZXZlbElkID1cblx0bmV3IFByb2ZpbGVMZXZlbElkKFByb2ZpbGVDb25zdHJhaW5lZEJhc2VsaW5lLCBMZXZlbDNfMSk7XG5cbi8vIEZvciBsZXZlbF9pZGM9MTEgYW5kIHByb2ZpbGVfaWRjPTB4NDIsIDB4NEQsIG9yIDB4NTgsIHRoZSBjb25zdHJhaW50IHNldDNcbi8vIGZsYWcgc3BlY2lmaWVzIGlmIGxldmVsIDFiIG9yIGxldmVsIDEuMSBpcyB1c2VkLlxuY29uc3QgQ29uc3RyYWludFNldDNGbGFnID0gMHgxMDtcblxuLy8gQ2xhc3MgZm9yIG1hdGNoaW5nIGJpdCBwYXR0ZXJucyBzdWNoIGFzIFwieDF4eDAwMDBcIiB3aGVyZSAneCcgaXMgYWxsb3dlZCB0byBiZVxuLy8gZWl0aGVyIDAgb3IgMS5cbmNsYXNzIEJpdFBhdHRlcm5cbntcblx0Y29uc3RydWN0b3Ioc3RyKVxuXHR7XG5cdFx0dGhpcy5fbWFzayA9IH5ieXRlTWFza1N0cmluZygneCcsIHN0cik7XG5cdFx0dGhpcy5fbWFza2VkVmFsdWUgPSBieXRlTWFza1N0cmluZygnMScsIHN0cik7XG5cdH1cblxuXHRpc01hdGNoKHZhbHVlKVxuXHR7XG5cdFx0cmV0dXJuIHRoaXMuX21hc2tlZFZhbHVlID09PSAodmFsdWUgJiB0aGlzLl9tYXNrKTtcblx0fVxufVxuXG4vLyBDbGFzcyBmb3IgY29udmVydGluZyBiZXR3ZWVuIHByb2ZpbGVfaWRjL3Byb2ZpbGVfaW9wIHRvIFByb2ZpbGUuXG5jbGFzcyBQcm9maWxlUGF0dGVyblxue1xuXHRjb25zdHJ1Y3Rvcihwcm9maWxlX2lkYywgcHJvZmlsZV9pb3AsIHByb2ZpbGUpXG5cdHtcblx0XHR0aGlzLnByb2ZpbGVfaWRjID0gcHJvZmlsZV9pZGM7XG5cdFx0dGhpcy5wcm9maWxlX2lvcCA9IHByb2ZpbGVfaW9wO1xuXHRcdHRoaXMucHJvZmlsZSA9IHByb2ZpbGU7XG5cdH1cbn1cblxuLy8gVGhpcyBpcyBmcm9tIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM2MTg0I3NlY3Rpb24tOC4xLlxuY29uc3QgUHJvZmlsZVBhdHRlcm5zID1cbltcblx0bmV3IFByb2ZpbGVQYXR0ZXJuKDB4NDIsIG5ldyBCaXRQYXR0ZXJuKCd4MXh4MDAwMCcpLCBQcm9maWxlQ29uc3RyYWluZWRCYXNlbGluZSksXG5cdG5ldyBQcm9maWxlUGF0dGVybigweDRELCBuZXcgQml0UGF0dGVybignMXh4eDAwMDAnKSwgUHJvZmlsZUNvbnN0cmFpbmVkQmFzZWxpbmUpLFxuXHRuZXcgUHJvZmlsZVBhdHRlcm4oMHg1OCwgbmV3IEJpdFBhdHRlcm4oJzExeHgwMDAwJyksIFByb2ZpbGVDb25zdHJhaW5lZEJhc2VsaW5lKSxcblx0bmV3IFByb2ZpbGVQYXR0ZXJuKDB4NDIsIG5ldyBCaXRQYXR0ZXJuKCd4MHh4MDAwMCcpLCBQcm9maWxlQmFzZWxpbmUpLFxuXHRuZXcgUHJvZmlsZVBhdHRlcm4oMHg1OCwgbmV3IEJpdFBhdHRlcm4oJzEweHgwMDAwJyksIFByb2ZpbGVCYXNlbGluZSksXG5cdG5ldyBQcm9maWxlUGF0dGVybigweDRELCBuZXcgQml0UGF0dGVybignMHgweDAwMDAnKSwgUHJvZmlsZU1haW4pLFxuXHRuZXcgUHJvZmlsZVBhdHRlcm4oMHg2NCwgbmV3IEJpdFBhdHRlcm4oJzAwMDAwMDAwJyksIFByb2ZpbGVIaWdoKSxcblx0bmV3IFByb2ZpbGVQYXR0ZXJuKDB4NjQsIG5ldyBCaXRQYXR0ZXJuKCcwMDAwMTEwMCcpLCBQcm9maWxlQ29uc3RyYWluZWRIaWdoKVxuXTtcblxuLyoqXG4gKiBQYXJzZSBwcm9maWxlIGxldmVsIGlkIHRoYXQgaXMgcmVwcmVzZW50ZWQgYXMgYSBzdHJpbmcgb2YgMyBoZXggYnl0ZXMuXG4gKiBOb3RoaW5nIHdpbGwgYmUgcmV0dXJuZWQgaWYgdGhlIHN0cmluZyBpcyBub3QgYSByZWNvZ25pemVkIEgyNjQgcHJvZmlsZVxuICogbGV2ZWwgaWQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciAtIHByb2ZpbGUtbGV2ZWwtaWQgdmFsdWUgYXMgYSBzdHJpbmcgb2YgMyBoZXggYnl0ZXMuXG4gKlxuICogQHJldHVybnMge1Byb2ZpbGVMZXZlbElkfVxuICovXG5leHBvcnRzLnBhcnNlUHJvZmlsZUxldmVsSWQgPSBmdW5jdGlvbihzdHIpXG57XG5cdC8vIFRoZSBzdHJpbmcgc2hvdWxkIGNvbnNpc3Qgb2YgMyBieXRlcyBpbiBoZXhhZGVjaW1hbCBmb3JtYXQuXG5cdGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJyB8fCBzdHIubGVuZ3RoICE9PSA2KVxuXHRcdHJldHVybiBudWxsO1xuXG5cdGNvbnN0IHByb2ZpbGVfbGV2ZWxfaWRfbnVtZXJpYyA9IHBhcnNlSW50KHN0ciwgMTYpO1xuXG5cdGlmIChwcm9maWxlX2xldmVsX2lkX251bWVyaWMgPT09IDApXG5cdFx0cmV0dXJuIG51bGw7XG5cblx0Ly8gU2VwYXJhdGUgaW50byB0aHJlZSBieXRlcy5cblx0Y29uc3QgbGV2ZWxfaWRjID0gcHJvZmlsZV9sZXZlbF9pZF9udW1lcmljICYgMHhGRjtcblx0Y29uc3QgcHJvZmlsZV9pb3AgPSAocHJvZmlsZV9sZXZlbF9pZF9udW1lcmljID4+IDgpICYgMHhGRjtcblx0Y29uc3QgcHJvZmlsZV9pZGMgPSAocHJvZmlsZV9sZXZlbF9pZF9udW1lcmljID4+IDE2KSAmIDB4RkY7XG5cblx0Ly8gUGFyc2UgbGV2ZWwgYmFzZWQgb24gbGV2ZWxfaWRjIGFuZCBjb25zdHJhaW50IHNldCAzIGZsYWcuXG5cdGxldCBsZXZlbDtcblxuXHRzd2l0Y2ggKGxldmVsX2lkYylcblx0e1xuXHRcdGNhc2UgTGV2ZWwxXzE6XG5cdFx0e1xuXHRcdFx0bGV2ZWwgPSAocHJvZmlsZV9pb3AgJiBDb25zdHJhaW50U2V0M0ZsYWcpICE9PSAwID8gTGV2ZWwxX2IgOiBMZXZlbDFfMTtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0XHRjYXNlIExldmVsMTpcblx0XHRjYXNlIExldmVsMV8yOlxuXHRcdGNhc2UgTGV2ZWwxXzM6XG5cdFx0Y2FzZSBMZXZlbDI6XG5cdFx0Y2FzZSBMZXZlbDJfMTpcblx0XHRjYXNlIExldmVsMl8yOlxuXHRcdGNhc2UgTGV2ZWwzOlxuXHRcdGNhc2UgTGV2ZWwzXzE6XG5cdFx0Y2FzZSBMZXZlbDNfMjpcblx0XHRjYXNlIExldmVsNDpcblx0XHRjYXNlIExldmVsNF8xOlxuXHRcdGNhc2UgTGV2ZWw0XzI6XG5cdFx0Y2FzZSBMZXZlbDU6XG5cdFx0Y2FzZSBMZXZlbDVfMTpcblx0XHRjYXNlIExldmVsNV8yOlxuXHRcdHtcblx0XHRcdGxldmVsID0gbGV2ZWxfaWRjO1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHRcdC8vIFVucmVjb2duaXplZCBsZXZlbF9pZGMuXG5cdFx0ZGVmYXVsdDpcblx0XHR7XG5cdFx0XHRkZWJ1ZygncGFyc2VQcm9maWxlTGV2ZWxJZCgpIHwgdW5yZWNvZ25pemVkIGxldmVsX2lkYzolcycsIGxldmVsX2lkYyk7XG5cblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblx0fVxuXG5cdC8vIFBhcnNlIHByb2ZpbGVfaWRjL3Byb2ZpbGVfaW9wIGludG8gYSBQcm9maWxlIGVudW0uXG5cdGZvciAoY29uc3QgcGF0dGVybiBvZiBQcm9maWxlUGF0dGVybnMpXG5cdHtcblx0XHRpZiAoXG5cdFx0XHRwcm9maWxlX2lkYyA9PT0gcGF0dGVybi5wcm9maWxlX2lkYyAmJlxuXHRcdFx0cGF0dGVybi5wcm9maWxlX2lvcC5pc01hdGNoKHByb2ZpbGVfaW9wKVxuXHRcdClcblx0XHR7XG5cdFx0XHRyZXR1cm4gbmV3IFByb2ZpbGVMZXZlbElkKHBhdHRlcm4ucHJvZmlsZSwgbGV2ZWwpO1xuXHRcdH1cblx0fVxuXG5cdGRlYnVnKCdwYXJzZVByb2ZpbGVMZXZlbElkKCkgfCB1bnJlY29nbml6ZWQgcHJvZmlsZV9pZGMvcHJvZmlsZV9pb3AgY29tYmluYXRpb24nKTtcblxuXHRyZXR1cm4gbnVsbDtcbn07XG5cbi8qKlxuICogUmV0dXJucyBjYW5vbmljYWwgc3RyaW5nIHJlcHJlc2VudGF0aW9uIGFzIHRocmVlIGhleCBieXRlcyBvZiB0aGUgcHJvZmlsZVxuICogbGV2ZWwgaWQsIG9yIHJldHVybnMgbm90aGluZyBmb3IgaW52YWxpZCBwcm9maWxlIGxldmVsIGlkcy5cbiAqXG4gKiBAcGFyYW0ge1Byb2ZpbGVMZXZlbElkfSBwcm9maWxlX2xldmVsX2lkXG4gKlxuICogQHJldHVybnMge1N0cmluZ31cbiAqL1xuZXhwb3J0cy5wcm9maWxlTGV2ZWxJZFRvU3RyaW5nID0gZnVuY3Rpb24ocHJvZmlsZV9sZXZlbF9pZClcbntcblx0Ly8gSGFuZGxlIHNwZWNpYWwgY2FzZSBsZXZlbCA9PSAxYi5cblx0aWYgKHByb2ZpbGVfbGV2ZWxfaWQubGV2ZWwgPT0gTGV2ZWwxX2IpXG5cdHtcblx0XHRzd2l0Y2ggKHByb2ZpbGVfbGV2ZWxfaWQucHJvZmlsZSlcblx0XHR7XG5cdFx0XHRjYXNlIFByb2ZpbGVDb25zdHJhaW5lZEJhc2VsaW5lOlxuXHRcdFx0e1xuXHRcdFx0XHRyZXR1cm4gJzQyZjAwYic7XG5cdFx0XHR9XG5cdFx0XHRjYXNlIFByb2ZpbGVCYXNlbGluZTpcblx0XHRcdHtcblx0XHRcdFx0cmV0dXJuICc0MjEwMGInO1xuXHRcdFx0fVxuXHRcdFx0Y2FzZSBQcm9maWxlTWFpbjpcblx0XHRcdHtcblx0XHRcdFx0cmV0dXJuICc0ZDEwMGInO1xuXHRcdFx0fVxuXHRcdFx0Ly8gTGV2ZWwgMV9iIGlzIG5vdCBhbGxvd2VkIGZvciBvdGhlciBwcm9maWxlcy5cblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHR7XG5cdFx0XHRcdGRlYnVnKFxuXHRcdFx0XHRcdCdwcm9maWxlTGV2ZWxJZFRvU3RyaW5nKCkgfCBMZXZlbCAxX2Igbm90IGlzIGFsbG93ZWQgZm9yIHByb2ZpbGU6JXMnLFxuXHRcdFx0XHRcdHByb2ZpbGVfbGV2ZWxfaWQucHJvZmlsZSk7XG5cblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0bGV0IHByb2ZpbGVfaWRjX2lvcF9zdHJpbmc7XG5cblx0c3dpdGNoIChwcm9maWxlX2xldmVsX2lkLnByb2ZpbGUpXG5cdHtcblx0XHRjYXNlIFByb2ZpbGVDb25zdHJhaW5lZEJhc2VsaW5lOlxuXHRcdHtcblx0XHRcdHByb2ZpbGVfaWRjX2lvcF9zdHJpbmcgPSAnNDJlMCc7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdFx0Y2FzZSBQcm9maWxlQmFzZWxpbmU6XG5cdFx0e1xuXHRcdFx0cHJvZmlsZV9pZGNfaW9wX3N0cmluZyA9ICc0MjAwJztcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0XHRjYXNlIFByb2ZpbGVNYWluOlxuXHRcdHtcblx0XHRcdHByb2ZpbGVfaWRjX2lvcF9zdHJpbmcgPSAnNGQwMCc7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdFx0Y2FzZSBQcm9maWxlQ29uc3RyYWluZWRIaWdoOlxuXHRcdHtcblx0XHRcdHByb2ZpbGVfaWRjX2lvcF9zdHJpbmcgPSAnNjQwYyc7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdFx0Y2FzZSBQcm9maWxlSGlnaDpcblx0XHR7XG5cdFx0XHRwcm9maWxlX2lkY19pb3Bfc3RyaW5nID0gJzY0MDAnO1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHRcdGRlZmF1bHQ6XG5cdFx0e1xuXHRcdFx0ZGVidWcoXG5cdFx0XHRcdCdwcm9maWxlTGV2ZWxJZFRvU3RyaW5nKCkgfCB1bnJlY29nbml6ZWQgcHJvZmlsZTolcycsXG5cdFx0XHRcdHByb2ZpbGVfbGV2ZWxfaWQucHJvZmlsZSk7XG5cblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblx0fVxuXG5cdGxldCBsZXZlbFN0ciA9IChwcm9maWxlX2xldmVsX2lkLmxldmVsKS50b1N0cmluZygxNik7XG5cblx0aWYgKGxldmVsU3RyLmxlbmd0aCA9PT0gMSlcblx0XHRsZXZlbFN0ciA9IGAwJHtsZXZlbFN0cn1gO1xuXG5cdHJldHVybiBgJHtwcm9maWxlX2lkY19pb3Bfc3RyaW5nfSR7bGV2ZWxTdHJ9YDtcbn07XG5cbi8qKlxuICogUGFyc2UgcHJvZmlsZSBsZXZlbCBpZCB0aGF0IGlzIHJlcHJlc2VudGVkIGFzIGEgc3RyaW5nIG9mIDMgaGV4IGJ5dGVzXG4gKiBjb250YWluZWQgaW4gYW4gU0RQIGtleS12YWx1ZSBtYXAuIEEgZGVmYXVsdCBwcm9maWxlIGxldmVsIGlkIHdpbGwgYmVcbiAqIHJldHVybmVkIGlmIHRoZSBwcm9maWxlLWxldmVsLWlkIGtleSBpcyBtaXNzaW5nLiBOb3RoaW5nIHdpbGwgYmUgcmV0dXJuZWQgaWZcbiAqIHRoZSBrZXkgaXMgcHJlc2VudCBidXQgdGhlIHN0cmluZyBpcyBpbnZhbGlkLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBbcGFyYW1zPXt9XSAtIENvZGVjIHBhcmFtZXRlcnMgb2JqZWN0LlxuICpcbiAqIEByZXR1cm5zIHtQcm9maWxlTGV2ZWxJZH1cbiAqL1xuZXhwb3J0cy5wYXJzZVNkcFByb2ZpbGVMZXZlbElkID0gZnVuY3Rpb24ocGFyYW1zID0ge30pXG57XG5cdGNvbnN0IHByb2ZpbGVfbGV2ZWxfaWQgPSBwYXJhbXNbJ3Byb2ZpbGUtbGV2ZWwtaWQnXTtcblxuXHRyZXR1cm4gIXByb2ZpbGVfbGV2ZWxfaWRcblx0XHQ/IERlZmF1bHRQcm9maWxlTGV2ZWxJZFxuXHRcdDogZXhwb3J0cy5wYXJzZVByb2ZpbGVMZXZlbElkKHByb2ZpbGVfbGV2ZWxfaWQpO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHBhcmFtZXRlcnMgaGF2ZSB0aGUgc2FtZSBIMjY0IHByb2ZpbGUsIGkuZS4gdGhlIHNhbWVcbiAqIEgyNjQgcHJvZmlsZSAoQmFzZWxpbmUsIEhpZ2gsIGV0YykuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IFtwYXJhbXMxPXt9XSAtIENvZGVjIHBhcmFtZXRlcnMgb2JqZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtwYXJhbXMyPXt9XSAtIENvZGVjIHBhcmFtZXRlcnMgb2JqZWN0LlxuICpcbiAqIEByZXR1cm5zIHtCb29sZWFufVxuICovXG5leHBvcnRzLmlzU2FtZVByb2ZpbGUgPSBmdW5jdGlvbihwYXJhbXMxID0ge30sIHBhcmFtczIgPSB7fSlcbntcblx0Y29uc3QgcHJvZmlsZV9sZXZlbF9pZF8xID0gZXhwb3J0cy5wYXJzZVNkcFByb2ZpbGVMZXZlbElkKHBhcmFtczEpO1xuXHRjb25zdCBwcm9maWxlX2xldmVsX2lkXzIgPSBleHBvcnRzLnBhcnNlU2RwUHJvZmlsZUxldmVsSWQocGFyYW1zMik7XG5cblx0Ly8gQ29tcGFyZSBIMjY0IHByb2ZpbGVzLCBidXQgbm90IGxldmVscy5cblx0cmV0dXJuIEJvb2xlYW4oXG5cdFx0cHJvZmlsZV9sZXZlbF9pZF8xICYmXG5cdFx0cHJvZmlsZV9sZXZlbF9pZF8yICYmXG5cdFx0cHJvZmlsZV9sZXZlbF9pZF8xLnByb2ZpbGUgPT09IHByb2ZpbGVfbGV2ZWxfaWRfMi5wcm9maWxlXG5cdCk7XG59O1xuXG4vKipcbiAqIEdlbmVyYXRlIGNvZGVjIHBhcmFtZXRlcnMgdGhhdCB3aWxsIGJlIHVzZWQgYXMgYW5zd2VyIGluIGFuIFNEUCBuZWdvdGlhdGlvblxuICogYmFzZWQgb24gbG9jYWwgc3VwcG9ydGVkIHBhcmFtZXRlcnMgYW5kIHJlbW90ZSBvZmZlcmVkIHBhcmFtZXRlcnMuIEJvdGhcbiAqIGxvY2FsX3N1cHBvcnRlZF9wYXJhbXMgYW5kIHJlbW90ZV9vZmZlcmVkX3BhcmFtcyByZXByZXNlbnQgc2VuZHJlY3YgbWVkaWFcbiAqIGRlc2NyaXB0aW9ucywgaS5lIHRoZXkgYXJlIGEgbWl4IG9mIGJvdGggZW5jb2RlIGFuZCBkZWNvZGUgY2FwYWJpbGl0aWVzLiBJblxuICogdGhlb3J5LCB3aGVuIHRoZSBwcm9maWxlIGluIGxvY2FsX3N1cHBvcnRlZF9wYXJhbXMgcmVwcmVzZW50IGEgc3RyaWN0IHN1cGVyc2V0XG4gKiBvZiB0aGUgcHJvZmlsZSBpbiByZW1vdGVfb2ZmZXJlZF9wYXJhbXMsIHdlIGNvdWxkIGxpbWl0IHRoZSBwcm9maWxlIGluIHRoZVxuICogYW5zd2VyIHRvIHRoZSBwcm9maWxlIGluIHJlbW90ZV9vZmZlcmVkX3BhcmFtcy5cbiAqXG4gKiBIb3dldmVyLCB0byBzaW1wbGlmeSB0aGUgY29kZSwgZWFjaCBzdXBwb3J0ZWQgSDI2NCBwcm9maWxlIHNob3VsZCBiZSBsaXN0ZWRcbiAqIGV4cGxpY2l0bHkgaW4gdGhlIGxpc3Qgb2YgbG9jYWwgc3VwcG9ydGVkIGNvZGVjcywgZXZlbiBpZiB0aGV5IGFyZSByZWR1bmRhbnQuXG4gKiBUaGVuIGVhY2ggbG9jYWwgY29kZWMgaW4gdGhlIGxpc3Qgc2hvdWxkIGJlIHRlc3RlZCBvbmUgYXQgYSB0aW1lIGFnYWluc3QgdGhlXG4gKiByZW1vdGUgY29kZWMsIGFuZCBvbmx5IHdoZW4gdGhlIHByb2ZpbGVzIGFyZSBlcXVhbCBzaG91bGQgdGhpcyBmdW5jdGlvbiBiZVxuICogY2FsbGVkLiBUaGVyZWZvcmUsIHRoaXMgZnVuY3Rpb24gZG9lcyBub3QgbmVlZCB0byBoYW5kbGUgcHJvZmlsZSBpbnRlcnNlY3Rpb24sXG4gKiBhbmQgdGhlIHByb2ZpbGUgb2YgbG9jYWxfc3VwcG9ydGVkX3BhcmFtcyBhbmQgcmVtb3RlX29mZmVyZWRfcGFyYW1zIG11c3QgYmVcbiAqIGVxdWFsIGJlZm9yZSBjYWxsaW5nIHRoaXMgZnVuY3Rpb24uIFRoZSBwYXJhbWV0ZXJzIHRoYXQgYXJlIHVzZWQgd2hlblxuICogbmVnb3RpYXRpbmcgYXJlIHRoZSBsZXZlbCBwYXJ0IG9mIHByb2ZpbGUtbGV2ZWwtaWQgYW5kIGxldmVsLWFzeW1tZXRyeS1hbGxvd2VkLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBbbG9jYWxfc3VwcG9ydGVkX3BhcmFtcz17fV1cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVtb3RlX29mZmVyZWRfcGFyYW1zPXt9XVxuICpcbiAqIEByZXR1cm5zIHtTdHJpbmd9IENhbm9uaWNhbCBzdHJpbmcgcmVwcmVzZW50YXRpb24gYXMgdGhyZWUgaGV4IGJ5dGVzIG9mIHRoZVxuICogICBwcm9maWxlIGxldmVsIGlkLCBvciBudWxsIGlmIG5vIG9uZSBvZiB0aGUgcGFyYW1zIGhhdmUgcHJvZmlsZS1sZXZlbC1pZC5cbiAqXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IElmIFByb2ZpbGUgbWlzbWF0Y2ggb3IgaW52YWxpZCBwYXJhbXMuXG4gKi9cbmV4cG9ydHMuZ2VuZXJhdGVQcm9maWxlTGV2ZWxJZEZvckFuc3dlciA9IGZ1bmN0aW9uKFxuXHRsb2NhbF9zdXBwb3J0ZWRfcGFyYW1zID0ge30sXG5cdHJlbW90ZV9vZmZlcmVkX3BhcmFtcyA9IHt9XG4pXG57XG5cdC8vIElmIGJvdGggbG9jYWwgYW5kIHJlbW90ZSBwYXJhbXMgZG8gbm90IGNvbnRhaW4gcHJvZmlsZS1sZXZlbC1pZCwgdGhleSBhcmVcblx0Ly8gYm90aCB1c2luZyB0aGUgZGVmYXVsdCBwcm9maWxlLiBJbiB0aGlzIGNhc2UsIGRvbid0IHJldHVybiBhbnl0aGluZy5cblx0aWYgKFxuXHRcdCFsb2NhbF9zdXBwb3J0ZWRfcGFyYW1zWydwcm9maWxlLWxldmVsLWlkJ10gJiZcblx0XHQhcmVtb3RlX29mZmVyZWRfcGFyYW1zWydwcm9maWxlLWxldmVsLWlkJ11cblx0KVxuXHR7XG5cdFx0ZGVidWcoXG5cdFx0XHQnZ2VuZXJhdGVQcm9maWxlTGV2ZWxJZEZvckFuc3dlcigpIHwgbm8gcHJvZmlsZS1sZXZlbC1pZCBpbiBsb2NhbCBhbmQgcmVtb3RlIHBhcmFtcycpO1xuXG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBQYXJzZSBwcm9maWxlLWxldmVsLWlkcy5cblx0Y29uc3QgbG9jYWxfcHJvZmlsZV9sZXZlbF9pZCA9XG5cdFx0ZXhwb3J0cy5wYXJzZVNkcFByb2ZpbGVMZXZlbElkKGxvY2FsX3N1cHBvcnRlZF9wYXJhbXMpO1xuXHRjb25zdCByZW1vdGVfcHJvZmlsZV9sZXZlbF9pZCA9XG5cdFx0ZXhwb3J0cy5wYXJzZVNkcFByb2ZpbGVMZXZlbElkKHJlbW90ZV9vZmZlcmVkX3BhcmFtcyk7XG5cblx0Ly8gVGhlIGxvY2FsIGFuZCByZW1vdGUgY29kZWMgbXVzdCBoYXZlIHZhbGlkIGFuZCBlcXVhbCBIMjY0IFByb2ZpbGVzLlxuXHRpZiAoIWxvY2FsX3Byb2ZpbGVfbGV2ZWxfaWQpXG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBsb2NhbF9wcm9maWxlX2xldmVsX2lkJyk7XG5cblx0aWYgKCFyZW1vdGVfcHJvZmlsZV9sZXZlbF9pZClcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHJlbW90ZV9wcm9maWxlX2xldmVsX2lkJyk7XG5cblx0aWYgKGxvY2FsX3Byb2ZpbGVfbGV2ZWxfaWQucHJvZmlsZSAhPT0gcmVtb3RlX3Byb2ZpbGVfbGV2ZWxfaWQucHJvZmlsZSlcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdIMjY0IFByb2ZpbGUgbWlzbWF0Y2gnKTtcblxuXHQvLyBQYXJzZSBsZXZlbCBpbmZvcm1hdGlvbi5cblx0Y29uc3QgbGV2ZWxfYXN5bW1ldHJ5X2FsbG93ZWQgPSAoXG5cdFx0aXNMZXZlbEFzeW1tZXRyeUFsbG93ZWQobG9jYWxfc3VwcG9ydGVkX3BhcmFtcykgJiZcblx0XHRpc0xldmVsQXN5bW1ldHJ5QWxsb3dlZChyZW1vdGVfb2ZmZXJlZF9wYXJhbXMpXG5cdCk7XG5cblx0Y29uc3QgbG9jYWxfbGV2ZWwgPSBsb2NhbF9wcm9maWxlX2xldmVsX2lkLmxldmVsO1xuXHRjb25zdCByZW1vdGVfbGV2ZWwgPSByZW1vdGVfcHJvZmlsZV9sZXZlbF9pZC5sZXZlbDtcblx0Y29uc3QgbWluX2xldmVsID0gbWluTGV2ZWwobG9jYWxfbGV2ZWwsIHJlbW90ZV9sZXZlbCk7XG5cblx0Ly8gRGV0ZXJtaW5lIGFuc3dlciBsZXZlbC4gV2hlbiBsZXZlbCBhc3ltbWV0cnkgaXMgbm90IGFsbG93ZWQsIGxldmVsIHVwZ3JhZGVcblx0Ly8gaXMgbm90IGFsbG93ZWQsIGkuZS4sIHRoZSBsZXZlbCBpbiB0aGUgYW5zd2VyIG11c3QgYmUgZXF1YWwgdG8gb3IgbG93ZXJcblx0Ly8gdGhhbiB0aGUgbGV2ZWwgaW4gdGhlIG9mZmVyLlxuXHRjb25zdCBhbnN3ZXJfbGV2ZWwgPSBsZXZlbF9hc3ltbWV0cnlfYWxsb3dlZCA/IGxvY2FsX2xldmVsIDogbWluX2xldmVsO1xuXG5cdGRlYnVnKFxuXHRcdCdnZW5lcmF0ZVByb2ZpbGVMZXZlbElkRm9yQW5zd2VyKCkgfCByZXN1bHQ6IFtwcm9maWxlOiVzLCBsZXZlbDolc10nLFxuXHRcdGxvY2FsX3Byb2ZpbGVfbGV2ZWxfaWQucHJvZmlsZSwgYW5zd2VyX2xldmVsKTtcblxuXHQvLyBSZXR1cm4gdGhlIHJlc3VsdGluZyBwcm9maWxlLWxldmVsLWlkIGZvciB0aGUgYW5zd2VyIHBhcmFtZXRlcnMuXG5cdHJldHVybiBleHBvcnRzLnByb2ZpbGVMZXZlbElkVG9TdHJpbmcoXG5cdFx0bmV3IFByb2ZpbGVMZXZlbElkKGxvY2FsX3Byb2ZpbGVfbGV2ZWxfaWQucHJvZmlsZSwgYW5zd2VyX2xldmVsKSk7XG59O1xuXG4vLyBDb252ZXJ0IGEgc3RyaW5nIG9mIDggY2hhcmFjdGVycyBpbnRvIGEgYnl0ZSB3aGVyZSB0aGUgcG9zaXRpb25zIGNvbnRhaW5pbmdcbi8vIGNoYXJhY3RlciBjIHdpbGwgaGF2ZSB0aGVpciBiaXQgc2V0LiBGb3IgZXhhbXBsZSwgYyA9ICd4Jywgc3RyID0gXCJ4MXh4MDAwMFwiXG4vLyB3aWxsIHJldHVybiAwYjEwMTEwMDAwLlxuZnVuY3Rpb24gYnl0ZU1hc2tTdHJpbmcoYywgc3RyKVxue1xuXHRyZXR1cm4gKFxuXHRcdCgoc3RyWzBdID09PSBjKSA8PCA3KSB8ICgoc3RyWzFdID09PSBjKSA8PCA2KSB8ICgoc3RyWzJdID09PSBjKSA8PCA1KSB8XG5cdFx0KChzdHJbM10gPT09IGMpIDw8IDQpXHR8ICgoc3RyWzRdID09PSBjKSA8PCAzKVx0fCAoKHN0cls1XSA9PT0gYykgPDwgMilcdHxcblx0XHQoKHN0cls2XSA9PT0gYykgPDwgMSlcdHwgKChzdHJbN10gPT09IGMpIDw8IDApXG5cdCk7XG59XG5cbi8vIENvbXBhcmUgSDI2NCBsZXZlbHMgYW5kIGhhbmRsZSB0aGUgbGV2ZWwgMWIgY2FzZS5cbmZ1bmN0aW9uIGlzTGVzc0xldmVsKGEsIGIpXG57XG5cdGlmIChhID09PSBMZXZlbDFfYilcblx0XHRyZXR1cm4gYiAhPT0gTGV2ZWwxICYmIGIgIT09IExldmVsMV9iO1xuXG5cdGlmIChiID09PSBMZXZlbDFfYilcblx0XHRyZXR1cm4gYSAhPT0gTGV2ZWwxO1xuXG5cdHJldHVybiBhIDwgYjtcbn1cblxuZnVuY3Rpb24gbWluTGV2ZWwoYSwgYilcbntcblx0cmV0dXJuIGlzTGVzc0xldmVsKGEsIGIpID8gYSA6IGI7XG59XG5cbmZ1bmN0aW9uIGlzTGV2ZWxBc3ltbWV0cnlBbGxvd2VkKHBhcmFtcyA9IHt9KVxue1xuXHRjb25zdCBsZXZlbF9hc3ltbWV0cnlfYWxsb3dlZCA9IHBhcmFtc1snbGV2ZWwtYXN5bW1ldHJ5LWFsbG93ZWQnXTtcblxuXHRyZXR1cm4gKFxuXHRcdGxldmVsX2FzeW1tZXRyeV9hbGxvd2VkID09PSAxIHx8XG5cdFx0bGV2ZWxfYXN5bW1ldHJ5X2FsbG93ZWQgPT09ICcxJ1xuXHQpO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKipcbiAqIENsb25lcyB0aGUgZ2l2ZW4gb2JqZWN0L2FycmF5LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBvYmpcbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fEFycmF5fVxuICovXG5mdW5jdGlvbiBjbG9uZShkYXRhKSB7XG4gICAgaWYgKHR5cGVvZiBkYXRhICE9PSAnb2JqZWN0JylcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGRhdGEpKTtcbn1cbmV4cG9ydHMuY2xvbmUgPSBjbG9uZTtcbi8qKlxuICogR2VuZXJhdGVzIGEgcmFuZG9tIHBvc2l0aXZlIGludGVnZXIuXG4gKi9cbmZ1bmN0aW9uIGdlbmVyYXRlUmFuZG9tTnVtYmVyKCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAxMDAwMDAwMCk7XG59XG5leHBvcnRzLmdlbmVyYXRlUmFuZG9tTnVtYmVyID0gZ2VuZXJhdGVSYW5kb21OdW1iZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGgyNjQgPSByZXF1aXJlKFwiaDI2NC1wcm9maWxlLWxldmVsLWlkXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xuY29uc3QgUlRQX1BST0JBVE9SX01JRCA9ICdwcm9iYXRvcic7XG5jb25zdCBSVFBfUFJPQkFUT1JfU1NSQyA9IDEyMzQ7XG5jb25zdCBSVFBfUFJPQkFUT1JfQ09ERUNfUEFZTE9BRF9UWVBFID0gMTI3O1xuLyoqXG4gKiBWYWxpZGF0ZXMgUnRwQ2FwYWJpbGl0aWVzLiBJdCBtYXkgbW9kaWZ5IGdpdmVuIGRhdGEgYnkgYWRkaW5nIG1pc3NpbmdcbiAqIGZpZWxkcyB3aXRoIGRlZmF1bHQgdmFsdWVzLlxuICogSXQgdGhyb3dzIGlmIGludmFsaWQuXG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlUnRwQ2FwYWJpbGl0aWVzKGNhcHMpIHtcbiAgICBpZiAodHlwZW9mIGNhcHMgIT09ICdvYmplY3QnKVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdjYXBzIGlzIG5vdCBhbiBvYmplY3QnKTtcbiAgICAvLyBjb2RlY3MgaXMgb3B0aW9uYWwuIElmIHVuc2V0LCBmaWxsIHdpdGggYW4gZW1wdHkgYXJyYXkuXG4gICAgaWYgKGNhcHMuY29kZWNzICYmICFBcnJheS5pc0FycmF5KGNhcHMuY29kZWNzKSlcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignY2Fwcy5jb2RlY3MgaXMgbm90IGFuIGFycmF5Jyk7XG4gICAgZWxzZSBpZiAoIWNhcHMuY29kZWNzKVxuICAgICAgICBjYXBzLmNvZGVjcyA9IFtdO1xuICAgIGZvciAoY29uc3QgY29kZWMgb2YgY2Fwcy5jb2RlY3MpIHtcbiAgICAgICAgdmFsaWRhdGVSdHBDb2RlY0NhcGFiaWxpdHkoY29kZWMpO1xuICAgIH1cbiAgICAvLyBoZWFkZXJFeHRlbnNpb25zIGlzIG9wdGlvbmFsLiBJZiB1bnNldCwgZmlsbCB3aXRoIGFuIGVtcHR5IGFycmF5LlxuICAgIGlmIChjYXBzLmhlYWRlckV4dGVuc2lvbnMgJiYgIUFycmF5LmlzQXJyYXkoY2Fwcy5oZWFkZXJFeHRlbnNpb25zKSlcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignY2Fwcy5oZWFkZXJFeHRlbnNpb25zIGlzIG5vdCBhbiBhcnJheScpO1xuICAgIGVsc2UgaWYgKCFjYXBzLmhlYWRlckV4dGVuc2lvbnMpXG4gICAgICAgIGNhcHMuaGVhZGVyRXh0ZW5zaW9ucyA9IFtdO1xuICAgIGZvciAoY29uc3QgZXh0IG9mIGNhcHMuaGVhZGVyRXh0ZW5zaW9ucykge1xuICAgICAgICB2YWxpZGF0ZVJ0cEhlYWRlckV4dGVuc2lvbihleHQpO1xuICAgIH1cbn1cbmV4cG9ydHMudmFsaWRhdGVSdHBDYXBhYmlsaXRpZXMgPSB2YWxpZGF0ZVJ0cENhcGFiaWxpdGllcztcbi8qKlxuICogVmFsaWRhdGVzIFJ0cENvZGVjQ2FwYWJpbGl0eS4gSXQgbWF5IG1vZGlmeSBnaXZlbiBkYXRhIGJ5IGFkZGluZyBtaXNzaW5nXG4gKiBmaWVsZHMgd2l0aCBkZWZhdWx0IHZhbHVlcy5cbiAqIEl0IHRocm93cyBpZiBpbnZhbGlkLlxuICovXG5mdW5jdGlvbiB2YWxpZGF0ZVJ0cENvZGVjQ2FwYWJpbGl0eShjb2RlYykge1xuICAgIGNvbnN0IE1pbWVUeXBlUmVnZXggPSBuZXcgUmVnRXhwKCdeKGF1ZGlvfHZpZGVvKS8oLispJywgJ2knKTtcbiAgICBpZiAodHlwZW9mIGNvZGVjICE9PSAnb2JqZWN0JylcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignY29kZWMgaXMgbm90IGFuIG9iamVjdCcpO1xuICAgIC8vIG1pbWVUeXBlIGlzIG1hbmRhdG9yeS5cbiAgICBpZiAoIWNvZGVjLm1pbWVUeXBlIHx8IHR5cGVvZiBjb2RlYy5taW1lVHlwZSAhPT0gJ3N0cmluZycpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ21pc3NpbmcgY29kZWMubWltZVR5cGUnKTtcbiAgICBjb25zdCBtaW1lVHlwZU1hdGNoID0gTWltZVR5cGVSZWdleC5leGVjKGNvZGVjLm1pbWVUeXBlKTtcbiAgICBpZiAoIW1pbWVUeXBlTWF0Y2gpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgY29kZWMubWltZVR5cGUnKTtcbiAgICAvLyBKdXN0IG92ZXJyaWRlIGtpbmQgd2l0aCBtZWRpYSBjb21wb25lbnQgb2YgbWltZVR5cGUuXG4gICAgY29kZWMua2luZCA9IG1pbWVUeXBlTWF0Y2hbMV0udG9Mb3dlckNhc2UoKTtcbiAgICAvLyBwcmVmZXJyZWRQYXlsb2FkVHlwZSBpcyBvcHRpb25hbC5cbiAgICBpZiAoY29kZWMucHJlZmVycmVkUGF5bG9hZFR5cGUgJiYgdHlwZW9mIGNvZGVjLnByZWZlcnJlZFBheWxvYWRUeXBlICE9PSAnbnVtYmVyJylcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBjb2RlYy5wcmVmZXJyZWRQYXlsb2FkVHlwZScpO1xuICAgIC8vIGNsb2NrUmF0ZSBpcyBtYW5kYXRvcnkuXG4gICAgaWYgKHR5cGVvZiBjb2RlYy5jbG9ja1JhdGUgIT09ICdudW1iZXInKVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdtaXNzaW5nIGNvZGVjLmNsb2NrUmF0ZScpO1xuICAgIC8vIGNoYW5uZWxzIGlzIG9wdGlvbmFsLiBJZiB1bnNldCwgc2V0IGl0IHRvIDEgKGp1c3QgaWYgYXVkaW8pLlxuICAgIGlmIChjb2RlYy5raW5kID09PSAnYXVkaW8nKSB7XG4gICAgICAgIGlmICh0eXBlb2YgY29kZWMuY2hhbm5lbHMgIT09ICdudW1iZXInKVxuICAgICAgICAgICAgY29kZWMuY2hhbm5lbHMgPSAxO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZGVsZXRlIGNvZGVjLmNoYW5uZWxzO1xuICAgIH1cbiAgICAvLyBwYXJhbWV0ZXJzIGlzIG9wdGlvbmFsLiBJZiB1bnNldCwgc2V0IGl0IHRvIGFuIGVtcHR5IG9iamVjdC5cbiAgICBpZiAoIWNvZGVjLnBhcmFtZXRlcnMgfHwgdHlwZW9mIGNvZGVjLnBhcmFtZXRlcnMgIT09ICdvYmplY3QnKVxuICAgICAgICBjb2RlYy5wYXJhbWV0ZXJzID0ge307XG4gICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoY29kZWMucGFyYW1ldGVycykpIHtcbiAgICAgICAgbGV0IHZhbHVlID0gY29kZWMucGFyYW1ldGVyc1trZXldO1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29kZWMucGFyYW1ldGVyc1trZXldID0gJyc7XG4gICAgICAgICAgICB2YWx1ZSA9ICcnO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYGludmFsaWQgY29kZWMgcGFyYW1ldGVyIFtrZXk6JHtrZXl9cywgdmFsdWU6JHt2YWx1ZX1dYCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU3BlY2lmaWMgcGFyYW1ldGVycyB2YWxpZGF0aW9uLlxuICAgICAgICBpZiAoa2V5ID09PSAnYXB0Jykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBjb2RlYyBhcHQgcGFyYW1ldGVyJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gcnRjcEZlZWRiYWNrIGlzIG9wdGlvbmFsLiBJZiB1bnNldCwgc2V0IGl0IHRvIGFuIGVtcHR5IGFycmF5LlxuICAgIGlmICghY29kZWMucnRjcEZlZWRiYWNrIHx8ICFBcnJheS5pc0FycmF5KGNvZGVjLnJ0Y3BGZWVkYmFjaykpXG4gICAgICAgIGNvZGVjLnJ0Y3BGZWVkYmFjayA9IFtdO1xuICAgIGZvciAoY29uc3QgZmIgb2YgY29kZWMucnRjcEZlZWRiYWNrKSB7XG4gICAgICAgIHZhbGlkYXRlUnRjcEZlZWRiYWNrKGZiKTtcbiAgICB9XG59XG5leHBvcnRzLnZhbGlkYXRlUnRwQ29kZWNDYXBhYmlsaXR5ID0gdmFsaWRhdGVSdHBDb2RlY0NhcGFiaWxpdHk7XG4vKipcbiAqIFZhbGlkYXRlcyBSdGNwRmVlZGJhY2suIEl0IG1heSBtb2RpZnkgZ2l2ZW4gZGF0YSBieSBhZGRpbmcgbWlzc2luZ1xuICogZmllbGRzIHdpdGggZGVmYXVsdCB2YWx1ZXMuXG4gKiBJdCB0aHJvd3MgaWYgaW52YWxpZC5cbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVSdGNwRmVlZGJhY2soZmIpIHtcbiAgICBpZiAodHlwZW9mIGZiICE9PSAnb2JqZWN0JylcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZmIgaXMgbm90IGFuIG9iamVjdCcpO1xuICAgIC8vIHR5cGUgaXMgbWFuZGF0b3J5LlxuICAgIGlmICghZmIudHlwZSB8fCB0eXBlb2YgZmIudHlwZSAhPT0gJ3N0cmluZycpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ21pc3NpbmcgZmIudHlwZScpO1xuICAgIC8vIHBhcmFtZXRlciBpcyBvcHRpb25hbC4gSWYgdW5zZXQgc2V0IGl0IHRvIGFuIGVtcHR5IHN0cmluZy5cbiAgICBpZiAoIWZiLnBhcmFtZXRlciB8fCB0eXBlb2YgZmIucGFyYW1ldGVyICE9PSAnc3RyaW5nJylcbiAgICAgICAgZmIucGFyYW1ldGVyID0gJyc7XG59XG5leHBvcnRzLnZhbGlkYXRlUnRjcEZlZWRiYWNrID0gdmFsaWRhdGVSdGNwRmVlZGJhY2s7XG4vKipcbiAqIFZhbGlkYXRlcyBSdHBIZWFkZXJFeHRlbnNpb24uIEl0IG1heSBtb2RpZnkgZ2l2ZW4gZGF0YSBieSBhZGRpbmcgbWlzc2luZ1xuICogZmllbGRzIHdpdGggZGVmYXVsdCB2YWx1ZXMuXG4gKiBJdCB0aHJvd3MgaWYgaW52YWxpZC5cbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVSdHBIZWFkZXJFeHRlbnNpb24oZXh0KSB7XG4gICAgaWYgKHR5cGVvZiBleHQgIT09ICdvYmplY3QnKVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleHQgaXMgbm90IGFuIG9iamVjdCcpO1xuICAgIC8vIGtpbmQgaXMgb3B0aW9uYWwuIElmIHVuc2V0IHNldCBpdCB0byBhbiBlbXB0eSBzdHJpbmcuXG4gICAgaWYgKCFleHQua2luZCB8fCB0eXBlb2YgZXh0LmtpbmQgIT09ICdzdHJpbmcnKVxuICAgICAgICBleHQua2luZCA9ICcnO1xuICAgIGlmIChleHQua2luZCAhPT0gJycgJiYgZXh0LmtpbmQgIT09ICdhdWRpbycgJiYgZXh0LmtpbmQgIT09ICd2aWRlbycpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgZXh0LmtpbmQnKTtcbiAgICAvLyB1cmkgaXMgbWFuZGF0b3J5LlxuICAgIGlmICghZXh0LnVyaSB8fCB0eXBlb2YgZXh0LnVyaSAhPT0gJ3N0cmluZycpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ21pc3NpbmcgZXh0LnVyaScpO1xuICAgIC8vIHByZWZlcnJlZElkIGlzIG1hbmRhdG9yeS5cbiAgICBpZiAodHlwZW9mIGV4dC5wcmVmZXJyZWRJZCAhPT0gJ251bWJlcicpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ21pc3NpbmcgZXh0LnByZWZlcnJlZElkJyk7XG4gICAgLy8gcHJlZmVycmVkRW5jcnlwdCBpcyBvcHRpb25hbC4gSWYgdW5zZXQgc2V0IGl0IHRvIGZhbHNlLlxuICAgIGlmIChleHQucHJlZmVycmVkRW5jcnlwdCAmJiB0eXBlb2YgZXh0LnByZWZlcnJlZEVuY3J5cHQgIT09ICdib29sZWFuJylcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBleHQucHJlZmVycmVkRW5jcnlwdCcpO1xuICAgIGVsc2UgaWYgKCFleHQucHJlZmVycmVkRW5jcnlwdClcbiAgICAgICAgZXh0LnByZWZlcnJlZEVuY3J5cHQgPSBmYWxzZTtcbiAgICAvLyBkaXJlY3Rpb24gaXMgb3B0aW9uYWwuIElmIHVuc2V0IHNldCBpdCB0byBzZW5kcmVjdi5cbiAgICBpZiAoZXh0LmRpcmVjdGlvbiAmJiB0eXBlb2YgZXh0LmRpcmVjdGlvbiAhPT0gJ3N0cmluZycpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgZXh0LmRpcmVjdGlvbicpO1xuICAgIGVsc2UgaWYgKCFleHQuZGlyZWN0aW9uKVxuICAgICAgICBleHQuZGlyZWN0aW9uID0gJ3NlbmRyZWN2Jztcbn1cbmV4cG9ydHMudmFsaWRhdGVSdHBIZWFkZXJFeHRlbnNpb24gPSB2YWxpZGF0ZVJ0cEhlYWRlckV4dGVuc2lvbjtcbi8qKlxuICogVmFsaWRhdGVzIFJ0cFBhcmFtZXRlcnMuIEl0IG1heSBtb2RpZnkgZ2l2ZW4gZGF0YSBieSBhZGRpbmcgbWlzc2luZ1xuICogZmllbGRzIHdpdGggZGVmYXVsdCB2YWx1ZXMuXG4gKiBJdCB0aHJvd3MgaWYgaW52YWxpZC5cbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVSdHBQYXJhbWV0ZXJzKHBhcmFtcykge1xuICAgIGlmICh0eXBlb2YgcGFyYW1zICE9PSAnb2JqZWN0JylcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncGFyYW1zIGlzIG5vdCBhbiBvYmplY3QnKTtcbiAgICAvLyBtaWQgaXMgb3B0aW9uYWwuXG4gICAgaWYgKHBhcmFtcy5taWQgJiYgdHlwZW9mIHBhcmFtcy5taWQgIT09ICdzdHJpbmcnKVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdwYXJhbXMubWlkIGlzIG5vdCBhIHN0cmluZycpO1xuICAgIC8vIGNvZGVjcyBpcyBtYW5kYXRvcnkuXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHBhcmFtcy5jb2RlY3MpKVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdtaXNzaW5nIHBhcmFtcy5jb2RlY3MnKTtcbiAgICBmb3IgKGNvbnN0IGNvZGVjIG9mIHBhcmFtcy5jb2RlY3MpIHtcbiAgICAgICAgdmFsaWRhdGVSdHBDb2RlY1BhcmFtZXRlcnMoY29kZWMpO1xuICAgIH1cbiAgICAvLyBoZWFkZXJFeHRlbnNpb25zIGlzIG9wdGlvbmFsLiBJZiB1bnNldCwgZmlsbCB3aXRoIGFuIGVtcHR5IGFycmF5LlxuICAgIGlmIChwYXJhbXMuaGVhZGVyRXh0ZW5zaW9ucyAmJiAhQXJyYXkuaXNBcnJheShwYXJhbXMuaGVhZGVyRXh0ZW5zaW9ucykpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3BhcmFtcy5oZWFkZXJFeHRlbnNpb25zIGlzIG5vdCBhbiBhcnJheScpO1xuICAgIGVsc2UgaWYgKCFwYXJhbXMuaGVhZGVyRXh0ZW5zaW9ucylcbiAgICAgICAgcGFyYW1zLmhlYWRlckV4dGVuc2lvbnMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IGV4dCBvZiBwYXJhbXMuaGVhZGVyRXh0ZW5zaW9ucykge1xuICAgICAgICB2YWxpZGF0ZVJ0cEhlYWRlckV4dGVuc2lvblBhcmFtZXRlcnMoZXh0KTtcbiAgICB9XG4gICAgLy8gZW5jb2RpbmdzIGlzIG9wdGlvbmFsLiBJZiB1bnNldCwgZmlsbCB3aXRoIGFuIGVtcHR5IGFycmF5LlxuICAgIGlmIChwYXJhbXMuZW5jb2RpbmdzICYmICFBcnJheS5pc0FycmF5KHBhcmFtcy5lbmNvZGluZ3MpKVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdwYXJhbXMuZW5jb2RpbmdzIGlzIG5vdCBhbiBhcnJheScpO1xuICAgIGVsc2UgaWYgKCFwYXJhbXMuZW5jb2RpbmdzKVxuICAgICAgICBwYXJhbXMuZW5jb2RpbmdzID0gW107XG4gICAgZm9yIChjb25zdCBlbmNvZGluZyBvZiBwYXJhbXMuZW5jb2RpbmdzKSB7XG4gICAgICAgIHZhbGlkYXRlUnRwRW5jb2RpbmdQYXJhbWV0ZXJzKGVuY29kaW5nKTtcbiAgICB9XG4gICAgLy8gcnRjcCBpcyBvcHRpb25hbC4gSWYgdW5zZXQsIGZpbGwgd2l0aCBhbiBlbXB0eSBvYmplY3QuXG4gICAgaWYgKHBhcmFtcy5ydGNwICYmIHR5cGVvZiBwYXJhbXMucnRjcCAhPT0gJ29iamVjdCcpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3BhcmFtcy5ydGNwIGlzIG5vdCBhbiBvYmplY3QnKTtcbiAgICBlbHNlIGlmICghcGFyYW1zLnJ0Y3ApXG4gICAgICAgIHBhcmFtcy5ydGNwID0ge307XG4gICAgdmFsaWRhdGVSdGNwUGFyYW1ldGVycyhwYXJhbXMucnRjcCk7XG59XG5leHBvcnRzLnZhbGlkYXRlUnRwUGFyYW1ldGVycyA9IHZhbGlkYXRlUnRwUGFyYW1ldGVycztcbi8qKlxuICogVmFsaWRhdGVzIFJ0cENvZGVjUGFyYW1ldGVycy4gSXQgbWF5IG1vZGlmeSBnaXZlbiBkYXRhIGJ5IGFkZGluZyBtaXNzaW5nXG4gKiBmaWVsZHMgd2l0aCBkZWZhdWx0IHZhbHVlcy5cbiAqIEl0IHRocm93cyBpZiBpbnZhbGlkLlxuICovXG5mdW5jdGlvbiB2YWxpZGF0ZVJ0cENvZGVjUGFyYW1ldGVycyhjb2RlYykge1xuICAgIGNvbnN0IE1pbWVUeXBlUmVnZXggPSBuZXcgUmVnRXhwKCdeKGF1ZGlvfHZpZGVvKS8oLispJywgJ2knKTtcbiAgICBpZiAodHlwZW9mIGNvZGVjICE9PSAnb2JqZWN0JylcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignY29kZWMgaXMgbm90IGFuIG9iamVjdCcpO1xuICAgIC8vIG1pbWVUeXBlIGlzIG1hbmRhdG9yeS5cbiAgICBpZiAoIWNvZGVjLm1pbWVUeXBlIHx8IHR5cGVvZiBjb2RlYy5taW1lVHlwZSAhPT0gJ3N0cmluZycpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ21pc3NpbmcgY29kZWMubWltZVR5cGUnKTtcbiAgICBjb25zdCBtaW1lVHlwZU1hdGNoID0gTWltZVR5cGVSZWdleC5leGVjKGNvZGVjLm1pbWVUeXBlKTtcbiAgICBpZiAoIW1pbWVUeXBlTWF0Y2gpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgY29kZWMubWltZVR5cGUnKTtcbiAgICAvLyBwYXlsb2FkVHlwZSBpcyBtYW5kYXRvcnkuXG4gICAgaWYgKHR5cGVvZiBjb2RlYy5wYXlsb2FkVHlwZSAhPT0gJ251bWJlcicpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ21pc3NpbmcgY29kZWMucGF5bG9hZFR5cGUnKTtcbiAgICAvLyBjbG9ja1JhdGUgaXMgbWFuZGF0b3J5LlxuICAgIGlmICh0eXBlb2YgY29kZWMuY2xvY2tSYXRlICE9PSAnbnVtYmVyJylcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbWlzc2luZyBjb2RlYy5jbG9ja1JhdGUnKTtcbiAgICBjb25zdCBraW5kID0gbWltZVR5cGVNYXRjaFsxXS50b0xvd2VyQ2FzZSgpO1xuICAgIC8vIGNoYW5uZWxzIGlzIG9wdGlvbmFsLiBJZiB1bnNldCwgc2V0IGl0IHRvIDEgKGp1c3QgaWYgYXVkaW8pLlxuICAgIGlmIChraW5kID09PSAnYXVkaW8nKSB7XG4gICAgICAgIGlmICh0eXBlb2YgY29kZWMuY2hhbm5lbHMgIT09ICdudW1iZXInKVxuICAgICAgICAgICAgY29kZWMuY2hhbm5lbHMgPSAxO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZGVsZXRlIGNvZGVjLmNoYW5uZWxzO1xuICAgIH1cbiAgICAvLyBwYXJhbWV0ZXJzIGlzIG9wdGlvbmFsLiBJZiB1bnNldCwgc2V0IGl0IHRvIGFuIGVtcHR5IG9iamVjdC5cbiAgICBpZiAoIWNvZGVjLnBhcmFtZXRlcnMgfHwgdHlwZW9mIGNvZGVjLnBhcmFtZXRlcnMgIT09ICdvYmplY3QnKVxuICAgICAgICBjb2RlYy5wYXJhbWV0ZXJzID0ge307XG4gICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoY29kZWMucGFyYW1ldGVycykpIHtcbiAgICAgICAgbGV0IHZhbHVlID0gY29kZWMucGFyYW1ldGVyc1trZXldO1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29kZWMucGFyYW1ldGVyc1trZXldID0gJyc7XG4gICAgICAgICAgICB2YWx1ZSA9ICcnO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYGludmFsaWQgY29kZWMgcGFyYW1ldGVyIFtrZXk6JHtrZXl9cywgdmFsdWU6JHt2YWx1ZX1dYCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU3BlY2lmaWMgcGFyYW1ldGVycyB2YWxpZGF0aW9uLlxuICAgICAgICBpZiAoa2V5ID09PSAnYXB0Jykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBjb2RlYyBhcHQgcGFyYW1ldGVyJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gcnRjcEZlZWRiYWNrIGlzIG9wdGlvbmFsLiBJZiB1bnNldCwgc2V0IGl0IHRvIGFuIGVtcHR5IGFycmF5LlxuICAgIGlmICghY29kZWMucnRjcEZlZWRiYWNrIHx8ICFBcnJheS5pc0FycmF5KGNvZGVjLnJ0Y3BGZWVkYmFjaykpXG4gICAgICAgIGNvZGVjLnJ0Y3BGZWVkYmFjayA9IFtdO1xuICAgIGZvciAoY29uc3QgZmIgb2YgY29kZWMucnRjcEZlZWRiYWNrKSB7XG4gICAgICAgIHZhbGlkYXRlUnRjcEZlZWRiYWNrKGZiKTtcbiAgICB9XG59XG5leHBvcnRzLnZhbGlkYXRlUnRwQ29kZWNQYXJhbWV0ZXJzID0gdmFsaWRhdGVSdHBDb2RlY1BhcmFtZXRlcnM7XG4vKipcbiAqIFZhbGlkYXRlcyBSdHBIZWFkZXJFeHRlbnNpb25QYXJhbWV0ZXRlcnMuIEl0IG1heSBtb2RpZnkgZ2l2ZW4gZGF0YSBieSBhZGRpbmcgbWlzc2luZ1xuICogZmllbGRzIHdpdGggZGVmYXVsdCB2YWx1ZXMuXG4gKiBJdCB0aHJvd3MgaWYgaW52YWxpZC5cbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVSdHBIZWFkZXJFeHRlbnNpb25QYXJhbWV0ZXJzKGV4dCkge1xuICAgIGlmICh0eXBlb2YgZXh0ICE9PSAnb2JqZWN0JylcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXh0IGlzIG5vdCBhbiBvYmplY3QnKTtcbiAgICAvLyB1cmkgaXMgbWFuZGF0b3J5LlxuICAgIGlmICghZXh0LnVyaSB8fCB0eXBlb2YgZXh0LnVyaSAhPT0gJ3N0cmluZycpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ21pc3NpbmcgZXh0LnVyaScpO1xuICAgIC8vIGlkIGlzIG1hbmRhdG9yeS5cbiAgICBpZiAodHlwZW9mIGV4dC5pZCAhPT0gJ251bWJlcicpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ21pc3NpbmcgZXh0LmlkJyk7XG4gICAgLy8gZW5jcnlwdCBpcyBvcHRpb25hbC4gSWYgdW5zZXQgc2V0IGl0IHRvIGZhbHNlLlxuICAgIGlmIChleHQuZW5jcnlwdCAmJiB0eXBlb2YgZXh0LmVuY3J5cHQgIT09ICdib29sZWFuJylcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBleHQuZW5jcnlwdCcpO1xuICAgIGVsc2UgaWYgKCFleHQuZW5jcnlwdClcbiAgICAgICAgZXh0LmVuY3J5cHQgPSBmYWxzZTtcbiAgICAvLyBwYXJhbWV0ZXJzIGlzIG9wdGlvbmFsLiBJZiB1bnNldCwgc2V0IGl0IHRvIGFuIGVtcHR5IG9iamVjdC5cbiAgICBpZiAoIWV4dC5wYXJhbWV0ZXJzIHx8IHR5cGVvZiBleHQucGFyYW1ldGVycyAhPT0gJ29iamVjdCcpXG4gICAgICAgIGV4dC5wYXJhbWV0ZXJzID0ge307XG4gICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoZXh0LnBhcmFtZXRlcnMpKSB7XG4gICAgICAgIGxldCB2YWx1ZSA9IGV4dC5wYXJhbWV0ZXJzW2tleV07XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBleHQucGFyYW1ldGVyc1trZXldID0gJyc7XG4gICAgICAgICAgICB2YWx1ZSA9ICcnO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIGhlYWRlciBleHRlbnNpb24gcGFyYW1ldGVyJyk7XG4gICAgfVxufVxuZXhwb3J0cy52YWxpZGF0ZVJ0cEhlYWRlckV4dGVuc2lvblBhcmFtZXRlcnMgPSB2YWxpZGF0ZVJ0cEhlYWRlckV4dGVuc2lvblBhcmFtZXRlcnM7XG4vKipcbiAqIFZhbGlkYXRlcyBSdHBFbmNvZGluZ1BhcmFtZXRlcnMuIEl0IG1heSBtb2RpZnkgZ2l2ZW4gZGF0YSBieSBhZGRpbmcgbWlzc2luZ1xuICogZmllbGRzIHdpdGggZGVmYXVsdCB2YWx1ZXMuXG4gKiBJdCB0aHJvd3MgaWYgaW52YWxpZC5cbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVSdHBFbmNvZGluZ1BhcmFtZXRlcnMoZW5jb2RpbmcpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nICE9PSAnb2JqZWN0JylcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZW5jb2RpbmcgaXMgbm90IGFuIG9iamVjdCcpO1xuICAgIC8vIHNzcmMgaXMgb3B0aW9uYWwuXG4gICAgaWYgKGVuY29kaW5nLnNzcmMgJiYgdHlwZW9mIGVuY29kaW5nLnNzcmMgIT09ICdudW1iZXInKVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIGVuY29kaW5nLnNzcmMnKTtcbiAgICAvLyByaWQgaXMgb3B0aW9uYWwuXG4gICAgaWYgKGVuY29kaW5nLnJpZCAmJiB0eXBlb2YgZW5jb2RpbmcucmlkICE9PSAnc3RyaW5nJylcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBlbmNvZGluZy5yaWQnKTtcbiAgICAvLyBydHggaXMgb3B0aW9uYWwuXG4gICAgaWYgKGVuY29kaW5nLnJ0eCAmJiB0eXBlb2YgZW5jb2RpbmcucnR4ICE9PSAnb2JqZWN0Jykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIGVuY29kaW5nLnJ0eCcpO1xuICAgIH1cbiAgICBlbHNlIGlmIChlbmNvZGluZy5ydHgpIHtcbiAgICAgICAgLy8gUlRYIHNzcmMgaXMgbWFuZGF0b3J5IGlmIHJ0eCBpcyBwcmVzZW50LlxuICAgICAgICBpZiAodHlwZW9mIGVuY29kaW5nLnJ0eC5zc3JjICE9PSAnbnVtYmVyJylcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ21pc3NpbmcgZW5jb2RpbmcucnR4LnNzcmMnKTtcbiAgICB9XG4gICAgLy8gZHR4IGlzIG9wdGlvbmFsLiBJZiB1bnNldCBzZXQgaXQgdG8gZmFsc2UuXG4gICAgaWYgKCFlbmNvZGluZy5kdHggfHwgdHlwZW9mIGVuY29kaW5nLmR0eCAhPT0gJ2Jvb2xlYW4nKVxuICAgICAgICBlbmNvZGluZy5kdHggPSBmYWxzZTtcbiAgICAvLyBzY2FsYWJpbGl0eU1vZGUgaXMgb3B0aW9uYWwuXG4gICAgaWYgKGVuY29kaW5nLnNjYWxhYmlsaXR5TW9kZSAmJiB0eXBlb2YgZW5jb2Rpbmcuc2NhbGFiaWxpdHlNb2RlICE9PSAnc3RyaW5nJylcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBlbmNvZGluZy5zY2FsYWJpbGl0eU1vZGUnKTtcbn1cbmV4cG9ydHMudmFsaWRhdGVSdHBFbmNvZGluZ1BhcmFtZXRlcnMgPSB2YWxpZGF0ZVJ0cEVuY29kaW5nUGFyYW1ldGVycztcbi8qKlxuICogVmFsaWRhdGVzIFJ0Y3BQYXJhbWV0ZXJzLiBJdCBtYXkgbW9kaWZ5IGdpdmVuIGRhdGEgYnkgYWRkaW5nIG1pc3NpbmdcbiAqIGZpZWxkcyB3aXRoIGRlZmF1bHQgdmFsdWVzLlxuICogSXQgdGhyb3dzIGlmIGludmFsaWQuXG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlUnRjcFBhcmFtZXRlcnMocnRjcCkge1xuICAgIGlmICh0eXBlb2YgcnRjcCAhPT0gJ29iamVjdCcpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3J0Y3AgaXMgbm90IGFuIG9iamVjdCcpO1xuICAgIC8vIGNuYW1lIGlzIG9wdGlvbmFsLlxuICAgIGlmIChydGNwLmNuYW1lICYmIHR5cGVvZiBydGNwLmNuYW1lICE9PSAnc3RyaW5nJylcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBydGNwLmNuYW1lJyk7XG4gICAgLy8gcmVkdWNlZFNpemUgaXMgb3B0aW9uYWwuIElmIHVuc2V0IHNldCBpdCB0byB0cnVlLlxuICAgIGlmICghcnRjcC5yZWR1Y2VkU2l6ZSB8fCB0eXBlb2YgcnRjcC5yZWR1Y2VkU2l6ZSAhPT0gJ2Jvb2xlYW4nKVxuICAgICAgICBydGNwLnJlZHVjZWRTaXplID0gdHJ1ZTtcbn1cbmV4cG9ydHMudmFsaWRhdGVSdGNwUGFyYW1ldGVycyA9IHZhbGlkYXRlUnRjcFBhcmFtZXRlcnM7XG4vKipcbiAqIFZhbGlkYXRlcyBTY3RwQ2FwYWJpbGl0aWVzLiBJdCBtYXkgbW9kaWZ5IGdpdmVuIGRhdGEgYnkgYWRkaW5nIG1pc3NpbmdcbiAqIGZpZWxkcyB3aXRoIGRlZmF1bHQgdmFsdWVzLlxuICogSXQgdGhyb3dzIGlmIGludmFsaWQuXG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlU2N0cENhcGFiaWxpdGllcyhjYXBzKSB7XG4gICAgaWYgKHR5cGVvZiBjYXBzICE9PSAnb2JqZWN0JylcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignY2FwcyBpcyBub3QgYW4gb2JqZWN0Jyk7XG4gICAgLy8gbnVtU3RyZWFtcyBpcyBtYW5kYXRvcnkuXG4gICAgaWYgKCFjYXBzLm51bVN0cmVhbXMgfHwgdHlwZW9mIGNhcHMubnVtU3RyZWFtcyAhPT0gJ29iamVjdCcpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ21pc3NpbmcgY2Fwcy5udW1TdHJlYW1zJyk7XG4gICAgdmFsaWRhdGVOdW1TY3RwU3RyZWFtcyhjYXBzLm51bVN0cmVhbXMpO1xufVxuZXhwb3J0cy52YWxpZGF0ZVNjdHBDYXBhYmlsaXRpZXMgPSB2YWxpZGF0ZVNjdHBDYXBhYmlsaXRpZXM7XG4vKipcbiAqIFZhbGlkYXRlcyBOdW1TY3RwU3RyZWFtcy4gSXQgbWF5IG1vZGlmeSBnaXZlbiBkYXRhIGJ5IGFkZGluZyBtaXNzaW5nXG4gKiBmaWVsZHMgd2l0aCBkZWZhdWx0IHZhbHVlcy5cbiAqIEl0IHRocm93cyBpZiBpbnZhbGlkLlxuICovXG5mdW5jdGlvbiB2YWxpZGF0ZU51bVNjdHBTdHJlYW1zKG51bVN0cmVhbXMpIHtcbiAgICBpZiAodHlwZW9mIG51bVN0cmVhbXMgIT09ICdvYmplY3QnKVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdudW1TdHJlYW1zIGlzIG5vdCBhbiBvYmplY3QnKTtcbiAgICAvLyBPUyBpcyBtYW5kYXRvcnkuXG4gICAgaWYgKHR5cGVvZiBudW1TdHJlYW1zLk9TICE9PSAnbnVtYmVyJylcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbWlzc2luZyBudW1TdHJlYW1zLk9TJyk7XG4gICAgLy8gTUlTIGlzIG1hbmRhdG9yeS5cbiAgICBpZiAodHlwZW9mIG51bVN0cmVhbXMuTUlTICE9PSAnbnVtYmVyJylcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbWlzc2luZyBudW1TdHJlYW1zLk1JUycpO1xufVxuZXhwb3J0cy52YWxpZGF0ZU51bVNjdHBTdHJlYW1zID0gdmFsaWRhdGVOdW1TY3RwU3RyZWFtcztcbi8qKlxuICogVmFsaWRhdGVzIFNjdHBQYXJhbWV0ZXJzLiBJdCBtYXkgbW9kaWZ5IGdpdmVuIGRhdGEgYnkgYWRkaW5nIG1pc3NpbmdcbiAqIGZpZWxkcyB3aXRoIGRlZmF1bHQgdmFsdWVzLlxuICogSXQgdGhyb3dzIGlmIGludmFsaWQuXG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlU2N0cFBhcmFtZXRlcnMocGFyYW1zKSB7XG4gICAgaWYgKHR5cGVvZiBwYXJhbXMgIT09ICdvYmplY3QnKVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdwYXJhbXMgaXMgbm90IGFuIG9iamVjdCcpO1xuICAgIC8vIHBvcnQgaXMgbWFuZGF0b3J5LlxuICAgIGlmICh0eXBlb2YgcGFyYW1zLnBvcnQgIT09ICdudW1iZXInKVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdtaXNzaW5nIHBhcmFtcy5wb3J0Jyk7XG4gICAgLy8gT1MgaXMgbWFuZGF0b3J5LlxuICAgIGlmICh0eXBlb2YgcGFyYW1zLk9TICE9PSAnbnVtYmVyJylcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbWlzc2luZyBwYXJhbXMuT1MnKTtcbiAgICAvLyBNSVMgaXMgbWFuZGF0b3J5LlxuICAgIGlmICh0eXBlb2YgcGFyYW1zLk1JUyAhPT0gJ251bWJlcicpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ21pc3NpbmcgcGFyYW1zLk1JUycpO1xuICAgIC8vIG1heE1lc3NhZ2VTaXplIGlzIG1hbmRhdG9yeS5cbiAgICBpZiAodHlwZW9mIHBhcmFtcy5tYXhNZXNzYWdlU2l6ZSAhPT0gJ251bWJlcicpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ21pc3NpbmcgcGFyYW1zLm1heE1lc3NhZ2VTaXplJyk7XG59XG5leHBvcnRzLnZhbGlkYXRlU2N0cFBhcmFtZXRlcnMgPSB2YWxpZGF0ZVNjdHBQYXJhbWV0ZXJzO1xuLyoqXG4gKiBWYWxpZGF0ZXMgU2N0cFN0cmVhbVBhcmFtZXRlcnMuIEl0IG1heSBtb2RpZnkgZ2l2ZW4gZGF0YSBieSBhZGRpbmcgbWlzc2luZ1xuICogZmllbGRzIHdpdGggZGVmYXVsdCB2YWx1ZXMuXG4gKiBJdCB0aHJvd3MgaWYgaW52YWxpZC5cbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVTY3RwU3RyZWFtUGFyYW1ldGVycyhwYXJhbXMpIHtcbiAgICBpZiAodHlwZW9mIHBhcmFtcyAhPT0gJ29iamVjdCcpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3BhcmFtcyBpcyBub3QgYW4gb2JqZWN0Jyk7XG4gICAgLy8gc3RyZWFtSWQgaXMgbWFuZGF0b3J5LlxuICAgIGlmICh0eXBlb2YgcGFyYW1zLnN0cmVhbUlkICE9PSAnbnVtYmVyJylcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbWlzc2luZyBwYXJhbXMuc3RyZWFtSWQnKTtcbiAgICAvLyBvcmRlcmVkIGlzIG9wdGlvbmFsLlxuICAgIGxldCBvcmRlcmVkR2l2ZW4gPSBmYWxzZTtcbiAgICBpZiAodHlwZW9mIHBhcmFtcy5vcmRlcmVkID09PSAnYm9vbGVhbicpXG4gICAgICAgIG9yZGVyZWRHaXZlbiA9IHRydWU7XG4gICAgZWxzZVxuICAgICAgICBwYXJhbXMub3JkZXJlZCA9IHRydWU7XG4gICAgLy8gbWF4UGFja2V0TGlmZVRpbWUgaXMgb3B0aW9uYWwuXG4gICAgaWYgKHBhcmFtcy5tYXhQYWNrZXRMaWZlVGltZSAmJiB0eXBlb2YgcGFyYW1zLm1heFBhY2tldExpZmVUaW1lICE9PSAnbnVtYmVyJylcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBwYXJhbXMubWF4UGFja2V0TGlmZVRpbWUnKTtcbiAgICAvLyBtYXhSZXRyYW5zbWl0cyBpcyBvcHRpb25hbC5cbiAgICBpZiAocGFyYW1zLm1heFJldHJhbnNtaXRzICYmIHR5cGVvZiBwYXJhbXMubWF4UmV0cmFuc21pdHMgIT09ICdudW1iZXInKVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHBhcmFtcy5tYXhSZXRyYW5zbWl0cycpO1xuICAgIGlmIChwYXJhbXMubWF4UGFja2V0TGlmZVRpbWUgJiYgcGFyYW1zLm1heFJldHJhbnNtaXRzKVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdjYW5ub3QgcHJvdmlkZSBib3RoIG1heFBhY2tldExpZmVUaW1lIGFuZCBtYXhSZXRyYW5zbWl0cycpO1xuICAgIGlmIChvcmRlcmVkR2l2ZW4gJiZcbiAgICAgICAgcGFyYW1zLm9yZGVyZWQgJiZcbiAgICAgICAgKHBhcmFtcy5tYXhQYWNrZXRMaWZlVGltZSB8fCBwYXJhbXMubWF4UmV0cmFuc21pdHMpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2Nhbm5vdCBiZSBvcmRlcmVkIHdpdGggbWF4UGFja2V0TGlmZVRpbWUgb3IgbWF4UmV0cmFuc21pdHMnKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoIW9yZGVyZWRHaXZlbiAmJiAocGFyYW1zLm1heFBhY2tldExpZmVUaW1lIHx8IHBhcmFtcy5tYXhSZXRyYW5zbWl0cykpIHtcbiAgICAgICAgcGFyYW1zLm9yZGVyZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgLy8gcHJpb3JpdHkgaXMgb3B0aW9uYWwuXG4gICAgaWYgKHBhcmFtcy5wcmlvcml0eSAmJiB0eXBlb2YgcGFyYW1zLnByaW9yaXR5ICE9PSAnc3RyaW5nJylcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBwYXJhbXMucHJpb3JpdHknKTtcbiAgICAvLyBsYWJlbCBpcyBvcHRpb25hbC5cbiAgICBpZiAocGFyYW1zLmxhYmVsICYmIHR5cGVvZiBwYXJhbXMubGFiZWwgIT09ICdzdHJpbmcnKVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHBhcmFtcy5sYWJlbCcpO1xuICAgIC8vIHByb3RvY29sIGlzIG9wdGlvbmFsLlxuICAgIGlmIChwYXJhbXMucHJvdG9jb2wgJiYgdHlwZW9mIHBhcmFtcy5wcm90b2NvbCAhPT0gJ3N0cmluZycpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgcGFyYW1zLnByb3RvY29sJyk7XG59XG5leHBvcnRzLnZhbGlkYXRlU2N0cFN0cmVhbVBhcmFtZXRlcnMgPSB2YWxpZGF0ZVNjdHBTdHJlYW1QYXJhbWV0ZXJzO1xuLyoqXG4gKiBHZW5lcmF0ZSBleHRlbmRlZCBSVFAgY2FwYWJpbGl0aWVzIGZvciBzZW5kaW5nIGFuZCByZWNlaXZpbmcuXG4gKi9cbmZ1bmN0aW9uIGdldEV4dGVuZGVkUnRwQ2FwYWJpbGl0aWVzKGxvY2FsQ2FwcywgcmVtb3RlQ2Fwcykge1xuICAgIGNvbnN0IGV4dGVuZGVkUnRwQ2FwYWJpbGl0aWVzID0ge1xuICAgICAgICBjb2RlY3M6IFtdLFxuICAgICAgICBoZWFkZXJFeHRlbnNpb25zOiBbXVxuICAgIH07XG4gICAgLy8gTWF0Y2ggbWVkaWEgY29kZWNzIGFuZCBrZWVwIHRoZSBvcmRlciBwcmVmZXJyZWQgYnkgcmVtb3RlQ2Fwcy5cbiAgICBmb3IgKGNvbnN0IHJlbW90ZUNvZGVjIG9mIHJlbW90ZUNhcHMuY29kZWNzIHx8IFtdKSB7XG4gICAgICAgIGlmIChpc1J0eENvZGVjKHJlbW90ZUNvZGVjKSlcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjb25zdCBtYXRjaGluZ0xvY2FsQ29kZWMgPSAobG9jYWxDYXBzLmNvZGVjcyB8fCBbXSlcbiAgICAgICAgICAgIC5maW5kKChsb2NhbENvZGVjKSA9PiAobWF0Y2hDb2RlY3MobG9jYWxDb2RlYywgcmVtb3RlQ29kZWMsIHsgc3RyaWN0OiB0cnVlLCBtb2RpZnk6IHRydWUgfSkpKTtcbiAgICAgICAgaWYgKCFtYXRjaGluZ0xvY2FsQ29kZWMpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY29uc3QgZXh0ZW5kZWRDb2RlYyA9IHtcbiAgICAgICAgICAgIG1pbWVUeXBlOiBtYXRjaGluZ0xvY2FsQ29kZWMubWltZVR5cGUsXG4gICAgICAgICAgICBraW5kOiBtYXRjaGluZ0xvY2FsQ29kZWMua2luZCxcbiAgICAgICAgICAgIGNsb2NrUmF0ZTogbWF0Y2hpbmdMb2NhbENvZGVjLmNsb2NrUmF0ZSxcbiAgICAgICAgICAgIGNoYW5uZWxzOiBtYXRjaGluZ0xvY2FsQ29kZWMuY2hhbm5lbHMsXG4gICAgICAgICAgICBsb2NhbFBheWxvYWRUeXBlOiBtYXRjaGluZ0xvY2FsQ29kZWMucHJlZmVycmVkUGF5bG9hZFR5cGUsXG4gICAgICAgICAgICBsb2NhbFJ0eFBheWxvYWRUeXBlOiB1bmRlZmluZWQsXG4gICAgICAgICAgICByZW1vdGVQYXlsb2FkVHlwZTogcmVtb3RlQ29kZWMucHJlZmVycmVkUGF5bG9hZFR5cGUsXG4gICAgICAgICAgICByZW1vdGVSdHhQYXlsb2FkVHlwZTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgbG9jYWxQYXJhbWV0ZXJzOiBtYXRjaGluZ0xvY2FsQ29kZWMucGFyYW1ldGVycyxcbiAgICAgICAgICAgIHJlbW90ZVBhcmFtZXRlcnM6IHJlbW90ZUNvZGVjLnBhcmFtZXRlcnMsXG4gICAgICAgICAgICBydGNwRmVlZGJhY2s6IHJlZHVjZVJ0Y3BGZWVkYmFjayhtYXRjaGluZ0xvY2FsQ29kZWMsIHJlbW90ZUNvZGVjKVxuICAgICAgICB9O1xuICAgICAgICBleHRlbmRlZFJ0cENhcGFiaWxpdGllcy5jb2RlY3MucHVzaChleHRlbmRlZENvZGVjKTtcbiAgICB9XG4gICAgLy8gTWF0Y2ggUlRYIGNvZGVjcy5cbiAgICBmb3IgKGNvbnN0IGV4dGVuZGVkQ29kZWMgb2YgZXh0ZW5kZWRSdHBDYXBhYmlsaXRpZXMuY29kZWNzKSB7XG4gICAgICAgIGNvbnN0IG1hdGNoaW5nTG9jYWxSdHhDb2RlYyA9IGxvY2FsQ2Fwcy5jb2RlY3NcbiAgICAgICAgICAgIC5maW5kKChsb2NhbENvZGVjKSA9PiAoaXNSdHhDb2RlYyhsb2NhbENvZGVjKSAmJlxuICAgICAgICAgICAgbG9jYWxDb2RlYy5wYXJhbWV0ZXJzLmFwdCA9PT0gZXh0ZW5kZWRDb2RlYy5sb2NhbFBheWxvYWRUeXBlKSk7XG4gICAgICAgIGNvbnN0IG1hdGNoaW5nUmVtb3RlUnR4Q29kZWMgPSByZW1vdGVDYXBzLmNvZGVjc1xuICAgICAgICAgICAgLmZpbmQoKHJlbW90ZUNvZGVjKSA9PiAoaXNSdHhDb2RlYyhyZW1vdGVDb2RlYykgJiZcbiAgICAgICAgICAgIHJlbW90ZUNvZGVjLnBhcmFtZXRlcnMuYXB0ID09PSBleHRlbmRlZENvZGVjLnJlbW90ZVBheWxvYWRUeXBlKSk7XG4gICAgICAgIGlmIChtYXRjaGluZ0xvY2FsUnR4Q29kZWMgJiYgbWF0Y2hpbmdSZW1vdGVSdHhDb2RlYykge1xuICAgICAgICAgICAgZXh0ZW5kZWRDb2RlYy5sb2NhbFJ0eFBheWxvYWRUeXBlID0gbWF0Y2hpbmdMb2NhbFJ0eENvZGVjLnByZWZlcnJlZFBheWxvYWRUeXBlO1xuICAgICAgICAgICAgZXh0ZW5kZWRDb2RlYy5yZW1vdGVSdHhQYXlsb2FkVHlwZSA9IG1hdGNoaW5nUmVtb3RlUnR4Q29kZWMucHJlZmVycmVkUGF5bG9hZFR5cGU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gTWF0Y2ggaGVhZGVyIGV4dGVuc2lvbnMuXG4gICAgZm9yIChjb25zdCByZW1vdGVFeHQgb2YgcmVtb3RlQ2Fwcy5oZWFkZXJFeHRlbnNpb25zKSB7XG4gICAgICAgIGNvbnN0IG1hdGNoaW5nTG9jYWxFeHQgPSBsb2NhbENhcHMuaGVhZGVyRXh0ZW5zaW9uc1xuICAgICAgICAgICAgLmZpbmQoKGxvY2FsRXh0KSA9PiAobWF0Y2hIZWFkZXJFeHRlbnNpb25zKGxvY2FsRXh0LCByZW1vdGVFeHQpKSk7XG4gICAgICAgIGlmICghbWF0Y2hpbmdMb2NhbEV4dClcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjb25zdCBleHRlbmRlZEV4dCA9IHtcbiAgICAgICAgICAgIGtpbmQ6IHJlbW90ZUV4dC5raW5kLFxuICAgICAgICAgICAgdXJpOiByZW1vdGVFeHQudXJpLFxuICAgICAgICAgICAgc2VuZElkOiBtYXRjaGluZ0xvY2FsRXh0LnByZWZlcnJlZElkLFxuICAgICAgICAgICAgcmVjdklkOiByZW1vdGVFeHQucHJlZmVycmVkSWQsXG4gICAgICAgICAgICBlbmNyeXB0OiBtYXRjaGluZ0xvY2FsRXh0LnByZWZlcnJlZEVuY3J5cHQsXG4gICAgICAgICAgICBkaXJlY3Rpb246ICdzZW5kcmVjdidcbiAgICAgICAgfTtcbiAgICAgICAgc3dpdGNoIChyZW1vdGVFeHQuZGlyZWN0aW9uKSB7XG4gICAgICAgICAgICBjYXNlICdzZW5kcmVjdic6XG4gICAgICAgICAgICAgICAgZXh0ZW5kZWRFeHQuZGlyZWN0aW9uID0gJ3NlbmRyZWN2JztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3JlY3Zvbmx5JzpcbiAgICAgICAgICAgICAgICBleHRlbmRlZEV4dC5kaXJlY3Rpb24gPSAnc2VuZG9ubHknO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnc2VuZG9ubHknOlxuICAgICAgICAgICAgICAgIGV4dGVuZGVkRXh0LmRpcmVjdGlvbiA9ICdyZWN2b25seSc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdpbmFjdGl2ZSc6XG4gICAgICAgICAgICAgICAgZXh0ZW5kZWRFeHQuZGlyZWN0aW9uID0gJ2luYWN0aXZlJztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBleHRlbmRlZFJ0cENhcGFiaWxpdGllcy5oZWFkZXJFeHRlbnNpb25zLnB1c2goZXh0ZW5kZWRFeHQpO1xuICAgIH1cbiAgICByZXR1cm4gZXh0ZW5kZWRSdHBDYXBhYmlsaXRpZXM7XG59XG5leHBvcnRzLmdldEV4dGVuZGVkUnRwQ2FwYWJpbGl0aWVzID0gZ2V0RXh0ZW5kZWRSdHBDYXBhYmlsaXRpZXM7XG4vKipcbiAqIEdlbmVyYXRlIFJUUCBjYXBhYmlsaXRpZXMgZm9yIHJlY2VpdmluZyBtZWRpYSBiYXNlZCBvbiB0aGUgZ2l2ZW4gZXh0ZW5kZWRcbiAqIFJUUCBjYXBhYmlsaXRpZXMuXG4gKi9cbmZ1bmN0aW9uIGdldFJlY3ZSdHBDYXBhYmlsaXRpZXMoZXh0ZW5kZWRSdHBDYXBhYmlsaXRpZXMpIHtcbiAgICBjb25zdCBydHBDYXBhYmlsaXRpZXMgPSB7XG4gICAgICAgIGNvZGVjczogW10sXG4gICAgICAgIGhlYWRlckV4dGVuc2lvbnM6IFtdXG4gICAgfTtcbiAgICBmb3IgKGNvbnN0IGV4dGVuZGVkQ29kZWMgb2YgZXh0ZW5kZWRSdHBDYXBhYmlsaXRpZXMuY29kZWNzKSB7XG4gICAgICAgIGNvbnN0IGNvZGVjID0ge1xuICAgICAgICAgICAgbWltZVR5cGU6IGV4dGVuZGVkQ29kZWMubWltZVR5cGUsXG4gICAgICAgICAgICBraW5kOiBleHRlbmRlZENvZGVjLmtpbmQsXG4gICAgICAgICAgICBwcmVmZXJyZWRQYXlsb2FkVHlwZTogZXh0ZW5kZWRDb2RlYy5yZW1vdGVQYXlsb2FkVHlwZSxcbiAgICAgICAgICAgIGNsb2NrUmF0ZTogZXh0ZW5kZWRDb2RlYy5jbG9ja1JhdGUsXG4gICAgICAgICAgICBjaGFubmVsczogZXh0ZW5kZWRDb2RlYy5jaGFubmVscyxcbiAgICAgICAgICAgIHBhcmFtZXRlcnM6IGV4dGVuZGVkQ29kZWMubG9jYWxQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgcnRjcEZlZWRiYWNrOiBleHRlbmRlZENvZGVjLnJ0Y3BGZWVkYmFja1xuICAgICAgICB9O1xuICAgICAgICBydHBDYXBhYmlsaXRpZXMuY29kZWNzLnB1c2goY29kZWMpO1xuICAgICAgICAvLyBBZGQgUlRYIGNvZGVjLlxuICAgICAgICBpZiAoIWV4dGVuZGVkQ29kZWMucmVtb3RlUnR4UGF5bG9hZFR5cGUpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY29uc3QgcnR4Q29kZWMgPSB7XG4gICAgICAgICAgICBtaW1lVHlwZTogYCR7ZXh0ZW5kZWRDb2RlYy5raW5kfS9ydHhgLFxuICAgICAgICAgICAga2luZDogZXh0ZW5kZWRDb2RlYy5raW5kLFxuICAgICAgICAgICAgcHJlZmVycmVkUGF5bG9hZFR5cGU6IGV4dGVuZGVkQ29kZWMucmVtb3RlUnR4UGF5bG9hZFR5cGUsXG4gICAgICAgICAgICBjbG9ja1JhdGU6IGV4dGVuZGVkQ29kZWMuY2xvY2tSYXRlLFxuICAgICAgICAgICAgcGFyYW1ldGVyczoge1xuICAgICAgICAgICAgICAgIGFwdDogZXh0ZW5kZWRDb2RlYy5yZW1vdGVQYXlsb2FkVHlwZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJ0Y3BGZWVkYmFjazogW11cbiAgICAgICAgfTtcbiAgICAgICAgcnRwQ2FwYWJpbGl0aWVzLmNvZGVjcy5wdXNoKHJ0eENvZGVjKTtcbiAgICAgICAgLy8gVE9ETzogSW4gdGhlIGZ1dHVyZSwgd2UgbmVlZCB0byBhZGQgRkVDLCBDTiwgZXRjLCBjb2RlY3MuXG4gICAgfVxuICAgIGZvciAoY29uc3QgZXh0ZW5kZWRFeHRlbnNpb24gb2YgZXh0ZW5kZWRSdHBDYXBhYmlsaXRpZXMuaGVhZGVyRXh0ZW5zaW9ucykge1xuICAgICAgICAvLyBJZ25vcmUgUlRQIGV4dGVuc2lvbnMgbm90IHZhbGlkIGZvciByZWNlaXZpbmcuXG4gICAgICAgIGlmIChleHRlbmRlZEV4dGVuc2lvbi5kaXJlY3Rpb24gIT09ICdzZW5kcmVjdicgJiZcbiAgICAgICAgICAgIGV4dGVuZGVkRXh0ZW5zaW9uLmRpcmVjdGlvbiAhPT0gJ3JlY3Zvbmx5Jykge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZXh0ID0ge1xuICAgICAgICAgICAga2luZDogZXh0ZW5kZWRFeHRlbnNpb24ua2luZCxcbiAgICAgICAgICAgIHVyaTogZXh0ZW5kZWRFeHRlbnNpb24udXJpLFxuICAgICAgICAgICAgcHJlZmVycmVkSWQ6IGV4dGVuZGVkRXh0ZW5zaW9uLnJlY3ZJZCxcbiAgICAgICAgICAgIHByZWZlcnJlZEVuY3J5cHQ6IGV4dGVuZGVkRXh0ZW5zaW9uLmVuY3J5cHQsXG4gICAgICAgICAgICBkaXJlY3Rpb246IGV4dGVuZGVkRXh0ZW5zaW9uLmRpcmVjdGlvblxuICAgICAgICB9O1xuICAgICAgICBydHBDYXBhYmlsaXRpZXMuaGVhZGVyRXh0ZW5zaW9ucy5wdXNoKGV4dCk7XG4gICAgfVxuICAgIHJldHVybiBydHBDYXBhYmlsaXRpZXM7XG59XG5leHBvcnRzLmdldFJlY3ZSdHBDYXBhYmlsaXRpZXMgPSBnZXRSZWN2UnRwQ2FwYWJpbGl0aWVzO1xuLyoqXG4gKiBHZW5lcmF0ZSBSVFAgcGFyYW1ldGVycyBvZiB0aGUgZ2l2ZW4ga2luZCBmb3Igc2VuZGluZyBtZWRpYS5cbiAqIE5PVEU6IG1pZCwgZW5jb2RpbmdzIGFuZCBydGNwIGZpZWxkcyBhcmUgbGVmdCBlbXB0eS5cbiAqL1xuZnVuY3Rpb24gZ2V0U2VuZGluZ1J0cFBhcmFtZXRlcnMoa2luZCwgZXh0ZW5kZWRSdHBDYXBhYmlsaXRpZXMpIHtcbiAgICBjb25zdCBydHBQYXJhbWV0ZXJzID0ge1xuICAgICAgICBtaWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgY29kZWNzOiBbXSxcbiAgICAgICAgaGVhZGVyRXh0ZW5zaW9uczogW10sXG4gICAgICAgIGVuY29kaW5nczogW10sXG4gICAgICAgIHJ0Y3A6IHt9XG4gICAgfTtcbiAgICBmb3IgKGNvbnN0IGV4dGVuZGVkQ29kZWMgb2YgZXh0ZW5kZWRSdHBDYXBhYmlsaXRpZXMuY29kZWNzKSB7XG4gICAgICAgIGlmIChleHRlbmRlZENvZGVjLmtpbmQgIT09IGtpbmQpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY29uc3QgY29kZWMgPSB7XG4gICAgICAgICAgICBtaW1lVHlwZTogZXh0ZW5kZWRDb2RlYy5taW1lVHlwZSxcbiAgICAgICAgICAgIHBheWxvYWRUeXBlOiBleHRlbmRlZENvZGVjLmxvY2FsUGF5bG9hZFR5cGUsXG4gICAgICAgICAgICBjbG9ja1JhdGU6IGV4dGVuZGVkQ29kZWMuY2xvY2tSYXRlLFxuICAgICAgICAgICAgY2hhbm5lbHM6IGV4dGVuZGVkQ29kZWMuY2hhbm5lbHMsXG4gICAgICAgICAgICBwYXJhbWV0ZXJzOiBleHRlbmRlZENvZGVjLmxvY2FsUGFyYW1ldGVycyxcbiAgICAgICAgICAgIHJ0Y3BGZWVkYmFjazogZXh0ZW5kZWRDb2RlYy5ydGNwRmVlZGJhY2tcbiAgICAgICAgfTtcbiAgICAgICAgcnRwUGFyYW1ldGVycy5jb2RlY3MucHVzaChjb2RlYyk7XG4gICAgICAgIC8vIEFkZCBSVFggY29kZWMuXG4gICAgICAgIGlmIChleHRlbmRlZENvZGVjLmxvY2FsUnR4UGF5bG9hZFR5cGUpIHtcbiAgICAgICAgICAgIGNvbnN0IHJ0eENvZGVjID0ge1xuICAgICAgICAgICAgICAgIG1pbWVUeXBlOiBgJHtleHRlbmRlZENvZGVjLmtpbmR9L3J0eGAsXG4gICAgICAgICAgICAgICAgcGF5bG9hZFR5cGU6IGV4dGVuZGVkQ29kZWMubG9jYWxSdHhQYXlsb2FkVHlwZSxcbiAgICAgICAgICAgICAgICBjbG9ja1JhdGU6IGV4dGVuZGVkQ29kZWMuY2xvY2tSYXRlLFxuICAgICAgICAgICAgICAgIHBhcmFtZXRlcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgYXB0OiBleHRlbmRlZENvZGVjLmxvY2FsUGF5bG9hZFR5cGVcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHJ0Y3BGZWVkYmFjazogW11cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBydHBQYXJhbWV0ZXJzLmNvZGVjcy5wdXNoKHJ0eENvZGVjKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IGV4dGVuZGVkRXh0ZW5zaW9uIG9mIGV4dGVuZGVkUnRwQ2FwYWJpbGl0aWVzLmhlYWRlckV4dGVuc2lvbnMpIHtcbiAgICAgICAgLy8gSWdub3JlIFJUUCBleHRlbnNpb25zIG9mIGEgZGlmZmVyZW50IGtpbmQgYW5kIHRob3NlIG5vdCB2YWxpZCBmb3Igc2VuZGluZy5cbiAgICAgICAgaWYgKChleHRlbmRlZEV4dGVuc2lvbi5raW5kICYmIGV4dGVuZGVkRXh0ZW5zaW9uLmtpbmQgIT09IGtpbmQpIHx8XG4gICAgICAgICAgICAoZXh0ZW5kZWRFeHRlbnNpb24uZGlyZWN0aW9uICE9PSAnc2VuZHJlY3YnICYmXG4gICAgICAgICAgICAgICAgZXh0ZW5kZWRFeHRlbnNpb24uZGlyZWN0aW9uICE9PSAnc2VuZG9ubHknKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZXh0ID0ge1xuICAgICAgICAgICAgdXJpOiBleHRlbmRlZEV4dGVuc2lvbi51cmksXG4gICAgICAgICAgICBpZDogZXh0ZW5kZWRFeHRlbnNpb24uc2VuZElkLFxuICAgICAgICAgICAgZW5jcnlwdDogZXh0ZW5kZWRFeHRlbnNpb24uZW5jcnlwdCxcbiAgICAgICAgICAgIHBhcmFtZXRlcnM6IHt9XG4gICAgICAgIH07XG4gICAgICAgIHJ0cFBhcmFtZXRlcnMuaGVhZGVyRXh0ZW5zaW9ucy5wdXNoKGV4dCk7XG4gICAgfVxuICAgIHJldHVybiBydHBQYXJhbWV0ZXJzO1xufVxuZXhwb3J0cy5nZXRTZW5kaW5nUnRwUGFyYW1ldGVycyA9IGdldFNlbmRpbmdSdHBQYXJhbWV0ZXJzO1xuLyoqXG4gKiBHZW5lcmF0ZSBSVFAgcGFyYW1ldGVycyBvZiB0aGUgZ2l2ZW4ga2luZCBzdWl0YWJsZSBmb3IgdGhlIHJlbW90ZSBTRFAgYW5zd2VyLlxuICovXG5mdW5jdGlvbiBnZXRTZW5kaW5nUmVtb3RlUnRwUGFyYW1ldGVycyhraW5kLCBleHRlbmRlZFJ0cENhcGFiaWxpdGllcykge1xuICAgIGNvbnN0IHJ0cFBhcmFtZXRlcnMgPSB7XG4gICAgICAgIG1pZDogdW5kZWZpbmVkLFxuICAgICAgICBjb2RlY3M6IFtdLFxuICAgICAgICBoZWFkZXJFeHRlbnNpb25zOiBbXSxcbiAgICAgICAgZW5jb2RpbmdzOiBbXSxcbiAgICAgICAgcnRjcDoge31cbiAgICB9O1xuICAgIGZvciAoY29uc3QgZXh0ZW5kZWRDb2RlYyBvZiBleHRlbmRlZFJ0cENhcGFiaWxpdGllcy5jb2RlY3MpIHtcbiAgICAgICAgaWYgKGV4dGVuZGVkQ29kZWMua2luZCAhPT0ga2luZClcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjb25zdCBjb2RlYyA9IHtcbiAgICAgICAgICAgIG1pbWVUeXBlOiBleHRlbmRlZENvZGVjLm1pbWVUeXBlLFxuICAgICAgICAgICAgcGF5bG9hZFR5cGU6IGV4dGVuZGVkQ29kZWMubG9jYWxQYXlsb2FkVHlwZSxcbiAgICAgICAgICAgIGNsb2NrUmF0ZTogZXh0ZW5kZWRDb2RlYy5jbG9ja1JhdGUsXG4gICAgICAgICAgICBjaGFubmVsczogZXh0ZW5kZWRDb2RlYy5jaGFubmVscyxcbiAgICAgICAgICAgIHBhcmFtZXRlcnM6IGV4dGVuZGVkQ29kZWMucmVtb3RlUGFyYW1ldGVycyxcbiAgICAgICAgICAgIHJ0Y3BGZWVkYmFjazogZXh0ZW5kZWRDb2RlYy5ydGNwRmVlZGJhY2tcbiAgICAgICAgfTtcbiAgICAgICAgcnRwUGFyYW1ldGVycy5jb2RlY3MucHVzaChjb2RlYyk7XG4gICAgICAgIC8vIEFkZCBSVFggY29kZWMuXG4gICAgICAgIGlmIChleHRlbmRlZENvZGVjLmxvY2FsUnR4UGF5bG9hZFR5cGUpIHtcbiAgICAgICAgICAgIGNvbnN0IHJ0eENvZGVjID0ge1xuICAgICAgICAgICAgICAgIG1pbWVUeXBlOiBgJHtleHRlbmRlZENvZGVjLmtpbmR9L3J0eGAsXG4gICAgICAgICAgICAgICAgcGF5bG9hZFR5cGU6IGV4dGVuZGVkQ29kZWMubG9jYWxSdHhQYXlsb2FkVHlwZSxcbiAgICAgICAgICAgICAgICBjbG9ja1JhdGU6IGV4dGVuZGVkQ29kZWMuY2xvY2tSYXRlLFxuICAgICAgICAgICAgICAgIHBhcmFtZXRlcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgYXB0OiBleHRlbmRlZENvZGVjLmxvY2FsUGF5bG9hZFR5cGVcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHJ0Y3BGZWVkYmFjazogW11cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBydHBQYXJhbWV0ZXJzLmNvZGVjcy5wdXNoKHJ0eENvZGVjKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IGV4dGVuZGVkRXh0ZW5zaW9uIG9mIGV4dGVuZGVkUnRwQ2FwYWJpbGl0aWVzLmhlYWRlckV4dGVuc2lvbnMpIHtcbiAgICAgICAgLy8gSWdub3JlIFJUUCBleHRlbnNpb25zIG9mIGEgZGlmZmVyZW50IGtpbmQgYW5kIHRob3NlIG5vdCB2YWxpZCBmb3Igc2VuZGluZy5cbiAgICAgICAgaWYgKChleHRlbmRlZEV4dGVuc2lvbi5raW5kICYmIGV4dGVuZGVkRXh0ZW5zaW9uLmtpbmQgIT09IGtpbmQpIHx8XG4gICAgICAgICAgICAoZXh0ZW5kZWRFeHRlbnNpb24uZGlyZWN0aW9uICE9PSAnc2VuZHJlY3YnICYmXG4gICAgICAgICAgICAgICAgZXh0ZW5kZWRFeHRlbnNpb24uZGlyZWN0aW9uICE9PSAnc2VuZG9ubHknKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZXh0ID0ge1xuICAgICAgICAgICAgdXJpOiBleHRlbmRlZEV4dGVuc2lvbi51cmksXG4gICAgICAgICAgICBpZDogZXh0ZW5kZWRFeHRlbnNpb24uc2VuZElkLFxuICAgICAgICAgICAgZW5jcnlwdDogZXh0ZW5kZWRFeHRlbnNpb24uZW5jcnlwdCxcbiAgICAgICAgICAgIHBhcmFtZXRlcnM6IHt9XG4gICAgICAgIH07XG4gICAgICAgIHJ0cFBhcmFtZXRlcnMuaGVhZGVyRXh0ZW5zaW9ucy5wdXNoKGV4dCk7XG4gICAgfVxuICAgIC8vIFJlZHVjZSBjb2RlY3MnIFJUQ1AgZmVlZGJhY2suIFVzZSBUcmFuc3BvcnQtQ0MgaWYgYXZhaWxhYmxlLCBSRU1CIG90aGVyd2lzZS5cbiAgICBpZiAocnRwUGFyYW1ldGVycy5oZWFkZXJFeHRlbnNpb25zLnNvbWUoKGV4dCkgPT4gKGV4dC51cmkgPT09ICdodHRwOi8vd3d3LmlldGYub3JnL2lkL2RyYWZ0LWhvbG1lci1ybWNhdC10cmFuc3BvcnQtd2lkZS1jYy1leHRlbnNpb25zLTAxJykpKSB7XG4gICAgICAgIGZvciAoY29uc3QgY29kZWMgb2YgcnRwUGFyYW1ldGVycy5jb2RlY3MpIHtcbiAgICAgICAgICAgIGNvZGVjLnJ0Y3BGZWVkYmFjayA9IChjb2RlYy5ydGNwRmVlZGJhY2sgfHwgW10pXG4gICAgICAgICAgICAgICAgLmZpbHRlcigoZmIpID0+IGZiLnR5cGUgIT09ICdnb29nLXJlbWInKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChydHBQYXJhbWV0ZXJzLmhlYWRlckV4dGVuc2lvbnMuc29tZSgoZXh0KSA9PiAoZXh0LnVyaSA9PT0gJ2h0dHA6Ly93d3cud2VicnRjLm9yZy9leHBlcmltZW50cy9ydHAtaGRyZXh0L2Ficy1zZW5kLXRpbWUnKSkpIHtcbiAgICAgICAgZm9yIChjb25zdCBjb2RlYyBvZiBydHBQYXJhbWV0ZXJzLmNvZGVjcykge1xuICAgICAgICAgICAgY29kZWMucnRjcEZlZWRiYWNrID0gKGNvZGVjLnJ0Y3BGZWVkYmFjayB8fCBbXSlcbiAgICAgICAgICAgICAgICAuZmlsdGVyKChmYikgPT4gZmIudHlwZSAhPT0gJ3RyYW5zcG9ydC1jYycpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBmb3IgKGNvbnN0IGNvZGVjIG9mIHJ0cFBhcmFtZXRlcnMuY29kZWNzKSB7XG4gICAgICAgICAgICBjb2RlYy5ydGNwRmVlZGJhY2sgPSAoY29kZWMucnRjcEZlZWRiYWNrIHx8IFtdKVxuICAgICAgICAgICAgICAgIC5maWx0ZXIoKGZiKSA9PiAoZmIudHlwZSAhPT0gJ3RyYW5zcG9ydC1jYycgJiZcbiAgICAgICAgICAgICAgICBmYi50eXBlICE9PSAnZ29vZy1yZW1iJykpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBydHBQYXJhbWV0ZXJzO1xufVxuZXhwb3J0cy5nZXRTZW5kaW5nUmVtb3RlUnRwUGFyYW1ldGVycyA9IGdldFNlbmRpbmdSZW1vdGVSdHBQYXJhbWV0ZXJzO1xuLyoqXG4gKiBSZWR1Y2UgZ2l2ZW4gY29kZWNzIGJ5IHJldHVybmluZyBhbiBhcnJheSBvZiBjb2RlY3MgXCJjb21wYXRpYmxlXCIgd2l0aCB0aGVcbiAqIGdpdmVuIGNhcGFiaWxpdHkgY29kZWMuIElmIG5vIGNhcGFiaWxpdHkgY29kZWMgaXMgZ2l2ZW4sIHRha2UgdGhlIGZpcnN0XG4gKiBvbmUocykuXG4gKlxuICogR2l2ZW4gY29kZWNzIG11c3QgYmUgZ2VuZXJhdGVkIGJ5IG9ydGMuZ2V0U2VuZGluZ1J0cFBhcmFtZXRlcnMoKSBvclxuICogb3J0Yy5nZXRTZW5kaW5nUmVtb3RlUnRwUGFyYW1ldGVycygpLlxuICpcbiAqIFRoZSByZXR1cm5lZCBhcnJheSBvZiBjb2RlY3MgYWxzbyBpbmNsdWRlIGEgUlRYIGNvZGVjIGlmIGF2YWlsYWJsZS5cbiAqL1xuZnVuY3Rpb24gcmVkdWNlQ29kZWNzKGNvZGVjcywgY2FwQ29kZWMpIHtcbiAgICBjb25zdCBmaWx0ZXJlZENvZGVjcyA9IFtdO1xuICAgIC8vIElmIG5vIGNhcGFiaWxpdHkgY29kZWMgaXMgZ2l2ZW4sIHRha2UgdGhlIGZpcnN0IG9uZSAoYW5kIFJUWCkuXG4gICAgaWYgKCFjYXBDb2RlYykge1xuICAgICAgICBmaWx0ZXJlZENvZGVjcy5wdXNoKGNvZGVjc1swXSk7XG4gICAgICAgIGlmIChpc1J0eENvZGVjKGNvZGVjc1sxXSkpXG4gICAgICAgICAgICBmaWx0ZXJlZENvZGVjcy5wdXNoKGNvZGVjc1sxXSk7XG4gICAgfVxuICAgIC8vIE90aGVyd2lzZSBsb29rIGZvciBhIGNvbXBhdGlibGUgc2V0IG9mIGNvZGVjcy5cbiAgICBlbHNlIHtcbiAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgY29kZWNzLmxlbmd0aDsgKytpZHgpIHtcbiAgICAgICAgICAgIGlmIChtYXRjaENvZGVjcyhjb2RlY3NbaWR4XSwgY2FwQ29kZWMpKSB7XG4gICAgICAgICAgICAgICAgZmlsdGVyZWRDb2RlY3MucHVzaChjb2RlY3NbaWR4XSk7XG4gICAgICAgICAgICAgICAgaWYgKGlzUnR4Q29kZWMoY29kZWNzW2lkeCArIDFdKSlcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyZWRDb2RlY3MucHVzaChjb2RlY3NbaWR4ICsgMV0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChmaWx0ZXJlZENvZGVjcy5sZW5ndGggPT09IDApXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdubyBtYXRjaGluZyBjb2RlYyBmb3VuZCcpO1xuICAgIH1cbiAgICByZXR1cm4gZmlsdGVyZWRDb2RlY3M7XG59XG5leHBvcnRzLnJlZHVjZUNvZGVjcyA9IHJlZHVjZUNvZGVjcztcbi8qKlxuICogQ3JlYXRlIFJUUCBwYXJhbWV0ZXJzIGZvciBhIENvbnN1bWVyIGZvciB0aGUgUlRQIHByb2JhdG9yLlxuICovXG5mdW5jdGlvbiBnZW5lcmF0ZVByb2JhdG9yUnRwUGFyYW1ldGVycyh2aWRlb1J0cFBhcmFtZXRlcnMpIHtcbiAgICAvLyBDbG9uZSBnaXZlbiByZWZlcmVuY2UgdmlkZW8gUlRQIHBhcmFtZXRlcnMuXG4gICAgdmlkZW9SdHBQYXJhbWV0ZXJzID0gdXRpbHNfMS5jbG9uZSh2aWRlb1J0cFBhcmFtZXRlcnMpO1xuICAgIC8vIFRoaXMgbWF5IHRocm93LlxuICAgIHZhbGlkYXRlUnRwUGFyYW1ldGVycyh2aWRlb1J0cFBhcmFtZXRlcnMpO1xuICAgIGNvbnN0IHJ0cFBhcmFtZXRlcnMgPSB7XG4gICAgICAgIG1pZDogUlRQX1BST0JBVE9SX01JRCxcbiAgICAgICAgY29kZWNzOiBbXSxcbiAgICAgICAgaGVhZGVyRXh0ZW5zaW9uczogW10sXG4gICAgICAgIGVuY29kaW5nczogW3sgc3NyYzogUlRQX1BST0JBVE9SX1NTUkMgfV0sXG4gICAgICAgIHJ0Y3A6IHsgY25hbWU6ICdwcm9iYXRvcicgfVxuICAgIH07XG4gICAgcnRwUGFyYW1ldGVycy5jb2RlY3MucHVzaCh2aWRlb1J0cFBhcmFtZXRlcnMuY29kZWNzWzBdKTtcbiAgICBydHBQYXJhbWV0ZXJzLmNvZGVjc1swXS5wYXlsb2FkVHlwZSA9IFJUUF9QUk9CQVRPUl9DT0RFQ19QQVlMT0FEX1RZUEU7XG4gICAgcnRwUGFyYW1ldGVycy5oZWFkZXJFeHRlbnNpb25zID0gdmlkZW9SdHBQYXJhbWV0ZXJzLmhlYWRlckV4dGVuc2lvbnM7XG4gICAgcmV0dXJuIHJ0cFBhcmFtZXRlcnM7XG59XG5leHBvcnRzLmdlbmVyYXRlUHJvYmF0b3JSdHBQYXJhbWV0ZXJzID0gZ2VuZXJhdGVQcm9iYXRvclJ0cFBhcmFtZXRlcnM7XG4vKipcbiAqIFdoZXRoZXIgbWVkaWEgY2FuIGJlIHNlbnQgYmFzZWQgb24gdGhlIGdpdmVuIFJUUCBjYXBhYmlsaXRpZXMuXG4gKi9cbmZ1bmN0aW9uIGNhblNlbmQoa2luZCwgZXh0ZW5kZWRSdHBDYXBhYmlsaXRpZXMpIHtcbiAgICByZXR1cm4gZXh0ZW5kZWRSdHBDYXBhYmlsaXRpZXMuY29kZWNzLlxuICAgICAgICBzb21lKChjb2RlYykgPT4gY29kZWMua2luZCA9PT0ga2luZCk7XG59XG5leHBvcnRzLmNhblNlbmQgPSBjYW5TZW5kO1xuLyoqXG4gKiBXaGV0aGVyIHRoZSBnaXZlbiBSVFAgcGFyYW1ldGVycyBjYW4gYmUgcmVjZWl2ZWQgd2l0aCB0aGUgZ2l2ZW4gUlRQXG4gKiBjYXBhYmlsaXRpZXMuXG4gKi9cbmZ1bmN0aW9uIGNhblJlY2VpdmUocnRwUGFyYW1ldGVycywgZXh0ZW5kZWRSdHBDYXBhYmlsaXRpZXMpIHtcbiAgICAvLyBUaGlzIG1heSB0aHJvdy5cbiAgICB2YWxpZGF0ZVJ0cFBhcmFtZXRlcnMocnRwUGFyYW1ldGVycyk7XG4gICAgaWYgKHJ0cFBhcmFtZXRlcnMuY29kZWNzLmxlbmd0aCA9PT0gMClcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGNvbnN0IGZpcnN0TWVkaWFDb2RlYyA9IHJ0cFBhcmFtZXRlcnMuY29kZWNzWzBdO1xuICAgIHJldHVybiBleHRlbmRlZFJ0cENhcGFiaWxpdGllcy5jb2RlY3NcbiAgICAgICAgLnNvbWUoKGNvZGVjKSA9PiBjb2RlYy5yZW1vdGVQYXlsb2FkVHlwZSA9PT0gZmlyc3RNZWRpYUNvZGVjLnBheWxvYWRUeXBlKTtcbn1cbmV4cG9ydHMuY2FuUmVjZWl2ZSA9IGNhblJlY2VpdmU7XG5mdW5jdGlvbiBpc1J0eENvZGVjKGNvZGVjKSB7XG4gICAgaWYgKCFjb2RlYylcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiAvLitcXC9ydHgkL2kudGVzdChjb2RlYy5taW1lVHlwZSk7XG59XG5mdW5jdGlvbiBtYXRjaENvZGVjcyhhQ29kZWMsIGJDb2RlYywgeyBzdHJpY3QgPSBmYWxzZSwgbW9kaWZ5ID0gZmFsc2UgfSA9IHt9KSB7XG4gICAgY29uc3QgYU1pbWVUeXBlID0gYUNvZGVjLm1pbWVUeXBlLnRvTG93ZXJDYXNlKCk7XG4gICAgY29uc3QgYk1pbWVUeXBlID0gYkNvZGVjLm1pbWVUeXBlLnRvTG93ZXJDYXNlKCk7XG4gICAgaWYgKGFNaW1lVHlwZSAhPT0gYk1pbWVUeXBlKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgaWYgKGFDb2RlYy5jbG9ja1JhdGUgIT09IGJDb2RlYy5jbG9ja1JhdGUpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpZiAoYUNvZGVjLmNoYW5uZWxzICE9PSBiQ29kZWMuY2hhbm5lbHMpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAvLyBQZXIgY29kZWMgc3BlY2lhbCBjaGVja3MuXG4gICAgc3dpdGNoIChhTWltZVR5cGUpIHtcbiAgICAgICAgY2FzZSAndmlkZW8vaDI2NCc6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY29uc3QgYVBhY2tldGl6YXRpb25Nb2RlID0gYUNvZGVjLnBhcmFtZXRlcnNbJ3BhY2tldGl6YXRpb24tbW9kZSddIHx8IDA7XG4gICAgICAgICAgICAgICAgY29uc3QgYlBhY2tldGl6YXRpb25Nb2RlID0gYkNvZGVjLnBhcmFtZXRlcnNbJ3BhY2tldGl6YXRpb24tbW9kZSddIHx8IDA7XG4gICAgICAgICAgICAgICAgaWYgKGFQYWNrZXRpemF0aW9uTW9kZSAhPT0gYlBhY2tldGl6YXRpb25Nb2RlKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgLy8gSWYgc3RyaWN0IG1hdGNoaW5nIGNoZWNrIHByb2ZpbGUtbGV2ZWwtaWQuXG4gICAgICAgICAgICAgICAgaWYgKHN0cmljdCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWgyNjQuaXNTYW1lUHJvZmlsZShhQ29kZWMucGFyYW1ldGVycywgYkNvZGVjLnBhcmFtZXRlcnMpKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBsZXQgc2VsZWN0ZWRQcm9maWxlTGV2ZWxJZDtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkUHJvZmlsZUxldmVsSWQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGgyNjQuZ2VuZXJhdGVQcm9maWxlTGV2ZWxJZEZvckFuc3dlcihhQ29kZWMucGFyYW1ldGVycywgYkNvZGVjLnBhcmFtZXRlcnMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChtb2RpZnkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxlY3RlZFByb2ZpbGVMZXZlbElkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFDb2RlYy5wYXJhbWV0ZXJzWydwcm9maWxlLWxldmVsLWlkJ10gPSBzZWxlY3RlZFByb2ZpbGVMZXZlbElkO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBhQ29kZWMucGFyYW1ldGVyc1sncHJvZmlsZS1sZXZlbC1pZCddO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICBjYXNlICd2aWRlby92cDknOlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIC8vIElmIHN0cmljdCBtYXRjaGluZyBjaGVjayBwcm9maWxlLWlkLlxuICAgICAgICAgICAgICAgIGlmIChzdHJpY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYVByb2ZpbGVJZCA9IGFDb2RlYy5wYXJhbWV0ZXJzWydwcm9maWxlLWlkJ10gfHwgMDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYlByb2ZpbGVJZCA9IGJDb2RlYy5wYXJhbWV0ZXJzWydwcm9maWxlLWlkJ10gfHwgMDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFQcm9maWxlSWQgIT09IGJQcm9maWxlSWQpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIG1hdGNoSGVhZGVyRXh0ZW5zaW9ucyhhRXh0LCBiRXh0KSB7XG4gICAgaWYgKGFFeHQua2luZCAmJiBiRXh0LmtpbmQgJiYgYUV4dC5raW5kICE9PSBiRXh0LmtpbmQpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpZiAoYUV4dC51cmkgIT09IGJFeHQudXJpKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRydWU7XG59XG5mdW5jdGlvbiByZWR1Y2VSdGNwRmVlZGJhY2soY29kZWNBLCBjb2RlY0IpIHtcbiAgICBjb25zdCByZWR1Y2VkUnRjcEZlZWRiYWNrID0gW107XG4gICAgZm9yIChjb25zdCBhRmIgb2YgY29kZWNBLnJ0Y3BGZWVkYmFjayB8fCBbXSkge1xuICAgICAgICBjb25zdCBtYXRjaGluZ0JGYiA9IChjb2RlY0IucnRjcEZlZWRiYWNrIHx8IFtdKVxuICAgICAgICAgICAgLmZpbmQoKGJGYikgPT4gKGJGYi50eXBlID09PSBhRmIudHlwZSAmJlxuICAgICAgICAgICAgKGJGYi5wYXJhbWV0ZXIgPT09IGFGYi5wYXJhbWV0ZXIgfHwgKCFiRmIucGFyYW1ldGVyICYmICFhRmIucGFyYW1ldGVyKSkpKTtcbiAgICAgICAgaWYgKG1hdGNoaW5nQkZiKVxuICAgICAgICAgICAgcmVkdWNlZFJ0Y3BGZWVkYmFjay5wdXNoKG1hdGNoaW5nQkZiKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlZHVjZWRSdGNwRmVlZGJhY2s7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY2xhc3MgQXdhaXRRdWV1ZSB7XG4gICAgY29uc3RydWN0b3IoeyBDbG9zZWRFcnJvckNsYXNzLCBTdG9wcGVkRXJyb3JDbGFzcyB9ID0ge1xuICAgICAgICBDbG9zZWRFcnJvckNsYXNzOiBFcnJvcixcbiAgICAgICAgU3RvcHBlZEVycm9yQ2xhc3M6IEVycm9yXG4gICAgfSkge1xuICAgICAgICAvLyBDbG9zZWQgZmxhZy5cbiAgICAgICAgdGhpcy5jbG9zZWQgPSBmYWxzZTtcbiAgICAgICAgLy8gUXVldWUgb2YgcGVuZGluZyB0YXNrcy5cbiAgICAgICAgdGhpcy5wZW5kaW5nVGFza3MgPSBbXTtcbiAgICAgICAgLy8gRXJyb3IgY2xhc3MgdXNlZCB3aGVuIHJlamVjdGluZyBhIHRhc2sgZHVlIHRvIEF3YWl0UXVldWUgYmVpbmcgY2xvc2VkLlxuICAgICAgICB0aGlzLkNsb3NlZEVycm9yQ2xhc3MgPSBFcnJvcjtcbiAgICAgICAgLy8gRXJyb3IgY2xhc3MgdXNlZCB3aGVuIHJlamVjdGluZyBhIHRhc2sgZHVlIHRvIEF3YWl0UXVldWUgYmVpbmcgc3RvcHBlZC5cbiAgICAgICAgdGhpcy5TdG9wcGVkRXJyb3JDbGFzcyA9IEVycm9yO1xuICAgICAgICB0aGlzLkNsb3NlZEVycm9yQ2xhc3MgPSBDbG9zZWRFcnJvckNsYXNzO1xuICAgICAgICB0aGlzLlN0b3BwZWRFcnJvckNsYXNzID0gU3RvcHBlZEVycm9yQ2xhc3M7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBudW1iZXIgb2Ygb25nb2luZyBlbnF1ZXVlZCB0YXNrcy5cbiAgICAgKi9cbiAgICBnZXQgc2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGVuZGluZ1Rhc2tzLmxlbmd0aDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2xvc2VzIHRoZSBBd2FpdFF1ZXVlLiBQZW5kaW5nIHRhc2tzIHdpbGwgYmUgcmVqZWN0ZWQgd2l0aCBDbG9zZWRFcnJvckNsYXNzXG4gICAgICogZXJyb3IuXG4gICAgICovXG4gICAgY2xvc2UoKSB7XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy5jbG9zZWQgPSB0cnVlO1xuICAgICAgICBmb3IgKGNvbnN0IHBlbmRpbmdUYXNrIG9mIHRoaXMucGVuZGluZ1Rhc2tzKSB7XG4gICAgICAgICAgICBwZW5kaW5nVGFzay5zdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHBlbmRpbmdUYXNrLnJlamVjdChuZXcgdGhpcy5DbG9zZWRFcnJvckNsYXNzKCdBd2FpdFF1ZXVlIGNsb3NlZCcpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBFbnB0eSB0aGUgcGVuZGluZyB0YXNrcyBhcnJheS5cbiAgICAgICAgdGhpcy5wZW5kaW5nVGFza3MubGVuZ3RoID0gMDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWNjZXB0cyBhIHRhc2sgYXMgYXJndW1lbnQgKGFuZCBhbiBvcHRpb25hbCB0YXNrIG5hbWUpIGFuZCBlbnF1ZXVlcyBpdCBhZnRlclxuICAgICAqIHBlbmRpbmcgdGFza3MuIE9uY2UgcHJvY2Vzc2VkLCB0aGUgcHVzaCgpIG1ldGhvZCByZXNvbHZlcyAob3IgcmVqZWN0cykgd2l0aFxuICAgICAqIHRoZSByZXN1bHQgcmV0dXJuZWQgYnkgdGhlIGdpdmVuIHRhc2suXG4gICAgICpcbiAgICAgKiBUaGUgZ2l2ZW4gdGFzayBtdXN0IHJldHVybiBhIFByb21pc2Ugb3IgZGlyZWN0bHkgYSB2YWx1ZS5cbiAgICAgKi9cbiAgICBwdXNoKHRhc2ssIG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNsb3NlZClcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgdGhpcy5DbG9zZWRFcnJvckNsYXNzKCdBd2FpdFF1ZXVlIGNsb3NlZCcpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB0YXNrICE9PSAnZnVuY3Rpb24nKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2dpdmVuIHRhc2sgaXMgbm90IGEgZnVuY3Rpb24nKTtcbiAgICAgICAgICAgIGlmICghdGFzay5uYW1lICYmIG5hbWUpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFzaywgJ25hbWUnLCB7IHZhbHVlOiBuYW1lIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHsgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBwZW5kaW5nVGFzayA9IHtcbiAgICAgICAgICAgICAgICAgICAgdGFzayxcbiAgICAgICAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSxcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0LFxuICAgICAgICAgICAgICAgICAgICBzdG9wcGVkOiBmYWxzZVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgLy8gQXBwZW5kIHRhc2sgdG8gdGhlIHF1ZXVlLlxuICAgICAgICAgICAgICAgIHRoaXMucGVuZGluZ1Rhc2tzLnB1c2gocGVuZGluZ1Rhc2spO1xuICAgICAgICAgICAgICAgIC8vIEFuZCBydW4gaXQgaWYgdGhpcyBpcyB0aGUgb25seSB0YXNrIGluIHRoZSBxdWV1ZS5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wZW5kaW5nVGFza3MubGVuZ3RoID09PSAxKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLm5leHQoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWFrZSBvbmdvaW5nIHBlbmRpbmcgdGFza3MgcmVqZWN0IHdpdGggdGhlIGdpdmVuIFN0b3BwZWRFcnJvckNsYXNzIGVycm9yLlxuICAgICAqIFRoZSBBd2FpdFF1ZXVlIGluc3RhbmNlIGlzIHN0aWxsIHVzYWJsZSBmb3IgZnV0dXJlIHRhc2tzIGFkZGVkIHZpYSBwdXNoKClcbiAgICAgKiBtZXRob2QuXG4gICAgICovXG4gICAgc3RvcCgpIHtcbiAgICAgICAgaWYgKHRoaXMuY2xvc2VkKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBmb3IgKGNvbnN0IHBlbmRpbmdUYXNrIG9mIHRoaXMucGVuZGluZ1Rhc2tzKSB7XG4gICAgICAgICAgICBwZW5kaW5nVGFzay5zdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHBlbmRpbmdUYXNrLnJlamVjdChuZXcgdGhpcy5TdG9wcGVkRXJyb3JDbGFzcygnQXdhaXRRdWV1ZSBzdG9wcGVkJykpO1xuICAgICAgICB9XG4gICAgICAgIC8vIEVucHR5IHRoZSBwZW5kaW5nIHRhc2tzIGFycmF5LlxuICAgICAgICB0aGlzLnBlbmRpbmdUYXNrcy5sZW5ndGggPSAwO1xuICAgIH1cbiAgICBkdW1wKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wZW5kaW5nVGFza3MubWFwKChwZW5kaW5nVGFzaykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0YXNrOiBwZW5kaW5nVGFzay50YXNrLFxuICAgICAgICAgICAgICAgIG5hbWU6IHBlbmRpbmdUYXNrLm5hbWUsXG4gICAgICAgICAgICAgICAgc3RvcHBlZDogcGVuZGluZ1Rhc2suc3RvcHBlZFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIG5leHQoKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAvLyBUYWtlIHRoZSBmaXJzdCBwZW5kaW5nIHRhc2suXG4gICAgICAgICAgICBjb25zdCBwZW5kaW5nVGFzayA9IHRoaXMucGVuZGluZ1Rhc2tzWzBdO1xuICAgICAgICAgICAgaWYgKCFwZW5kaW5nVGFzaylcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAvLyBFeGVjdXRlIGl0LlxuICAgICAgICAgICAgeWllbGQgdGhpcy5leGVjdXRlVGFzayhwZW5kaW5nVGFzayk7XG4gICAgICAgICAgICAvLyBSZW1vdmUgdGhlIGZpcnN0IHBlbmRpbmcgdGFzayAodGhlIGNvbXBsZXRlZCBvbmUpIGZyb20gdGhlIHF1ZXVlLlxuICAgICAgICAgICAgdGhpcy5wZW5kaW5nVGFza3Muc2hpZnQoKTtcbiAgICAgICAgICAgIC8vIEFuZCBjb250aW51ZS5cbiAgICAgICAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZXhlY3V0ZVRhc2socGVuZGluZ1Rhc2spIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIC8vIElmIHRoZSB0YXNrIGlzIHN0b3BwZWQsIGlnbm9yZSBpdC5cbiAgICAgICAgICAgIGlmIChwZW5kaW5nVGFzay5zdG9wcGVkKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0geWllbGQgcGVuZGluZ1Rhc2sudGFzaygpO1xuICAgICAgICAgICAgICAgIC8vIElmIHRoZSB0YXNrIGlzIHN0b3BwZWQsIGlnbm9yZSBpdC5cbiAgICAgICAgICAgICAgICBpZiAocGVuZGluZ1Rhc2suc3RvcHBlZClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIC8vIFJlc29sdmUgdGhlIHRhc2sgd2l0aCB0aGUgcmV0dXJuZWQgcmVzdWx0IChpZiBhbnkpLlxuICAgICAgICAgICAgICAgIHBlbmRpbmdUYXNrLnJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIC8vIElmIHRoZSB0YXNrIGlzIHN0b3BwZWQsIGlnbm9yZSBpdC5cbiAgICAgICAgICAgICAgICBpZiAocGVuZGluZ1Rhc2suc3RvcHBlZClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIC8vIFJlamVjdCB0aGUgdGFzayB3aXRoIGl0cyBvd24gZXJyb3IuXG4gICAgICAgICAgICAgICAgcGVuZGluZ1Rhc2sucmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5Bd2FpdFF1ZXVlID0gQXdhaXRRdWV1ZTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGRvbWFpbjtcblxuLy8gVGhpcyBjb25zdHJ1Y3RvciBpcyB1c2VkIHRvIHN0b3JlIGV2ZW50IGhhbmRsZXJzLiBJbnN0YW50aWF0aW5nIHRoaXMgaXNcbi8vIGZhc3RlciB0aGFuIGV4cGxpY2l0bHkgY2FsbGluZyBgT2JqZWN0LmNyZWF0ZShudWxsKWAgdG8gZ2V0IGEgXCJjbGVhblwiIGVtcHR5XG4vLyBvYmplY3QgKHRlc3RlZCB3aXRoIHY4IHY0LjkpLlxuZnVuY3Rpb24gRXZlbnRIYW5kbGVycygpIHt9XG5FdmVudEhhbmRsZXJzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgRXZlbnRFbWl0dGVyLmluaXQuY2FsbCh0aGlzKTtcbn1cbmV4cG9ydCBkZWZhdWx0IEV2ZW50RW1pdHRlcjtcbmV4cG9ydCB7RXZlbnRFbWl0dGVyfTtcblxuLy8gbm9kZWpzIG9kZGl0eVxuLy8gcmVxdWlyZSgnZXZlbnRzJykgPT09IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlclxuRXZlbnRFbWl0dGVyLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlclxuXG5FdmVudEVtaXR0ZXIudXNpbmdEb21haW5zID0gZmFsc2U7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZG9tYWluID0gdW5kZWZpbmVkO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzID0gdW5kZWZpbmVkO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fbWF4TGlzdGVuZXJzID0gdW5kZWZpbmVkO1xuXG4vLyBCeSBkZWZhdWx0IEV2ZW50RW1pdHRlcnMgd2lsbCBwcmludCBhIHdhcm5pbmcgaWYgbW9yZSB0aGFuIDEwIGxpc3RlbmVycyBhcmVcbi8vIGFkZGVkIHRvIGl0LiBUaGlzIGlzIGEgdXNlZnVsIGRlZmF1bHQgd2hpY2ggaGVscHMgZmluZGluZyBtZW1vcnkgbGVha3MuXG5FdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycyA9IDEwO1xuXG5FdmVudEVtaXR0ZXIuaW5pdCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmRvbWFpbiA9IG51bGw7XG4gIGlmIChFdmVudEVtaXR0ZXIudXNpbmdEb21haW5zKSB7XG4gICAgLy8gaWYgdGhlcmUgaXMgYW4gYWN0aXZlIGRvbWFpbiwgdGhlbiBhdHRhY2ggdG8gaXQuXG4gICAgaWYgKGRvbWFpbi5hY3RpdmUgJiYgISh0aGlzIGluc3RhbmNlb2YgZG9tYWluLkRvbWFpbikpIHtcbiAgICAgIHRoaXMuZG9tYWluID0gZG9tYWluLmFjdGl2ZTtcbiAgICB9XG4gIH1cblxuICBpZiAoIXRoaXMuX2V2ZW50cyB8fCB0aGlzLl9ldmVudHMgPT09IE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5fZXZlbnRzKSB7XG4gICAgdGhpcy5fZXZlbnRzID0gbmV3IEV2ZW50SGFuZGxlcnMoKTtcbiAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gIH1cblxuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSB0aGlzLl9tYXhMaXN0ZW5lcnMgfHwgdW5kZWZpbmVkO1xufTtcblxuLy8gT2J2aW91c2x5IG5vdCBhbGwgRW1pdHRlcnMgc2hvdWxkIGJlIGxpbWl0ZWQgdG8gMTAuIFRoaXMgZnVuY3Rpb24gYWxsb3dzXG4vLyB0aGF0IHRvIGJlIGluY3JlYXNlZC4gU2V0IHRvIHplcm8gZm9yIHVubGltaXRlZC5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuc2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gc2V0TWF4TGlzdGVuZXJzKG4pIHtcbiAgaWYgKHR5cGVvZiBuICE9PSAnbnVtYmVyJyB8fCBuIDwgMCB8fCBpc05hTihuKSlcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcIm5cIiBhcmd1bWVudCBtdXN0IGJlIGEgcG9zaXRpdmUgbnVtYmVyJyk7XG4gIHRoaXMuX21heExpc3RlbmVycyA9IG47XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gJGdldE1heExpc3RlbmVycyh0aGF0KSB7XG4gIGlmICh0aGF0Ll9tYXhMaXN0ZW5lcnMgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gIHJldHVybiB0aGF0Ll9tYXhMaXN0ZW5lcnM7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZ2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gZ2V0TWF4TGlzdGVuZXJzKCkge1xuICByZXR1cm4gJGdldE1heExpc3RlbmVycyh0aGlzKTtcbn07XG5cbi8vIFRoZXNlIHN0YW5kYWxvbmUgZW1pdCogZnVuY3Rpb25zIGFyZSB1c2VkIHRvIG9wdGltaXplIGNhbGxpbmcgb2YgZXZlbnRcbi8vIGhhbmRsZXJzIGZvciBmYXN0IGNhc2VzIGJlY2F1c2UgZW1pdCgpIGl0c2VsZiBvZnRlbiBoYXMgYSB2YXJpYWJsZSBudW1iZXIgb2Zcbi8vIGFyZ3VtZW50cyBhbmQgY2FuIGJlIGRlb3B0aW1pemVkIGJlY2F1c2Ugb2YgdGhhdC4gVGhlc2UgZnVuY3Rpb25zIGFsd2F5cyBoYXZlXG4vLyB0aGUgc2FtZSBudW1iZXIgb2YgYXJndW1lbnRzIGFuZCB0aHVzIGRvIG5vdCBnZXQgZGVvcHRpbWl6ZWQsIHNvIHRoZSBjb2RlXG4vLyBpbnNpZGUgdGhlbSBjYW4gZXhlY3V0ZSBmYXN0ZXIuXG5mdW5jdGlvbiBlbWl0Tm9uZShoYW5kbGVyLCBpc0ZuLCBzZWxmKSB7XG4gIGlmIChpc0ZuKVxuICAgIGhhbmRsZXIuY2FsbChzZWxmKTtcbiAgZWxzZSB7XG4gICAgdmFyIGxlbiA9IGhhbmRsZXIubGVuZ3RoO1xuICAgIHZhciBsaXN0ZW5lcnMgPSBhcnJheUNsb25lKGhhbmRsZXIsIGxlbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSlcbiAgICAgIGxpc3RlbmVyc1tpXS5jYWxsKHNlbGYpO1xuICB9XG59XG5mdW5jdGlvbiBlbWl0T25lKGhhbmRsZXIsIGlzRm4sIHNlbGYsIGFyZzEpIHtcbiAgaWYgKGlzRm4pXG4gICAgaGFuZGxlci5jYWxsKHNlbGYsIGFyZzEpO1xuICBlbHNlIHtcbiAgICB2YXIgbGVuID0gaGFuZGxlci5sZW5ndGg7XG4gICAgdmFyIGxpc3RlbmVycyA9IGFycmF5Q2xvbmUoaGFuZGxlciwgbGVuKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKVxuICAgICAgbGlzdGVuZXJzW2ldLmNhbGwoc2VsZiwgYXJnMSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGVtaXRUd28oaGFuZGxlciwgaXNGbiwgc2VsZiwgYXJnMSwgYXJnMikge1xuICBpZiAoaXNGbilcbiAgICBoYW5kbGVyLmNhbGwoc2VsZiwgYXJnMSwgYXJnMik7XG4gIGVsc2Uge1xuICAgIHZhciBsZW4gPSBoYW5kbGVyLmxlbmd0aDtcbiAgICB2YXIgbGlzdGVuZXJzID0gYXJyYXlDbG9uZShoYW5kbGVyLCBsZW4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpXG4gICAgICBsaXN0ZW5lcnNbaV0uY2FsbChzZWxmLCBhcmcxLCBhcmcyKTtcbiAgfVxufVxuZnVuY3Rpb24gZW1pdFRocmVlKGhhbmRsZXIsIGlzRm4sIHNlbGYsIGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgaWYgKGlzRm4pXG4gICAgaGFuZGxlci5jYWxsKHNlbGYsIGFyZzEsIGFyZzIsIGFyZzMpO1xuICBlbHNlIHtcbiAgICB2YXIgbGVuID0gaGFuZGxlci5sZW5ndGg7XG4gICAgdmFyIGxpc3RlbmVycyA9IGFycmF5Q2xvbmUoaGFuZGxlciwgbGVuKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKVxuICAgICAgbGlzdGVuZXJzW2ldLmNhbGwoc2VsZiwgYXJnMSwgYXJnMiwgYXJnMyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW1pdE1hbnkoaGFuZGxlciwgaXNGbiwgc2VsZiwgYXJncykge1xuICBpZiAoaXNGbilcbiAgICBoYW5kbGVyLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICBlbHNlIHtcbiAgICB2YXIgbGVuID0gaGFuZGxlci5sZW5ndGg7XG4gICAgdmFyIGxpc3RlbmVycyA9IGFycmF5Q2xvbmUoaGFuZGxlciwgbGVuKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKVxuICAgICAgbGlzdGVuZXJzW2ldLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICB9XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uIGVtaXQodHlwZSkge1xuICB2YXIgZXIsIGhhbmRsZXIsIGxlbiwgYXJncywgaSwgZXZlbnRzLCBkb21haW47XG4gIHZhciBuZWVkRG9tYWluRXhpdCA9IGZhbHNlO1xuICB2YXIgZG9FcnJvciA9ICh0eXBlID09PSAnZXJyb3InKTtcblxuICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gIGlmIChldmVudHMpXG4gICAgZG9FcnJvciA9IChkb0Vycm9yICYmIGV2ZW50cy5lcnJvciA9PSBudWxsKTtcbiAgZWxzZSBpZiAoIWRvRXJyb3IpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIGRvbWFpbiA9IHRoaXMuZG9tYWluO1xuXG4gIC8vIElmIHRoZXJlIGlzIG5vICdlcnJvcicgZXZlbnQgbGlzdGVuZXIgdGhlbiB0aHJvdy5cbiAgaWYgKGRvRXJyb3IpIHtcbiAgICBlciA9IGFyZ3VtZW50c1sxXTtcbiAgICBpZiAoZG9tYWluKSB7XG4gICAgICBpZiAoIWVyKVxuICAgICAgICBlciA9IG5ldyBFcnJvcignVW5jYXVnaHQsIHVuc3BlY2lmaWVkIFwiZXJyb3JcIiBldmVudCcpO1xuICAgICAgZXIuZG9tYWluRW1pdHRlciA9IHRoaXM7XG4gICAgICBlci5kb21haW4gPSBkb21haW47XG4gICAgICBlci5kb21haW5UaHJvd24gPSBmYWxzZTtcbiAgICAgIGRvbWFpbi5lbWl0KCdlcnJvcicsIGVyKTtcbiAgICB9IGVsc2UgaWYgKGVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBBdCBsZWFzdCBnaXZlIHNvbWUga2luZCBvZiBjb250ZXh0IHRvIHRoZSB1c2VyXG4gICAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdVbmNhdWdodCwgdW5zcGVjaWZpZWQgXCJlcnJvclwiIGV2ZW50LiAoJyArIGVyICsgJyknKTtcbiAgICAgIGVyci5jb250ZXh0ID0gZXI7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGhhbmRsZXIgPSBldmVudHNbdHlwZV07XG5cbiAgaWYgKCFoYW5kbGVyKVxuICAgIHJldHVybiBmYWxzZTtcblxuICB2YXIgaXNGbiA9IHR5cGVvZiBoYW5kbGVyID09PSAnZnVuY3Rpb24nO1xuICBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICBzd2l0Y2ggKGxlbikge1xuICAgIC8vIGZhc3QgY2FzZXNcbiAgICBjYXNlIDE6XG4gICAgICBlbWl0Tm9uZShoYW5kbGVyLCBpc0ZuLCB0aGlzKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjpcbiAgICAgIGVtaXRPbmUoaGFuZGxlciwgaXNGbiwgdGhpcywgYXJndW1lbnRzWzFdKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMzpcbiAgICAgIGVtaXRUd28oaGFuZGxlciwgaXNGbiwgdGhpcywgYXJndW1lbnRzWzFdLCBhcmd1bWVudHNbMl0pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA0OlxuICAgICAgZW1pdFRocmVlKGhhbmRsZXIsIGlzRm4sIHRoaXMsIGFyZ3VtZW50c1sxXSwgYXJndW1lbnRzWzJdLCBhcmd1bWVudHNbM10pO1xuICAgICAgYnJlYWs7XG4gICAgLy8gc2xvd2VyXG4gICAgZGVmYXVsdDpcbiAgICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuIC0gMSk7XG4gICAgICBmb3IgKGkgPSAxOyBpIDwgbGVuOyBpKyspXG4gICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgZW1pdE1hbnkoaGFuZGxlciwgaXNGbiwgdGhpcywgYXJncyk7XG4gIH1cblxuICBpZiAobmVlZERvbWFpbkV4aXQpXG4gICAgZG9tYWluLmV4aXQoKTtcblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbmZ1bmN0aW9uIF9hZGRMaXN0ZW5lcih0YXJnZXQsIHR5cGUsIGxpc3RlbmVyLCBwcmVwZW5kKSB7XG4gIHZhciBtO1xuICB2YXIgZXZlbnRzO1xuICB2YXIgZXhpc3Rpbmc7XG5cbiAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJylcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cbiAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XG4gIGlmICghZXZlbnRzKSB7XG4gICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHMgPSBuZXcgRXZlbnRIYW5kbGVycygpO1xuICAgIHRhcmdldC5fZXZlbnRzQ291bnQgPSAwO1xuICB9IGVsc2Uge1xuICAgIC8vIFRvIGF2b2lkIHJlY3Vyc2lvbiBpbiB0aGUgY2FzZSB0aGF0IHR5cGUgPT09IFwibmV3TGlzdGVuZXJcIiEgQmVmb3JlXG4gICAgLy8gYWRkaW5nIGl0IHRvIHRoZSBsaXN0ZW5lcnMsIGZpcnN0IGVtaXQgXCJuZXdMaXN0ZW5lclwiLlxuICAgIGlmIChldmVudHMubmV3TGlzdGVuZXIpIHtcbiAgICAgIHRhcmdldC5lbWl0KCduZXdMaXN0ZW5lcicsIHR5cGUsXG4gICAgICAgICAgICAgICAgICBsaXN0ZW5lci5saXN0ZW5lciA/IGxpc3RlbmVyLmxpc3RlbmVyIDogbGlzdGVuZXIpO1xuXG4gICAgICAvLyBSZS1hc3NpZ24gYGV2ZW50c2AgYmVjYXVzZSBhIG5ld0xpc3RlbmVyIGhhbmRsZXIgY291bGQgaGF2ZSBjYXVzZWQgdGhlXG4gICAgICAvLyB0aGlzLl9ldmVudHMgdG8gYmUgYXNzaWduZWQgdG8gYSBuZXcgb2JqZWN0XG4gICAgICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcbiAgICB9XG4gICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV07XG4gIH1cblxuICBpZiAoIWV4aXN0aW5nKSB7XG4gICAgLy8gT3B0aW1pemUgdGhlIGNhc2Ugb2Ygb25lIGxpc3RlbmVyLiBEb24ndCBuZWVkIHRoZSBleHRyYSBhcnJheSBvYmplY3QuXG4gICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV0gPSBsaXN0ZW5lcjtcbiAgICArK3RhcmdldC5fZXZlbnRzQ291bnQ7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHR5cGVvZiBleGlzdGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gQWRkaW5nIHRoZSBzZWNvbmQgZWxlbWVudCwgbmVlZCB0byBjaGFuZ2UgdG8gYXJyYXkuXG4gICAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9IHByZXBlbmQgPyBbbGlzdGVuZXIsIGV4aXN0aW5nXSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbZXhpc3RpbmcsIGxpc3RlbmVyXTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSWYgd2UndmUgYWxyZWFkeSBnb3QgYW4gYXJyYXksIGp1c3QgYXBwZW5kLlxuICAgICAgaWYgKHByZXBlbmQpIHtcbiAgICAgICAgZXhpc3RpbmcudW5zaGlmdChsaXN0ZW5lcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBleGlzdGluZy5wdXNoKGxpc3RlbmVyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDaGVjayBmb3IgbGlzdGVuZXIgbGVha1xuICAgIGlmICghZXhpc3Rpbmcud2FybmVkKSB7XG4gICAgICBtID0gJGdldE1heExpc3RlbmVycyh0YXJnZXQpO1xuICAgICAgaWYgKG0gJiYgbSA+IDAgJiYgZXhpc3RpbmcubGVuZ3RoID4gbSkge1xuICAgICAgICBleGlzdGluZy53YXJuZWQgPSB0cnVlO1xuICAgICAgICB2YXIgdyA9IG5ldyBFcnJvcignUG9zc2libGUgRXZlbnRFbWl0dGVyIG1lbW9yeSBsZWFrIGRldGVjdGVkLiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGlzdGluZy5sZW5ndGggKyAnICcgKyB0eXBlICsgJyBsaXN0ZW5lcnMgYWRkZWQuICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdVc2UgZW1pdHRlci5zZXRNYXhMaXN0ZW5lcnMoKSB0byBpbmNyZWFzZSBsaW1pdCcpO1xuICAgICAgICB3Lm5hbWUgPSAnTWF4TGlzdGVuZXJzRXhjZWVkZWRXYXJuaW5nJztcbiAgICAgICAgdy5lbWl0dGVyID0gdGFyZ2V0O1xuICAgICAgICB3LnR5cGUgPSB0eXBlO1xuICAgICAgICB3LmNvdW50ID0gZXhpc3RpbmcubGVuZ3RoO1xuICAgICAgICBlbWl0V2FybmluZyh3KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuZnVuY3Rpb24gZW1pdFdhcm5pbmcoZSkge1xuICB0eXBlb2YgY29uc29sZS53YXJuID09PSAnZnVuY3Rpb24nID8gY29uc29sZS53YXJuKGUpIDogY29uc29sZS5sb2coZSk7XG59XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyID0gZnVuY3Rpb24gYWRkTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgcmV0dXJuIF9hZGRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lciwgZmFsc2UpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZExpc3RlbmVyID1cbiAgICBmdW5jdGlvbiBwcmVwZW5kTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBfYWRkTGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIsIHRydWUpO1xuICAgIH07XG5cbmZ1bmN0aW9uIF9vbmNlV3JhcCh0YXJnZXQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBmaXJlZCA9IGZhbHNlO1xuICBmdW5jdGlvbiBnKCkge1xuICAgIHRhcmdldC5yZW1vdmVMaXN0ZW5lcih0eXBlLCBnKTtcbiAgICBpZiAoIWZpcmVkKSB7XG4gICAgICBmaXJlZCA9IHRydWU7XG4gICAgICBsaXN0ZW5lci5hcHBseSh0YXJnZXQsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG4gIGcubGlzdGVuZXIgPSBsaXN0ZW5lcjtcbiAgcmV0dXJuIGc7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uIG9uY2UodHlwZSwgbGlzdGVuZXIpIHtcbiAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJylcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gIHRoaXMub24odHlwZSwgX29uY2VXcmFwKHRoaXMsIHR5cGUsIGxpc3RlbmVyKSk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5wcmVwZW5kT25jZUxpc3RlbmVyID1cbiAgICBmdW5jdGlvbiBwcmVwZW5kT25jZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gICAgICB0aGlzLnByZXBlbmRMaXN0ZW5lcih0eXBlLCBfb25jZVdyYXAodGhpcywgdHlwZSwgbGlzdGVuZXIpKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbi8vIGVtaXRzIGEgJ3JlbW92ZUxpc3RlbmVyJyBldmVudCBpZmYgdGhlIGxpc3RlbmVyIHdhcyByZW1vdmVkXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID1cbiAgICBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgdmFyIGxpc3QsIGV2ZW50cywgcG9zaXRpb24sIGksIG9yaWdpbmFsTGlzdGVuZXI7XG5cbiAgICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcblxuICAgICAgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICAgICAgaWYgKCFldmVudHMpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICBsaXN0ID0gZXZlbnRzW3R5cGVdO1xuICAgICAgaWYgKCFsaXN0KVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgaWYgKGxpc3QgPT09IGxpc3RlbmVyIHx8IChsaXN0Lmxpc3RlbmVyICYmIGxpc3QubGlzdGVuZXIgPT09IGxpc3RlbmVyKSkge1xuICAgICAgICBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMClcbiAgICAgICAgICB0aGlzLl9ldmVudHMgPSBuZXcgRXZlbnRIYW5kbGVycygpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIpXG4gICAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgbGlzdC5saXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGxpc3QgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcG9zaXRpb24gPSAtMTtcblxuICAgICAgICBmb3IgKGkgPSBsaXN0Lmxlbmd0aDsgaS0tID4gMDspIHtcbiAgICAgICAgICBpZiAobGlzdFtpXSA9PT0gbGlzdGVuZXIgfHxcbiAgICAgICAgICAgICAgKGxpc3RbaV0ubGlzdGVuZXIgJiYgbGlzdFtpXS5saXN0ZW5lciA9PT0gbGlzdGVuZXIpKSB7XG4gICAgICAgICAgICBvcmlnaW5hbExpc3RlbmVyID0gbGlzdFtpXS5saXN0ZW5lcjtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gaTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwb3NpdGlvbiA8IDApXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgICAgaWYgKGxpc3QubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgbGlzdFswXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5fZXZlbnRzID0gbmV3IEV2ZW50SGFuZGxlcnMoKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzcGxpY2VPbmUobGlzdCwgcG9zaXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGV2ZW50cy5yZW1vdmVMaXN0ZW5lcilcbiAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgb3JpZ2luYWxMaXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID1cbiAgICBmdW5jdGlvbiByZW1vdmVBbGxMaXN0ZW5lcnModHlwZSkge1xuICAgICAgdmFyIGxpc3RlbmVycywgZXZlbnRzO1xuXG4gICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICBpZiAoIWV2ZW50cylcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIC8vIG5vdCBsaXN0ZW5pbmcgZm9yIHJlbW92ZUxpc3RlbmVyLCBubyBuZWVkIHRvIGVtaXRcbiAgICAgIGlmICghZXZlbnRzLnJlbW92ZUxpc3RlbmVyKSB7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgdGhpcy5fZXZlbnRzID0gbmV3IEV2ZW50SGFuZGxlcnMoKTtcbiAgICAgICAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gICAgICAgIH0gZWxzZSBpZiAoZXZlbnRzW3R5cGVdKSB7XG4gICAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApXG4gICAgICAgICAgICB0aGlzLl9ldmVudHMgPSBuZXcgRXZlbnRIYW5kbGVycygpO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIGRlbGV0ZSBldmVudHNbdHlwZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIC8vIGVtaXQgcmVtb3ZlTGlzdGVuZXIgZm9yIGFsbCBsaXN0ZW5lcnMgb24gYWxsIGV2ZW50c1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhldmVudHMpO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwga2V5OyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgaWYgKGtleSA9PT0gJ3JlbW92ZUxpc3RlbmVyJykgY29udGludWU7XG4gICAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygncmVtb3ZlTGlzdGVuZXInKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzID0gbmV3IEV2ZW50SGFuZGxlcnMoKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgbGlzdGVuZXJzID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgICBpZiAodHlwZW9mIGxpc3RlbmVycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVycyk7XG4gICAgICB9IGVsc2UgaWYgKGxpc3RlbmVycykge1xuICAgICAgICAvLyBMSUZPIG9yZGVyXG4gICAgICAgIGRvIHtcbiAgICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyc1tsaXN0ZW5lcnMubGVuZ3RoIC0gMV0pO1xuICAgICAgICB9IHdoaWxlIChsaXN0ZW5lcnNbMF0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uIGxpc3RlbmVycyh0eXBlKSB7XG4gIHZhciBldmxpc3RlbmVyO1xuICB2YXIgcmV0O1xuICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuXG4gIGlmICghZXZlbnRzKVxuICAgIHJldCA9IFtdO1xuICBlbHNlIHtcbiAgICBldmxpc3RlbmVyID0gZXZlbnRzW3R5cGVdO1xuICAgIGlmICghZXZsaXN0ZW5lcilcbiAgICAgIHJldCA9IFtdO1xuICAgIGVsc2UgaWYgKHR5cGVvZiBldmxpc3RlbmVyID09PSAnZnVuY3Rpb24nKVxuICAgICAgcmV0ID0gW2V2bGlzdGVuZXIubGlzdGVuZXIgfHwgZXZsaXN0ZW5lcl07XG4gICAgZWxzZVxuICAgICAgcmV0ID0gdW53cmFwTGlzdGVuZXJzKGV2bGlzdGVuZXIpO1xuICB9XG5cbiAgcmV0dXJuIHJldDtcbn07XG5cbkV2ZW50RW1pdHRlci5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24oZW1pdHRlciwgdHlwZSkge1xuICBpZiAodHlwZW9mIGVtaXR0ZXIubGlzdGVuZXJDb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBlbWl0dGVyLmxpc3RlbmVyQ291bnQodHlwZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGxpc3RlbmVyQ291bnQuY2FsbChlbWl0dGVyLCB0eXBlKTtcbiAgfVxufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lckNvdW50ID0gbGlzdGVuZXJDb3VudDtcbmZ1bmN0aW9uIGxpc3RlbmVyQ291bnQodHlwZSkge1xuICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuXG4gIGlmIChldmVudHMpIHtcbiAgICB2YXIgZXZsaXN0ZW5lciA9IGV2ZW50c1t0eXBlXTtcblxuICAgIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIGlmIChldmxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gZXZsaXN0ZW5lci5sZW5ndGg7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIDA7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZXZlbnROYW1lcyA9IGZ1bmN0aW9uIGV2ZW50TmFtZXMoKSB7XG4gIHJldHVybiB0aGlzLl9ldmVudHNDb3VudCA+IDAgPyBSZWZsZWN0Lm93bktleXModGhpcy5fZXZlbnRzKSA6IFtdO1xufTtcblxuLy8gQWJvdXQgMS41eCBmYXN0ZXIgdGhhbiB0aGUgdHdvLWFyZyB2ZXJzaW9uIG9mIEFycmF5I3NwbGljZSgpLlxuZnVuY3Rpb24gc3BsaWNlT25lKGxpc3QsIGluZGV4KSB7XG4gIGZvciAodmFyIGkgPSBpbmRleCwgayA9IGkgKyAxLCBuID0gbGlzdC5sZW5ndGg7IGsgPCBuOyBpICs9IDEsIGsgKz0gMSlcbiAgICBsaXN0W2ldID0gbGlzdFtrXTtcbiAgbGlzdC5wb3AoKTtcbn1cblxuZnVuY3Rpb24gYXJyYXlDbG9uZShhcnIsIGkpIHtcbiAgdmFyIGNvcHkgPSBuZXcgQXJyYXkoaSk7XG4gIHdoaWxlIChpLS0pXG4gICAgY29weVtpXSA9IGFycltpXTtcbiAgcmV0dXJuIGNvcHk7XG59XG5cbmZ1bmN0aW9uIHVud3JhcExpc3RlbmVycyhhcnIpIHtcbiAgdmFyIHJldCA9IG5ldyBBcnJheShhcnIubGVuZ3RoKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXQubGVuZ3RoOyArK2kpIHtcbiAgICByZXRbaV0gPSBhcnJbaV0ubGlzdGVuZXIgfHwgYXJyW2ldO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGV2ZW50c18xID0gcmVxdWlyZShcImV2ZW50c1wiKTtcbmNvbnN0IExvZ2dlcl8xID0gcmVxdWlyZShcIi4vTG9nZ2VyXCIpO1xuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcl8xLkxvZ2dlcignRW5oYW5jZWRFdmVudEVtaXR0ZXInKTtcbmNsYXNzIEVuaGFuY2VkRXZlbnRFbWl0dGVyIGV4dGVuZHMgZXZlbnRzXzEuRXZlbnRFbWl0dGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5zZXRNYXhMaXN0ZW5lcnMoSW5maW5pdHkpO1xuICAgIH1cbiAgICBzYWZlRW1pdChldmVudCwgLi4uYXJncykge1xuICAgICAgICBjb25zdCBudW1MaXN0ZW5lcnMgPSB0aGlzLmxpc3RlbmVyQ291bnQoZXZlbnQpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW1pdChldmVudCwgLi4uYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IoJ3NhZmVFbWl0KCkgfCBldmVudCBsaXN0ZW5lciB0aHJldyBhbiBlcnJvciBbZXZlbnQ6JXNdOiVvJywgZXZlbnQsIGVycm9yKTtcbiAgICAgICAgICAgIHJldHVybiBCb29sZWFuKG51bUxpc3RlbmVycyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgc2FmZUVtaXRBc1Byb21pc2UoZXZlbnQsIC4uLmFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+ICh0aGlzLnNhZmVFbWl0KGV2ZW50LCAuLi5hcmdzLCByZXNvbHZlLCByZWplY3QpKSk7XG4gICAgfVxufVxuZXhwb3J0cy5FbmhhbmNlZEV2ZW50RW1pdHRlciA9IEVuaGFuY2VkRXZlbnRFbWl0dGVyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBMb2dnZXJfMSA9IHJlcXVpcmUoXCIuL0xvZ2dlclwiKTtcbmNvbnN0IEVuaGFuY2VkRXZlbnRFbWl0dGVyXzEgPSByZXF1aXJlKFwiLi9FbmhhbmNlZEV2ZW50RW1pdHRlclwiKTtcbmNvbnN0IGVycm9yc18xID0gcmVxdWlyZShcIi4vZXJyb3JzXCIpO1xuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcl8xLkxvZ2dlcignUHJvZHVjZXInKTtcbmNsYXNzIFByb2R1Y2VyIGV4dGVuZHMgRW5oYW5jZWRFdmVudEVtaXR0ZXJfMS5FbmhhbmNlZEV2ZW50RW1pdHRlciB7XG4gICAgLyoqXG4gICAgICogQGVtaXRzIHRyYW5zcG9ydGNsb3NlXG4gICAgICogQGVtaXRzIHRyYWNrZW5kZWRcbiAgICAgKiBAZW1pdHMgQHJlcGxhY2V0cmFjayAtICh0cmFjazogTWVkaWFTdHJlYW1UcmFjayB8IG51bGwpXG4gICAgICogQGVtaXRzIEBzZXRtYXhzcGF0aWFsbGF5ZXIgLSAoc3BhdGlhbExheWVyOiBzdHJpbmcpXG4gICAgICogQGVtaXRzIEBzZXRydHBlbmNvZGluZ3BhcmFtZXRlcnMgLSAocGFyYW1zOiBhbnkpXG4gICAgICogQGVtaXRzIEBnZXRzdGF0c1xuICAgICAqIEBlbWl0cyBAY2xvc2VcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih7IGlkLCBsb2NhbElkLCBydHBTZW5kZXIsIHRyYWNrLCBydHBQYXJhbWV0ZXJzLCBzdG9wVHJhY2tzLCBkaXNhYmxlVHJhY2tPblBhdXNlLCB6ZXJvUnRwT25QYXVzZSwgYXBwRGF0YSB9KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIC8vIENsb3NlZCBmbGFnLlxuICAgICAgICB0aGlzLl9jbG9zZWQgPSBmYWxzZTtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdjb25zdHJ1Y3RvcigpJyk7XG4gICAgICAgIHRoaXMuX2lkID0gaWQ7XG4gICAgICAgIHRoaXMuX2xvY2FsSWQgPSBsb2NhbElkO1xuICAgICAgICB0aGlzLl9ydHBTZW5kZXIgPSBydHBTZW5kZXI7XG4gICAgICAgIHRoaXMuX3RyYWNrID0gdHJhY2s7XG4gICAgICAgIHRoaXMuX2tpbmQgPSB0cmFjay5raW5kO1xuICAgICAgICB0aGlzLl9ydHBQYXJhbWV0ZXJzID0gcnRwUGFyYW1ldGVycztcbiAgICAgICAgdGhpcy5fcGF1c2VkID0gZGlzYWJsZVRyYWNrT25QYXVzZSA/ICF0cmFjay5lbmFibGVkIDogZmFsc2U7XG4gICAgICAgIHRoaXMuX21heFNwYXRpYWxMYXllciA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fc3RvcFRyYWNrcyA9IHN0b3BUcmFja3M7XG4gICAgICAgIHRoaXMuX2Rpc2FibGVUcmFja09uUGF1c2UgPSBkaXNhYmxlVHJhY2tPblBhdXNlO1xuICAgICAgICB0aGlzLl96ZXJvUnRwT25QYXVzZSA9IHplcm9SdHBPblBhdXNlO1xuICAgICAgICB0aGlzLl9hcHBEYXRhID0gYXBwRGF0YTtcbiAgICAgICAgdGhpcy5fb25UcmFja0VuZGVkID0gdGhpcy5fb25UcmFja0VuZGVkLmJpbmQodGhpcyk7XG4gICAgICAgIC8vIE5PVEU6IE1pbm9yIGlzc3VlLiBJZiB6ZXJvUnRwT25QYXVzZSBpcyB0cnVlLCB3ZSBjYW5ub3QgZW1pdCB0aGVcbiAgICAgICAgLy8gJ0ByZXBsYWNldHJhY2snIGV2ZW50IGhlcmUsIHNvIFJUQ1J0cFNlbmRlci50cmFjayB3b24ndCBiZSBudWxsLlxuICAgICAgICB0aGlzLl9oYW5kbGVUcmFjaygpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQcm9kdWNlciBpZC5cbiAgICAgKi9cbiAgICBnZXQgaWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTG9jYWwgaWQuXG4gICAgICovXG4gICAgZ2V0IGxvY2FsSWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9sb2NhbElkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRoZSBQcm9kdWNlciBpcyBjbG9zZWQuXG4gICAgICovXG4gICAgZ2V0IGNsb3NlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Nsb3NlZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWVkaWEga2luZC5cbiAgICAgKi9cbiAgICBnZXQga2luZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2tpbmQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFzc29jaWF0ZWQgUlRDUnRwU2VuZGVyLlxuICAgICAqL1xuICAgIGdldCBydHBTZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9ydHBTZW5kZXI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBhc3NvY2lhdGVkIHRyYWNrLlxuICAgICAqL1xuICAgIGdldCB0cmFjaygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RyYWNrO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSVFAgcGFyYW1ldGVycy5cbiAgICAgKi9cbiAgICBnZXQgcnRwUGFyYW1ldGVycygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3J0cFBhcmFtZXRlcnM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhlIFByb2R1Y2VyIGlzIHBhdXNlZC5cbiAgICAgKi9cbiAgICBnZXQgcGF1c2VkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGF1c2VkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNYXggc3BhdGlhbCBsYXllci5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtOdW1iZXIgfCB1bmRlZmluZWR9XG4gICAgICovXG4gICAgZ2V0IG1heFNwYXRpYWxMYXllcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21heFNwYXRpYWxMYXllcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQXBwIGN1c3RvbSBkYXRhLlxuICAgICAqL1xuICAgIGdldCBhcHBEYXRhKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYXBwRGF0YTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW52YWxpZCBzZXR0ZXIuXG4gICAgICovXG4gICAgc2V0IGFwcERhdGEoYXBwRGF0YSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Nhbm5vdCBvdmVycmlkZSBhcHBEYXRhIG9iamVjdCcpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDbG9zZXMgdGhlIFByb2R1Y2VyLlxuICAgICAqL1xuICAgIGNsb3NlKCkge1xuICAgICAgICBpZiAodGhpcy5fY2xvc2VkKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBsb2dnZXIuZGVidWcoJ2Nsb3NlKCknKTtcbiAgICAgICAgdGhpcy5fY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fZGVzdHJveVRyYWNrKCk7XG4gICAgICAgIHRoaXMuZW1pdCgnQGNsb3NlJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRyYW5zcG9ydCB3YXMgY2xvc2VkLlxuICAgICAqL1xuICAgIHRyYW5zcG9ydENsb3NlZCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2Nsb3NlZClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCd0cmFuc3BvcnRDbG9zZWQoKScpO1xuICAgICAgICB0aGlzLl9jbG9zZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLl9kZXN0cm95VHJhY2soKTtcbiAgICAgICAgdGhpcy5zYWZlRW1pdCgndHJhbnNwb3J0Y2xvc2UnKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IGFzc29jaWF0ZWQgUlRDUnRwU2VuZGVyIHN0YXRzLlxuICAgICAqL1xuICAgIGFzeW5jIGdldFN0YXRzKCkge1xuICAgICAgICBpZiAodGhpcy5fY2xvc2VkKVxuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLkludmFsaWRTdGF0ZUVycm9yKCdjbG9zZWQnKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2FmZUVtaXRBc1Byb21pc2UoJ0BnZXRzdGF0cycpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQYXVzZXMgc2VuZGluZyBtZWRpYS5cbiAgICAgKi9cbiAgICBwYXVzZSgpIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdwYXVzZSgpJyk7XG4gICAgICAgIGlmICh0aGlzLl9jbG9zZWQpIHtcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcigncGF1c2UoKSB8IFByb2R1Y2VyIGNsb3NlZCcpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3BhdXNlZCA9IHRydWU7XG4gICAgICAgIGlmICh0aGlzLl90cmFjayAmJiB0aGlzLl9kaXNhYmxlVHJhY2tPblBhdXNlKSB7XG4gICAgICAgICAgICB0aGlzLl90cmFjay5lbmFibGVkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3plcm9SdHBPblBhdXNlKSB7XG4gICAgICAgICAgICB0aGlzLnNhZmVFbWl0QXNQcm9taXNlKCdAcmVwbGFjZXRyYWNrJywgbnVsbClcbiAgICAgICAgICAgICAgICAuY2F0Y2goKCkgPT4geyB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXN1bWVzIHNlbmRpbmcgbWVkaWEuXG4gICAgICovXG4gICAgcmVzdW1lKCkge1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3Jlc3VtZSgpJyk7XG4gICAgICAgIGlmICh0aGlzLl9jbG9zZWQpIHtcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcigncmVzdW1lKCkgfCBQcm9kdWNlciBjbG9zZWQnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wYXVzZWQgPSBmYWxzZTtcbiAgICAgICAgaWYgKHRoaXMuX3RyYWNrICYmIHRoaXMuX2Rpc2FibGVUcmFja09uUGF1c2UpIHtcbiAgICAgICAgICAgIHRoaXMuX3RyYWNrLmVuYWJsZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl96ZXJvUnRwT25QYXVzZSkge1xuICAgICAgICAgICAgdGhpcy5zYWZlRW1pdEFzUHJvbWlzZSgnQHJlcGxhY2V0cmFjaycsIHRoaXMuX3RyYWNrKVxuICAgICAgICAgICAgICAgIC5jYXRjaCgoKSA9PiB7IH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlcGxhY2VzIHRoZSBjdXJyZW50IHRyYWNrIHdpdGggYSBuZXcgb25lIG9yIG51bGwuXG4gICAgICovXG4gICAgYXN5bmMgcmVwbGFjZVRyYWNrKHsgdHJhY2sgfSkge1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3JlcGxhY2VUcmFjaygpIFt0cmFjazolb10nLCB0cmFjayk7XG4gICAgICAgIGlmICh0aGlzLl9jbG9zZWQpIHtcbiAgICAgICAgICAgIC8vIFRoaXMgbXVzdCBiZSBkb25lIGhlcmUuIE90aGVyd2lzZSB0aGVyZSBpcyBubyBjaGFuY2UgdG8gc3RvcCB0aGUgZ2l2ZW5cbiAgICAgICAgICAgIC8vIHRyYWNrLlxuICAgICAgICAgICAgaWYgKHRyYWNrICYmIHRoaXMuX3N0b3BUcmFja3MpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB0cmFjay5zdG9wKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikgeyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuSW52YWxpZFN0YXRlRXJyb3IoJ2Nsb3NlZCcpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRyYWNrICYmIHRyYWNrLnJlYWR5U3RhdGUgPT09ICdlbmRlZCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5JbnZhbGlkU3RhdGVFcnJvcigndHJhY2sgZW5kZWQnKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBEbyBub3RoaW5nIGlmIHRoaXMgaXMgdGhlIHNhbWUgdHJhY2sgYXMgdGhlIGN1cnJlbnQgaGFuZGxlZCBvbmUuXG4gICAgICAgIGlmICh0cmFjayA9PT0gdGhpcy5fdHJhY2spIHtcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZygncmVwbGFjZVRyYWNrKCkgfCBzYW1lIHRyYWNrLCBpZ25vcmVkJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl96ZXJvUnRwT25QYXVzZSB8fCAhdGhpcy5fcGF1c2VkKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnNhZmVFbWl0QXNQcm9taXNlKCdAcmVwbGFjZXRyYWNrJywgdHJhY2spO1xuICAgICAgICB9XG4gICAgICAgIC8vIERlc3Ryb3kgdGhlIHByZXZpb3VzIHRyYWNrLlxuICAgICAgICB0aGlzLl9kZXN0cm95VHJhY2soKTtcbiAgICAgICAgLy8gU2V0IHRoZSBuZXcgdHJhY2suXG4gICAgICAgIHRoaXMuX3RyYWNrID0gdHJhY2s7XG4gICAgICAgIC8vIElmIHRoaXMgUHJvZHVjZXIgd2FzIHBhdXNlZC9yZXN1bWVkIGFuZCB0aGUgc3RhdGUgb2YgdGhlIG5ld1xuICAgICAgICAvLyB0cmFjayBkb2VzIG5vdCBtYXRjaCwgZml4IGl0LlxuICAgICAgICBpZiAodGhpcy5fdHJhY2sgJiYgdGhpcy5fZGlzYWJsZVRyYWNrT25QYXVzZSkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9wYXVzZWQpXG4gICAgICAgICAgICAgICAgdGhpcy5fdHJhY2suZW5hYmxlZCA9IHRydWU7XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9wYXVzZWQpXG4gICAgICAgICAgICAgICAgdGhpcy5fdHJhY2suZW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIC8vIEhhbmRsZSB0aGUgZWZmZWN0aXZlIHRyYWNrLlxuICAgICAgICB0aGlzLl9oYW5kbGVUcmFjaygpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB2aWRlbyBtYXggc3BhdGlhbCBsYXllciB0byBiZSBzZW50LlxuICAgICAqL1xuICAgIGFzeW5jIHNldE1heFNwYXRpYWxMYXllcihzcGF0aWFsTGF5ZXIpIHtcbiAgICAgICAgaWYgKHRoaXMuX2Nsb3NlZClcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5JbnZhbGlkU3RhdGVFcnJvcignY2xvc2VkJyk7XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuX2tpbmQgIT09ICd2aWRlbycpXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuVW5zdXBwb3J0ZWRFcnJvcignbm90IGEgdmlkZW8gUHJvZHVjZXInKTtcbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHNwYXRpYWxMYXllciAhPT0gJ251bWJlcicpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHNwYXRpYWxMYXllcicpO1xuICAgICAgICBpZiAoc3BhdGlhbExheWVyID09PSB0aGlzLl9tYXhTcGF0aWFsTGF5ZXIpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGF3YWl0IHRoaXMuc2FmZUVtaXRBc1Byb21pc2UoJ0BzZXRtYXhzcGF0aWFsbGF5ZXInLCBzcGF0aWFsTGF5ZXIpO1xuICAgICAgICB0aGlzLl9tYXhTcGF0aWFsTGF5ZXIgPSBzcGF0aWFsTGF5ZXI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIERTQ1AgdmFsdWUuXG4gICAgICovXG4gICAgYXN5bmMgc2V0UnRwRW5jb2RpbmdQYXJhbWV0ZXJzKHBhcmFtcykge1xuICAgICAgICBpZiAodGhpcy5fY2xvc2VkKVxuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLkludmFsaWRTdGF0ZUVycm9yKCdjbG9zZWQnKTtcbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHBhcmFtcyAhPT0gJ29iamVjdCcpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHBhcmFtcycpO1xuICAgICAgICBhd2FpdCB0aGlzLnNhZmVFbWl0QXNQcm9taXNlKCdAc2V0cnRwZW5jb2RpbmdwYXJhbWV0ZXJzJywgcGFyYW1zKTtcbiAgICB9XG4gICAgX29uVHJhY2tFbmRlZCgpIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCd0cmFjayBcImVuZGVkXCIgZXZlbnQnKTtcbiAgICAgICAgdGhpcy5zYWZlRW1pdCgndHJhY2tlbmRlZCcpO1xuICAgIH1cbiAgICBfaGFuZGxlVHJhY2soKSB7XG4gICAgICAgIGlmICghdGhpcy5fdHJhY2spXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMuX3RyYWNrLmFkZEV2ZW50TGlzdGVuZXIoJ2VuZGVkJywgdGhpcy5fb25UcmFja0VuZGVkKTtcbiAgICB9XG4gICAgX2Rlc3Ryb3lUcmFjaygpIHtcbiAgICAgICAgaWYgKCF0aGlzLl90cmFjaylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuX3RyYWNrLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2VuZGVkJywgdGhpcy5fb25UcmFja0VuZGVkKTtcbiAgICAgICAgICAgIC8vIEp1c3Qgc3RvcCB0aGUgdHJhY2sgdW5sZXNzIHRoZSBhcHAgc2V0IHN0b3BUcmFja3M6IGZhbHNlLlxuICAgICAgICAgICAgaWYgKHRoaXMuX3N0b3BUcmFja3MpXG4gICAgICAgICAgICAgICAgdGhpcy5fdHJhY2suc3RvcCgpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikgeyB9XG4gICAgfVxufVxuZXhwb3J0cy5Qcm9kdWNlciA9IFByb2R1Y2VyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBMb2dnZXJfMSA9IHJlcXVpcmUoXCIuL0xvZ2dlclwiKTtcbmNvbnN0IEVuaGFuY2VkRXZlbnRFbWl0dGVyXzEgPSByZXF1aXJlKFwiLi9FbmhhbmNlZEV2ZW50RW1pdHRlclwiKTtcbmNvbnN0IGVycm9yc18xID0gcmVxdWlyZShcIi4vZXJyb3JzXCIpO1xuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcl8xLkxvZ2dlcignQ29uc3VtZXInKTtcbmNsYXNzIENvbnN1bWVyIGV4dGVuZHMgRW5oYW5jZWRFdmVudEVtaXR0ZXJfMS5FbmhhbmNlZEV2ZW50RW1pdHRlciB7XG4gICAgLyoqXG4gICAgICogQGVtaXRzIHRyYW5zcG9ydGNsb3NlXG4gICAgICogQGVtaXRzIHRyYWNrZW5kZWRcbiAgICAgKiBAZW1pdHMgQGdldHN0YXRzXG4gICAgICogQGVtaXRzIEBjbG9zZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHsgaWQsIGxvY2FsSWQsIHByb2R1Y2VySWQsIHJ0cFJlY2VpdmVyLCB0cmFjaywgcnRwUGFyYW1ldGVycywgYXBwRGF0YSB9KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIC8vIENsb3NlZCBmbGFnLlxuICAgICAgICB0aGlzLl9jbG9zZWQgPSBmYWxzZTtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdjb25zdHJ1Y3RvcigpJyk7XG4gICAgICAgIHRoaXMuX2lkID0gaWQ7XG4gICAgICAgIHRoaXMuX2xvY2FsSWQgPSBsb2NhbElkO1xuICAgICAgICB0aGlzLl9wcm9kdWNlcklkID0gcHJvZHVjZXJJZDtcbiAgICAgICAgdGhpcy5fcnRwUmVjZWl2ZXIgPSBydHBSZWNlaXZlcjtcbiAgICAgICAgdGhpcy5fdHJhY2sgPSB0cmFjaztcbiAgICAgICAgdGhpcy5fcnRwUGFyYW1ldGVycyA9IHJ0cFBhcmFtZXRlcnM7XG4gICAgICAgIHRoaXMuX3BhdXNlZCA9ICF0cmFjay5lbmFibGVkO1xuICAgICAgICB0aGlzLl9hcHBEYXRhID0gYXBwRGF0YTtcbiAgICAgICAgdGhpcy5fb25UcmFja0VuZGVkID0gdGhpcy5fb25UcmFja0VuZGVkLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuX2hhbmRsZVRyYWNrKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbnN1bWVyIGlkLlxuICAgICAqL1xuICAgIGdldCBpZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMb2NhbCBpZC5cbiAgICAgKi9cbiAgICBnZXQgbG9jYWxJZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xvY2FsSWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFzc29jaWF0ZWQgUHJvZHVjZXIgaWQuXG4gICAgICovXG4gICAgZ2V0IHByb2R1Y2VySWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcm9kdWNlcklkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRoZSBDb25zdW1lciBpcyBjbG9zZWQuXG4gICAgICovXG4gICAgZ2V0IGNsb3NlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Nsb3NlZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWVkaWEga2luZC5cbiAgICAgKi9cbiAgICBnZXQga2luZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RyYWNrLmtpbmQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFzc29jaWF0ZWQgUlRDUnRwUmVjZWl2ZXIuXG4gICAgICovXG4gICAgZ2V0IHJ0cFJlY2VpdmVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcnRwUmVjZWl2ZXI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBhc3NvY2lhdGVkIHRyYWNrLlxuICAgICAqL1xuICAgIGdldCB0cmFjaygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RyYWNrO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSVFAgcGFyYW1ldGVycy5cbiAgICAgKi9cbiAgICBnZXQgcnRwUGFyYW1ldGVycygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3J0cFBhcmFtZXRlcnM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhlIENvbnN1bWVyIGlzIHBhdXNlZC5cbiAgICAgKi9cbiAgICBnZXQgcGF1c2VkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGF1c2VkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBcHAgY3VzdG9tIGRhdGEuXG4gICAgICovXG4gICAgZ2V0IGFwcERhdGEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hcHBEYXRhO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbnZhbGlkIHNldHRlci5cbiAgICAgKi9cbiAgICBzZXQgYXBwRGF0YShhcHBEYXRhKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignY2Fubm90IG92ZXJyaWRlIGFwcERhdGEgb2JqZWN0Jyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENsb3NlcyB0aGUgQ29uc3VtZXIuXG4gICAgICovXG4gICAgY2xvc2UoKSB7XG4gICAgICAgIGlmICh0aGlzLl9jbG9zZWQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGxvZ2dlci5kZWJ1ZygnY2xvc2UoKScpO1xuICAgICAgICB0aGlzLl9jbG9zZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLl9kZXN0cm95VHJhY2soKTtcbiAgICAgICAgdGhpcy5lbWl0KCdAY2xvc2UnKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVHJhbnNwb3J0IHdhcyBjbG9zZWQuXG4gICAgICovXG4gICAgdHJhbnNwb3J0Q2xvc2VkKCkge1xuICAgICAgICBpZiAodGhpcy5fY2xvc2VkKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3RyYW5zcG9ydENsb3NlZCgpJyk7XG4gICAgICAgIHRoaXMuX2Nsb3NlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuX2Rlc3Ryb3lUcmFjaygpO1xuICAgICAgICB0aGlzLnNhZmVFbWl0KCd0cmFuc3BvcnRjbG9zZScpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgYXNzb2NpYXRlZCBSVENSdHBSZWNlaXZlciBzdGF0cy5cbiAgICAgKi9cbiAgICBhc3luYyBnZXRTdGF0cygpIHtcbiAgICAgICAgaWYgKHRoaXMuX2Nsb3NlZClcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5JbnZhbGlkU3RhdGVFcnJvcignY2xvc2VkJyk7XG4gICAgICAgIHJldHVybiB0aGlzLnNhZmVFbWl0QXNQcm9taXNlKCdAZ2V0c3RhdHMnKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGF1c2VzIHJlY2VpdmluZyBtZWRpYS5cbiAgICAgKi9cbiAgICBwYXVzZSgpIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdwYXVzZSgpJyk7XG4gICAgICAgIGlmICh0aGlzLl9jbG9zZWQpIHtcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcigncGF1c2UoKSB8IENvbnN1bWVyIGNsb3NlZCcpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3BhdXNlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuX3RyYWNrLmVuYWJsZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVzdW1lcyByZWNlaXZpbmcgbWVkaWEuXG4gICAgICovXG4gICAgcmVzdW1lKCkge1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3Jlc3VtZSgpJyk7XG4gICAgICAgIGlmICh0aGlzLl9jbG9zZWQpIHtcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcigncmVzdW1lKCkgfCBDb25zdW1lciBjbG9zZWQnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wYXVzZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fdHJhY2suZW5hYmxlZCA9IHRydWU7XG4gICAgfVxuICAgIF9vblRyYWNrRW5kZWQoKSB7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZygndHJhY2sgXCJlbmRlZFwiIGV2ZW50Jyk7XG4gICAgICAgIHRoaXMuc2FmZUVtaXQoJ3RyYWNrZW5kZWQnKTtcbiAgICB9XG4gICAgX2hhbmRsZVRyYWNrKCkge1xuICAgICAgICB0aGlzLl90cmFjay5hZGRFdmVudExpc3RlbmVyKCdlbmRlZCcsIHRoaXMuX29uVHJhY2tFbmRlZCk7XG4gICAgfVxuICAgIF9kZXN0cm95VHJhY2soKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLl90cmFjay5yZW1vdmVFdmVudExpc3RlbmVyKCdlbmRlZCcsIHRoaXMuX29uVHJhY2tFbmRlZCk7XG4gICAgICAgICAgICB0aGlzLl90cmFjay5zdG9wKCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7IH1cbiAgICB9XG59XG5leHBvcnRzLkNvbnN1bWVyID0gQ29uc3VtZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IExvZ2dlcl8xID0gcmVxdWlyZShcIi4vTG9nZ2VyXCIpO1xuY29uc3QgRW5oYW5jZWRFdmVudEVtaXR0ZXJfMSA9IHJlcXVpcmUoXCIuL0VuaGFuY2VkRXZlbnRFbWl0dGVyXCIpO1xuY29uc3QgZXJyb3JzXzEgPSByZXF1aXJlKFwiLi9lcnJvcnNcIik7XG5jb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyXzEuTG9nZ2VyKCdEYXRhUHJvZHVjZXInKTtcbmNsYXNzIERhdGFQcm9kdWNlciBleHRlbmRzIEVuaGFuY2VkRXZlbnRFbWl0dGVyXzEuRW5oYW5jZWRFdmVudEVtaXR0ZXIge1xuICAgIC8qKlxuICAgICAqIEBlbWl0cyB0cmFuc3BvcnRjbG9zZVxuICAgICAqIEBlbWl0cyBvcGVuXG4gICAgICogQGVtaXRzIGVycm9yIC0gKGVycm9yOiBFcnJvcilcbiAgICAgKiBAZW1pdHMgY2xvc2VcbiAgICAgKiBAZW1pdHMgYnVmZmVyZWRhbW91bnRsb3dcbiAgICAgKiBAZW1pdHMgQGNsb3NlXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoeyBpZCwgZGF0YUNoYW5uZWwsIHNjdHBTdHJlYW1QYXJhbWV0ZXJzLCBhcHBEYXRhIH0pIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgLy8gQ2xvc2VkIGZsYWcuXG4gICAgICAgIHRoaXMuX2Nsb3NlZCA9IGZhbHNlO1xuICAgICAgICBsb2dnZXIuZGVidWcoJ2NvbnN0cnVjdG9yKCknKTtcbiAgICAgICAgdGhpcy5faWQgPSBpZDtcbiAgICAgICAgdGhpcy5fZGF0YUNoYW5uZWwgPSBkYXRhQ2hhbm5lbDtcbiAgICAgICAgdGhpcy5fc2N0cFN0cmVhbVBhcmFtZXRlcnMgPSBzY3RwU3RyZWFtUGFyYW1ldGVycztcbiAgICAgICAgdGhpcy5fYXBwRGF0YSA9IGFwcERhdGE7XG4gICAgICAgIHRoaXMuX2hhbmRsZURhdGFDaGFubmVsKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERhdGFQcm9kdWNlciBpZC5cbiAgICAgKi9cbiAgICBnZXQgaWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV2hldGhlciB0aGUgRGF0YVByb2R1Y2VyIGlzIGNsb3NlZC5cbiAgICAgKi9cbiAgICBnZXQgY2xvc2VkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xvc2VkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTQ1RQIHN0cmVhbSBwYXJhbWV0ZXJzLlxuICAgICAqL1xuICAgIGdldCBzY3RwU3RyZWFtUGFyYW1ldGVycygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NjdHBTdHJlYW1QYXJhbWV0ZXJzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEYXRhQ2hhbm5lbCByZWFkeVN0YXRlLlxuICAgICAqL1xuICAgIGdldCByZWFkeVN0YXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YUNoYW5uZWwucmVhZHlTdGF0ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGF0YUNoYW5uZWwgbGFiZWwuXG4gICAgICovXG4gICAgZ2V0IGxhYmVsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YUNoYW5uZWwubGFiZWw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERhdGFDaGFubmVsIHByb3RvY29sLlxuICAgICAqL1xuICAgIGdldCBwcm90b2NvbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RhdGFDaGFubmVsLnByb3RvY29sO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEYXRhQ2hhbm5lbCBidWZmZXJlZEFtb3VudC5cbiAgICAgKi9cbiAgICBnZXQgYnVmZmVyZWRBbW91bnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kYXRhQ2hhbm5lbC5idWZmZXJlZEFtb3VudDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGF0YUNoYW5uZWwgYnVmZmVyZWRBbW91bnRMb3dUaHJlc2hvbGQuXG4gICAgICovXG4gICAgZ2V0IGJ1ZmZlcmVkQW1vdW50TG93VGhyZXNob2xkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YUNoYW5uZWwuYnVmZmVyZWRBbW91bnRMb3dUaHJlc2hvbGQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldCBEYXRhQ2hhbm5lbCBidWZmZXJlZEFtb3VudExvd1RocmVzaG9sZC5cbiAgICAgKi9cbiAgICBzZXQgYnVmZmVyZWRBbW91bnRMb3dUaHJlc2hvbGQoYnVmZmVyZWRBbW91bnRMb3dUaHJlc2hvbGQpIHtcbiAgICAgICAgdGhpcy5fZGF0YUNoYW5uZWwuYnVmZmVyZWRBbW91bnRMb3dUaHJlc2hvbGQgPSBidWZmZXJlZEFtb3VudExvd1RocmVzaG9sZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQXBwIGN1c3RvbSBkYXRhLlxuICAgICAqL1xuICAgIGdldCBhcHBEYXRhKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYXBwRGF0YTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW52YWxpZCBzZXR0ZXIuXG4gICAgICovXG4gICAgc2V0IGFwcERhdGEoYXBwRGF0YSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Nhbm5vdCBvdmVycmlkZSBhcHBEYXRhIG9iamVjdCcpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDbG9zZXMgdGhlIERhdGFQcm9kdWNlci5cbiAgICAgKi9cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2Nsb3NlZClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdjbG9zZSgpJyk7XG4gICAgICAgIHRoaXMuX2Nsb3NlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuX2RhdGFDaGFubmVsLmNsb3NlKCk7XG4gICAgICAgIHRoaXMuZW1pdCgnQGNsb3NlJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRyYW5zcG9ydCB3YXMgY2xvc2VkLlxuICAgICAqL1xuICAgIHRyYW5zcG9ydENsb3NlZCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2Nsb3NlZClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCd0cmFuc3BvcnRDbG9zZWQoKScpO1xuICAgICAgICB0aGlzLl9jbG9zZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLl9kYXRhQ2hhbm5lbC5jbG9zZSgpO1xuICAgICAgICB0aGlzLnNhZmVFbWl0KCd0cmFuc3BvcnRjbG9zZScpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZW5kIGEgbWVzc2FnZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfEJsb2J8QXJyYXlCdWZmZXJ8QXJyYXlCdWZmZXJWaWV3fSBkYXRhLlxuICAgICAqL1xuICAgIHNlbmQoZGF0YSkge1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3NlbmQoKScpO1xuICAgICAgICBpZiAodGhpcy5fY2xvc2VkKVxuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLkludmFsaWRTdGF0ZUVycm9yKCdjbG9zZWQnKTtcbiAgICAgICAgdGhpcy5fZGF0YUNoYW5uZWwuc2VuZChkYXRhKTtcbiAgICB9XG4gICAgX2hhbmRsZURhdGFDaGFubmVsKCkge1xuICAgICAgICB0aGlzLl9kYXRhQ2hhbm5lbC5hZGRFdmVudExpc3RlbmVyKCdvcGVuJywgKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2Nsb3NlZClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBsb2dnZXIuZGVidWcoJ0RhdGFDaGFubmVsIFwib3BlblwiIGV2ZW50Jyk7XG4gICAgICAgICAgICB0aGlzLnNhZmVFbWl0KCdvcGVuJyk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9kYXRhQ2hhbm5lbC5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2Nsb3NlZClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBsZXQgeyBlcnJvciB9ID0gZXZlbnQ7XG4gICAgICAgICAgICBpZiAoIWVycm9yKVxuICAgICAgICAgICAgICAgIGVycm9yID0gbmV3IEVycm9yKCd1bmtub3duIERhdGFDaGFubmVsIGVycm9yJyk7XG4gICAgICAgICAgICBpZiAoZXJyb3IuZXJyb3JEZXRhaWwgPT09ICdzY3RwLWZhaWx1cmUnKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKCdEYXRhQ2hhbm5lbCBTQ1RQIGVycm9yIFtzY3RwQ2F1c2VDb2RlOiVzXTogJXMnLCBlcnJvci5zY3RwQ2F1c2VDb2RlLCBlcnJvci5tZXNzYWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcignRGF0YUNoYW5uZWwgXCJlcnJvclwiIGV2ZW50OiAlbycsIGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc2FmZUVtaXQoJ2Vycm9yJywgZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fZGF0YUNoYW5uZWwuYWRkRXZlbnRMaXN0ZW5lcignY2xvc2UnLCAoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5fY2xvc2VkKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKCdEYXRhQ2hhbm5lbCBcImNsb3NlXCIgZXZlbnQnKTtcbiAgICAgICAgICAgIHRoaXMuX2Nsb3NlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ0BjbG9zZScpO1xuICAgICAgICAgICAgdGhpcy5zYWZlRW1pdCgnY2xvc2UnKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX2RhdGFDaGFubmVsLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCAoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5fY2xvc2VkKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKCdEYXRhQ2hhbm5lbCBcIm1lc3NhZ2VcIiBldmVudCBpbiBhIERhdGFQcm9kdWNlciwgbWVzc2FnZSBkaXNjYXJkZWQnKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX2RhdGFDaGFubmVsLmFkZEV2ZW50TGlzdGVuZXIoJ2J1ZmZlcmVkYW1vdW50bG93JywgKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2Nsb3NlZClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB0aGlzLnNhZmVFbWl0KCdidWZmZXJlZGFtb3VudGxvdycpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLkRhdGFQcm9kdWNlciA9IERhdGFQcm9kdWNlcjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgTG9nZ2VyXzEgPSByZXF1aXJlKFwiLi9Mb2dnZXJcIik7XG5jb25zdCBFbmhhbmNlZEV2ZW50RW1pdHRlcl8xID0gcmVxdWlyZShcIi4vRW5oYW5jZWRFdmVudEVtaXR0ZXJcIik7XG5jb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyXzEuTG9nZ2VyKCdEYXRhQ29uc3VtZXInKTtcbmNsYXNzIERhdGFDb25zdW1lciBleHRlbmRzIEVuaGFuY2VkRXZlbnRFbWl0dGVyXzEuRW5oYW5jZWRFdmVudEVtaXR0ZXIge1xuICAgIC8qKlxuICAgICAqIEBlbWl0cyB0cmFuc3BvcnRjbG9zZVxuICAgICAqIEBlbWl0cyBvcGVuXG4gICAgICogQGVtaXRzIGVycm9yIC0gKGVycm9yOiBFcnJvcilcbiAgICAgKiBAZW1pdHMgY2xvc2VcbiAgICAgKiBAZW1pdHMgbWVzc2FnZSAtIChtZXNzYWdlOiBhbnkpXG4gICAgICogQGVtaXRzIEBjbG9zZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHsgaWQsIGRhdGFQcm9kdWNlcklkLCBkYXRhQ2hhbm5lbCwgc2N0cFN0cmVhbVBhcmFtZXRlcnMsIGFwcERhdGEgfSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICAvLyBDbG9zZWQgZmxhZy5cbiAgICAgICAgdGhpcy5fY2xvc2VkID0gZmFsc2U7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZygnY29uc3RydWN0b3IoKScpO1xuICAgICAgICB0aGlzLl9pZCA9IGlkO1xuICAgICAgICB0aGlzLl9kYXRhUHJvZHVjZXJJZCA9IGRhdGFQcm9kdWNlcklkO1xuICAgICAgICB0aGlzLl9kYXRhQ2hhbm5lbCA9IGRhdGFDaGFubmVsO1xuICAgICAgICB0aGlzLl9zY3RwU3RyZWFtUGFyYW1ldGVycyA9IHNjdHBTdHJlYW1QYXJhbWV0ZXJzO1xuICAgICAgICB0aGlzLl9hcHBEYXRhID0gYXBwRGF0YTtcbiAgICAgICAgdGhpcy5faGFuZGxlRGF0YUNoYW5uZWwoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGF0YUNvbnN1bWVyIGlkLlxuICAgICAqL1xuICAgIGdldCBpZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBc3NvY2lhdGVkIERhdGFQcm9kdWNlciBpZC5cbiAgICAgKi9cbiAgICBnZXQgZGF0YVByb2R1Y2VySWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kYXRhUHJvZHVjZXJJZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV2hldGhlciB0aGUgRGF0YUNvbnN1bWVyIGlzIGNsb3NlZC5cbiAgICAgKi9cbiAgICBnZXQgY2xvc2VkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xvc2VkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTQ1RQIHN0cmVhbSBwYXJhbWV0ZXJzLlxuICAgICAqL1xuICAgIGdldCBzY3RwU3RyZWFtUGFyYW1ldGVycygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NjdHBTdHJlYW1QYXJhbWV0ZXJzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEYXRhQ2hhbm5lbCByZWFkeVN0YXRlLlxuICAgICAqL1xuICAgIGdldCByZWFkeVN0YXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YUNoYW5uZWwucmVhZHlTdGF0ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGF0YUNoYW5uZWwgbGFiZWwuXG4gICAgICovXG4gICAgZ2V0IGxhYmVsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YUNoYW5uZWwubGFiZWw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERhdGFDaGFubmVsIHByb3RvY29sLlxuICAgICAqL1xuICAgIGdldCBwcm90b2NvbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RhdGFDaGFubmVsLnByb3RvY29sO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEYXRhQ2hhbm5lbCBiaW5hcnlUeXBlLlxuICAgICAqL1xuICAgIGdldCBiaW5hcnlUeXBlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YUNoYW5uZWwuYmluYXJ5VHlwZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IERhdGFDaGFubmVsIGJpbmFyeVR5cGUuXG4gICAgICovXG4gICAgc2V0IGJpbmFyeVR5cGUoYmluYXJ5VHlwZSkge1xuICAgICAgICB0aGlzLl9kYXRhQ2hhbm5lbC5iaW5hcnlUeXBlID0gYmluYXJ5VHlwZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQXBwIGN1c3RvbSBkYXRhLlxuICAgICAqL1xuICAgIGdldCBhcHBEYXRhKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYXBwRGF0YTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW52YWxpZCBzZXR0ZXIuXG4gICAgICovXG4gICAgc2V0IGFwcERhdGEoYXBwRGF0YSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Nhbm5vdCBvdmVycmlkZSBhcHBEYXRhIG9iamVjdCcpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDbG9zZXMgdGhlIERhdGFDb25zdW1lci5cbiAgICAgKi9cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2Nsb3NlZClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdjbG9zZSgpJyk7XG4gICAgICAgIHRoaXMuX2Nsb3NlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuX2RhdGFDaGFubmVsLmNsb3NlKCk7XG4gICAgICAgIHRoaXMuZW1pdCgnQGNsb3NlJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRyYW5zcG9ydCB3YXMgY2xvc2VkLlxuICAgICAqL1xuICAgIHRyYW5zcG9ydENsb3NlZCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2Nsb3NlZClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCd0cmFuc3BvcnRDbG9zZWQoKScpO1xuICAgICAgICB0aGlzLl9jbG9zZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLl9kYXRhQ2hhbm5lbC5jbG9zZSgpO1xuICAgICAgICB0aGlzLnNhZmVFbWl0KCd0cmFuc3BvcnRjbG9zZScpO1xuICAgIH1cbiAgICBfaGFuZGxlRGF0YUNoYW5uZWwoKSB7XG4gICAgICAgIHRoaXMuX2RhdGFDaGFubmVsLmFkZEV2ZW50TGlzdGVuZXIoJ29wZW4nLCAoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5fY2xvc2VkKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZygnRGF0YUNoYW5uZWwgXCJvcGVuXCIgZXZlbnQnKTtcbiAgICAgICAgICAgIHRoaXMuc2FmZUVtaXQoJ29wZW4nKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX2RhdGFDaGFubmVsLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5fY2xvc2VkKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGxldCB7IGVycm9yIH0gPSBldmVudDtcbiAgICAgICAgICAgIGlmICghZXJyb3IpXG4gICAgICAgICAgICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoJ3Vua25vd24gRGF0YUNoYW5uZWwgZXJyb3InKTtcbiAgICAgICAgICAgIGlmIChlcnJvci5lcnJvckRldGFpbCA9PT0gJ3NjdHAtZmFpbHVyZScpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoJ0RhdGFDaGFubmVsIFNDVFAgZXJyb3IgW3NjdHBDYXVzZUNvZGU6JXNdOiAlcycsIGVycm9yLnNjdHBDYXVzZUNvZGUsIGVycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKCdEYXRhQ2hhbm5lbCBcImVycm9yXCIgZXZlbnQ6ICVvJywgZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zYWZlRW1pdCgnZXJyb3InLCBlcnJvcik7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9kYXRhQ2hhbm5lbC5hZGRFdmVudExpc3RlbmVyKCdjbG9zZScsICgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jbG9zZWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgbG9nZ2VyLndhcm4oJ0RhdGFDaGFubmVsIFwiY2xvc2VcIiBldmVudCcpO1xuICAgICAgICAgICAgdGhpcy5fY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuZW1pdCgnQGNsb3NlJyk7XG4gICAgICAgICAgICB0aGlzLnNhZmVFbWl0KCdjbG9zZScpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fZGF0YUNoYW5uZWwuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2Nsb3NlZClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB0aGlzLnNhZmVFbWl0KCdtZXNzYWdlJywgZXZlbnQuZGF0YSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydHMuRGF0YUNvbnN1bWVyID0gRGF0YUNvbnN1bWVyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBhd2FpdHF1ZXVlXzEgPSByZXF1aXJlKFwiYXdhaXRxdWV1ZVwiKTtcbmNvbnN0IExvZ2dlcl8xID0gcmVxdWlyZShcIi4vTG9nZ2VyXCIpO1xuY29uc3QgRW5oYW5jZWRFdmVudEVtaXR0ZXJfMSA9IHJlcXVpcmUoXCIuL0VuaGFuY2VkRXZlbnRFbWl0dGVyXCIpO1xuY29uc3QgZXJyb3JzXzEgPSByZXF1aXJlKFwiLi9lcnJvcnNcIik7XG5jb25zdCB1dGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xuY29uc3Qgb3J0YyA9IHJlcXVpcmUoXCIuL29ydGNcIik7XG5jb25zdCBQcm9kdWNlcl8xID0gcmVxdWlyZShcIi4vUHJvZHVjZXJcIik7XG5jb25zdCBDb25zdW1lcl8xID0gcmVxdWlyZShcIi4vQ29uc3VtZXJcIik7XG5jb25zdCBEYXRhUHJvZHVjZXJfMSA9IHJlcXVpcmUoXCIuL0RhdGFQcm9kdWNlclwiKTtcbmNvbnN0IERhdGFDb25zdW1lcl8xID0gcmVxdWlyZShcIi4vRGF0YUNvbnN1bWVyXCIpO1xuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcl8xLkxvZ2dlcignVHJhbnNwb3J0Jyk7XG5jbGFzcyBUcmFuc3BvcnQgZXh0ZW5kcyBFbmhhbmNlZEV2ZW50RW1pdHRlcl8xLkVuaGFuY2VkRXZlbnRFbWl0dGVyIHtcbiAgICAvKipcbiAgICAgKiBAZW1pdHMgY29ubmVjdCAtICh0cmFuc3BvcnRMb2NhbFBhcmFtZXRlcnM6IGFueSwgY2FsbGJhY2s6IEZ1bmN0aW9uLCBlcnJiYWNrOiBGdW5jdGlvbilcbiAgICAgKiBAZW1pdHMgY29ubmVjdGlvbnN0YXRlY2hhbmdlIC0gKGNvbm5lY3Rpb25TdGF0ZTogQ29ubmVjdGlvblN0YXRlKVxuICAgICAqIEBlbWl0cyBwcm9kdWNlIC0gKHByb2R1Y2VyTG9jYWxQYXJhbWV0ZXJzOiBhbnksIGNhbGxiYWNrOiBGdW5jdGlvbiwgZXJyYmFjazogRnVuY3Rpb24pXG4gICAgICogQGVtaXRzIHByb2R1Y2VkYXRhIC0gKGRhdGFQcm9kdWNlckxvY2FsUGFyYW1ldGVyczogYW55LCBjYWxsYmFjazogRnVuY3Rpb24sIGVycmJhY2s6IEZ1bmN0aW9uKVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHsgZGlyZWN0aW9uLCBpZCwgaWNlUGFyYW1ldGVycywgaWNlQ2FuZGlkYXRlcywgZHRsc1BhcmFtZXRlcnMsIHNjdHBQYXJhbWV0ZXJzLCBpY2VTZXJ2ZXJzLCBpY2VUcmFuc3BvcnRQb2xpY3ksIGFkZGl0aW9uYWxTZXR0aW5ncywgcHJvcHJpZXRhcnlDb25zdHJhaW50cywgYXBwRGF0YSwgaGFuZGxlckZhY3RvcnksIGV4dGVuZGVkUnRwQ2FwYWJpbGl0aWVzLCBjYW5Qcm9kdWNlQnlLaW5kIH0pIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgLy8gQ2xvc2VkIGZsYWcuXG4gICAgICAgIHRoaXMuX2Nsb3NlZCA9IGZhbHNlO1xuICAgICAgICAvLyBUcmFuc3BvcnQgY29ubmVjdGlvbiBzdGF0ZS5cbiAgICAgICAgdGhpcy5fY29ubmVjdGlvblN0YXRlID0gJ25ldyc7XG4gICAgICAgIC8vIE1hcCBvZiBQcm9kdWNlcnMgaW5kZXhlZCBieSBpZC5cbiAgICAgICAgdGhpcy5fcHJvZHVjZXJzID0gbmV3IE1hcCgpO1xuICAgICAgICAvLyBNYXAgb2YgQ29uc3VtZXJzIGluZGV4ZWQgYnkgaWQuXG4gICAgICAgIHRoaXMuX2NvbnN1bWVycyA9IG5ldyBNYXAoKTtcbiAgICAgICAgLy8gTWFwIG9mIERhdGFQcm9kdWNlcnMgaW5kZXhlZCBieSBpZC5cbiAgICAgICAgdGhpcy5fZGF0YVByb2R1Y2VycyA9IG5ldyBNYXAoKTtcbiAgICAgICAgLy8gTWFwIG9mIERhdGFDb25zdW1lcnMgaW5kZXhlZCBieSBpZC5cbiAgICAgICAgdGhpcy5fZGF0YUNvbnN1bWVycyA9IG5ldyBNYXAoKTtcbiAgICAgICAgLy8gV2hldGhlciB0aGUgQ29uc3VtZXIgZm9yIFJUUCBwcm9iYXRpb24gaGFzIGJlZW4gY3JlYXRlZC5cbiAgICAgICAgdGhpcy5fcHJvYmF0b3JDb25zdW1lckNyZWF0ZWQgPSBmYWxzZTtcbiAgICAgICAgLy8gQXdhaXRRdWV1ZSBpbnN0YW5jZSB0byBtYWtlIGFzeW5jIHRhc2tzIGhhcHBlbiBzZXF1ZW50aWFsbHkuXG4gICAgICAgIHRoaXMuX2F3YWl0UXVldWUgPSBuZXcgYXdhaXRxdWV1ZV8xLkF3YWl0UXVldWUoeyBDbG9zZWRFcnJvckNsYXNzOiBlcnJvcnNfMS5JbnZhbGlkU3RhdGVFcnJvciB9KTtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdjb25zdHJ1Y3RvcigpIFtpZDolcywgZGlyZWN0aW9uOiVzXScsIGlkLCBkaXJlY3Rpb24pO1xuICAgICAgICB0aGlzLl9pZCA9IGlkO1xuICAgICAgICB0aGlzLl9kaXJlY3Rpb24gPSBkaXJlY3Rpb247XG4gICAgICAgIHRoaXMuX2V4dGVuZGVkUnRwQ2FwYWJpbGl0aWVzID0gZXh0ZW5kZWRSdHBDYXBhYmlsaXRpZXM7XG4gICAgICAgIHRoaXMuX2NhblByb2R1Y2VCeUtpbmQgPSBjYW5Qcm9kdWNlQnlLaW5kO1xuICAgICAgICB0aGlzLl9tYXhTY3RwTWVzc2FnZVNpemUgPVxuICAgICAgICAgICAgc2N0cFBhcmFtZXRlcnMgPyBzY3RwUGFyYW1ldGVycy5tYXhNZXNzYWdlU2l6ZSA6IG51bGw7XG4gICAgICAgIC8vIENsb25lIGFuZCBzYW5pdGl6ZSBhZGRpdGlvbmFsU2V0dGluZ3MuXG4gICAgICAgIGFkZGl0aW9uYWxTZXR0aW5ncyA9IHV0aWxzLmNsb25lKGFkZGl0aW9uYWxTZXR0aW5ncyk7XG4gICAgICAgIGRlbGV0ZSBhZGRpdGlvbmFsU2V0dGluZ3MuaWNlU2VydmVycztcbiAgICAgICAgZGVsZXRlIGFkZGl0aW9uYWxTZXR0aW5ncy5pY2VUcmFuc3BvcnRQb2xpY3k7XG4gICAgICAgIGRlbGV0ZSBhZGRpdGlvbmFsU2V0dGluZ3MuYnVuZGxlUG9saWN5O1xuICAgICAgICBkZWxldGUgYWRkaXRpb25hbFNldHRpbmdzLnJ0Y3BNdXhQb2xpY3k7XG4gICAgICAgIGRlbGV0ZSBhZGRpdGlvbmFsU2V0dGluZ3Muc2RwU2VtYW50aWNzO1xuICAgICAgICB0aGlzLl9oYW5kbGVyID0gaGFuZGxlckZhY3RvcnkoKTtcbiAgICAgICAgdGhpcy5faGFuZGxlci5ydW4oe1xuICAgICAgICAgICAgZGlyZWN0aW9uLFxuICAgICAgICAgICAgaWNlUGFyYW1ldGVycyxcbiAgICAgICAgICAgIGljZUNhbmRpZGF0ZXMsXG4gICAgICAgICAgICBkdGxzUGFyYW1ldGVycyxcbiAgICAgICAgICAgIHNjdHBQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgaWNlU2VydmVycyxcbiAgICAgICAgICAgIGljZVRyYW5zcG9ydFBvbGljeSxcbiAgICAgICAgICAgIGFkZGl0aW9uYWxTZXR0aW5ncyxcbiAgICAgICAgICAgIHByb3ByaWV0YXJ5Q29uc3RyYWludHMsXG4gICAgICAgICAgICBleHRlbmRlZFJ0cENhcGFiaWxpdGllc1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fYXBwRGF0YSA9IGFwcERhdGE7XG4gICAgICAgIHRoaXMuX2hhbmRsZUhhbmRsZXIoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVHJhbnNwb3J0IGlkLlxuICAgICAqL1xuICAgIGdldCBpZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRoZSBUcmFuc3BvcnQgaXMgY2xvc2VkLlxuICAgICAqL1xuICAgIGdldCBjbG9zZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbG9zZWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRyYW5zcG9ydCBkaXJlY3Rpb24uXG4gICAgICovXG4gICAgZ2V0IGRpcmVjdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RpcmVjdGlvbjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUlRDIGhhbmRsZXIgaW5zdGFuY2UuXG4gICAgICovXG4gICAgZ2V0IGhhbmRsZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9oYW5kbGVyO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb25uZWN0aW9uIHN0YXRlLlxuICAgICAqL1xuICAgIGdldCBjb25uZWN0aW9uU3RhdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb25uZWN0aW9uU3RhdGU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFwcCBjdXN0b20gZGF0YS5cbiAgICAgKi9cbiAgICBnZXQgYXBwRGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FwcERhdGE7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEludmFsaWQgc2V0dGVyLlxuICAgICAqL1xuICAgIHNldCBhcHBEYXRhKGFwcERhdGEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjYW5ub3Qgb3ZlcnJpZGUgYXBwRGF0YSBvYmplY3QnKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2xvc2UgdGhlIFRyYW5zcG9ydC5cbiAgICAgKi9cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2Nsb3NlZClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdjbG9zZSgpJyk7XG4gICAgICAgIHRoaXMuX2Nsb3NlZCA9IHRydWU7XG4gICAgICAgIC8vIENsb3NlIHRoZSBBd2FpdFF1ZXVlLlxuICAgICAgICB0aGlzLl9hd2FpdFF1ZXVlLmNsb3NlKCk7XG4gICAgICAgIC8vIENsb3NlIHRoZSBoYW5kbGVyLlxuICAgICAgICB0aGlzLl9oYW5kbGVyLmNsb3NlKCk7XG4gICAgICAgIC8vIENsb3NlIGFsbCBQcm9kdWNlcnMuXG4gICAgICAgIGZvciAoY29uc3QgcHJvZHVjZXIgb2YgdGhpcy5fcHJvZHVjZXJzLnZhbHVlcygpKSB7XG4gICAgICAgICAgICBwcm9kdWNlci50cmFuc3BvcnRDbG9zZWQoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wcm9kdWNlcnMuY2xlYXIoKTtcbiAgICAgICAgLy8gQ2xvc2UgYWxsIENvbnN1bWVycy5cbiAgICAgICAgZm9yIChjb25zdCBjb25zdW1lciBvZiB0aGlzLl9jb25zdW1lcnMudmFsdWVzKCkpIHtcbiAgICAgICAgICAgIGNvbnN1bWVyLnRyYW5zcG9ydENsb3NlZCgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2NvbnN1bWVycy5jbGVhcigpO1xuICAgICAgICAvLyBDbG9zZSBhbGwgRGF0YVByb2R1Y2Vycy5cbiAgICAgICAgZm9yIChjb25zdCBkYXRhUHJvZHVjZXIgb2YgdGhpcy5fZGF0YVByb2R1Y2Vycy52YWx1ZXMoKSkge1xuICAgICAgICAgICAgZGF0YVByb2R1Y2VyLnRyYW5zcG9ydENsb3NlZCgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2RhdGFQcm9kdWNlcnMuY2xlYXIoKTtcbiAgICAgICAgLy8gQ2xvc2UgYWxsIERhdGFDb25zdW1lcnMuXG4gICAgICAgIGZvciAoY29uc3QgZGF0YUNvbnN1bWVyIG9mIHRoaXMuX2RhdGFDb25zdW1lcnMudmFsdWVzKCkpIHtcbiAgICAgICAgICAgIGRhdGFDb25zdW1lci50cmFuc3BvcnRDbG9zZWQoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9kYXRhQ29uc3VtZXJzLmNsZWFyKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBhc3NvY2lhdGVkIFRyYW5zcG9ydCAoUlRDUGVlckNvbm5lY3Rpb24pIHN0YXRzLlxuICAgICAqXG4gICAgICogQHJldHVybnMge1JUQ1N0YXRzUmVwb3J0fVxuICAgICAqL1xuICAgIGFzeW5jIGdldFN0YXRzKCkge1xuICAgICAgICBpZiAodGhpcy5fY2xvc2VkKVxuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLkludmFsaWRTdGF0ZUVycm9yKCdjbG9zZWQnKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hhbmRsZXIuZ2V0VHJhbnNwb3J0U3RhdHMoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVzdGFydCBJQ0UgY29ubmVjdGlvbi5cbiAgICAgKi9cbiAgICBhc3luYyByZXN0YXJ0SWNlKHsgaWNlUGFyYW1ldGVycyB9KSB7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZygncmVzdGFydEljZSgpJyk7XG4gICAgICAgIGlmICh0aGlzLl9jbG9zZWQpXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuSW52YWxpZFN0YXRlRXJyb3IoJ2Nsb3NlZCcpO1xuICAgICAgICBlbHNlIGlmICghaWNlUGFyYW1ldGVycylcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ21pc3NpbmcgaWNlUGFyYW1ldGVycycpO1xuICAgICAgICAvLyBFbnF1ZXVlIGNvbW1hbmQuXG4gICAgICAgIHJldHVybiB0aGlzLl9hd2FpdFF1ZXVlLnB1c2goYXN5bmMgKCkgPT4gdGhpcy5faGFuZGxlci5yZXN0YXJ0SWNlKGljZVBhcmFtZXRlcnMpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBkYXRlIElDRSBzZXJ2ZXJzLlxuICAgICAqL1xuICAgIGFzeW5jIHVwZGF0ZUljZVNlcnZlcnMoeyBpY2VTZXJ2ZXJzIH0gPSB7fSkge1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3VwZGF0ZUljZVNlcnZlcnMoKScpO1xuICAgICAgICBpZiAodGhpcy5fY2xvc2VkKVxuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLkludmFsaWRTdGF0ZUVycm9yKCdjbG9zZWQnKTtcbiAgICAgICAgZWxzZSBpZiAoIUFycmF5LmlzQXJyYXkoaWNlU2VydmVycykpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdtaXNzaW5nIGljZVNlcnZlcnMnKTtcbiAgICAgICAgLy8gRW5xdWV1ZSBjb21tYW5kLlxuICAgICAgICByZXR1cm4gdGhpcy5fYXdhaXRRdWV1ZS5wdXNoKGFzeW5jICgpID0+IHRoaXMuX2hhbmRsZXIudXBkYXRlSWNlU2VydmVycyhpY2VTZXJ2ZXJzKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIFByb2R1Y2VyLlxuICAgICAqL1xuICAgIGFzeW5jIHByb2R1Y2UoeyB0cmFjaywgZW5jb2RpbmdzLCBjb2RlY09wdGlvbnMsIGNvZGVjLCBzdG9wVHJhY2tzID0gdHJ1ZSwgZGlzYWJsZVRyYWNrT25QYXVzZSA9IHRydWUsIHplcm9SdHBPblBhdXNlID0gZmFsc2UsIGFwcERhdGEgPSB7fSB9ID0ge30pIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdwcm9kdWNlKCkgW3RyYWNrOiVvXScsIHRyYWNrKTtcbiAgICAgICAgaWYgKCF0cmFjaylcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ21pc3NpbmcgdHJhY2snKTtcbiAgICAgICAgZWxzZSBpZiAodGhpcy5fZGlyZWN0aW9uICE9PSAnc2VuZCcpXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuVW5zdXBwb3J0ZWRFcnJvcignbm90IGEgc2VuZGluZyBUcmFuc3BvcnQnKTtcbiAgICAgICAgZWxzZSBpZiAoIXRoaXMuX2NhblByb2R1Y2VCeUtpbmRbdHJhY2sua2luZF0pXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuVW5zdXBwb3J0ZWRFcnJvcihgY2Fubm90IHByb2R1Y2UgJHt0cmFjay5raW5kfWApO1xuICAgICAgICBlbHNlIGlmICh0cmFjay5yZWFkeVN0YXRlID09PSAnZW5kZWQnKVxuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLkludmFsaWRTdGF0ZUVycm9yKCd0cmFjayBlbmRlZCcpO1xuICAgICAgICBlbHNlIGlmICh0aGlzLmxpc3RlbmVyQ291bnQoJ2Nvbm5lY3QnKSA9PT0gMCAmJiB0aGlzLl9jb25uZWN0aW9uU3RhdGUgPT09ICduZXcnKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbm8gXCJjb25uZWN0XCIgbGlzdGVuZXIgc2V0IGludG8gdGhpcyB0cmFuc3BvcnQnKTtcbiAgICAgICAgZWxzZSBpZiAodGhpcy5saXN0ZW5lckNvdW50KCdwcm9kdWNlJykgPT09IDApXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdubyBcInByb2R1Y2VcIiBsaXN0ZW5lciBzZXQgaW50byB0aGlzIHRyYW5zcG9ydCcpO1xuICAgICAgICBlbHNlIGlmIChhcHBEYXRhICYmIHR5cGVvZiBhcHBEYXRhICE9PSAnb2JqZWN0JylcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2lmIGdpdmVuLCBhcHBEYXRhIG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gICAgICAgIC8vIEVucXVldWUgY29tbWFuZC5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2F3YWl0UXVldWUucHVzaChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBsZXQgbm9ybWFsaXplZEVuY29kaW5ncztcbiAgICAgICAgICAgIGlmIChlbmNvZGluZ3MgJiYgIUFycmF5LmlzQXJyYXkoZW5jb2RpbmdzKSkge1xuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcignZW5jb2RpbmdzIG11c3QgYmUgYW4gYXJyYXknKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGVuY29kaW5ncyAmJiBlbmNvZGluZ3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgbm9ybWFsaXplZEVuY29kaW5ncyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGVuY29kaW5ncykge1xuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZWRFbmNvZGluZ3MgPSBlbmNvZGluZ3NcbiAgICAgICAgICAgICAgICAgICAgLm1hcCgoZW5jb2RpbmcpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgbm9ybWFsaXplZEVuY29kaW5nID0geyBhY3RpdmU6IHRydWUgfTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVuY29kaW5nLmFjdGl2ZSA9PT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgICAgICBub3JtYWxpemVkRW5jb2RpbmcuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZW5jb2RpbmcuZHR4ID09PSAnYm9vbGVhbicpXG4gICAgICAgICAgICAgICAgICAgICAgICBub3JtYWxpemVkRW5jb2RpbmcuZHR4ID0gZW5jb2RpbmcuZHR4O1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGVuY29kaW5nLnNjYWxhYmlsaXR5TW9kZSA9PT0gJ3N0cmluZycpXG4gICAgICAgICAgICAgICAgICAgICAgICBub3JtYWxpemVkRW5jb2Rpbmcuc2NhbGFiaWxpdHlNb2RlID0gZW5jb2Rpbmcuc2NhbGFiaWxpdHlNb2RlO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGVuY29kaW5nLnNjYWxlUmVzb2x1dGlvbkRvd25CeSA9PT0gJ251bWJlcicpXG4gICAgICAgICAgICAgICAgICAgICAgICBub3JtYWxpemVkRW5jb2Rpbmcuc2NhbGVSZXNvbHV0aW9uRG93bkJ5ID0gZW5jb2Rpbmcuc2NhbGVSZXNvbHV0aW9uRG93bkJ5O1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGVuY29kaW5nLm1heEJpdHJhdGUgPT09ICdudW1iZXInKVxuICAgICAgICAgICAgICAgICAgICAgICAgbm9ybWFsaXplZEVuY29kaW5nLm1heEJpdHJhdGUgPSBlbmNvZGluZy5tYXhCaXRyYXRlO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGVuY29kaW5nLm1heEZyYW1lcmF0ZSA9PT0gJ251bWJlcicpXG4gICAgICAgICAgICAgICAgICAgICAgICBub3JtYWxpemVkRW5jb2RpbmcubWF4RnJhbWVyYXRlID0gZW5jb2RpbmcubWF4RnJhbWVyYXRlO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGVuY29kaW5nLmFkYXB0aXZlUHRpbWUgPT09ICdib29sZWFuJylcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vcm1hbGl6ZWRFbmNvZGluZy5hZGFwdGl2ZVB0aW1lID0gZW5jb2RpbmcuYWRhcHRpdmVQdGltZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBlbmNvZGluZy5wcmlvcml0eSA9PT0gJ3N0cmluZycpXG4gICAgICAgICAgICAgICAgICAgICAgICBub3JtYWxpemVkRW5jb2RpbmcucHJpb3JpdHkgPSBlbmNvZGluZy5wcmlvcml0eTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBlbmNvZGluZy5uZXR3b3JrUHJpb3JpdHkgPT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgbm9ybWFsaXplZEVuY29kaW5nLm5ldHdvcmtQcmlvcml0eSA9IGVuY29kaW5nLm5ldHdvcmtQcmlvcml0eTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZWRFbmNvZGluZztcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHsgbG9jYWxJZCwgcnRwUGFyYW1ldGVycywgcnRwU2VuZGVyIH0gPSBhd2FpdCB0aGlzLl9oYW5kbGVyLnNlbmQoe1xuICAgICAgICAgICAgICAgIHRyYWNrLFxuICAgICAgICAgICAgICAgIGVuY29kaW5nczogbm9ybWFsaXplZEVuY29kaW5ncyxcbiAgICAgICAgICAgICAgICBjb2RlY09wdGlvbnMsXG4gICAgICAgICAgICAgICAgY29kZWNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAvLyBUaGlzIHdpbGwgZmlsbCBydHBQYXJhbWV0ZXJzJ3MgbWlzc2luZyBmaWVsZHMgd2l0aCBkZWZhdWx0IHZhbHVlcy5cbiAgICAgICAgICAgICAgICBvcnRjLnZhbGlkYXRlUnRwUGFyYW1ldGVycyhydHBQYXJhbWV0ZXJzKTtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGlkIH0gPSBhd2FpdCB0aGlzLnNhZmVFbWl0QXNQcm9taXNlKCdwcm9kdWNlJywge1xuICAgICAgICAgICAgICAgICAgICBraW5kOiB0cmFjay5raW5kLFxuICAgICAgICAgICAgICAgICAgICBydHBQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgICAgICBhcHBEYXRhXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJvZHVjZXIgPSBuZXcgUHJvZHVjZXJfMS5Qcm9kdWNlcih7XG4gICAgICAgICAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgICAgICAgICBsb2NhbElkLFxuICAgICAgICAgICAgICAgICAgICBydHBTZW5kZXIsXG4gICAgICAgICAgICAgICAgICAgIHRyYWNrLFxuICAgICAgICAgICAgICAgICAgICBydHBQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgICAgICBzdG9wVHJhY2tzLFxuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlVHJhY2tPblBhdXNlLFxuICAgICAgICAgICAgICAgICAgICB6ZXJvUnRwT25QYXVzZSxcbiAgICAgICAgICAgICAgICAgICAgYXBwRGF0YVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMuX3Byb2R1Y2Vycy5zZXQocHJvZHVjZXIuaWQsIHByb2R1Y2VyKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9oYW5kbGVQcm9kdWNlcihwcm9kdWNlcik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb2R1Y2VyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5faGFuZGxlci5zdG9wU2VuZGluZyhsb2NhbElkKVxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goKCkgPT4geyB9KTtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgICAgIC8vIFRoaXMgY2F0Y2ggaXMgbmVlZGVkIHRvIHN0b3AgdGhlIGdpdmVuIHRyYWNrIGlmIHRoZSBjb21tYW5kIGFib3ZlXG4gICAgICAgICAgICAvLyBmYWlsZWQgZHVlIHRvIGNsb3NlZCBUcmFuc3BvcnQuXG4gICAgICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgICAgICBpZiAoc3RvcFRyYWNrcykge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHRyYWNrLnN0b3AoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yMikgeyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIENvbnN1bWVyIHRvIGNvbnN1bWUgYSByZW1vdGUgUHJvZHVjZXIuXG4gICAgICovXG4gICAgYXN5bmMgY29uc3VtZSh7IGlkLCBwcm9kdWNlcklkLCBraW5kLCBydHBQYXJhbWV0ZXJzLCBhcHBEYXRhID0ge30gfSkge1xuICAgICAgICBsb2dnZXIuZGVidWcoJ2NvbnN1bWUoKScpO1xuICAgICAgICBpZiAodGhpcy5fY2xvc2VkKVxuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLkludmFsaWRTdGF0ZUVycm9yKCdjbG9zZWQnKTtcbiAgICAgICAgZWxzZSBpZiAodGhpcy5fZGlyZWN0aW9uICE9PSAncmVjdicpXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuVW5zdXBwb3J0ZWRFcnJvcignbm90IGEgcmVjZWl2aW5nIFRyYW5zcG9ydCcpO1xuICAgICAgICBlbHNlIGlmICh0eXBlb2YgaWQgIT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbWlzc2luZyBpZCcpO1xuICAgICAgICBlbHNlIGlmICh0eXBlb2YgcHJvZHVjZXJJZCAhPT0gJ3N0cmluZycpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdtaXNzaW5nIHByb2R1Y2VySWQnKTtcbiAgICAgICAgZWxzZSBpZiAoa2luZCAhPT0gJ2F1ZGlvJyAmJiBraW5kICE9PSAndmlkZW8nKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgaW52YWxpZCBraW5kICcke2tpbmR9J2ApO1xuICAgICAgICBlbHNlIGlmICh0aGlzLmxpc3RlbmVyQ291bnQoJ2Nvbm5lY3QnKSA9PT0gMCAmJiB0aGlzLl9jb25uZWN0aW9uU3RhdGUgPT09ICduZXcnKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbm8gXCJjb25uZWN0XCIgbGlzdGVuZXIgc2V0IGludG8gdGhpcyB0cmFuc3BvcnQnKTtcbiAgICAgICAgZWxzZSBpZiAoYXBwRGF0YSAmJiB0eXBlb2YgYXBwRGF0YSAhPT0gJ29iamVjdCcpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpZiBnaXZlbiwgYXBwRGF0YSBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICAgICAgICAvLyBFbnF1ZXVlIGNvbW1hbmQuXG4gICAgICAgIHJldHVybiB0aGlzLl9hd2FpdFF1ZXVlLnB1c2goYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgLy8gRW5zdXJlIHRoZSBkZXZpY2UgY2FuIGNvbnN1bWUgaXQuXG4gICAgICAgICAgICBjb25zdCBjYW5Db25zdW1lID0gb3J0Yy5jYW5SZWNlaXZlKHJ0cFBhcmFtZXRlcnMsIHRoaXMuX2V4dGVuZGVkUnRwQ2FwYWJpbGl0aWVzKTtcbiAgICAgICAgICAgIGlmICghY2FuQ29uc3VtZSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuVW5zdXBwb3J0ZWRFcnJvcignY2Fubm90IGNvbnN1bWUgdGhpcyBQcm9kdWNlcicpO1xuICAgICAgICAgICAgY29uc3QgeyBsb2NhbElkLCBydHBSZWNlaXZlciwgdHJhY2sgfSA9IGF3YWl0IHRoaXMuX2hhbmRsZXIucmVjZWl2ZSh7IHRyYWNrSWQ6IGlkLCBraW5kLCBydHBQYXJhbWV0ZXJzIH0pO1xuICAgICAgICAgICAgY29uc3QgY29uc3VtZXIgPSBuZXcgQ29uc3VtZXJfMS5Db25zdW1lcih7XG4gICAgICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICAgICAgbG9jYWxJZCxcbiAgICAgICAgICAgICAgICBwcm9kdWNlcklkLFxuICAgICAgICAgICAgICAgIHJ0cFJlY2VpdmVyLFxuICAgICAgICAgICAgICAgIHRyYWNrLFxuICAgICAgICAgICAgICAgIHJ0cFBhcmFtZXRlcnMsXG4gICAgICAgICAgICAgICAgYXBwRGF0YVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLl9jb25zdW1lcnMuc2V0KGNvbnN1bWVyLmlkLCBjb25zdW1lcik7XG4gICAgICAgICAgICB0aGlzLl9oYW5kbGVDb25zdW1lcihjb25zdW1lcik7XG4gICAgICAgICAgICAvLyBJZiB0aGlzIGlzIHRoZSBmaXJzdCB2aWRlbyBDb25zdW1lciBhbmQgdGhlIENvbnN1bWVyIGZvciBSVFAgcHJvYmF0aW9uXG4gICAgICAgICAgICAvLyBoYXMgbm90IHlldCBiZWVuIGNyZWF0ZWQsIGNyZWF0ZSBpdCBub3cuXG4gICAgICAgICAgICBpZiAoIXRoaXMuX3Byb2JhdG9yQ29uc3VtZXJDcmVhdGVkICYmIGtpbmQgPT09ICd2aWRlbycpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwcm9iYXRvclJ0cFBhcmFtZXRlcnMgPSBvcnRjLmdlbmVyYXRlUHJvYmF0b3JSdHBQYXJhbWV0ZXJzKGNvbnN1bWVyLnJ0cFBhcmFtZXRlcnMpO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLl9oYW5kbGVyLnJlY2VpdmUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2tJZDogJ3Byb2JhdG9yJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGtpbmQ6ICd2aWRlbycsXG4gICAgICAgICAgICAgICAgICAgICAgICBydHBQYXJhbWV0ZXJzOiBwcm9iYXRvclJ0cFBhcmFtZXRlcnNcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZygnY29uc3VtZSgpIHwgQ29uc3VtZXIgZm9yIFJUUCBwcm9iYXRpb24gY3JlYXRlZCcpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wcm9iYXRvckNvbnN1bWVyQ3JlYXRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoJ2NvbnN1bWUoKSB8IGZhaWxlZCB0byBjcmVhdGUgQ29uc3VtZXIgZm9yIFJUUCBwcm9iYXRpb246JW8nLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNvbnN1bWVyO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgRGF0YVByb2R1Y2VyXG4gICAgICovXG4gICAgYXN5bmMgcHJvZHVjZURhdGEoeyBvcmRlcmVkID0gdHJ1ZSwgbWF4UGFja2V0TGlmZVRpbWUsIG1heFJldHJhbnNtaXRzLCBwcmlvcml0eSA9ICdsb3cnLCBsYWJlbCA9ICcnLCBwcm90b2NvbCA9ICcnLCBhcHBEYXRhID0ge30gfSA9IHt9KSB7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZygncHJvZHVjZURhdGEoKScpO1xuICAgICAgICBpZiAodGhpcy5fZGlyZWN0aW9uICE9PSAnc2VuZCcpXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuVW5zdXBwb3J0ZWRFcnJvcignbm90IGEgc2VuZGluZyBUcmFuc3BvcnQnKTtcbiAgICAgICAgZWxzZSBpZiAoIXRoaXMuX21heFNjdHBNZXNzYWdlU2l6ZSlcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5VbnN1cHBvcnRlZEVycm9yKCdTQ1RQIG5vdCBlbmFibGVkIGJ5IHJlbW90ZSBUcmFuc3BvcnQnKTtcbiAgICAgICAgZWxzZSBpZiAoIVsndmVyeS1sb3cnLCAnbG93JywgJ21lZGl1bScsICdoaWdoJ10uaW5jbHVkZXMocHJpb3JpdHkpKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignd3JvbmcgcHJpb3JpdHknKTtcbiAgICAgICAgZWxzZSBpZiAodGhpcy5saXN0ZW5lckNvdW50KCdjb25uZWN0JykgPT09IDAgJiYgdGhpcy5fY29ubmVjdGlvblN0YXRlID09PSAnbmV3JylcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ25vIFwiY29ubmVjdFwiIGxpc3RlbmVyIHNldCBpbnRvIHRoaXMgdHJhbnNwb3J0Jyk7XG4gICAgICAgIGVsc2UgaWYgKHRoaXMubGlzdGVuZXJDb3VudCgncHJvZHVjZWRhdGEnKSA9PT0gMClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ25vIFwicHJvZHVjZWRhdGFcIiBsaXN0ZW5lciBzZXQgaW50byB0aGlzIHRyYW5zcG9ydCcpO1xuICAgICAgICBlbHNlIGlmIChhcHBEYXRhICYmIHR5cGVvZiBhcHBEYXRhICE9PSAnb2JqZWN0JylcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2lmIGdpdmVuLCBhcHBEYXRhIG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gICAgICAgIGlmIChtYXhQYWNrZXRMaWZlVGltZSB8fCBtYXhSZXRyYW5zbWl0cylcbiAgICAgICAgICAgIG9yZGVyZWQgPSBmYWxzZTtcbiAgICAgICAgLy8gRW5xdWV1ZSBjb21tYW5kLlxuICAgICAgICByZXR1cm4gdGhpcy5fYXdhaXRRdWV1ZS5wdXNoKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgZGF0YUNoYW5uZWwsIHNjdHBTdHJlYW1QYXJhbWV0ZXJzIH0gPSBhd2FpdCB0aGlzLl9oYW5kbGVyLnNlbmREYXRhQ2hhbm5lbCh7XG4gICAgICAgICAgICAgICAgb3JkZXJlZCxcbiAgICAgICAgICAgICAgICBtYXhQYWNrZXRMaWZlVGltZSxcbiAgICAgICAgICAgICAgICBtYXhSZXRyYW5zbWl0cyxcbiAgICAgICAgICAgICAgICBwcmlvcml0eSxcbiAgICAgICAgICAgICAgICBsYWJlbCxcbiAgICAgICAgICAgICAgICBwcm90b2NvbFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBUaGlzIHdpbGwgZmlsbCBzY3RwU3RyZWFtUGFyYW1ldGVycydzIG1pc3NpbmcgZmllbGRzIHdpdGggZGVmYXVsdCB2YWx1ZXMuXG4gICAgICAgICAgICBvcnRjLnZhbGlkYXRlU2N0cFN0cmVhbVBhcmFtZXRlcnMoc2N0cFN0cmVhbVBhcmFtZXRlcnMpO1xuICAgICAgICAgICAgY29uc3QgeyBpZCB9ID0gYXdhaXQgdGhpcy5zYWZlRW1pdEFzUHJvbWlzZSgncHJvZHVjZWRhdGEnLCB7XG4gICAgICAgICAgICAgICAgc2N0cFN0cmVhbVBhcmFtZXRlcnMsXG4gICAgICAgICAgICAgICAgbGFiZWwsXG4gICAgICAgICAgICAgICAgcHJvdG9jb2wsXG4gICAgICAgICAgICAgICAgYXBwRGF0YVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCBkYXRhUHJvZHVjZXIgPSBuZXcgRGF0YVByb2R1Y2VyXzEuRGF0YVByb2R1Y2VyKHsgaWQsIGRhdGFDaGFubmVsLCBzY3RwU3RyZWFtUGFyYW1ldGVycywgYXBwRGF0YSB9KTtcbiAgICAgICAgICAgIHRoaXMuX2RhdGFQcm9kdWNlcnMuc2V0KGRhdGFQcm9kdWNlci5pZCwgZGF0YVByb2R1Y2VyKTtcbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZURhdGFQcm9kdWNlcihkYXRhUHJvZHVjZXIpO1xuICAgICAgICAgICAgcmV0dXJuIGRhdGFQcm9kdWNlcjtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIERhdGFDb25zdW1lclxuICAgICAqL1xuICAgIGFzeW5jIGNvbnN1bWVEYXRhKHsgaWQsIGRhdGFQcm9kdWNlcklkLCBzY3RwU3RyZWFtUGFyYW1ldGVycywgbGFiZWwgPSAnJywgcHJvdG9jb2wgPSAnJywgYXBwRGF0YSA9IHt9IH0pIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdjb25zdW1lRGF0YSgpJyk7XG4gICAgICAgIGlmICh0aGlzLl9jbG9zZWQpXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuSW52YWxpZFN0YXRlRXJyb3IoJ2Nsb3NlZCcpO1xuICAgICAgICBlbHNlIGlmICh0aGlzLl9kaXJlY3Rpb24gIT09ICdyZWN2JylcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5VbnN1cHBvcnRlZEVycm9yKCdub3QgYSByZWNlaXZpbmcgVHJhbnNwb3J0Jyk7XG4gICAgICAgIGVsc2UgaWYgKCF0aGlzLl9tYXhTY3RwTWVzc2FnZVNpemUpXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuVW5zdXBwb3J0ZWRFcnJvcignU0NUUCBub3QgZW5hYmxlZCBieSByZW1vdGUgVHJhbnNwb3J0Jyk7XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBpZCAhPT0gJ3N0cmluZycpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdtaXNzaW5nIGlkJyk7XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkYXRhUHJvZHVjZXJJZCAhPT0gJ3N0cmluZycpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdtaXNzaW5nIGRhdGFQcm9kdWNlcklkJyk7XG4gICAgICAgIGVsc2UgaWYgKHRoaXMubGlzdGVuZXJDb3VudCgnY29ubmVjdCcpID09PSAwICYmIHRoaXMuX2Nvbm5lY3Rpb25TdGF0ZSA9PT0gJ25ldycpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdubyBcImNvbm5lY3RcIiBsaXN0ZW5lciBzZXQgaW50byB0aGlzIHRyYW5zcG9ydCcpO1xuICAgICAgICBlbHNlIGlmIChhcHBEYXRhICYmIHR5cGVvZiBhcHBEYXRhICE9PSAnb2JqZWN0JylcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2lmIGdpdmVuLCBhcHBEYXRhIG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gICAgICAgIC8vIFRoaXMgbWF5IHRocm93LlxuICAgICAgICBvcnRjLnZhbGlkYXRlU2N0cFN0cmVhbVBhcmFtZXRlcnMoc2N0cFN0cmVhbVBhcmFtZXRlcnMpO1xuICAgICAgICAvLyBFbnF1ZXVlIGNvbW1hbmQuXG4gICAgICAgIHJldHVybiB0aGlzLl9hd2FpdFF1ZXVlLnB1c2goYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBkYXRhQ2hhbm5lbCB9ID0gYXdhaXQgdGhpcy5faGFuZGxlci5yZWNlaXZlRGF0YUNoYW5uZWwoe1xuICAgICAgICAgICAgICAgIHNjdHBTdHJlYW1QYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgIGxhYmVsLFxuICAgICAgICAgICAgICAgIHByb3RvY29sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IGRhdGFDb25zdW1lciA9IG5ldyBEYXRhQ29uc3VtZXJfMS5EYXRhQ29uc3VtZXIoe1xuICAgICAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgICAgIGRhdGFQcm9kdWNlcklkLFxuICAgICAgICAgICAgICAgIGRhdGFDaGFubmVsLFxuICAgICAgICAgICAgICAgIHNjdHBTdHJlYW1QYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgIGFwcERhdGFcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5fZGF0YUNvbnN1bWVycy5zZXQoZGF0YUNvbnN1bWVyLmlkLCBkYXRhQ29uc3VtZXIpO1xuICAgICAgICAgICAgdGhpcy5faGFuZGxlRGF0YUNvbnN1bWVyKGRhdGFDb25zdW1lcik7XG4gICAgICAgICAgICByZXR1cm4gZGF0YUNvbnN1bWVyO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgX2hhbmRsZUhhbmRsZXIoKSB7XG4gICAgICAgIGNvbnN0IGhhbmRsZXIgPSB0aGlzLl9oYW5kbGVyO1xuICAgICAgICBoYW5kbGVyLm9uKCdAY29ubmVjdCcsICh7IGR0bHNQYXJhbWV0ZXJzIH0sIGNhbGxiYWNrLCBlcnJiYWNrKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5fY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgZXJyYmFjayhuZXcgZXJyb3JzXzEuSW52YWxpZFN0YXRlRXJyb3IoJ2Nsb3NlZCcpKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnNhZmVFbWl0KCdjb25uZWN0JywgeyBkdGxzUGFyYW1ldGVycyB9LCBjYWxsYmFjaywgZXJyYmFjayk7XG4gICAgICAgIH0pO1xuICAgICAgICBoYW5kbGVyLm9uKCdAY29ubmVjdGlvbnN0YXRlY2hhbmdlJywgKGNvbm5lY3Rpb25TdGF0ZSkgPT4ge1xuICAgICAgICAgICAgaWYgKGNvbm5lY3Rpb25TdGF0ZSA9PT0gdGhpcy5fY29ubmVjdGlvblN0YXRlKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZygnY29ubmVjdGlvbiBzdGF0ZSBjaGFuZ2VkIHRvICVzJywgY29ubmVjdGlvblN0YXRlKTtcbiAgICAgICAgICAgIHRoaXMuX2Nvbm5lY3Rpb25TdGF0ZSA9IGNvbm5lY3Rpb25TdGF0ZTtcbiAgICAgICAgICAgIGlmICghdGhpcy5fY2xvc2VkKVxuICAgICAgICAgICAgICAgIHRoaXMuc2FmZUVtaXQoJ2Nvbm5lY3Rpb25zdGF0ZWNoYW5nZScsIGNvbm5lY3Rpb25TdGF0ZSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfaGFuZGxlUHJvZHVjZXIocHJvZHVjZXIpIHtcbiAgICAgICAgcHJvZHVjZXIub24oJ0BjbG9zZScsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3Byb2R1Y2Vycy5kZWxldGUocHJvZHVjZXIuaWQpO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2Nsb3NlZClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB0aGlzLl9hd2FpdFF1ZXVlLnB1c2goYXN5bmMgKCkgPT4gdGhpcy5faGFuZGxlci5zdG9wU2VuZGluZyhwcm9kdWNlci5sb2NhbElkKSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiBsb2dnZXIud2FybigncHJvZHVjZXIuY2xvc2UoKSBmYWlsZWQ6JW8nLCBlcnJvcikpO1xuICAgICAgICB9KTtcbiAgICAgICAgcHJvZHVjZXIub24oJ0ByZXBsYWNldHJhY2snLCAodHJhY2ssIGNhbGxiYWNrLCBlcnJiYWNrKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9hd2FpdFF1ZXVlLnB1c2goYXN5bmMgKCkgPT4gdGhpcy5faGFuZGxlci5yZXBsYWNlVHJhY2socHJvZHVjZXIubG9jYWxJZCwgdHJhY2spKVxuICAgICAgICAgICAgICAgIC50aGVuKGNhbGxiYWNrKVxuICAgICAgICAgICAgICAgIC5jYXRjaChlcnJiYWNrKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHByb2R1Y2VyLm9uKCdAc2V0bWF4c3BhdGlhbGxheWVyJywgKHNwYXRpYWxMYXllciwgY2FsbGJhY2ssIGVycmJhY2spID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2F3YWl0UXVldWUucHVzaChhc3luYyAoKSA9PiAodGhpcy5faGFuZGxlci5zZXRNYXhTcGF0aWFsTGF5ZXIocHJvZHVjZXIubG9jYWxJZCwgc3BhdGlhbExheWVyKSkpXG4gICAgICAgICAgICAgICAgLnRoZW4oY2FsbGJhY2spXG4gICAgICAgICAgICAgICAgLmNhdGNoKGVycmJhY2spO1xuICAgICAgICB9KTtcbiAgICAgICAgcHJvZHVjZXIub24oJ0BzZXRydHBlbmNvZGluZ3BhcmFtZXRlcnMnLCAocGFyYW1zLCBjYWxsYmFjaywgZXJyYmFjaykgPT4ge1xuICAgICAgICAgICAgdGhpcy5fYXdhaXRRdWV1ZS5wdXNoKGFzeW5jICgpID0+ICh0aGlzLl9oYW5kbGVyLnNldFJ0cEVuY29kaW5nUGFyYW1ldGVycyhwcm9kdWNlci5sb2NhbElkLCBwYXJhbXMpKSlcbiAgICAgICAgICAgICAgICAudGhlbihjYWxsYmFjaylcbiAgICAgICAgICAgICAgICAuY2F0Y2goZXJyYmFjayk7XG4gICAgICAgIH0pO1xuICAgICAgICBwcm9kdWNlci5vbignQGdldHN0YXRzJywgKGNhbGxiYWNrLCBlcnJiYWNrKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5fY2xvc2VkKVxuICAgICAgICAgICAgICAgIHJldHVybiBlcnJiYWNrKG5ldyBlcnJvcnNfMS5JbnZhbGlkU3RhdGVFcnJvcignY2xvc2VkJykpO1xuICAgICAgICAgICAgdGhpcy5faGFuZGxlci5nZXRTZW5kZXJTdGF0cyhwcm9kdWNlci5sb2NhbElkKVxuICAgICAgICAgICAgICAgIC50aGVuKGNhbGxiYWNrKVxuICAgICAgICAgICAgICAgIC5jYXRjaChlcnJiYWNrKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF9oYW5kbGVDb25zdW1lcihjb25zdW1lcikge1xuICAgICAgICBjb25zdW1lci5vbignQGNsb3NlJywgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fY29uc3VtZXJzLmRlbGV0ZShjb25zdW1lci5pZCk7XG4gICAgICAgICAgICBpZiAodGhpcy5fY2xvc2VkKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHRoaXMuX2F3YWl0UXVldWUucHVzaChhc3luYyAoKSA9PiB0aGlzLl9oYW5kbGVyLnN0b3BSZWNlaXZpbmcoY29uc3VtZXIubG9jYWxJZCkpXG4gICAgICAgICAgICAgICAgLmNhdGNoKCgpID0+IHsgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdW1lci5vbignQGdldHN0YXRzJywgKGNhbGxiYWNrLCBlcnJiYWNrKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5fY2xvc2VkKVxuICAgICAgICAgICAgICAgIHJldHVybiBlcnJiYWNrKG5ldyBlcnJvcnNfMS5JbnZhbGlkU3RhdGVFcnJvcignY2xvc2VkJykpO1xuICAgICAgICAgICAgdGhpcy5faGFuZGxlci5nZXRSZWNlaXZlclN0YXRzKGNvbnN1bWVyLmxvY2FsSWQpXG4gICAgICAgICAgICAgICAgLnRoZW4oY2FsbGJhY2spXG4gICAgICAgICAgICAgICAgLmNhdGNoKGVycmJhY2spO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgX2hhbmRsZURhdGFQcm9kdWNlcihkYXRhUHJvZHVjZXIpIHtcbiAgICAgICAgZGF0YVByb2R1Y2VyLm9uKCdAY2xvc2UnLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9kYXRhUHJvZHVjZXJzLmRlbGV0ZShkYXRhUHJvZHVjZXIuaWQpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgX2hhbmRsZURhdGFDb25zdW1lcihkYXRhQ29uc3VtZXIpIHtcbiAgICAgICAgZGF0YUNvbnN1bWVyLm9uKCdAY2xvc2UnLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9kYXRhQ29uc3VtZXJzLmRlbGV0ZShkYXRhQ29uc3VtZXIuaWQpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLlRyYW5zcG9ydCA9IFRyYW5zcG9ydDtcbiIsInZhciBncmFtbWFyID0gbW9kdWxlLmV4cG9ydHMgPSB7XG4gIHY6IFt7XG4gICAgbmFtZTogJ3ZlcnNpb24nLFxuICAgIHJlZzogL14oXFxkKikkL1xuICB9XSxcbiAgbzogW3tcbiAgICAvLyBvPS0gMjA1MTggMCBJTiBJUDQgMjAzLjAuMTEzLjFcbiAgICAvLyBOQjogc2Vzc2lvbklkIHdpbGwgYmUgYSBTdHJpbmcgaW4gbW9zdCBjYXNlcyBiZWNhdXNlIGl0IGlzIGh1Z2VcbiAgICBuYW1lOiAnb3JpZ2luJyxcbiAgICByZWc6IC9eKFxcUyopIChcXGQqKSAoXFxkKikgKFxcUyopIElQKFxcZCkgKFxcUyopLyxcbiAgICBuYW1lczogWyd1c2VybmFtZScsICdzZXNzaW9uSWQnLCAnc2Vzc2lvblZlcnNpb24nLCAnbmV0VHlwZScsICdpcFZlcicsICdhZGRyZXNzJ10sXG4gICAgZm9ybWF0OiAnJXMgJXMgJWQgJXMgSVAlZCAlcydcbiAgfV0sXG4gIC8vIGRlZmF1bHQgcGFyc2luZyBvZiB0aGVzZSBvbmx5ICh0aG91Z2ggc29tZSBvZiB0aGVzZSBmZWVsIG91dGRhdGVkKVxuICBzOiBbeyBuYW1lOiAnbmFtZScgfV0sXG4gIGk6IFt7IG5hbWU6ICdkZXNjcmlwdGlvbicgfV0sXG4gIHU6IFt7IG5hbWU6ICd1cmknIH1dLFxuICBlOiBbeyBuYW1lOiAnZW1haWwnIH1dLFxuICBwOiBbeyBuYW1lOiAncGhvbmUnIH1dLFxuICB6OiBbeyBuYW1lOiAndGltZXpvbmVzJyB9XSwgLy8gVE9ETzogdGhpcyBvbmUgY2FuIGFjdHVhbGx5IGJlIHBhcnNlZCBwcm9wZXJseS4uLlxuICByOiBbeyBuYW1lOiAncmVwZWF0cycgfV0sICAgLy8gVE9ETzogdGhpcyBvbmUgY2FuIGFsc28gYmUgcGFyc2VkIHByb3Blcmx5XG4gIC8vIGs6IFt7fV0sIC8vIG91dGRhdGVkIHRoaW5nIGlnbm9yZWRcbiAgdDogW3tcbiAgICAvLyB0PTAgMFxuICAgIG5hbWU6ICd0aW1pbmcnLFxuICAgIHJlZzogL14oXFxkKikgKFxcZCopLyxcbiAgICBuYW1lczogWydzdGFydCcsICdzdG9wJ10sXG4gICAgZm9ybWF0OiAnJWQgJWQnXG4gIH1dLFxuICBjOiBbe1xuICAgIC8vIGM9SU4gSVA0IDEwLjQ3LjE5Ny4yNlxuICAgIG5hbWU6ICdjb25uZWN0aW9uJyxcbiAgICByZWc6IC9eSU4gSVAoXFxkKSAoXFxTKikvLFxuICAgIG5hbWVzOiBbJ3ZlcnNpb24nLCAnaXAnXSxcbiAgICBmb3JtYXQ6ICdJTiBJUCVkICVzJ1xuICB9XSxcbiAgYjogW3tcbiAgICAvLyBiPUFTOjQwMDBcbiAgICBwdXNoOiAnYmFuZHdpZHRoJyxcbiAgICByZWc6IC9eKFRJQVN8QVN8Q1R8UlJ8UlMpOihcXGQqKS8sXG4gICAgbmFtZXM6IFsndHlwZScsICdsaW1pdCddLFxuICAgIGZvcm1hdDogJyVzOiVzJ1xuICB9XSxcbiAgbTogW3tcbiAgICAvLyBtPXZpZGVvIDUxNzQ0IFJUUC9BVlAgMTI2IDk3IDk4IDM0IDMxXG4gICAgLy8gTkI6IHNwZWNpYWwgLSBwdXNoZXMgdG8gc2Vzc2lvblxuICAgIC8vIFRPRE86IHJ0cC9mbXRwIHNob3VsZCBiZSBmaWx0ZXJlZCBieSB0aGUgcGF5bG9hZHMgZm91bmQgaGVyZT9cbiAgICByZWc6IC9eKFxcdyopIChcXGQqKSAoW1xcdy9dKikoPzogKC4qKSk/LyxcbiAgICBuYW1lczogWyd0eXBlJywgJ3BvcnQnLCAncHJvdG9jb2wnLCAncGF5bG9hZHMnXSxcbiAgICBmb3JtYXQ6ICclcyAlZCAlcyAlcydcbiAgfV0sXG4gIGE6IFtcbiAgICB7XG4gICAgICAvLyBhPXJ0cG1hcDoxMTAgb3B1cy80ODAwMC8yXG4gICAgICBwdXNoOiAncnRwJyxcbiAgICAgIHJlZzogL15ydHBtYXA6KFxcZCopIChbXFx3XFwtLl0qKSg/OlxccypcXC8oXFxkKikoPzpcXHMqXFwvKFxcUyopKT8pPy8sXG4gICAgICBuYW1lczogWydwYXlsb2FkJywgJ2NvZGVjJywgJ3JhdGUnLCAnZW5jb2RpbmcnXSxcbiAgICAgIGZvcm1hdDogZnVuY3Rpb24gKG8pIHtcbiAgICAgICAgcmV0dXJuIChvLmVuY29kaW5nKVxuICAgICAgICAgID8gJ3J0cG1hcDolZCAlcy8lcy8lcydcbiAgICAgICAgICA6IG8ucmF0ZVxuICAgICAgICAgICAgPyAncnRwbWFwOiVkICVzLyVzJ1xuICAgICAgICAgICAgOiAncnRwbWFwOiVkICVzJztcbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIC8vIGE9Zm10cDoxMDggcHJvZmlsZS1sZXZlbC1pZD0yNDtvYmplY3Q9MjM7Yml0cmF0ZT02NDAwMFxuICAgICAgLy8gYT1mbXRwOjExMSBtaW5wdGltZT0xMDsgdXNlaW5iYW5kZmVjPTFcbiAgICAgIHB1c2g6ICdmbXRwJyxcbiAgICAgIHJlZzogL15mbXRwOihcXGQqKSAoW1xcU3wgXSopLyxcbiAgICAgIG5hbWVzOiBbJ3BheWxvYWQnLCAnY29uZmlnJ10sXG4gICAgICBmb3JtYXQ6ICdmbXRwOiVkICVzJ1xuICAgIH0sXG4gICAge1xuICAgICAgLy8gYT1jb250cm9sOnN0cmVhbWlkPTBcbiAgICAgIG5hbWU6ICdjb250cm9sJyxcbiAgICAgIHJlZzogL15jb250cm9sOiguKikvLFxuICAgICAgZm9ybWF0OiAnY29udHJvbDolcydcbiAgICB9LFxuICAgIHtcbiAgICAgIC8vIGE9cnRjcDo2NTE3OSBJTiBJUDQgMTkzLjg0Ljc3LjE5NFxuICAgICAgbmFtZTogJ3J0Y3AnLFxuICAgICAgcmVnOiAvXnJ0Y3A6KFxcZCopKD86IChcXFMqKSBJUChcXGQpIChcXFMqKSk/LyxcbiAgICAgIG5hbWVzOiBbJ3BvcnQnLCAnbmV0VHlwZScsICdpcFZlcicsICdhZGRyZXNzJ10sXG4gICAgICBmb3JtYXQ6IGZ1bmN0aW9uIChvKSB7XG4gICAgICAgIHJldHVybiAoby5hZGRyZXNzICE9IG51bGwpXG4gICAgICAgICAgPyAncnRjcDolZCAlcyBJUCVkICVzJ1xuICAgICAgICAgIDogJ3J0Y3A6JWQnO1xuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgLy8gYT1ydGNwLWZiOjk4IHRyci1pbnQgMTAwXG4gICAgICBwdXNoOiAncnRjcEZiVHJySW50JyxcbiAgICAgIHJlZzogL15ydGNwLWZiOihcXCp8XFxkKikgdHJyLWludCAoXFxkKikvLFxuICAgICAgbmFtZXM6IFsncGF5bG9hZCcsICd2YWx1ZSddLFxuICAgICAgZm9ybWF0OiAncnRjcC1mYjolZCB0cnItaW50ICVkJ1xuICAgIH0sXG4gICAge1xuICAgICAgLy8gYT1ydGNwLWZiOjk4IG5hY2sgcnBzaVxuICAgICAgcHVzaDogJ3J0Y3BGYicsXG4gICAgICByZWc6IC9ecnRjcC1mYjooXFwqfFxcZCopIChbXFx3LV9dKikoPzogKFtcXHctX10qKSk/LyxcbiAgICAgIG5hbWVzOiBbJ3BheWxvYWQnLCAndHlwZScsICdzdWJ0eXBlJ10sXG4gICAgICBmb3JtYXQ6IGZ1bmN0aW9uIChvKSB7XG4gICAgICAgIHJldHVybiAoby5zdWJ0eXBlICE9IG51bGwpXG4gICAgICAgICAgPyAncnRjcC1mYjolcyAlcyAlcydcbiAgICAgICAgICA6ICdydGNwLWZiOiVzICVzJztcbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIC8vIGE9ZXh0bWFwOjIgdXJuOmlldGY6cGFyYW1zOnJ0cC1oZHJleHQ6dG9mZnNldFxuICAgICAgLy8gYT1leHRtYXA6MS9yZWN2b25seSBVUkktZ3BzLXN0cmluZ1xuICAgICAgLy8gYT1leHRtYXA6MyB1cm46aWV0ZjpwYXJhbXM6cnRwLWhkcmV4dDplbmNyeXB0IHVybjppZXRmOnBhcmFtczpydHAtaGRyZXh0OnNtcHRlLXRjIDI1QDYwMC8yNFxuICAgICAgcHVzaDogJ2V4dCcsXG4gICAgICByZWc6IC9eZXh0bWFwOihcXGQrKSg/OlxcLyhcXHcrKSk/KD86ICh1cm46aWV0ZjpwYXJhbXM6cnRwLWhkcmV4dDplbmNyeXB0KSk/IChcXFMqKSg/OiAoXFxTKikpPy8sXG4gICAgICBuYW1lczogWyd2YWx1ZScsICdkaXJlY3Rpb24nLCAnZW5jcnlwdC11cmknLCAndXJpJywgJ2NvbmZpZyddLFxuICAgICAgZm9ybWF0OiBmdW5jdGlvbiAobykge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICdleHRtYXA6JWQnICtcbiAgICAgICAgICAoby5kaXJlY3Rpb24gPyAnLyVzJyA6ICcldicpICtcbiAgICAgICAgICAob1snZW5jcnlwdC11cmknXSA/ICcgJXMnIDogJyV2JykgK1xuICAgICAgICAgICcgJXMnICtcbiAgICAgICAgICAoby5jb25maWcgPyAnICVzJyA6ICcnKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgLy8gYT1leHRtYXAtYWxsb3ctbWl4ZWRcbiAgICAgIG5hbWU6ICdleHRtYXBBbGxvd01peGVkJyxcbiAgICAgIHJlZzogL14oZXh0bWFwLWFsbG93LW1peGVkKS9cbiAgICB9LFxuICAgIHtcbiAgICAgIC8vIGE9Y3J5cHRvOjEgQUVTX0NNXzEyOF9ITUFDX1NIQTFfODAgaW5saW5lOlBTMXVRQ1ZlZUNGQ2FuVm1jamtwUHl3ak5XaGNZRDBtWFh0eGFWQlJ8Ml4yMHwxOjMyXG4gICAgICBwdXNoOiAnY3J5cHRvJyxcbiAgICAgIHJlZzogL15jcnlwdG86KFxcZCopIChbXFx3X10qKSAoXFxTKikoPzogKFxcUyopKT8vLFxuICAgICAgbmFtZXM6IFsnaWQnLCAnc3VpdGUnLCAnY29uZmlnJywgJ3Nlc3Npb25Db25maWcnXSxcbiAgICAgIGZvcm1hdDogZnVuY3Rpb24gKG8pIHtcbiAgICAgICAgcmV0dXJuIChvLnNlc3Npb25Db25maWcgIT0gbnVsbClcbiAgICAgICAgICA/ICdjcnlwdG86JWQgJXMgJXMgJXMnXG4gICAgICAgICAgOiAnY3J5cHRvOiVkICVzICVzJztcbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIC8vIGE9c2V0dXA6YWN0cGFzc1xuICAgICAgbmFtZTogJ3NldHVwJyxcbiAgICAgIHJlZzogL15zZXR1cDooXFx3KikvLFxuICAgICAgZm9ybWF0OiAnc2V0dXA6JXMnXG4gICAgfSxcbiAgICB7XG4gICAgICAvLyBhPWNvbm5lY3Rpb246bmV3XG4gICAgICBuYW1lOiAnY29ubmVjdGlvblR5cGUnLFxuICAgICAgcmVnOiAvXmNvbm5lY3Rpb246KG5ld3xleGlzdGluZykvLFxuICAgICAgZm9ybWF0OiAnY29ubmVjdGlvbjolcydcbiAgICB9LFxuICAgIHtcbiAgICAgIC8vIGE9bWlkOjFcbiAgICAgIG5hbWU6ICdtaWQnLFxuICAgICAgcmVnOiAvXm1pZDooW15cXHNdKikvLFxuICAgICAgZm9ybWF0OiAnbWlkOiVzJ1xuICAgIH0sXG4gICAge1xuICAgICAgLy8gYT1tc2lkOjBjOGIwNjRkLWQ4MDctNDNiNC1iNDM0LWY5MmE4ODlkODU4NyA5ODE3ODY4NS1kNDA5LTQ2ZTAtOGUxNi03ZWYwZGIwZGI2NGFcbiAgICAgIG5hbWU6ICdtc2lkJyxcbiAgICAgIHJlZzogL15tc2lkOiguKikvLFxuICAgICAgZm9ybWF0OiAnbXNpZDolcydcbiAgICB9LFxuICAgIHtcbiAgICAgIC8vIGE9cHRpbWU6MjBcbiAgICAgIG5hbWU6ICdwdGltZScsXG4gICAgICByZWc6IC9ecHRpbWU6KFxcZCooPzpcXC5cXGQqKSopLyxcbiAgICAgIGZvcm1hdDogJ3B0aW1lOiVkJ1xuICAgIH0sXG4gICAge1xuICAgICAgLy8gYT1tYXhwdGltZTo2MFxuICAgICAgbmFtZTogJ21heHB0aW1lJyxcbiAgICAgIHJlZzogL15tYXhwdGltZTooXFxkKig/OlxcLlxcZCopKikvLFxuICAgICAgZm9ybWF0OiAnbWF4cHRpbWU6JWQnXG4gICAgfSxcbiAgICB7XG4gICAgICAvLyBhPXNlbmRyZWN2XG4gICAgICBuYW1lOiAnZGlyZWN0aW9uJyxcbiAgICAgIHJlZzogL14oc2VuZHJlY3Z8cmVjdm9ubHl8c2VuZG9ubHl8aW5hY3RpdmUpL1xuICAgIH0sXG4gICAge1xuICAgICAgLy8gYT1pY2UtbGl0ZVxuICAgICAgbmFtZTogJ2ljZWxpdGUnLFxuICAgICAgcmVnOiAvXihpY2UtbGl0ZSkvXG4gICAgfSxcbiAgICB7XG4gICAgICAvLyBhPWljZS11ZnJhZzpGN2dJXG4gICAgICBuYW1lOiAnaWNlVWZyYWcnLFxuICAgICAgcmVnOiAvXmljZS11ZnJhZzooXFxTKikvLFxuICAgICAgZm9ybWF0OiAnaWNlLXVmcmFnOiVzJ1xuICAgIH0sXG4gICAge1xuICAgICAgLy8gYT1pY2UtcHdkOng5Y21sL1l6aWNoVjIrWGxoaU11OGdcbiAgICAgIG5hbWU6ICdpY2VQd2QnLFxuICAgICAgcmVnOiAvXmljZS1wd2Q6KFxcUyopLyxcbiAgICAgIGZvcm1hdDogJ2ljZS1wd2Q6JXMnXG4gICAgfSxcbiAgICB7XG4gICAgICAvLyBhPWZpbmdlcnByaW50OlNIQS0xIDAwOjExOjIyOjMzOjQ0OjU1OjY2Ojc3Ojg4Ojk5OkFBOkJCOkNDOkREOkVFOkZGOjAwOjExOjIyOjMzXG4gICAgICBuYW1lOiAnZmluZ2VycHJpbnQnLFxuICAgICAgcmVnOiAvXmZpbmdlcnByaW50OihcXFMqKSAoXFxTKikvLFxuICAgICAgbmFtZXM6IFsndHlwZScsICdoYXNoJ10sXG4gICAgICBmb3JtYXQ6ICdmaW5nZXJwcmludDolcyAlcydcbiAgICB9LFxuICAgIHtcbiAgICAgIC8vIGE9Y2FuZGlkYXRlOjAgMSBVRFAgMjExMzY2NzMyNyAyMDMuMC4xMTMuMSA1NDQwMCB0eXAgaG9zdFxuICAgICAgLy8gYT1jYW5kaWRhdGU6MTE2Mjg3NTA4MSAxIHVkcCAyMTEzOTM3MTUxIDE5Mi4xNjguMzQuNzUgNjAwMTcgdHlwIGhvc3QgZ2VuZXJhdGlvbiAwIG5ldHdvcmstaWQgMyBuZXR3b3JrLWNvc3QgMTBcbiAgICAgIC8vIGE9Y2FuZGlkYXRlOjMyODk5MTI5NTcgMiB1ZHAgMTg0NTUwMTY5NSAxOTMuODQuNzcuMTk0IDYwMDE3IHR5cCBzcmZseCByYWRkciAxOTIuMTY4LjM0Ljc1IHJwb3J0IDYwMDE3IGdlbmVyYXRpb24gMCBuZXR3b3JrLWlkIDMgbmV0d29yay1jb3N0IDEwXG4gICAgICAvLyBhPWNhbmRpZGF0ZToyMjk4MTU2MjAgMSB0Y3AgMTUxODI4MDQ0NyAxOTIuMTY4LjE1MC4xOSA2MDAxNyB0eXAgaG9zdCB0Y3B0eXBlIGFjdGl2ZSBnZW5lcmF0aW9uIDAgbmV0d29yay1pZCAzIG5ldHdvcmstY29zdCAxMFxuICAgICAgLy8gYT1jYW5kaWRhdGU6MzI4OTkxMjk1NyAyIHRjcCAxODQ1NTAxNjk1IDE5My44NC43Ny4xOTQgNjAwMTcgdHlwIHNyZmx4IHJhZGRyIDE5Mi4xNjguMzQuNzUgcnBvcnQgNjAwMTcgdGNwdHlwZSBwYXNzaXZlIGdlbmVyYXRpb24gMCBuZXR3b3JrLWlkIDMgbmV0d29yay1jb3N0IDEwXG4gICAgICBwdXNoOidjYW5kaWRhdGVzJyxcbiAgICAgIHJlZzogL15jYW5kaWRhdGU6KFxcUyopIChcXGQqKSAoXFxTKikgKFxcZCopIChcXFMqKSAoXFxkKikgdHlwIChcXFMqKSg/OiByYWRkciAoXFxTKikgcnBvcnQgKFxcZCopKT8oPzogdGNwdHlwZSAoXFxTKikpPyg/OiBnZW5lcmF0aW9uIChcXGQqKSk/KD86IG5ldHdvcmstaWQgKFxcZCopKT8oPzogbmV0d29yay1jb3N0IChcXGQqKSk/LyxcbiAgICAgIG5hbWVzOiBbJ2ZvdW5kYXRpb24nLCAnY29tcG9uZW50JywgJ3RyYW5zcG9ydCcsICdwcmlvcml0eScsICdpcCcsICdwb3J0JywgJ3R5cGUnLCAncmFkZHInLCAncnBvcnQnLCAndGNwdHlwZScsICdnZW5lcmF0aW9uJywgJ25ldHdvcmstaWQnLCAnbmV0d29yay1jb3N0J10sXG4gICAgICBmb3JtYXQ6IGZ1bmN0aW9uIChvKSB7XG4gICAgICAgIHZhciBzdHIgPSAnY2FuZGlkYXRlOiVzICVkICVzICVkICVzICVkIHR5cCAlcyc7XG5cbiAgICAgICAgc3RyICs9IChvLnJhZGRyICE9IG51bGwpID8gJyByYWRkciAlcyBycG9ydCAlZCcgOiAnJXYldic7XG5cbiAgICAgICAgLy8gTkI6IGNhbmRpZGF0ZSBoYXMgdGhyZWUgb3B0aW9uYWwgY2h1bmtzLCBzbyAldm9pZCBtaWRkbGVzIG9uZSBpZiBpdCdzIG1pc3NpbmdcbiAgICAgICAgc3RyICs9IChvLnRjcHR5cGUgIT0gbnVsbCkgPyAnIHRjcHR5cGUgJXMnIDogJyV2JztcblxuICAgICAgICBpZiAoby5nZW5lcmF0aW9uICE9IG51bGwpIHtcbiAgICAgICAgICBzdHIgKz0gJyBnZW5lcmF0aW9uICVkJztcbiAgICAgICAgfVxuXG4gICAgICAgIHN0ciArPSAob1snbmV0d29yay1pZCddICE9IG51bGwpID8gJyBuZXR3b3JrLWlkICVkJyA6ICcldic7XG4gICAgICAgIHN0ciArPSAob1snbmV0d29yay1jb3N0J10gIT0gbnVsbCkgPyAnIG5ldHdvcmstY29zdCAlZCcgOiAnJXYnO1xuICAgICAgICByZXR1cm4gc3RyO1xuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgLy8gYT1lbmQtb2YtY2FuZGlkYXRlcyAoa2VlcCBhZnRlciB0aGUgY2FuZGlkYXRlcyBsaW5lIGZvciByZWFkYWJpbGl0eSlcbiAgICAgIG5hbWU6ICdlbmRPZkNhbmRpZGF0ZXMnLFxuICAgICAgcmVnOiAvXihlbmQtb2YtY2FuZGlkYXRlcykvXG4gICAgfSxcbiAgICB7XG4gICAgICAvLyBhPXJlbW90ZS1jYW5kaWRhdGVzOjEgMjAzLjAuMTEzLjEgNTQ0MDAgMiAyMDMuMC4xMTMuMSA1NDQwMSAuLi5cbiAgICAgIG5hbWU6ICdyZW1vdGVDYW5kaWRhdGVzJyxcbiAgICAgIHJlZzogL15yZW1vdGUtY2FuZGlkYXRlczooLiopLyxcbiAgICAgIGZvcm1hdDogJ3JlbW90ZS1jYW5kaWRhdGVzOiVzJ1xuICAgIH0sXG4gICAge1xuICAgICAgLy8gYT1pY2Utb3B0aW9uczpnb29nbGUtaWNlXG4gICAgICBuYW1lOiAnaWNlT3B0aW9ucycsXG4gICAgICByZWc6IC9eaWNlLW9wdGlvbnM6KFxcUyopLyxcbiAgICAgIGZvcm1hdDogJ2ljZS1vcHRpb25zOiVzJ1xuICAgIH0sXG4gICAge1xuICAgICAgLy8gYT1zc3JjOjI1NjYxMDc1NjkgY25hbWU6dDlZVThNMVV4VEY4WTFBMVxuICAgICAgcHVzaDogJ3NzcmNzJyxcbiAgICAgIHJlZzogL15zc3JjOihcXGQqKSAoW1xcd18tXSopKD86OiguKikpPy8sXG4gICAgICBuYW1lczogWydpZCcsICdhdHRyaWJ1dGUnLCAndmFsdWUnXSxcbiAgICAgIGZvcm1hdDogZnVuY3Rpb24gKG8pIHtcbiAgICAgICAgdmFyIHN0ciA9ICdzc3JjOiVkJztcbiAgICAgICAgaWYgKG8uYXR0cmlidXRlICE9IG51bGwpIHtcbiAgICAgICAgICBzdHIgKz0gJyAlcyc7XG4gICAgICAgICAgaWYgKG8udmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgc3RyICs9ICc6JXMnO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RyO1xuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgLy8gYT1zc3JjLWdyb3VwOkZFQyAxIDJcbiAgICAgIC8vIGE9c3NyYy1ncm91cDpGRUMtRlIgMzAwNDM2NDE5NSAxMDgwNzcyMjQxXG4gICAgICBwdXNoOiAnc3NyY0dyb3VwcycsXG4gICAgICAvLyB0b2tlbi1jaGFyID0gJXgyMSAvICV4MjMtMjcgLyAleDJBLTJCIC8gJXgyRC0yRSAvICV4MzAtMzkgLyAleDQxLTVBIC8gJXg1RS03RVxuICAgICAgcmVnOiAvXnNzcmMtZ3JvdXA6KFtcXHgyMVxceDIzXFx4MjRcXHgyNVxceDI2XFx4MjdcXHgyQVxceDJCXFx4MkRcXHgyRVxcd10qKSAoLiopLyxcbiAgICAgIG5hbWVzOiBbJ3NlbWFudGljcycsICdzc3JjcyddLFxuICAgICAgZm9ybWF0OiAnc3NyYy1ncm91cDolcyAlcydcbiAgICB9LFxuICAgIHtcbiAgICAgIC8vIGE9bXNpZC1zZW1hbnRpYzogV01TIEp2bGFtNVgzU1gxT1A2cG4yMHpXb2d2YUtKejVIamY5T25sVlxuICAgICAgbmFtZTogJ21zaWRTZW1hbnRpYycsXG4gICAgICByZWc6IC9ebXNpZC1zZW1hbnRpYzpcXHM/KFxcdyopIChcXFMqKS8sXG4gICAgICBuYW1lczogWydzZW1hbnRpYycsICd0b2tlbiddLFxuICAgICAgZm9ybWF0OiAnbXNpZC1zZW1hbnRpYzogJXMgJXMnIC8vIHNwYWNlIGFmdGVyICc6JyBpcyBub3QgYWNjaWRlbnRhbFxuICAgIH0sXG4gICAge1xuICAgICAgLy8gYT1ncm91cDpCVU5ETEUgYXVkaW8gdmlkZW9cbiAgICAgIHB1c2g6ICdncm91cHMnLFxuICAgICAgcmVnOiAvXmdyb3VwOihcXHcqKSAoLiopLyxcbiAgICAgIG5hbWVzOiBbJ3R5cGUnLCAnbWlkcyddLFxuICAgICAgZm9ybWF0OiAnZ3JvdXA6JXMgJXMnXG4gICAgfSxcbiAgICB7XG4gICAgICAvLyBhPXJ0Y3AtbXV4XG4gICAgICBuYW1lOiAncnRjcE11eCcsXG4gICAgICByZWc6IC9eKHJ0Y3AtbXV4KS9cbiAgICB9LFxuICAgIHtcbiAgICAgIC8vIGE9cnRjcC1yc2l6ZVxuICAgICAgbmFtZTogJ3J0Y3BSc2l6ZScsXG4gICAgICByZWc6IC9eKHJ0Y3AtcnNpemUpL1xuICAgIH0sXG4gICAge1xuICAgICAgLy8gYT1zY3RwbWFwOjUwMDAgd2VicnRjLWRhdGFjaGFubmVsIDEwMjRcbiAgICAgIG5hbWU6ICdzY3RwbWFwJyxcbiAgICAgIHJlZzogL15zY3RwbWFwOihbXFx3Xy9dKikgKFxcUyopKD86IChcXFMqKSk/LyxcbiAgICAgIG5hbWVzOiBbJ3NjdHBtYXBOdW1iZXInLCAnYXBwJywgJ21heE1lc3NhZ2VTaXplJ10sXG4gICAgICBmb3JtYXQ6IGZ1bmN0aW9uIChvKSB7XG4gICAgICAgIHJldHVybiAoby5tYXhNZXNzYWdlU2l6ZSAhPSBudWxsKVxuICAgICAgICAgID8gJ3NjdHBtYXA6JXMgJXMgJXMnXG4gICAgICAgICAgOiAnc2N0cG1hcDolcyAlcyc7XG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICAvLyBhPXgtZ29vZ2xlLWZsYWc6Y29uZmVyZW5jZVxuICAgICAgbmFtZTogJ3hHb29nbGVGbGFnJyxcbiAgICAgIHJlZzogL154LWdvb2dsZS1mbGFnOihbXlxcc10qKS8sXG4gICAgICBmb3JtYXQ6ICd4LWdvb2dsZS1mbGFnOiVzJ1xuICAgIH0sXG4gICAge1xuICAgICAgLy8gYT1yaWQ6MSBzZW5kIG1heC13aWR0aD0xMjgwO21heC1oZWlnaHQ9NzIwO21heC1mcHM9MzA7ZGVwZW5kPTBcbiAgICAgIHB1c2g6ICdyaWRzJyxcbiAgICAgIHJlZzogL15yaWQ6KFtcXGRcXHddKykgKFxcdyspKD86IChbXFxTfCBdKikpPy8sXG4gICAgICBuYW1lczogWydpZCcsICdkaXJlY3Rpb24nLCAncGFyYW1zJ10sXG4gICAgICBmb3JtYXQ6IGZ1bmN0aW9uIChvKSB7XG4gICAgICAgIHJldHVybiAoby5wYXJhbXMpID8gJ3JpZDolcyAlcyAlcycgOiAncmlkOiVzICVzJztcbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIC8vIGE9aW1hZ2VhdHRyOjk3IHNlbmQgW3g9ODAwLHk9NjQwLHNhcj0xLjEscT0wLjZdIFt4PTQ4MCx5PTMyMF0gcmVjdiBbeD0zMzAseT0yNTBdXG4gICAgICAvLyBhPWltYWdlYXR0cjoqIHNlbmQgW3g9ODAwLHk9NjQwXSByZWN2ICpcbiAgICAgIC8vIGE9aW1hZ2VhdHRyOjEwMCByZWN2IFt4PTMyMCx5PTI0MF1cbiAgICAgIHB1c2g6ICdpbWFnZWF0dHJzJyxcbiAgICAgIHJlZzogbmV3IFJlZ0V4cChcbiAgICAgICAgLy8gYT1pbWFnZWF0dHI6OTdcbiAgICAgICAgJ15pbWFnZWF0dHI6KFxcXFxkK3xcXFxcKiknICtcbiAgICAgICAgLy8gc2VuZCBbeD04MDAseT02NDAsc2FyPTEuMSxxPTAuNl0gW3g9NDgwLHk9MzIwXVxuICAgICAgICAnW1xcXFxzXFxcXHRdKyhzZW5kfHJlY3YpW1xcXFxzXFxcXHRdKyhcXFxcKnxcXFxcW1xcXFxTK1xcXFxdKD86W1xcXFxzXFxcXHRdK1xcXFxbXFxcXFMrXFxcXF0pKiknICtcbiAgICAgICAgLy8gcmVjdiBbeD0zMzAseT0yNTBdXG4gICAgICAgICcoPzpbXFxcXHNcXFxcdF0rKHJlY3Z8c2VuZClbXFxcXHNcXFxcdF0rKFxcXFwqfFxcXFxbXFxcXFMrXFxcXF0oPzpbXFxcXHNcXFxcdF0rXFxcXFtcXFxcUytcXFxcXSkqKSk/J1xuICAgICAgKSxcbiAgICAgIG5hbWVzOiBbJ3B0JywgJ2RpcjEnLCAnYXR0cnMxJywgJ2RpcjInLCAnYXR0cnMyJ10sXG4gICAgICBmb3JtYXQ6IGZ1bmN0aW9uIChvKSB7XG4gICAgICAgIHJldHVybiAnaW1hZ2VhdHRyOiVzICVzICVzJyArIChvLmRpcjIgPyAnICVzICVzJyA6ICcnKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIC8vIGE9c2ltdWxjYXN0OnNlbmQgMSwyLDM7fjQsfjUgcmVjdiA2O343LH44XG4gICAgICAvLyBhPXNpbXVsY2FzdDpyZWN2IDE7NCw1IHNlbmQgNjs3XG4gICAgICBuYW1lOiAnc2ltdWxjYXN0JyxcbiAgICAgIHJlZzogbmV3IFJlZ0V4cChcbiAgICAgICAgLy8gYT1zaW11bGNhc3Q6XG4gICAgICAgICdec2ltdWxjYXN0OicgK1xuICAgICAgICAvLyBzZW5kIDEsMiwzO340LH41XG4gICAgICAgICcoc2VuZHxyZWN2KSAoW2EtekEtWjAtOVxcXFwtX347LF0rKScgK1xuICAgICAgICAvLyBzcGFjZSArIHJlY3YgNjt+Nyx+OFxuICAgICAgICAnKD86XFxcXHM/KHNlbmR8cmVjdikgKFthLXpBLVowLTlcXFxcLV9+OyxdKykpPycgK1xuICAgICAgICAvLyBlbmRcbiAgICAgICAgJyQnXG4gICAgICApLFxuICAgICAgbmFtZXM6IFsnZGlyMScsICdsaXN0MScsICdkaXIyJywgJ2xpc3QyJ10sXG4gICAgICBmb3JtYXQ6IGZ1bmN0aW9uIChvKSB7XG4gICAgICAgIHJldHVybiAnc2ltdWxjYXN0OiVzICVzJyArIChvLmRpcjIgPyAnICVzICVzJyA6ICcnKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIC8vIG9sZCBzaW11bGNhc3QgZHJhZnQgMDMgKGltcGxlbWVudGVkIGJ5IEZpcmVmb3gpXG4gICAgICAvLyAgIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9kcmFmdC1pZXRmLW1tdXNpYy1zZHAtc2ltdWxjYXN0LTAzXG4gICAgICAvLyBhPXNpbXVsY2FzdDogcmVjdiBwdD05Nzs5OCBzZW5kIHB0PTk3XG4gICAgICAvLyBhPXNpbXVsY2FzdDogc2VuZCByaWQ9NTs2OzcgcGF1c2VkPTYsN1xuICAgICAgbmFtZTogJ3NpbXVsY2FzdF8wMycsXG4gICAgICByZWc6IC9ec2ltdWxjYXN0OltcXHNcXHRdKyhbXFxTK1xcc1xcdF0rKSQvLFxuICAgICAgbmFtZXM6IFsndmFsdWUnXSxcbiAgICAgIGZvcm1hdDogJ3NpbXVsY2FzdDogJXMnXG4gICAgfSxcbiAgICB7XG4gICAgICAvLyBhPWZyYW1lcmF0ZToyNVxuICAgICAgLy8gYT1mcmFtZXJhdGU6MjkuOTdcbiAgICAgIG5hbWU6ICdmcmFtZXJhdGUnLFxuICAgICAgcmVnOiAvXmZyYW1lcmF0ZTooXFxkKyg/OiR8XFwuXFxkKykpLyxcbiAgICAgIGZvcm1hdDogJ2ZyYW1lcmF0ZTolcydcbiAgICB9LFxuICAgIHtcbiAgICAgIC8vIFJGQzQ1NzBcbiAgICAgIC8vIGE9c291cmNlLWZpbHRlcjogaW5jbCBJTiBJUDQgMjM5LjUuMi4zMSAxMC4xLjE1LjVcbiAgICAgIG5hbWU6ICdzb3VyY2VGaWx0ZXInLFxuICAgICAgcmVnOiAvXnNvdXJjZS1maWx0ZXI6ICooZXhjbHxpbmNsKSAoXFxTKikgKElQNHxJUDZ8XFwqKSAoXFxTKikgKC4qKS8sXG4gICAgICBuYW1lczogWydmaWx0ZXJNb2RlJywgJ25ldFR5cGUnLCAnYWRkcmVzc1R5cGVzJywgJ2Rlc3RBZGRyZXNzJywgJ3NyY0xpc3QnXSxcbiAgICAgIGZvcm1hdDogJ3NvdXJjZS1maWx0ZXI6ICVzICVzICVzICVzICVzJ1xuICAgIH0sXG4gICAge1xuICAgICAgLy8gYT1idW5kbGUtb25seVxuICAgICAgbmFtZTogJ2J1bmRsZU9ubHknLFxuICAgICAgcmVnOiAvXihidW5kbGUtb25seSkvXG4gICAgfSxcbiAgICB7XG4gICAgICAvLyBhPWxhYmVsOjFcbiAgICAgIG5hbWU6ICdsYWJlbCcsXG4gICAgICByZWc6IC9ebGFiZWw6KC4rKS8sXG4gICAgICBmb3JtYXQ6ICdsYWJlbDolcydcbiAgICB9LFxuICAgIHtcbiAgICAgIC8vIFJGQyB2ZXJzaW9uIDI2IGZvciBTQ1RQIG92ZXIgRFRMU1xuICAgICAgLy8gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL2RyYWZ0LWlldGYtbW11c2ljLXNjdHAtc2RwLTI2I3NlY3Rpb24tNVxuICAgICAgbmFtZTogJ3NjdHBQb3J0JyxcbiAgICAgIHJlZzogL15zY3RwLXBvcnQ6KFxcZCspJC8sXG4gICAgICBmb3JtYXQ6ICdzY3RwLXBvcnQ6JXMnXG4gICAgfSxcbiAgICB7XG4gICAgICAvLyBSRkMgdmVyc2lvbiAyNiBmb3IgU0NUUCBvdmVyIERUTFNcbiAgICAgIC8vIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9kcmFmdC1pZXRmLW1tdXNpYy1zY3RwLXNkcC0yNiNzZWN0aW9uLTZcbiAgICAgIG5hbWU6ICdtYXhNZXNzYWdlU2l6ZScsXG4gICAgICByZWc6IC9ebWF4LW1lc3NhZ2Utc2l6ZTooXFxkKykkLyxcbiAgICAgIGZvcm1hdDogJ21heC1tZXNzYWdlLXNpemU6JXMnXG4gICAgfSxcbiAgICB7XG4gICAgICAvLyBSRkM3MjczXG4gICAgICAvLyBhPXRzLXJlZmNsazpwdHA9SUVFRTE1ODgtMjAwODozOS1BNy05NC1GRi1GRS0wNy1DQi1EMDozN1xuICAgICAgcHVzaDondHNSZWZDbG9ja3MnLFxuICAgICAgcmVnOiAvXnRzLXJlZmNsazooW15cXHM9XSopKD86PShcXFMqKSk/LyxcbiAgICAgIG5hbWVzOiBbJ2Nsa3NyYycsICdjbGtzcmNFeHQnXSxcbiAgICAgIGZvcm1hdDogZnVuY3Rpb24gKG8pIHtcbiAgICAgICAgcmV0dXJuICd0cy1yZWZjbGs6JXMnICsgKG8uY2xrc3JjRXh0ICE9IG51bGwgPyAnPSVzJyA6ICcnKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIC8vIFJGQzcyNzNcbiAgICAgIC8vIGE9bWVkaWFjbGs6ZGlyZWN0PTk2MzIxNDQyNFxuICAgICAgbmFtZTonbWVkaWFDbGsnLFxuICAgICAgcmVnOiAvXm1lZGlhY2xrOig/OmlkPShcXFMqKSk/ICooW15cXHM9XSopKD86PShcXFMqKSk/KD86ICpyYXRlPShcXGQrKVxcLyhcXGQrKSk/LyxcbiAgICAgIG5hbWVzOiBbJ2lkJywgJ21lZGlhQ2xvY2tOYW1lJywgJ21lZGlhQ2xvY2tWYWx1ZScsICdyYXRlTnVtZXJhdG9yJywgJ3JhdGVEZW5vbWluYXRvciddLFxuICAgICAgZm9ybWF0OiBmdW5jdGlvbiAobykge1xuICAgICAgICB2YXIgc3RyID0gJ21lZGlhY2xrOic7XG4gICAgICAgIHN0ciArPSAoby5pZCAhPSBudWxsID8gJ2lkPSVzICVzJyA6ICcldiVzJyk7XG4gICAgICAgIHN0ciArPSAoby5tZWRpYUNsb2NrVmFsdWUgIT0gbnVsbCA/ICc9JXMnIDogJycpO1xuICAgICAgICBzdHIgKz0gKG8ucmF0ZU51bWVyYXRvciAhPSBudWxsID8gJyByYXRlPSVzJyA6ICcnKTtcbiAgICAgICAgc3RyICs9IChvLnJhdGVEZW5vbWluYXRvciAhPSBudWxsID8gJy8lcycgOiAnJyk7XG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICAvLyBhPWtleXdkczprZXl3b3Jkc1xuICAgICAgbmFtZTogJ2tleXdvcmRzJyxcbiAgICAgIHJlZzogL15rZXl3ZHM6KC4rKSQvLFxuICAgICAgZm9ybWF0OiAna2V5d2RzOiVzJ1xuICAgIH0sXG4gICAge1xuICAgICAgLy8gYT1jb250ZW50Om1haW5cbiAgICAgIG5hbWU6ICdjb250ZW50JyxcbiAgICAgIHJlZzogL15jb250ZW50OiguKykvLFxuICAgICAgZm9ybWF0OiAnY29udGVudDolcydcbiAgICB9LFxuICAgIC8vIEJGQ1AgaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzQ1ODNcbiAgICB7XG4gICAgICAvLyBhPWZsb29yY3RybDpjLXNcbiAgICAgIG5hbWU6ICdiZmNwRmxvb3JDdHJsJyxcbiAgICAgIHJlZzogL15mbG9vcmN0cmw6KGMtb25seXxzLW9ubHl8Yy1zKS8sXG4gICAgICBmb3JtYXQ6ICdmbG9vcmN0cmw6JXMnXG4gICAgfSxcbiAgICB7XG4gICAgICAvLyBhPWNvbmZpZDoxXG4gICAgICBuYW1lOiAnYmZjcENvbmZJZCcsXG4gICAgICByZWc6IC9eY29uZmlkOihcXGQrKS8sXG4gICAgICBmb3JtYXQ6ICdjb25maWQ6JXMnXG4gICAgfSxcbiAgICB7XG4gICAgICAvLyBhPXVzZXJpZDoxXG4gICAgICBuYW1lOiAnYmZjcFVzZXJJZCcsXG4gICAgICByZWc6IC9edXNlcmlkOihcXGQrKS8sXG4gICAgICBmb3JtYXQ6ICd1c2VyaWQ6JXMnXG4gICAgfSxcbiAgICB7XG4gICAgICAvLyBhPWZsb29yaWQ6MVxuICAgICAgbmFtZTogJ2JmY3BGbG9vcklkJyxcbiAgICAgIHJlZzogL15mbG9vcmlkOiguKykgKD86bS1zdHJlYW18bXN0cm0pOiguKykvLFxuICAgICAgbmFtZXM6IFsnaWQnLCAnbVN0cmVhbSddLFxuICAgICAgZm9ybWF0OiAnZmxvb3JpZDolcyBtc3RybTolcydcbiAgICB9LFxuICAgIHtcbiAgICAgIC8vIGFueSBhPSB0aGF0IHdlIGRvbid0IHVuZGVyc3RhbmQgaXMga2VwdCB2ZXJiYXRpbSBvbiBtZWRpYS5pbnZhbGlkXG4gICAgICBwdXNoOiAnaW52YWxpZCcsXG4gICAgICBuYW1lczogWyd2YWx1ZSddXG4gICAgfVxuICBdXG59O1xuXG4vLyBzZXQgc2Vuc2libGUgZGVmYXVsdHMgdG8gYXZvaWQgcG9sbHV0aW5nIHRoZSBncmFtbWFyIHdpdGggYm9yaW5nIGRldGFpbHNcbk9iamVjdC5rZXlzKGdyYW1tYXIpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICB2YXIgb2JqcyA9IGdyYW1tYXJba2V5XTtcbiAgb2Jqcy5mb3JFYWNoKGZ1bmN0aW9uIChvYmopIHtcbiAgICBpZiAoIW9iai5yZWcpIHtcbiAgICAgIG9iai5yZWcgPSAvKC4qKS87XG4gICAgfVxuICAgIGlmICghb2JqLmZvcm1hdCkge1xuICAgICAgb2JqLmZvcm1hdCA9ICclcyc7XG4gICAgfVxuICB9KTtcbn0pO1xuIiwidmFyIHRvSW50SWZJbnQgPSBmdW5jdGlvbiAodikge1xuICByZXR1cm4gU3RyaW5nKE51bWJlcih2KSkgPT09IHYgPyBOdW1iZXIodikgOiB2O1xufTtcblxudmFyIGF0dGFjaFByb3BlcnRpZXMgPSBmdW5jdGlvbiAobWF0Y2gsIGxvY2F0aW9uLCBuYW1lcywgcmF3TmFtZSkge1xuICBpZiAocmF3TmFtZSAmJiAhbmFtZXMpIHtcbiAgICBsb2NhdGlvbltyYXdOYW1lXSA9IHRvSW50SWZJbnQobWF0Y2hbMV0pO1xuICB9XG4gIGVsc2Uge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmFtZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmIChtYXRjaFtpKzFdICE9IG51bGwpIHtcbiAgICAgICAgbG9jYXRpb25bbmFtZXNbaV1dID0gdG9JbnRJZkludChtYXRjaFtpKzFdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbnZhciBwYXJzZVJlZyA9IGZ1bmN0aW9uIChvYmosIGxvY2F0aW9uLCBjb250ZW50KSB7XG4gIHZhciBuZWVkc0JsYW5rID0gb2JqLm5hbWUgJiYgb2JqLm5hbWVzO1xuICBpZiAob2JqLnB1c2ggJiYgIWxvY2F0aW9uW29iai5wdXNoXSkge1xuICAgIGxvY2F0aW9uW29iai5wdXNoXSA9IFtdO1xuICB9XG4gIGVsc2UgaWYgKG5lZWRzQmxhbmsgJiYgIWxvY2F0aW9uW29iai5uYW1lXSkge1xuICAgIGxvY2F0aW9uW29iai5uYW1lXSA9IHt9O1xuICB9XG4gIHZhciBrZXlMb2NhdGlvbiA9IG9iai5wdXNoID9cbiAgICB7fSA6ICAvLyBibGFuayBvYmplY3QgdGhhdCB3aWxsIGJlIHB1c2hlZFxuICAgIG5lZWRzQmxhbmsgPyBsb2NhdGlvbltvYmoubmFtZV0gOiBsb2NhdGlvbjsgLy8gb3RoZXJ3aXNlLCBuYW1lZCBsb2NhdGlvbiBvciByb290XG5cbiAgYXR0YWNoUHJvcGVydGllcyhjb250ZW50Lm1hdGNoKG9iai5yZWcpLCBrZXlMb2NhdGlvbiwgb2JqLm5hbWVzLCBvYmoubmFtZSk7XG5cbiAgaWYgKG9iai5wdXNoKSB7XG4gICAgbG9jYXRpb25bb2JqLnB1c2hdLnB1c2goa2V5TG9jYXRpb24pO1xuICB9XG59O1xuXG52YXIgZ3JhbW1hciA9IHJlcXVpcmUoJy4vZ3JhbW1hcicpO1xudmFyIHZhbGlkTGluZSA9IFJlZ0V4cC5wcm90b3R5cGUudGVzdC5iaW5kKC9eKFthLXpdKT0oLiopLyk7XG5cbmV4cG9ydHMucGFyc2UgPSBmdW5jdGlvbiAoc2RwKSB7XG4gIHZhciBzZXNzaW9uID0ge31cbiAgICAsIG1lZGlhID0gW11cbiAgICAsIGxvY2F0aW9uID0gc2Vzc2lvbjsgLy8gcG9pbnRzIGF0IHdoZXJlIHByb3BlcnRpZXMgZ28gdW5kZXIgKG9uZSBvZiB0aGUgYWJvdmUpXG5cbiAgLy8gcGFyc2UgbGluZXMgd2UgdW5kZXJzdGFuZFxuICBzZHAuc3BsaXQoLyhcXHJcXG58XFxyfFxcbikvKS5maWx0ZXIodmFsaWRMaW5lKS5mb3JFYWNoKGZ1bmN0aW9uIChsKSB7XG4gICAgdmFyIHR5cGUgPSBsWzBdO1xuICAgIHZhciBjb250ZW50ID0gbC5zbGljZSgyKTtcbiAgICBpZiAodHlwZSA9PT0gJ20nKSB7XG4gICAgICBtZWRpYS5wdXNoKHtydHA6IFtdLCBmbXRwOiBbXX0pO1xuICAgICAgbG9jYXRpb24gPSBtZWRpYVttZWRpYS5sZW5ndGgtMV07IC8vIHBvaW50IGF0IGxhdGVzdCBtZWRpYSBsaW5lXG4gICAgfVxuXG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCAoZ3JhbW1hclt0eXBlXSB8fCBbXSkubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgIHZhciBvYmogPSBncmFtbWFyW3R5cGVdW2pdO1xuICAgICAgaWYgKG9iai5yZWcudGVzdChjb250ZW50KSkge1xuICAgICAgICByZXR1cm4gcGFyc2VSZWcob2JqLCBsb2NhdGlvbiwgY29udGVudCk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICBzZXNzaW9uLm1lZGlhID0gbWVkaWE7IC8vIGxpbmsgaXQgdXBcbiAgcmV0dXJuIHNlc3Npb247XG59O1xuXG52YXIgcGFyYW1SZWR1Y2VyID0gZnVuY3Rpb24gKGFjYywgZXhwcikge1xuICB2YXIgcyA9IGV4cHIuc3BsaXQoLz0oLispLywgMik7XG4gIGlmIChzLmxlbmd0aCA9PT0gMikge1xuICAgIGFjY1tzWzBdXSA9IHRvSW50SWZJbnQoc1sxXSk7XG4gIH0gZWxzZSBpZiAocy5sZW5ndGggPT09IDEgJiYgZXhwci5sZW5ndGggPiAxKSB7XG4gICAgYWNjW3NbMF1dID0gdW5kZWZpbmVkO1xuICB9XG4gIHJldHVybiBhY2M7XG59O1xuXG5leHBvcnRzLnBhcnNlUGFyYW1zID0gZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gc3RyLnNwbGl0KC87XFxzPy8pLnJlZHVjZShwYXJhbVJlZHVjZXIsIHt9KTtcbn07XG5cbi8vIEZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IC0gYWxpYXMgd2lsbCBiZSByZW1vdmVkIGluIDMuMC4wXG5leHBvcnRzLnBhcnNlRm10cENvbmZpZyA9IGV4cG9ydHMucGFyc2VQYXJhbXM7XG5cbmV4cG9ydHMucGFyc2VQYXlsb2FkcyA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci50b1N0cmluZygpLnNwbGl0KCcgJykubWFwKE51bWJlcik7XG59O1xuXG5leHBvcnRzLnBhcnNlUmVtb3RlQ2FuZGlkYXRlcyA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgdmFyIGNhbmRpZGF0ZXMgPSBbXTtcbiAgdmFyIHBhcnRzID0gc3RyLnNwbGl0KCcgJykubWFwKHRvSW50SWZJbnQpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgY2FuZGlkYXRlcy5wdXNoKHtcbiAgICAgIGNvbXBvbmVudDogcGFydHNbaV0sXG4gICAgICBpcDogcGFydHNbaSArIDFdLFxuICAgICAgcG9ydDogcGFydHNbaSArIDJdXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGNhbmRpZGF0ZXM7XG59O1xuXG5leHBvcnRzLnBhcnNlSW1hZ2VBdHRyaWJ1dGVzID0gZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gc3RyLnNwbGl0KCcgJykubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgcmV0dXJuIGl0ZW0uc3Vic3RyaW5nKDEsIGl0ZW0ubGVuZ3RoLTEpLnNwbGl0KCcsJykucmVkdWNlKHBhcmFtUmVkdWNlciwge30pO1xuICB9KTtcbn07XG5cbmV4cG9ydHMucGFyc2VTaW11bGNhc3RTdHJlYW1MaXN0ID0gZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gc3RyLnNwbGl0KCc7JykubWFwKGZ1bmN0aW9uIChzdHJlYW0pIHtcbiAgICByZXR1cm4gc3RyZWFtLnNwbGl0KCcsJykubWFwKGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgIHZhciBzY2lkLCBwYXVzZWQgPSBmYWxzZTtcblxuICAgICAgaWYgKGZvcm1hdFswXSAhPT0gJ34nKSB7XG4gICAgICAgIHNjaWQgPSB0b0ludElmSW50KGZvcm1hdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzY2lkID0gdG9JbnRJZkludChmb3JtYXQuc3Vic3RyaW5nKDEsIGZvcm1hdC5sZW5ndGgpKTtcbiAgICAgICAgcGF1c2VkID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc2NpZDogc2NpZCxcbiAgICAgICAgcGF1c2VkOiBwYXVzZWRcbiAgICAgIH07XG4gICAgfSk7XG4gIH0pO1xufTtcbiIsInZhciBncmFtbWFyID0gcmVxdWlyZSgnLi9ncmFtbWFyJyk7XG5cbi8vIGN1c3RvbWl6ZWQgdXRpbC5mb3JtYXQgLSBkaXNjYXJkcyBleGNlc3MgYXJndW1lbnRzIGFuZCBjYW4gdm9pZCBtaWRkbGUgb25lc1xudmFyIGZvcm1hdFJlZ0V4cCA9IC8lW3NkdiVdL2c7XG52YXIgZm9ybWF0ID0gZnVuY3Rpb24gKGZvcm1hdFN0cikge1xuICB2YXIgaSA9IDE7XG4gIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICB2YXIgbGVuID0gYXJncy5sZW5ndGg7XG4gIHJldHVybiBmb3JtYXRTdHIucmVwbGFjZShmb3JtYXRSZWdFeHAsIGZ1bmN0aW9uICh4KSB7XG4gICAgaWYgKGkgPj0gbGVuKSB7XG4gICAgICByZXR1cm4geDsgLy8gbWlzc2luZyBhcmd1bWVudFxuICAgIH1cbiAgICB2YXIgYXJnID0gYXJnc1tpXTtcbiAgICBpICs9IDE7XG4gICAgc3dpdGNoICh4KSB7XG4gICAgY2FzZSAnJSUnOlxuICAgICAgcmV0dXJuICclJztcbiAgICBjYXNlICclcyc6XG4gICAgICByZXR1cm4gU3RyaW5nKGFyZyk7XG4gICAgY2FzZSAnJWQnOlxuICAgICAgcmV0dXJuIE51bWJlcihhcmcpO1xuICAgIGNhc2UgJyV2JzpcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gIH0pO1xuICAvLyBOQjogd2UgZGlzY2FyZCBleGNlc3MgYXJndW1lbnRzIC0gdGhleSBhcmUgdHlwaWNhbGx5IHVuZGVmaW5lZCBmcm9tIG1ha2VMaW5lXG59O1xuXG52YXIgbWFrZUxpbmUgPSBmdW5jdGlvbiAodHlwZSwgb2JqLCBsb2NhdGlvbikge1xuICB2YXIgc3RyID0gb2JqLmZvcm1hdCBpbnN0YW5jZW9mIEZ1bmN0aW9uID9cbiAgICAob2JqLmZvcm1hdChvYmoucHVzaCA/IGxvY2F0aW9uIDogbG9jYXRpb25bb2JqLm5hbWVdKSkgOlxuICAgIG9iai5mb3JtYXQ7XG5cbiAgdmFyIGFyZ3MgPSBbdHlwZSArICc9JyArIHN0cl07XG4gIGlmIChvYmoubmFtZXMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iai5uYW1lcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgdmFyIG4gPSBvYmoubmFtZXNbaV07XG4gICAgICBpZiAob2JqLm5hbWUpIHtcbiAgICAgICAgYXJncy5wdXNoKGxvY2F0aW9uW29iai5uYW1lXVtuXSk7XG4gICAgICB9XG4gICAgICBlbHNlIHsgLy8gZm9yIG1MaW5lIGFuZCBwdXNoIGF0dHJpYnV0ZXNcbiAgICAgICAgYXJncy5wdXNoKGxvY2F0aW9uW29iai5uYW1lc1tpXV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBlbHNlIHtcbiAgICBhcmdzLnB1c2gobG9jYXRpb25bb2JqLm5hbWVdKTtcbiAgfVxuICByZXR1cm4gZm9ybWF0LmFwcGx5KG51bGwsIGFyZ3MpO1xufTtcblxuLy8gUkZDIHNwZWNpZmllZCBvcmRlclxuLy8gVE9ETzogZXh0ZW5kIHRoaXMgd2l0aCBhbGwgdGhlIHJlc3RcbnZhciBkZWZhdWx0T3V0ZXJPcmRlciA9IFtcbiAgJ3YnLCAnbycsICdzJywgJ2knLFxuICAndScsICdlJywgJ3AnLCAnYycsXG4gICdiJywgJ3QnLCAncicsICd6JywgJ2EnXG5dO1xudmFyIGRlZmF1bHRJbm5lck9yZGVyID0gWydpJywgJ2MnLCAnYicsICdhJ107XG5cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc2Vzc2lvbiwgb3B0cykge1xuICBvcHRzID0gb3B0cyB8fCB7fTtcbiAgLy8gZW5zdXJlIGNlcnRhaW4gcHJvcGVydGllcyBleGlzdFxuICBpZiAoc2Vzc2lvbi52ZXJzaW9uID09IG51bGwpIHtcbiAgICBzZXNzaW9uLnZlcnNpb24gPSAwOyAvLyAndj0wJyBtdXN0IGJlIHRoZXJlIChvbmx5IGRlZmluZWQgdmVyc2lvbiBhdG0pXG4gIH1cbiAgaWYgKHNlc3Npb24ubmFtZSA9PSBudWxsKSB7XG4gICAgc2Vzc2lvbi5uYW1lID0gJyAnOyAvLyAncz0gJyBtdXN0IGJlIHRoZXJlIGlmIG5vIG1lYW5pbmdmdWwgbmFtZSBzZXRcbiAgfVxuICBzZXNzaW9uLm1lZGlhLmZvckVhY2goZnVuY3Rpb24gKG1MaW5lKSB7XG4gICAgaWYgKG1MaW5lLnBheWxvYWRzID09IG51bGwpIHtcbiAgICAgIG1MaW5lLnBheWxvYWRzID0gJyc7XG4gICAgfVxuICB9KTtcblxuICB2YXIgb3V0ZXJPcmRlciA9IG9wdHMub3V0ZXJPcmRlciB8fCBkZWZhdWx0T3V0ZXJPcmRlcjtcbiAgdmFyIGlubmVyT3JkZXIgPSBvcHRzLmlubmVyT3JkZXIgfHwgZGVmYXVsdElubmVyT3JkZXI7XG4gIHZhciBzZHAgPSBbXTtcblxuICAvLyBsb29wIHRocm91Z2ggb3V0ZXJPcmRlciBmb3IgbWF0Y2hpbmcgcHJvcGVydGllcyBvbiBzZXNzaW9uXG4gIG91dGVyT3JkZXIuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgIGdyYW1tYXJbdHlwZV0uZm9yRWFjaChmdW5jdGlvbiAob2JqKSB7XG4gICAgICBpZiAob2JqLm5hbWUgaW4gc2Vzc2lvbiAmJiBzZXNzaW9uW29iai5uYW1lXSAhPSBudWxsKSB7XG4gICAgICAgIHNkcC5wdXNoKG1ha2VMaW5lKHR5cGUsIG9iaiwgc2Vzc2lvbikpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAob2JqLnB1c2ggaW4gc2Vzc2lvbiAmJiBzZXNzaW9uW29iai5wdXNoXSAhPSBudWxsKSB7XG4gICAgICAgIHNlc3Npb25bb2JqLnB1c2hdLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgICAgc2RwLnB1c2gobWFrZUxpbmUodHlwZSwgb2JqLCBlbCkpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gdGhlbiBmb3IgZWFjaCBtZWRpYSBsaW5lLCBmb2xsb3cgdGhlIGlubmVyT3JkZXJcbiAgc2Vzc2lvbi5tZWRpYS5mb3JFYWNoKGZ1bmN0aW9uIChtTGluZSkge1xuICAgIHNkcC5wdXNoKG1ha2VMaW5lKCdtJywgZ3JhbW1hci5tWzBdLCBtTGluZSkpO1xuXG4gICAgaW5uZXJPcmRlci5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICBncmFtbWFyW3R5cGVdLmZvckVhY2goZnVuY3Rpb24gKG9iaikge1xuICAgICAgICBpZiAob2JqLm5hbWUgaW4gbUxpbmUgJiYgbUxpbmVbb2JqLm5hbWVdICE9IG51bGwpIHtcbiAgICAgICAgICBzZHAucHVzaChtYWtlTGluZSh0eXBlLCBvYmosIG1MaW5lKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAob2JqLnB1c2ggaW4gbUxpbmUgJiYgbUxpbmVbb2JqLnB1c2hdICE9IG51bGwpIHtcbiAgICAgICAgICBtTGluZVtvYmoucHVzaF0uZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICAgIHNkcC5wdXNoKG1ha2VMaW5lKHR5cGUsIG9iaiwgZWwpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIHJldHVybiBzZHAuam9pbignXFxyXFxuJykgKyAnXFxyXFxuJztcbn07XG4iLCJ2YXIgcGFyc2VyID0gcmVxdWlyZSgnLi9wYXJzZXInKTtcbnZhciB3cml0ZXIgPSByZXF1aXJlKCcuL3dyaXRlcicpO1xuXG5leHBvcnRzLndyaXRlID0gd3JpdGVyO1xuZXhwb3J0cy5wYXJzZSA9IHBhcnNlci5wYXJzZTtcbmV4cG9ydHMucGFyc2VQYXJhbXMgPSBwYXJzZXIucGFyc2VQYXJhbXM7XG5leHBvcnRzLnBhcnNlRm10cENvbmZpZyA9IHBhcnNlci5wYXJzZUZtdHBDb25maWc7IC8vIEFsaWFzIG9mIHBhcnNlUGFyYW1zKCkuXG5leHBvcnRzLnBhcnNlUGF5bG9hZHMgPSBwYXJzZXIucGFyc2VQYXlsb2FkcztcbmV4cG9ydHMucGFyc2VSZW1vdGVDYW5kaWRhdGVzID0gcGFyc2VyLnBhcnNlUmVtb3RlQ2FuZGlkYXRlcztcbmV4cG9ydHMucGFyc2VJbWFnZUF0dHJpYnV0ZXMgPSBwYXJzZXIucGFyc2VJbWFnZUF0dHJpYnV0ZXM7XG5leHBvcnRzLnBhcnNlU2ltdWxjYXN0U3RyZWFtTGlzdCA9IHBhcnNlci5wYXJzZVNpbXVsY2FzdFN0cmVhbUxpc3Q7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHNkcFRyYW5zZm9ybSA9IHJlcXVpcmUoXCJzZHAtdHJhbnNmb3JtXCIpO1xuZnVuY3Rpb24gZXh0cmFjdFJ0cENhcGFiaWxpdGllcyh7IHNkcE9iamVjdCB9KSB7XG4gICAgLy8gTWFwIG9mIFJ0cENvZGVjUGFyYW1ldGVycyBpbmRleGVkIGJ5IHBheWxvYWQgdHlwZS5cbiAgICBjb25zdCBjb2RlY3NNYXAgPSBuZXcgTWFwKCk7XG4gICAgLy8gQXJyYXkgb2YgUnRwSGVhZGVyRXh0ZW5zaW9ucy5cbiAgICBjb25zdCBoZWFkZXJFeHRlbnNpb25zID0gW107XG4gICAgLy8gV2hldGhlciBhIG09YXVkaW8vdmlkZW8gc2VjdGlvbiBoYXMgYmVlbiBhbHJlYWR5IGZvdW5kLlxuICAgIGxldCBnb3RBdWRpbyA9IGZhbHNlO1xuICAgIGxldCBnb3RWaWRlbyA9IGZhbHNlO1xuICAgIGZvciAoY29uc3QgbSBvZiBzZHBPYmplY3QubWVkaWEpIHtcbiAgICAgICAgY29uc3Qga2luZCA9IG0udHlwZTtcbiAgICAgICAgc3dpdGNoIChraW5kKSB7XG4gICAgICAgICAgICBjYXNlICdhdWRpbyc6XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZ290QXVkaW8pXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgZ290QXVkaW8gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICd2aWRlbyc6XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZ290VmlkZW8pXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgZ290VmlkZW8gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIEdldCBjb2RlY3MuXG4gICAgICAgIGZvciAoY29uc3QgcnRwIG9mIG0ucnRwKSB7XG4gICAgICAgICAgICBjb25zdCBjb2RlYyA9IHtcbiAgICAgICAgICAgICAgICBraW5kOiBraW5kLFxuICAgICAgICAgICAgICAgIG1pbWVUeXBlOiBgJHtraW5kfS8ke3J0cC5jb2RlY31gLFxuICAgICAgICAgICAgICAgIHByZWZlcnJlZFBheWxvYWRUeXBlOiBydHAucGF5bG9hZCxcbiAgICAgICAgICAgICAgICBjbG9ja1JhdGU6IHJ0cC5yYXRlLFxuICAgICAgICAgICAgICAgIGNoYW5uZWxzOiBydHAuZW5jb2RpbmcsXG4gICAgICAgICAgICAgICAgcGFyYW1ldGVyczoge30sXG4gICAgICAgICAgICAgICAgcnRjcEZlZWRiYWNrOiBbXVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvZGVjc01hcC5zZXQoY29kZWMucHJlZmVycmVkUGF5bG9hZFR5cGUsIGNvZGVjKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBHZXQgY29kZWMgcGFyYW1ldGVycy5cbiAgICAgICAgZm9yIChjb25zdCBmbXRwIG9mIG0uZm10cCB8fCBbXSkge1xuICAgICAgICAgICAgY29uc3QgcGFyYW1ldGVycyA9IHNkcFRyYW5zZm9ybS5wYXJzZVBhcmFtcyhmbXRwLmNvbmZpZyk7XG4gICAgICAgICAgICBjb25zdCBjb2RlYyA9IGNvZGVjc01hcC5nZXQoZm10cC5wYXlsb2FkKTtcbiAgICAgICAgICAgIGlmICghY29kZWMpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAvLyBTcGVjaWFscyBjYXNlIHRvIGNvbnZlcnQgcGFyYW1ldGVyIHZhbHVlIHRvIHN0cmluZy5cbiAgICAgICAgICAgIGlmIChwYXJhbWV0ZXJzICYmIHBhcmFtZXRlcnNbJ3Byb2ZpbGUtbGV2ZWwtaWQnXSlcbiAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzWydwcm9maWxlLWxldmVsLWlkJ10gPSBTdHJpbmcocGFyYW1ldGVyc1sncHJvZmlsZS1sZXZlbC1pZCddKTtcbiAgICAgICAgICAgIGNvZGVjLnBhcmFtZXRlcnMgPSBwYXJhbWV0ZXJzO1xuICAgICAgICB9XG4gICAgICAgIC8vIEdldCBSVENQIGZlZWRiYWNrIGZvciBlYWNoIGNvZGVjLlxuICAgICAgICBmb3IgKGNvbnN0IGZiIG9mIG0ucnRjcEZiIHx8IFtdKSB7XG4gICAgICAgICAgICBjb25zdCBjb2RlYyA9IGNvZGVjc01hcC5nZXQoZmIucGF5bG9hZCk7XG4gICAgICAgICAgICBpZiAoIWNvZGVjKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgY29uc3QgZmVlZGJhY2sgPSB7XG4gICAgICAgICAgICAgICAgdHlwZTogZmIudHlwZSxcbiAgICAgICAgICAgICAgICBwYXJhbWV0ZXI6IGZiLnN1YnR5cGVcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoIWZlZWRiYWNrLnBhcmFtZXRlcilcbiAgICAgICAgICAgICAgICBkZWxldGUgZmVlZGJhY2sucGFyYW1ldGVyO1xuICAgICAgICAgICAgY29kZWMucnRjcEZlZWRiYWNrLnB1c2goZmVlZGJhY2spO1xuICAgICAgICB9XG4gICAgICAgIC8vIEdldCBSVFAgaGVhZGVyIGV4dGVuc2lvbnMuXG4gICAgICAgIGZvciAoY29uc3QgZXh0IG9mIG0uZXh0IHx8IFtdKSB7XG4gICAgICAgICAgICAvLyBJZ25vcmUgZW5jcnlwdGVkIGV4dGVuc2lvbnMgKG5vdCB5ZXQgc3VwcG9ydGVkIGluIG1lZGlhc291cCkuXG4gICAgICAgICAgICBpZiAoZXh0WydlbmNyeXB0LXVyaSddKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgY29uc3QgaGVhZGVyRXh0ZW5zaW9uID0ge1xuICAgICAgICAgICAgICAgIGtpbmQ6IGtpbmQsXG4gICAgICAgICAgICAgICAgdXJpOiBleHQudXJpLFxuICAgICAgICAgICAgICAgIHByZWZlcnJlZElkOiBleHQudmFsdWVcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBoZWFkZXJFeHRlbnNpb25zLnB1c2goaGVhZGVyRXh0ZW5zaW9uKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBydHBDYXBhYmlsaXRpZXMgPSB7XG4gICAgICAgIGNvZGVjczogQXJyYXkuZnJvbShjb2RlY3NNYXAudmFsdWVzKCkpLFxuICAgICAgICBoZWFkZXJFeHRlbnNpb25zOiBoZWFkZXJFeHRlbnNpb25zXG4gICAgfTtcbiAgICByZXR1cm4gcnRwQ2FwYWJpbGl0aWVzO1xufVxuZXhwb3J0cy5leHRyYWN0UnRwQ2FwYWJpbGl0aWVzID0gZXh0cmFjdFJ0cENhcGFiaWxpdGllcztcbmZ1bmN0aW9uIGV4dHJhY3REdGxzUGFyYW1ldGVycyh7IHNkcE9iamVjdCB9KSB7XG4gICAgY29uc3QgbWVkaWFPYmplY3QgPSAoc2RwT2JqZWN0Lm1lZGlhIHx8IFtdKVxuICAgICAgICAuZmluZCgobSkgPT4gKG0uaWNlVWZyYWcgJiYgbS5wb3J0ICE9PSAwKSk7XG4gICAgaWYgKCFtZWRpYU9iamVjdClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdubyBhY3RpdmUgbWVkaWEgc2VjdGlvbiBmb3VuZCcpO1xuICAgIGNvbnN0IGZpbmdlcnByaW50ID0gbWVkaWFPYmplY3QuZmluZ2VycHJpbnQgfHwgc2RwT2JqZWN0LmZpbmdlcnByaW50O1xuICAgIGxldCByb2xlO1xuICAgIHN3aXRjaCAobWVkaWFPYmplY3Quc2V0dXApIHtcbiAgICAgICAgY2FzZSAnYWN0aXZlJzpcbiAgICAgICAgICAgIHJvbGUgPSAnY2xpZW50JztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdwYXNzaXZlJzpcbiAgICAgICAgICAgIHJvbGUgPSAnc2VydmVyJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdhY3RwYXNzJzpcbiAgICAgICAgICAgIHJvbGUgPSAnYXV0byc7XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG4gICAgY29uc3QgZHRsc1BhcmFtZXRlcnMgPSB7XG4gICAgICAgIHJvbGUsXG4gICAgICAgIGZpbmdlcnByaW50czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGFsZ29yaXRobTogZmluZ2VycHJpbnQudHlwZSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogZmluZ2VycHJpbnQuaGFzaFxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfTtcbiAgICByZXR1cm4gZHRsc1BhcmFtZXRlcnM7XG59XG5leHBvcnRzLmV4dHJhY3REdGxzUGFyYW1ldGVycyA9IGV4dHJhY3REdGxzUGFyYW1ldGVycztcbmZ1bmN0aW9uIGdldENuYW1lKHsgb2ZmZXJNZWRpYU9iamVjdCB9KSB7XG4gICAgY29uc3Qgc3NyY0NuYW1lTGluZSA9IChvZmZlck1lZGlhT2JqZWN0LnNzcmNzIHx8IFtdKVxuICAgICAgICAuZmluZCgobGluZSkgPT4gbGluZS5hdHRyaWJ1dGUgPT09ICdjbmFtZScpO1xuICAgIGlmICghc3NyY0NuYW1lTGluZSlcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIHJldHVybiBzc3JjQ25hbWVMaW5lLnZhbHVlO1xufVxuZXhwb3J0cy5nZXRDbmFtZSA9IGdldENuYW1lO1xuLyoqXG4gKiBBcHBseSBjb2RlYyBwYXJhbWV0ZXJzIGluIHRoZSBnaXZlbiBTRFAgbT0gc2VjdGlvbiBhbnN3ZXIgYmFzZWQgb24gdGhlXG4gKiBnaXZlbiBSVFAgcGFyYW1ldGVycyBvZiBhbiBvZmZlci5cbiAqL1xuZnVuY3Rpb24gYXBwbHlDb2RlY1BhcmFtZXRlcnMoeyBvZmZlclJ0cFBhcmFtZXRlcnMsIGFuc3dlck1lZGlhT2JqZWN0IH0pIHtcbiAgICBmb3IgKGNvbnN0IGNvZGVjIG9mIG9mZmVyUnRwUGFyYW1ldGVycy5jb2RlY3MpIHtcbiAgICAgICAgY29uc3QgbWltZVR5cGUgPSBjb2RlYy5taW1lVHlwZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAvLyBBdm9pZCBwYXJzaW5nIGNvZGVjIHBhcmFtZXRlcnMgZm9yIHVuaGFuZGxlZCBjb2RlY3MuXG4gICAgICAgIGlmIChtaW1lVHlwZSAhPT0gJ2F1ZGlvL29wdXMnKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIGNvbnN0IHJ0cCA9IChhbnN3ZXJNZWRpYU9iamVjdC5ydHAgfHwgW10pXG4gICAgICAgICAgICAuZmluZCgocikgPT4gci5wYXlsb2FkID09PSBjb2RlYy5wYXlsb2FkVHlwZSk7XG4gICAgICAgIGlmICghcnRwKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIC8vIEp1c3QgaW4gY2FzZS5cbiAgICAgICAgYW5zd2VyTWVkaWFPYmplY3QuZm10cCA9IGFuc3dlck1lZGlhT2JqZWN0LmZtdHAgfHwgW107XG4gICAgICAgIGxldCBmbXRwID0gYW5zd2VyTWVkaWFPYmplY3QuZm10cFxuICAgICAgICAgICAgLmZpbmQoKGYpID0+IGYucGF5bG9hZCA9PT0gY29kZWMucGF5bG9hZFR5cGUpO1xuICAgICAgICBpZiAoIWZtdHApIHtcbiAgICAgICAgICAgIGZtdHAgPSB7IHBheWxvYWQ6IGNvZGVjLnBheWxvYWRUeXBlLCBjb25maWc6ICcnIH07XG4gICAgICAgICAgICBhbnN3ZXJNZWRpYU9iamVjdC5mbXRwLnB1c2goZm10cCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGFyYW1ldGVycyA9IHNkcFRyYW5zZm9ybS5wYXJzZVBhcmFtcyhmbXRwLmNvbmZpZyk7XG4gICAgICAgIHN3aXRjaCAobWltZVR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ2F1ZGlvL29wdXMnOlxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3Byb3BTdGVyZW8gPSBjb2RlYy5wYXJhbWV0ZXJzWydzcHJvcC1zdGVyZW8nXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNwcm9wU3RlcmVvICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzLnN0ZXJlbyA9IHNwcm9wU3RlcmVvID8gMSA6IDA7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBXcml0ZSB0aGUgY29kZWMgZm10cC5jb25maWcgYmFjay5cbiAgICAgICAgZm10cC5jb25maWcgPSAnJztcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMocGFyYW1ldGVycykpIHtcbiAgICAgICAgICAgIGlmIChmbXRwLmNvbmZpZylcbiAgICAgICAgICAgICAgICBmbXRwLmNvbmZpZyArPSAnOyc7XG4gICAgICAgICAgICBmbXRwLmNvbmZpZyArPSBgJHtrZXl9PSR7cGFyYW1ldGVyc1trZXldfWA7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLmFwcGx5Q29kZWNQYXJhbWV0ZXJzID0gYXBwbHlDb2RlY1BhcmFtZXRlcnM7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmZ1bmN0aW9uIGdldFJ0cEVuY29kaW5ncyh7IG9mZmVyTWVkaWFPYmplY3QgfSkge1xuICAgIGNvbnN0IHNzcmNzID0gbmV3IFNldCgpO1xuICAgIGZvciAoY29uc3QgbGluZSBvZiBvZmZlck1lZGlhT2JqZWN0LnNzcmNzIHx8IFtdKSB7XG4gICAgICAgIGNvbnN0IHNzcmMgPSBsaW5lLmlkO1xuICAgICAgICBzc3Jjcy5hZGQoc3NyYyk7XG4gICAgfVxuICAgIGlmIChzc3Jjcy5zaXplID09PSAwKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vIGE9c3NyYyBsaW5lcyBmb3VuZCcpO1xuICAgIGNvbnN0IHNzcmNUb1J0eFNzcmMgPSBuZXcgTWFwKCk7XG4gICAgLy8gRmlyc3QgYXNzdW1lIFJUWCBpcyB1c2VkLlxuICAgIGZvciAoY29uc3QgbGluZSBvZiBvZmZlck1lZGlhT2JqZWN0LnNzcmNHcm91cHMgfHwgW10pIHtcbiAgICAgICAgaWYgKGxpbmUuc2VtYW50aWNzICE9PSAnRklEJylcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBsZXQgW3NzcmMsIHJ0eFNzcmNdID0gbGluZS5zc3Jjcy5zcGxpdCgvXFxzKy8pO1xuICAgICAgICBzc3JjID0gTnVtYmVyKHNzcmMpO1xuICAgICAgICBydHhTc3JjID0gTnVtYmVyKHJ0eFNzcmMpO1xuICAgICAgICBpZiAoc3NyY3MuaGFzKHNzcmMpKSB7XG4gICAgICAgICAgICAvLyBSZW1vdmUgYm90aCB0aGUgU1NSQyBhbmQgUlRYIFNTUkMgZnJvbSB0aGUgc2V0IHNvIGxhdGVyIHdlIGtub3cgdGhhdCB0aGV5XG4gICAgICAgICAgICAvLyBhcmUgYWxyZWFkeSBoYW5kbGVkLlxuICAgICAgICAgICAgc3NyY3MuZGVsZXRlKHNzcmMpO1xuICAgICAgICAgICAgc3NyY3MuZGVsZXRlKHJ0eFNzcmMpO1xuICAgICAgICAgICAgLy8gQWRkIHRvIHRoZSBtYXAuXG4gICAgICAgICAgICBzc3JjVG9SdHhTc3JjLnNldChzc3JjLCBydHhTc3JjKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBJZiB0aGUgc2V0IG9mIFNTUkNzIGlzIG5vdCBlbXB0eSBpdCBtZWFucyB0aGF0IFJUWCBpcyBub3QgYmVpbmcgdXNlZCwgc28gdGFrZVxuICAgIC8vIG1lZGlhIFNTUkNzIGZyb20gdGhlcmUuXG4gICAgZm9yIChjb25zdCBzc3JjIG9mIHNzcmNzKSB7XG4gICAgICAgIC8vIEFkZCB0byB0aGUgbWFwLlxuICAgICAgICBzc3JjVG9SdHhTc3JjLnNldChzc3JjLCBudWxsKTtcbiAgICB9XG4gICAgY29uc3QgZW5jb2RpbmdzID0gW107XG4gICAgZm9yIChjb25zdCBbc3NyYywgcnR4U3NyY10gb2Ygc3NyY1RvUnR4U3NyYykge1xuICAgICAgICBjb25zdCBlbmNvZGluZyA9IHsgc3NyYyB9O1xuICAgICAgICBpZiAocnR4U3NyYylcbiAgICAgICAgICAgIGVuY29kaW5nLnJ0eCA9IHsgc3NyYzogcnR4U3NyYyB9O1xuICAgICAgICBlbmNvZGluZ3MucHVzaChlbmNvZGluZyk7XG4gICAgfVxuICAgIHJldHVybiBlbmNvZGluZ3M7XG59XG5leHBvcnRzLmdldFJ0cEVuY29kaW5ncyA9IGdldFJ0cEVuY29kaW5ncztcbi8qKlxuICogQWRkcyBtdWx0aS1zc3JjIGJhc2VkIHNpbXVsY2FzdCBpbnRvIHRoZSBnaXZlbiBTRFAgbWVkaWEgc2VjdGlvbiBvZmZlci5cbiAqL1xuZnVuY3Rpb24gYWRkTGVnYWN5U2ltdWxjYXN0KHsgb2ZmZXJNZWRpYU9iamVjdCwgbnVtU3RyZWFtcyB9KSB7XG4gICAgaWYgKG51bVN0cmVhbXMgPD0gMSlcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbnVtU3RyZWFtcyBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAxJyk7XG4gICAgLy8gR2V0IHRoZSBTU1JDLlxuICAgIGNvbnN0IHNzcmNNc2lkTGluZSA9IChvZmZlck1lZGlhT2JqZWN0LnNzcmNzIHx8IFtdKVxuICAgICAgICAuZmluZCgobGluZSkgPT4gbGluZS5hdHRyaWJ1dGUgPT09ICdtc2lkJyk7XG4gICAgaWYgKCFzc3JjTXNpZExpbmUpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignYT1zc3JjIGxpbmUgd2l0aCBtc2lkIGluZm9ybWF0aW9uIG5vdCBmb3VuZCcpO1xuICAgIGNvbnN0IFtzdHJlYW1JZCwgdHJhY2tJZF0gPSBzc3JjTXNpZExpbmUudmFsdWUuc3BsaXQoJyAnKVswXTtcbiAgICBjb25zdCBmaXJzdFNzcmMgPSBzc3JjTXNpZExpbmUuaWQ7XG4gICAgbGV0IGZpcnN0UnR4U3NyYztcbiAgICAvLyBHZXQgdGhlIFNTUkMgZm9yIFJUWC5cbiAgICAob2ZmZXJNZWRpYU9iamVjdC5zc3JjR3JvdXBzIHx8IFtdKVxuICAgICAgICAuc29tZSgobGluZSkgPT4ge1xuICAgICAgICBpZiAobGluZS5zZW1hbnRpY3MgIT09ICdGSUQnKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBjb25zdCBzc3JjcyA9IGxpbmUuc3NyY3Muc3BsaXQoL1xccysvKTtcbiAgICAgICAgaWYgKE51bWJlcihzc3Jjc1swXSkgPT09IGZpcnN0U3NyYykge1xuICAgICAgICAgICAgZmlyc3RSdHhTc3JjID0gTnVtYmVyKHNzcmNzWzFdKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgY29uc3Qgc3NyY0NuYW1lTGluZSA9IG9mZmVyTWVkaWFPYmplY3Quc3NyY3NcbiAgICAgICAgLmZpbmQoKGxpbmUpID0+IGxpbmUuYXR0cmlidXRlID09PSAnY25hbWUnKTtcbiAgICBpZiAoIXNzcmNDbmFtZUxpbmUpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignYT1zc3JjIGxpbmUgd2l0aCBjbmFtZSBpbmZvcm1hdGlvbiBub3QgZm91bmQnKTtcbiAgICBjb25zdCBjbmFtZSA9IHNzcmNDbmFtZUxpbmUudmFsdWU7XG4gICAgY29uc3Qgc3NyY3MgPSBbXTtcbiAgICBjb25zdCBydHhTc3JjcyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtU3RyZWFtczsgKytpKSB7XG4gICAgICAgIHNzcmNzLnB1c2goZmlyc3RTc3JjICsgaSk7XG4gICAgICAgIGlmIChmaXJzdFJ0eFNzcmMpXG4gICAgICAgICAgICBydHhTc3Jjcy5wdXNoKGZpcnN0UnR4U3NyYyArIGkpO1xuICAgIH1cbiAgICBvZmZlck1lZGlhT2JqZWN0LnNzcmNHcm91cHMgPSBbXTtcbiAgICBvZmZlck1lZGlhT2JqZWN0LnNzcmNzID0gW107XG4gICAgb2ZmZXJNZWRpYU9iamVjdC5zc3JjR3JvdXBzLnB1c2goe1xuICAgICAgICBzZW1hbnRpY3M6ICdTSU0nLFxuICAgICAgICBzc3Jjczogc3NyY3Muam9pbignICcpXG4gICAgfSk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzc3Jjcy5sZW5ndGg7ICsraSkge1xuICAgICAgICBjb25zdCBzc3JjID0gc3NyY3NbaV07XG4gICAgICAgIG9mZmVyTWVkaWFPYmplY3Quc3NyY3MucHVzaCh7XG4gICAgICAgICAgICBpZDogc3NyYyxcbiAgICAgICAgICAgIGF0dHJpYnV0ZTogJ2NuYW1lJyxcbiAgICAgICAgICAgIHZhbHVlOiBjbmFtZVxuICAgICAgICB9KTtcbiAgICAgICAgb2ZmZXJNZWRpYU9iamVjdC5zc3Jjcy5wdXNoKHtcbiAgICAgICAgICAgIGlkOiBzc3JjLFxuICAgICAgICAgICAgYXR0cmlidXRlOiAnbXNpZCcsXG4gICAgICAgICAgICB2YWx1ZTogYCR7c3RyZWFtSWR9ICR7dHJhY2tJZH1gXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJ0eFNzcmNzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNvbnN0IHNzcmMgPSBzc3Jjc1tpXTtcbiAgICAgICAgY29uc3QgcnR4U3NyYyA9IHJ0eFNzcmNzW2ldO1xuICAgICAgICBvZmZlck1lZGlhT2JqZWN0LnNzcmNzLnB1c2goe1xuICAgICAgICAgICAgaWQ6IHJ0eFNzcmMsXG4gICAgICAgICAgICBhdHRyaWJ1dGU6ICdjbmFtZScsXG4gICAgICAgICAgICB2YWx1ZTogY25hbWVcbiAgICAgICAgfSk7XG4gICAgICAgIG9mZmVyTWVkaWFPYmplY3Quc3NyY3MucHVzaCh7XG4gICAgICAgICAgICBpZDogcnR4U3NyYyxcbiAgICAgICAgICAgIGF0dHJpYnV0ZTogJ21zaWQnLFxuICAgICAgICAgICAgdmFsdWU6IGAke3N0cmVhbUlkfSAke3RyYWNrSWR9YFxuICAgICAgICB9KTtcbiAgICAgICAgb2ZmZXJNZWRpYU9iamVjdC5zc3JjR3JvdXBzLnB1c2goe1xuICAgICAgICAgICAgc2VtYW50aWNzOiAnRklEJyxcbiAgICAgICAgICAgIHNzcmNzOiBgJHtzc3JjfSAke3J0eFNzcmN9YFxuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLmFkZExlZ2FjeVNpbXVsY2FzdCA9IGFkZExlZ2FjeVNpbXVsY2FzdDtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgRW5oYW5jZWRFdmVudEVtaXR0ZXJfMSA9IHJlcXVpcmUoXCIuLi9FbmhhbmNlZEV2ZW50RW1pdHRlclwiKTtcbmNsYXNzIEhhbmRsZXJJbnRlcmZhY2UgZXh0ZW5kcyBFbmhhbmNlZEV2ZW50RW1pdHRlcl8xLkVuaGFuY2VkRXZlbnRFbWl0dGVyIHtcbiAgICAvKipcbiAgICAgKiBAZW1pdHMgQGNvbm5lY3QgLSAoXG4gICAgICogICAgIHsgZHRsc1BhcmFtZXRlcnM6IER0bHNQYXJhbWV0ZXJzIH0sXG4gICAgICogICAgIGNhbGxiYWNrOiBGdW5jdGlvbixcbiAgICAgKiAgICAgZXJyYmFjazogRnVuY3Rpb25cbiAgICAgKiAgIClcbiAgICAgKiBAZW1pdHMgQGNvbm5lY3Rpb25zdGF0ZWNoYW5nZSAtIChjb25uZWN0aW9uU3RhdGU6IENvbm5lY3Rpb25TdGF0ZSlcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG59XG5leHBvcnRzLkhhbmRsZXJJbnRlcmZhY2UgPSBIYW5kbGVySW50ZXJmYWNlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB1dGlscyA9IHJlcXVpcmUoXCIuLi8uLi91dGlsc1wiKTtcbmNsYXNzIE1lZGlhU2VjdGlvbiB7XG4gICAgY29uc3RydWN0b3IoeyBpY2VQYXJhbWV0ZXJzLCBpY2VDYW5kaWRhdGVzLCBkdGxzUGFyYW1ldGVycywgcGxhbkIgPSBmYWxzZSB9KSB7XG4gICAgICAgIHRoaXMuX21lZGlhT2JqZWN0ID0ge307XG4gICAgICAgIHRoaXMuX3BsYW5CID0gcGxhbkI7XG4gICAgICAgIGlmIChpY2VQYXJhbWV0ZXJzKSB7XG4gICAgICAgICAgICB0aGlzLnNldEljZVBhcmFtZXRlcnMoaWNlUGFyYW1ldGVycyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGljZUNhbmRpZGF0ZXMpIHtcbiAgICAgICAgICAgIHRoaXMuX21lZGlhT2JqZWN0LmNhbmRpZGF0ZXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgY2FuZGlkYXRlIG9mIGljZUNhbmRpZGF0ZXMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjYW5kaWRhdGVPYmplY3QgPSB7fTtcbiAgICAgICAgICAgICAgICAvLyBtZWRpYXNvdXAgZG9lcyBtYW5kYXRlcyBydGNwLW11eCBzbyBjYW5kaWRhdGVzIGNvbXBvbmVudCBpcyBhbHdheXNcbiAgICAgICAgICAgICAgICAvLyBSVFAgKDEpLlxuICAgICAgICAgICAgICAgIGNhbmRpZGF0ZU9iamVjdC5jb21wb25lbnQgPSAxO1xuICAgICAgICAgICAgICAgIGNhbmRpZGF0ZU9iamVjdC5mb3VuZGF0aW9uID0gY2FuZGlkYXRlLmZvdW5kYXRpb247XG4gICAgICAgICAgICAgICAgY2FuZGlkYXRlT2JqZWN0LmlwID0gY2FuZGlkYXRlLmlwO1xuICAgICAgICAgICAgICAgIGNhbmRpZGF0ZU9iamVjdC5wb3J0ID0gY2FuZGlkYXRlLnBvcnQ7XG4gICAgICAgICAgICAgICAgY2FuZGlkYXRlT2JqZWN0LnByaW9yaXR5ID0gY2FuZGlkYXRlLnByaW9yaXR5O1xuICAgICAgICAgICAgICAgIGNhbmRpZGF0ZU9iamVjdC50cmFuc3BvcnQgPSBjYW5kaWRhdGUucHJvdG9jb2w7XG4gICAgICAgICAgICAgICAgY2FuZGlkYXRlT2JqZWN0LnR5cGUgPSBjYW5kaWRhdGUudHlwZTtcbiAgICAgICAgICAgICAgICBpZiAoY2FuZGlkYXRlLnRjcFR5cGUpXG4gICAgICAgICAgICAgICAgICAgIGNhbmRpZGF0ZU9iamVjdC50Y3B0eXBlID0gY2FuZGlkYXRlLnRjcFR5cGU7XG4gICAgICAgICAgICAgICAgdGhpcy5fbWVkaWFPYmplY3QuY2FuZGlkYXRlcy5wdXNoKGNhbmRpZGF0ZU9iamVjdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9tZWRpYU9iamVjdC5lbmRPZkNhbmRpZGF0ZXMgPSAnZW5kLW9mLWNhbmRpZGF0ZXMnO1xuICAgICAgICAgICAgdGhpcy5fbWVkaWFPYmplY3QuaWNlT3B0aW9ucyA9ICdyZW5vbWluYXRpb24nO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkdGxzUGFyYW1ldGVycykge1xuICAgICAgICAgICAgdGhpcy5zZXREdGxzUm9sZShkdGxzUGFyYW1ldGVycy5yb2xlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgbWlkKCkge1xuICAgICAgICByZXR1cm4gU3RyaW5nKHRoaXMuX21lZGlhT2JqZWN0Lm1pZCk7XG4gICAgfVxuICAgIGdldCBjbG9zZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tZWRpYU9iamVjdC5wb3J0ID09PSAwO1xuICAgIH1cbiAgICBnZXRPYmplY3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tZWRpYU9iamVjdDtcbiAgICB9XG4gICAgc2V0SWNlUGFyYW1ldGVycyhpY2VQYXJhbWV0ZXJzKSB7XG4gICAgICAgIHRoaXMuX21lZGlhT2JqZWN0LmljZVVmcmFnID0gaWNlUGFyYW1ldGVycy51c2VybmFtZUZyYWdtZW50O1xuICAgICAgICB0aGlzLl9tZWRpYU9iamVjdC5pY2VQd2QgPSBpY2VQYXJhbWV0ZXJzLnBhc3N3b3JkO1xuICAgIH1cbiAgICBkaXNhYmxlKCkge1xuICAgICAgICB0aGlzLl9tZWRpYU9iamVjdC5kaXJlY3Rpb24gPSAnaW5hY3RpdmUnO1xuICAgICAgICBkZWxldGUgdGhpcy5fbWVkaWFPYmplY3QuZXh0O1xuICAgICAgICBkZWxldGUgdGhpcy5fbWVkaWFPYmplY3Quc3NyY3M7XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9tZWRpYU9iamVjdC5zc3JjR3JvdXBzO1xuICAgICAgICBkZWxldGUgdGhpcy5fbWVkaWFPYmplY3Quc2ltdWxjYXN0O1xuICAgICAgICBkZWxldGUgdGhpcy5fbWVkaWFPYmplY3Quc2ltdWxjYXN0XzAzO1xuICAgICAgICBkZWxldGUgdGhpcy5fbWVkaWFPYmplY3QucmlkcztcbiAgICB9XG4gICAgY2xvc2UoKSB7XG4gICAgICAgIHRoaXMuX21lZGlhT2JqZWN0LmRpcmVjdGlvbiA9ICdpbmFjdGl2ZSc7XG4gICAgICAgIHRoaXMuX21lZGlhT2JqZWN0LnBvcnQgPSAwO1xuICAgICAgICBkZWxldGUgdGhpcy5fbWVkaWFPYmplY3QuZXh0O1xuICAgICAgICBkZWxldGUgdGhpcy5fbWVkaWFPYmplY3Quc3NyY3M7XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9tZWRpYU9iamVjdC5zc3JjR3JvdXBzO1xuICAgICAgICBkZWxldGUgdGhpcy5fbWVkaWFPYmplY3Quc2ltdWxjYXN0O1xuICAgICAgICBkZWxldGUgdGhpcy5fbWVkaWFPYmplY3Quc2ltdWxjYXN0XzAzO1xuICAgICAgICBkZWxldGUgdGhpcy5fbWVkaWFPYmplY3QucmlkcztcbiAgICAgICAgZGVsZXRlIHRoaXMuX21lZGlhT2JqZWN0LmV4dG1hcEFsbG93TWl4ZWQ7XG4gICAgfVxufVxuZXhwb3J0cy5NZWRpYVNlY3Rpb24gPSBNZWRpYVNlY3Rpb247XG5jbGFzcyBBbnN3ZXJNZWRpYVNlY3Rpb24gZXh0ZW5kcyBNZWRpYVNlY3Rpb24ge1xuICAgIGNvbnN0cnVjdG9yKHsgaWNlUGFyYW1ldGVycywgaWNlQ2FuZGlkYXRlcywgZHRsc1BhcmFtZXRlcnMsIHNjdHBQYXJhbWV0ZXJzLCBwbGFpblJ0cFBhcmFtZXRlcnMsIHBsYW5CID0gZmFsc2UsIG9mZmVyTWVkaWFPYmplY3QsIG9mZmVyUnRwUGFyYW1ldGVycywgYW5zd2VyUnRwUGFyYW1ldGVycywgY29kZWNPcHRpb25zLCBleHRtYXBBbGxvd01peGVkID0gZmFsc2UgfSkge1xuICAgICAgICBzdXBlcih7IGljZVBhcmFtZXRlcnMsIGljZUNhbmRpZGF0ZXMsIGR0bHNQYXJhbWV0ZXJzLCBwbGFuQiB9KTtcbiAgICAgICAgdGhpcy5fbWVkaWFPYmplY3QubWlkID0gU3RyaW5nKG9mZmVyTWVkaWFPYmplY3QubWlkKTtcbiAgICAgICAgdGhpcy5fbWVkaWFPYmplY3QudHlwZSA9IG9mZmVyTWVkaWFPYmplY3QudHlwZTtcbiAgICAgICAgdGhpcy5fbWVkaWFPYmplY3QucHJvdG9jb2wgPSBvZmZlck1lZGlhT2JqZWN0LnByb3RvY29sO1xuICAgICAgICBpZiAoIXBsYWluUnRwUGFyYW1ldGVycykge1xuICAgICAgICAgICAgdGhpcy5fbWVkaWFPYmplY3QuY29ubmVjdGlvbiA9IHsgaXA6ICcxMjcuMC4wLjEnLCB2ZXJzaW9uOiA0IH07XG4gICAgICAgICAgICB0aGlzLl9tZWRpYU9iamVjdC5wb3J0ID0gNztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX21lZGlhT2JqZWN0LmNvbm5lY3Rpb24gPVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaXA6IHBsYWluUnRwUGFyYW1ldGVycy5pcCxcbiAgICAgICAgICAgICAgICAgICAgdmVyc2lvbjogcGxhaW5SdHBQYXJhbWV0ZXJzLmlwVmVyc2lvblxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLl9tZWRpYU9iamVjdC5wb3J0ID0gcGxhaW5SdHBQYXJhbWV0ZXJzLnBvcnQ7XG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoIChvZmZlck1lZGlhT2JqZWN0LnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ2F1ZGlvJzpcbiAgICAgICAgICAgIGNhc2UgJ3ZpZGVvJzpcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX21lZGlhT2JqZWN0LmRpcmVjdGlvbiA9ICdyZWN2b25seSc7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX21lZGlhT2JqZWN0LnJ0cCA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9tZWRpYU9iamVjdC5ydGNwRmIgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWVkaWFPYmplY3QuZm10cCA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGNvZGVjIG9mIGFuc3dlclJ0cFBhcmFtZXRlcnMuY29kZWNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBydHAgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF5bG9hZDogY29kZWMucGF5bG9hZFR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZWM6IGdldENvZGVjTmFtZShjb2RlYyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF0ZTogY29kZWMuY2xvY2tSYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvZGVjLmNoYW5uZWxzID4gMSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBydHAuZW5jb2RpbmcgPSBjb2RlYy5jaGFubmVscztcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX21lZGlhT2JqZWN0LnJ0cC5wdXNoKHJ0cCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb2RlY1BhcmFtZXRlcnMgPSB1dGlscy5jbG9uZShjb2RlYy5wYXJhbWV0ZXJzIHx8IHt9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb2RlY09wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7IG9wdXNTdGVyZW8sIG9wdXNGZWMsIG9wdXNEdHgsIG9wdXNNYXhQbGF5YmFja1JhdGUsIG9wdXNQdGltZSwgdmlkZW9Hb29nbGVTdGFydEJpdHJhdGUsIHZpZGVvR29vZ2xlTWF4Qml0cmF0ZSwgdmlkZW9Hb29nbGVNaW5CaXRyYXRlIH0gPSBjb2RlY09wdGlvbnM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb2ZmZXJDb2RlYyA9IG9mZmVyUnRwUGFyYW1ldGVycy5jb2RlY3NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbmQoKGMpID0+IChjLnBheWxvYWRUeXBlID09PSBjb2RlYy5wYXlsb2FkVHlwZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoY29kZWMubWltZVR5cGUudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdhdWRpby9vcHVzJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B1c1N0ZXJlbyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZmVyQ29kZWMucGFyYW1ldGVyc1snc3Byb3Atc3RlcmVvJ10gPSBvcHVzU3RlcmVvID8gMSA6IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVjUGFyYW1ldGVycy5zdGVyZW8gPSBvcHVzU3RlcmVvID8gMSA6IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHVzRmVjICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2ZmZXJDb2RlYy5wYXJhbWV0ZXJzLnVzZWluYmFuZGZlYyA9IG9wdXNGZWMgPyAxIDogMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZWNQYXJhbWV0ZXJzLnVzZWluYmFuZGZlYyA9IG9wdXNGZWMgPyAxIDogMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdXNEdHggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZlckNvZGVjLnBhcmFtZXRlcnMudXNlZHR4ID0gb3B1c0R0eCA/IDEgOiAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlY1BhcmFtZXRlcnMudXNlZHR4ID0gb3B1c0R0eCA/IDEgOiAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B1c01heFBsYXliYWNrUmF0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVjUGFyYW1ldGVycy5tYXhwbGF5YmFja3JhdGUgPSBvcHVzTWF4UGxheWJhY2tSYXRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B1c1B0aW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2ZmZXJDb2RlYy5wYXJhbWV0ZXJzLnB0aW1lID0gb3B1c1B0aW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlY1BhcmFtZXRlcnMucHRpbWUgPSBvcHVzUHRpbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd2aWRlby92cDgnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd2aWRlby92cDknOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd2aWRlby9oMjY0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAndmlkZW8vaDI2NSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZpZGVvR29vZ2xlU3RhcnRCaXRyYXRlICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVjUGFyYW1ldGVyc1sneC1nb29nbGUtc3RhcnQtYml0cmF0ZSddID0gdmlkZW9Hb29nbGVTdGFydEJpdHJhdGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZpZGVvR29vZ2xlTWF4Qml0cmF0ZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlY1BhcmFtZXRlcnNbJ3gtZ29vZ2xlLW1heC1iaXRyYXRlJ10gPSB2aWRlb0dvb2dsZU1heEJpdHJhdGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZpZGVvR29vZ2xlTWluQml0cmF0ZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlY1BhcmFtZXRlcnNbJ3gtZ29vZ2xlLW1pbi1iaXRyYXRlJ10gPSB2aWRlb0dvb2dsZU1pbkJpdHJhdGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZm10cCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXlsb2FkOiBjb2RlYy5wYXlsb2FkVHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWc6ICcnXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoY29kZWNQYXJhbWV0ZXJzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmbXRwLmNvbmZpZylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm10cC5jb25maWcgKz0gJzsnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZtdHAuY29uZmlnICs9IGAke2tleX09JHtjb2RlY1BhcmFtZXRlcnNba2V5XX1gO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZtdHAuY29uZmlnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX21lZGlhT2JqZWN0LmZtdHAucHVzaChmbXRwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZmIgb2YgY29kZWMucnRjcEZlZWRiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWVkaWFPYmplY3QucnRjcEZiLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXlsb2FkOiBjb2RlYy5wYXlsb2FkVHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogZmIudHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VidHlwZTogZmIucGFyYW1ldGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWVkaWFPYmplY3QucGF5bG9hZHMgPSBhbnN3ZXJSdHBQYXJhbWV0ZXJzLmNvZGVjc1xuICAgICAgICAgICAgICAgICAgICAgICAgLm1hcCgoY29kZWMpID0+IGNvZGVjLnBheWxvYWRUeXBlKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmpvaW4oJyAnKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWVkaWFPYmplY3QuZXh0ID0gW107XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZXh0IG9mIGFuc3dlclJ0cFBhcmFtZXRlcnMuaGVhZGVyRXh0ZW5zaW9ucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRG9uJ3QgYWRkIGEgaGVhZGVyIGV4dGVuc2lvbiBpZiBub3QgcHJlc2VudCBpbiB0aGUgb2ZmZXIuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmb3VuZCA9IChvZmZlck1lZGlhT2JqZWN0LmV4dCB8fCBbXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc29tZSgobG9jYWxFeHQpID0+IGxvY2FsRXh0LnVyaSA9PT0gZXh0LnVyaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWZvdW5kKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWVkaWFPYmplY3QuZXh0LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVyaTogZXh0LnVyaSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZXh0LmlkXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBBbGxvdyBib3RoIDEgYnl0ZSBhbmQgMiBieXRlcyBsZW5ndGggaGVhZGVyIGV4dGVuc2lvbnMuXG4gICAgICAgICAgICAgICAgICAgIGlmIChleHRtYXBBbGxvd01peGVkICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZlck1lZGlhT2JqZWN0LmV4dG1hcEFsbG93TWl4ZWQgPT09ICdleHRtYXAtYWxsb3ctbWl4ZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9tZWRpYU9iamVjdC5leHRtYXBBbGxvd01peGVkID0gJ2V4dG1hcC1hbGxvdy1taXhlZCc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gU2ltdWxjYXN0LlxuICAgICAgICAgICAgICAgICAgICBpZiAob2ZmZXJNZWRpYU9iamVjdC5zaW11bGNhc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX21lZGlhT2JqZWN0LnNpbXVsY2FzdCA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXIxOiAncmVjdicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3QxOiBvZmZlck1lZGlhT2JqZWN0LnNpbXVsY2FzdC5saXN0MVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9tZWRpYU9iamVjdC5yaWRzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHJpZCBvZiBvZmZlck1lZGlhT2JqZWN0LnJpZHMgfHwgW10pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmlkLmRpcmVjdGlvbiAhPT0gJ3NlbmQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9tZWRpYU9iamVjdC5yaWRzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogcmlkLmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb246ICdyZWN2J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIFNpbXVsY2FzdCAoZHJhZnQgdmVyc2lvbiAwMykuXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKG9mZmVyTWVkaWFPYmplY3Quc2ltdWxjYXN0XzAzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2FtZWxjYXNlXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9tZWRpYU9iamVjdC5zaW11bGNhc3RfMDMgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IG9mZmVyTWVkaWFPYmplY3Quc2ltdWxjYXN0XzAzLnZhbHVlLnJlcGxhY2UoL3NlbmQvZywgJ3JlY3YnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9tZWRpYU9iamVjdC5yaWRzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHJpZCBvZiBvZmZlck1lZGlhT2JqZWN0LnJpZHMgfHwgW10pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmlkLmRpcmVjdGlvbiAhPT0gJ3NlbmQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9tZWRpYU9iamVjdC5yaWRzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogcmlkLmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb246ICdyZWN2J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX21lZGlhT2JqZWN0LnJ0Y3BNdXggPSAncnRjcC1tdXgnO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9tZWRpYU9iamVjdC5ydGNwUnNpemUgPSAncnRjcC1yc2l6ZSc7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9wbGFuQiAmJiB0aGlzLl9tZWRpYU9iamVjdC50eXBlID09PSAndmlkZW8nKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWVkaWFPYmplY3QueEdvb2dsZUZsYWcgPSAnY29uZmVyZW5jZSc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ2FwcGxpY2F0aW9uJzpcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE5ldyBzcGVjLlxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9mZmVyTWVkaWFPYmplY3Quc2N0cFBvcnQgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9tZWRpYU9iamVjdC5wYXlsb2FkcyA9ICd3ZWJydGMtZGF0YWNoYW5uZWwnO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWVkaWFPYmplY3Quc2N0cFBvcnQgPSBzY3RwUGFyYW1ldGVycy5wb3J0O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWVkaWFPYmplY3QubWF4TWVzc2FnZVNpemUgPSBzY3RwUGFyYW1ldGVycy5tYXhNZXNzYWdlU2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBPbGQgc3BlYy5cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAob2ZmZXJNZWRpYU9iamVjdC5zY3RwbWFwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9tZWRpYU9iamVjdC5wYXlsb2FkcyA9IHNjdHBQYXJhbWV0ZXJzLnBvcnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9tZWRpYU9iamVjdC5zY3RwbWFwID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcDogJ3dlYnJ0Yy1kYXRhY2hhbm5lbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjdHBtYXBOdW1iZXI6IHNjdHBQYXJhbWV0ZXJzLnBvcnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heE1lc3NhZ2VTaXplOiBzY3RwUGFyYW1ldGVycy5tYXhNZXNzYWdlU2l6ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHNldER0bHNSb2xlKHJvbGUpIHtcbiAgICAgICAgc3dpdGNoIChyb2xlKSB7XG4gICAgICAgICAgICBjYXNlICdjbGllbnQnOlxuICAgICAgICAgICAgICAgIHRoaXMuX21lZGlhT2JqZWN0LnNldHVwID0gJ2FjdGl2ZSc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdzZXJ2ZXInOlxuICAgICAgICAgICAgICAgIHRoaXMuX21lZGlhT2JqZWN0LnNldHVwID0gJ3Bhc3NpdmUnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnYXV0byc6XG4gICAgICAgICAgICAgICAgdGhpcy5fbWVkaWFPYmplY3Quc2V0dXAgPSAnYWN0cGFzcyc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkFuc3dlck1lZGlhU2VjdGlvbiA9IEFuc3dlck1lZGlhU2VjdGlvbjtcbmNsYXNzIE9mZmVyTWVkaWFTZWN0aW9uIGV4dGVuZHMgTWVkaWFTZWN0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcih7IGljZVBhcmFtZXRlcnMsIGljZUNhbmRpZGF0ZXMsIGR0bHNQYXJhbWV0ZXJzLCBzY3RwUGFyYW1ldGVycywgcGxhaW5SdHBQYXJhbWV0ZXJzLCBwbGFuQiA9IGZhbHNlLCBtaWQsIGtpbmQsIG9mZmVyUnRwUGFyYW1ldGVycywgc3RyZWFtSWQsIHRyYWNrSWQsIG9sZERhdGFDaGFubmVsU3BlYyA9IGZhbHNlIH0pIHtcbiAgICAgICAgc3VwZXIoeyBpY2VQYXJhbWV0ZXJzLCBpY2VDYW5kaWRhdGVzLCBkdGxzUGFyYW1ldGVycywgcGxhbkIgfSk7XG4gICAgICAgIHRoaXMuX21lZGlhT2JqZWN0Lm1pZCA9IFN0cmluZyhtaWQpO1xuICAgICAgICB0aGlzLl9tZWRpYU9iamVjdC50eXBlID0ga2luZDtcbiAgICAgICAgaWYgKCFwbGFpblJ0cFBhcmFtZXRlcnMpIHtcbiAgICAgICAgICAgIHRoaXMuX21lZGlhT2JqZWN0LmNvbm5lY3Rpb24gPSB7IGlwOiAnMTI3LjAuMC4xJywgdmVyc2lvbjogNCB9O1xuICAgICAgICAgICAgaWYgKCFzY3RwUGFyYW1ldGVycylcbiAgICAgICAgICAgICAgICB0aGlzLl9tZWRpYU9iamVjdC5wcm90b2NvbCA9ICdVRFAvVExTL1JUUC9TQVZQRic7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgdGhpcy5fbWVkaWFPYmplY3QucHJvdG9jb2wgPSAnVURQL0RUTFMvU0NUUCc7XG4gICAgICAgICAgICB0aGlzLl9tZWRpYU9iamVjdC5wb3J0ID0gNztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX21lZGlhT2JqZWN0LmNvbm5lY3Rpb24gPVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaXA6IHBsYWluUnRwUGFyYW1ldGVycy5pcCxcbiAgICAgICAgICAgICAgICAgICAgdmVyc2lvbjogcGxhaW5SdHBQYXJhbWV0ZXJzLmlwVmVyc2lvblxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLl9tZWRpYU9iamVjdC5wcm90b2NvbCA9ICdSVFAvQVZQJztcbiAgICAgICAgICAgIHRoaXMuX21lZGlhT2JqZWN0LnBvcnQgPSBwbGFpblJ0cFBhcmFtZXRlcnMucG9ydDtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKGtpbmQpIHtcbiAgICAgICAgICAgIGNhc2UgJ2F1ZGlvJzpcbiAgICAgICAgICAgIGNhc2UgJ3ZpZGVvJzpcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX21lZGlhT2JqZWN0LmRpcmVjdGlvbiA9ICdzZW5kb25seSc7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX21lZGlhT2JqZWN0LnJ0cCA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9tZWRpYU9iamVjdC5ydGNwRmIgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWVkaWFPYmplY3QuZm10cCA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX3BsYW5CKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWVkaWFPYmplY3QubXNpZCA9IGAke3N0cmVhbUlkIHx8ICctJ30gJHt0cmFja0lkfWA7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgY29kZWMgb2Ygb2ZmZXJSdHBQYXJhbWV0ZXJzLmNvZGVjcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcnRwID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBheWxvYWQ6IGNvZGVjLnBheWxvYWRUeXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVjOiBnZXRDb2RlY05hbWUoY29kZWMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhdGU6IGNvZGVjLmNsb2NrUmF0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb2RlYy5jaGFubmVscyA+IDEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnRwLmVuY29kaW5nID0gY29kZWMuY2hhbm5lbHM7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9tZWRpYU9iamVjdC5ydHAucHVzaChydHApO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZm10cCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXlsb2FkOiBjb2RlYy5wYXlsb2FkVHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWc6ICcnXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoY29kZWMucGFyYW1ldGVycykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZm10cC5jb25maWcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZtdHAuY29uZmlnICs9ICc7JztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbXRwLmNvbmZpZyArPSBgJHtrZXl9PSR7Y29kZWMucGFyYW1ldGVyc1trZXldfWA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZm10cC5jb25maWcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWVkaWFPYmplY3QuZm10cC5wdXNoKGZtdHApO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBmYiBvZiBjb2RlYy5ydGNwRmVlZGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9tZWRpYU9iamVjdC5ydGNwRmIucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBheWxvYWQ6IGNvZGVjLnBheWxvYWRUeXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBmYi50eXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJ0eXBlOiBmYi5wYXJhbWV0ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9tZWRpYU9iamVjdC5wYXlsb2FkcyA9IG9mZmVyUnRwUGFyYW1ldGVycy5jb2RlY3NcbiAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoKGNvZGVjKSA9PiBjb2RlYy5wYXlsb2FkVHlwZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5qb2luKCcgJyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX21lZGlhT2JqZWN0LmV4dCA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGV4dCBvZiBvZmZlclJ0cFBhcmFtZXRlcnMuaGVhZGVyRXh0ZW5zaW9ucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWVkaWFPYmplY3QuZXh0LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVyaTogZXh0LnVyaSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZXh0LmlkXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9tZWRpYU9iamVjdC5ydGNwTXV4ID0gJ3J0Y3AtbXV4JztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWVkaWFPYmplY3QucnRjcFJzaXplID0gJ3J0Y3AtcnNpemUnO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBlbmNvZGluZyA9IG9mZmVyUnRwUGFyYW1ldGVycy5lbmNvZGluZ3NbMF07XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNzcmMgPSBlbmNvZGluZy5zc3JjO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBydHhTc3JjID0gKGVuY29kaW5nLnJ0eCAmJiBlbmNvZGluZy5ydHguc3NyYylcbiAgICAgICAgICAgICAgICAgICAgICAgID8gZW5jb2RpbmcucnR4LnNzcmNcbiAgICAgICAgICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9tZWRpYU9iamVjdC5zc3JjcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9tZWRpYU9iamVjdC5zc3JjR3JvdXBzID0gW107XG4gICAgICAgICAgICAgICAgICAgIGlmIChvZmZlclJ0cFBhcmFtZXRlcnMucnRjcC5jbmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWVkaWFPYmplY3Quc3NyY3MucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IHNzcmMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlOiAnY25hbWUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBvZmZlclJ0cFBhcmFtZXRlcnMucnRjcC5jbmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3BsYW5CKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9tZWRpYU9iamVjdC5zc3Jjcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogc3NyYyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGU6ICdtc2lkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogYCR7c3RyZWFtSWQgfHwgJy0nfSAke3RyYWNrSWR9YFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHJ0eFNzcmMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvZmZlclJ0cFBhcmFtZXRlcnMucnRjcC5jbmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX21lZGlhT2JqZWN0LnNzcmNzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogcnR4U3NyYyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlOiAnY25hbWUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogb2ZmZXJSdHBQYXJhbWV0ZXJzLnJ0Y3AuY25hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9wbGFuQikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX21lZGlhT2JqZWN0LnNzcmNzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogcnR4U3NyYyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlOiAnbXNpZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBgJHtzdHJlYW1JZCB8fCAnLSd9ICR7dHJhY2tJZH1gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBc3NvY2lhdGUgb3JpZ2luYWwgYW5kIHJldHJhbnNtaXNzaW9uIFNTUkNzLlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWVkaWFPYmplY3Quc3NyY0dyb3Vwcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZW1hbnRpY3M6ICdGSUQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNzcmNzOiBgJHtzc3JjfSAke3J0eFNzcmN9YFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnYXBwbGljYXRpb24nOlxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gTmV3IHNwZWMuXG4gICAgICAgICAgICAgICAgICAgIGlmICghb2xkRGF0YUNoYW5uZWxTcGVjKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9tZWRpYU9iamVjdC5wYXlsb2FkcyA9ICd3ZWJydGMtZGF0YWNoYW5uZWwnO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWVkaWFPYmplY3Quc2N0cFBvcnQgPSBzY3RwUGFyYW1ldGVycy5wb3J0O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWVkaWFPYmplY3QubWF4TWVzc2FnZVNpemUgPSBzY3RwUGFyYW1ldGVycy5tYXhNZXNzYWdlU2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBPbGQgc3BlYy5cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9tZWRpYU9iamVjdC5wYXlsb2FkcyA9IHNjdHBQYXJhbWV0ZXJzLnBvcnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9tZWRpYU9iamVjdC5zY3RwbWFwID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcDogJ3dlYnJ0Yy1kYXRhY2hhbm5lbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjdHBtYXBOdW1iZXI6IHNjdHBQYXJhbWV0ZXJzLnBvcnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heE1lc3NhZ2VTaXplOiBzY3RwUGFyYW1ldGVycy5tYXhNZXNzYWdlU2l6ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbiAgICBzZXREdGxzUm9sZShyb2xlKSB7XG4gICAgICAgIC8vIEFsd2F5cyAnYWN0cGFzcycuXG4gICAgICAgIHRoaXMuX21lZGlhT2JqZWN0LnNldHVwID0gJ2FjdHBhc3MnO1xuICAgIH1cbiAgICBwbGFuQlJlY2VpdmUoeyBvZmZlclJ0cFBhcmFtZXRlcnMsIHN0cmVhbUlkLCB0cmFja0lkIH0pIHtcbiAgICAgICAgY29uc3QgZW5jb2RpbmcgPSBvZmZlclJ0cFBhcmFtZXRlcnMuZW5jb2RpbmdzWzBdO1xuICAgICAgICBjb25zdCBzc3JjID0gZW5jb2Rpbmcuc3NyYztcbiAgICAgICAgY29uc3QgcnR4U3NyYyA9IChlbmNvZGluZy5ydHggJiYgZW5jb2RpbmcucnR4LnNzcmMpXG4gICAgICAgICAgICA/IGVuY29kaW5nLnJ0eC5zc3JjXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKG9mZmVyUnRwUGFyYW1ldGVycy5ydGNwLmNuYW1lKSB7XG4gICAgICAgICAgICB0aGlzLl9tZWRpYU9iamVjdC5zc3Jjcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBpZDogc3NyYyxcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGU6ICdjbmFtZScsXG4gICAgICAgICAgICAgICAgdmFsdWU6IG9mZmVyUnRwUGFyYW1ldGVycy5ydGNwLmNuYW1lXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9tZWRpYU9iamVjdC5zc3Jjcy5wdXNoKHtcbiAgICAgICAgICAgIGlkOiBzc3JjLFxuICAgICAgICAgICAgYXR0cmlidXRlOiAnbXNpZCcsXG4gICAgICAgICAgICB2YWx1ZTogYCR7c3RyZWFtSWQgfHwgJy0nfSAke3RyYWNrSWR9YFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHJ0eFNzcmMpIHtcbiAgICAgICAgICAgIGlmIChvZmZlclJ0cFBhcmFtZXRlcnMucnRjcC5jbmFtZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX21lZGlhT2JqZWN0LnNzcmNzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBpZDogcnR4U3NyYyxcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlOiAnY25hbWUnLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogb2ZmZXJSdHBQYXJhbWV0ZXJzLnJ0Y3AuY25hbWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX21lZGlhT2JqZWN0LnNzcmNzLnB1c2goe1xuICAgICAgICAgICAgICAgIGlkOiBydHhTc3JjLFxuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZTogJ21zaWQnLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBgJHtzdHJlYW1JZCB8fCAnLSd9ICR7dHJhY2tJZH1gXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIEFzc29jaWF0ZSBvcmlnaW5hbCBhbmQgcmV0cmFuc21pc3Npb24gU1NSQ3MuXG4gICAgICAgICAgICB0aGlzLl9tZWRpYU9iamVjdC5zc3JjR3JvdXBzLnB1c2goe1xuICAgICAgICAgICAgICAgIHNlbWFudGljczogJ0ZJRCcsXG4gICAgICAgICAgICAgICAgc3NyY3M6IGAke3NzcmN9ICR7cnR4U3NyY31gXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBwbGFuQlN0b3BSZWNlaXZpbmcoeyBvZmZlclJ0cFBhcmFtZXRlcnMgfSkge1xuICAgICAgICBjb25zdCBlbmNvZGluZyA9IG9mZmVyUnRwUGFyYW1ldGVycy5lbmNvZGluZ3NbMF07XG4gICAgICAgIGNvbnN0IHNzcmMgPSBlbmNvZGluZy5zc3JjO1xuICAgICAgICBjb25zdCBydHhTc3JjID0gKGVuY29kaW5nLnJ0eCAmJiBlbmNvZGluZy5ydHguc3NyYylcbiAgICAgICAgICAgID8gZW5jb2RpbmcucnR4LnNzcmNcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9tZWRpYU9iamVjdC5zc3JjcyA9IHRoaXMuX21lZGlhT2JqZWN0LnNzcmNzXG4gICAgICAgICAgICAuZmlsdGVyKChzKSA9PiBzLmlkICE9PSBzc3JjICYmIHMuaWQgIT09IHJ0eFNzcmMpO1xuICAgICAgICBpZiAocnR4U3NyYykge1xuICAgICAgICAgICAgdGhpcy5fbWVkaWFPYmplY3Quc3NyY0dyb3VwcyA9IHRoaXMuX21lZGlhT2JqZWN0LnNzcmNHcm91cHNcbiAgICAgICAgICAgICAgICAuZmlsdGVyKChncm91cCkgPT4gZ3JvdXAuc3NyY3MgIT09IGAke3NzcmN9ICR7cnR4U3NyY31gKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuT2ZmZXJNZWRpYVNlY3Rpb24gPSBPZmZlck1lZGlhU2VjdGlvbjtcbmZ1bmN0aW9uIGdldENvZGVjTmFtZShjb2RlYykge1xuICAgIGNvbnN0IE1pbWVUeXBlUmVnZXggPSBuZXcgUmVnRXhwKCdeKGF1ZGlvfHZpZGVvKS8oLispJywgJ2knKTtcbiAgICBjb25zdCBtaW1lVHlwZU1hdGNoID0gTWltZVR5cGVSZWdleC5leGVjKGNvZGVjLm1pbWVUeXBlKTtcbiAgICBpZiAoIW1pbWVUeXBlTWF0Y2gpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgY29kZWMubWltZVR5cGUnKTtcbiAgICByZXR1cm4gbWltZVR5cGVNYXRjaFsyXTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3Qgc2RwVHJhbnNmb3JtID0gcmVxdWlyZShcInNkcC10cmFuc2Zvcm1cIik7XG5jb25zdCBMb2dnZXJfMSA9IHJlcXVpcmUoXCIuLi8uLi9Mb2dnZXJcIik7XG5jb25zdCBNZWRpYVNlY3Rpb25fMSA9IHJlcXVpcmUoXCIuL01lZGlhU2VjdGlvblwiKTtcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXJfMS5Mb2dnZXIoJ1JlbW90ZVNkcCcpO1xuY2xhc3MgUmVtb3RlU2RwIHtcbiAgICBjb25zdHJ1Y3Rvcih7IGljZVBhcmFtZXRlcnMsIGljZUNhbmRpZGF0ZXMsIGR0bHNQYXJhbWV0ZXJzLCBzY3RwUGFyYW1ldGVycywgcGxhaW5SdHBQYXJhbWV0ZXJzLCBwbGFuQiA9IGZhbHNlIH0pIHtcbiAgICAgICAgLy8gTWVkaWFTZWN0aW9uIGluc3RhbmNlcy5cbiAgICAgICAgdGhpcy5fbWVkaWFTZWN0aW9ucyA9IFtdO1xuICAgICAgICAvLyBNZWRpYVNlY3Rpb24gaW5kaWNlcyBpbmRleGVkIGJ5IE1JRC5cbiAgICAgICAgdGhpcy5fbWlkVG9JbmRleCA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5faWNlUGFyYW1ldGVycyA9IGljZVBhcmFtZXRlcnM7XG4gICAgICAgIHRoaXMuX2ljZUNhbmRpZGF0ZXMgPSBpY2VDYW5kaWRhdGVzO1xuICAgICAgICB0aGlzLl9kdGxzUGFyYW1ldGVycyA9IGR0bHNQYXJhbWV0ZXJzO1xuICAgICAgICB0aGlzLl9zY3RwUGFyYW1ldGVycyA9IHNjdHBQYXJhbWV0ZXJzO1xuICAgICAgICB0aGlzLl9wbGFpblJ0cFBhcmFtZXRlcnMgPSBwbGFpblJ0cFBhcmFtZXRlcnM7XG4gICAgICAgIHRoaXMuX3BsYW5CID0gcGxhbkI7XG4gICAgICAgIHRoaXMuX3NkcE9iamVjdCA9XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmVyc2lvbjogMCxcbiAgICAgICAgICAgICAgICBvcmlnaW46IHtcbiAgICAgICAgICAgICAgICAgICAgYWRkcmVzczogJzAuMC4wLjAnLFxuICAgICAgICAgICAgICAgICAgICBpcFZlcjogNCxcbiAgICAgICAgICAgICAgICAgICAgbmV0VHlwZTogJ0lOJyxcbiAgICAgICAgICAgICAgICAgICAgc2Vzc2lvbklkOiAxMDAwMCxcbiAgICAgICAgICAgICAgICAgICAgc2Vzc2lvblZlcnNpb246IDAsXG4gICAgICAgICAgICAgICAgICAgIHVzZXJuYW1lOiAnbWVkaWFzb3VwLWNsaWVudCdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG5hbWU6ICctJyxcbiAgICAgICAgICAgICAgICB0aW1pbmc6IHsgc3RhcnQ6IDAsIHN0b3A6IDAgfSxcbiAgICAgICAgICAgICAgICBtZWRpYTogW11cbiAgICAgICAgICAgIH07XG4gICAgICAgIC8vIElmIElDRSBwYXJhbWV0ZXJzIGFyZSBnaXZlbiwgYWRkIElDRS1MaXRlIGluZGljYXRvci5cbiAgICAgICAgaWYgKGljZVBhcmFtZXRlcnMgJiYgaWNlUGFyYW1ldGVycy5pY2VMaXRlKSB7XG4gICAgICAgICAgICB0aGlzLl9zZHBPYmplY3QuaWNlbGl0ZSA9ICdpY2UtbGl0ZSc7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgRFRMUyBwYXJhbWV0ZXJzIGFyZSBnaXZlbiwgYXNzdW1lIFdlYlJUQyBhbmQgQlVORExFLlxuICAgICAgICBpZiAoZHRsc1BhcmFtZXRlcnMpIHtcbiAgICAgICAgICAgIHRoaXMuX3NkcE9iamVjdC5tc2lkU2VtYW50aWMgPSB7IHNlbWFudGljOiAnV01TJywgdG9rZW46ICcqJyB9O1xuICAgICAgICAgICAgLy8gTk9URTogV2UgdGFrZSB0aGUgbGF0ZXN0IGZpbmdlcnByaW50LlxuICAgICAgICAgICAgY29uc3QgbnVtRmluZ2VycHJpbnRzID0gdGhpcy5fZHRsc1BhcmFtZXRlcnMuZmluZ2VycHJpbnRzLmxlbmd0aDtcbiAgICAgICAgICAgIHRoaXMuX3NkcE9iamVjdC5maW5nZXJwcmludCA9XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBkdGxzUGFyYW1ldGVycy5maW5nZXJwcmludHNbbnVtRmluZ2VycHJpbnRzIC0gMV0uYWxnb3JpdGhtLFxuICAgICAgICAgICAgICAgICAgICBoYXNoOiBkdGxzUGFyYW1ldGVycy5maW5nZXJwcmludHNbbnVtRmluZ2VycHJpbnRzIC0gMV0udmFsdWVcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5fc2RwT2JqZWN0Lmdyb3VwcyA9IFt7IHR5cGU6ICdCVU5ETEUnLCBtaWRzOiAnJyB9XTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB0aGVyZSBhcmUgcGxhaW4gUlBUIHBhcmFtZXRlcnMsIG92ZXJyaWRlIFNEUCBvcmlnaW4uXG4gICAgICAgIGlmIChwbGFpblJ0cFBhcmFtZXRlcnMpIHtcbiAgICAgICAgICAgIHRoaXMuX3NkcE9iamVjdC5vcmlnaW4uYWRkcmVzcyA9IHBsYWluUnRwUGFyYW1ldGVycy5pcDtcbiAgICAgICAgICAgIHRoaXMuX3NkcE9iamVjdC5vcmlnaW4uaXBWZXIgPSBwbGFpblJ0cFBhcmFtZXRlcnMuaXBWZXJzaW9uO1xuICAgICAgICB9XG4gICAgfVxuICAgIHVwZGF0ZUljZVBhcmFtZXRlcnMoaWNlUGFyYW1ldGVycykge1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3VwZGF0ZUljZVBhcmFtZXRlcnMoKSBbaWNlUGFyYW1ldGVyczolb10nLCBpY2VQYXJhbWV0ZXJzKTtcbiAgICAgICAgdGhpcy5faWNlUGFyYW1ldGVycyA9IGljZVBhcmFtZXRlcnM7XG4gICAgICAgIHRoaXMuX3NkcE9iamVjdC5pY2VsaXRlID0gaWNlUGFyYW1ldGVycy5pY2VMaXRlID8gJ2ljZS1saXRlJyA6IHVuZGVmaW5lZDtcbiAgICAgICAgZm9yIChjb25zdCBtZWRpYVNlY3Rpb24gb2YgdGhpcy5fbWVkaWFTZWN0aW9ucykge1xuICAgICAgICAgICAgbWVkaWFTZWN0aW9uLnNldEljZVBhcmFtZXRlcnMoaWNlUGFyYW1ldGVycyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdXBkYXRlRHRsc1JvbGUocm9sZSkge1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3VwZGF0ZUR0bHNSb2xlKCkgW3JvbGU6JXNdJywgcm9sZSk7XG4gICAgICAgIHRoaXMuX2R0bHNQYXJhbWV0ZXJzLnJvbGUgPSByb2xlO1xuICAgICAgICBmb3IgKGNvbnN0IG1lZGlhU2VjdGlvbiBvZiB0aGlzLl9tZWRpYVNlY3Rpb25zKSB7XG4gICAgICAgICAgICBtZWRpYVNlY3Rpb24uc2V0RHRsc1JvbGUocm9sZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0TmV4dE1lZGlhU2VjdGlvbklkeCgpIHtcbiAgICAgICAgLy8gSWYgYSBjbG9zZWQgbWVkaWEgc2VjdGlvbiBpcyBmb3VuZCwgcmV0dXJuIGl0cyBpbmRleC5cbiAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgdGhpcy5fbWVkaWFTZWN0aW9ucy5sZW5ndGg7ICsraWR4KSB7XG4gICAgICAgICAgICBjb25zdCBtZWRpYVNlY3Rpb24gPSB0aGlzLl9tZWRpYVNlY3Rpb25zW2lkeF07XG4gICAgICAgICAgICBpZiAobWVkaWFTZWN0aW9uLmNsb3NlZClcbiAgICAgICAgICAgICAgICByZXR1cm4geyBpZHgsIHJldXNlTWlkOiBtZWRpYVNlY3Rpb24ubWlkIH07XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgbm8gY2xvc2VkIG1lZGlhIHNlY3Rpb24gaXMgZm91bmQsIHJldHVybiBuZXh0IG9uZS5cbiAgICAgICAgcmV0dXJuIHsgaWR4OiB0aGlzLl9tZWRpYVNlY3Rpb25zLmxlbmd0aCB9O1xuICAgIH1cbiAgICBzZW5kKHsgb2ZmZXJNZWRpYU9iamVjdCwgcmV1c2VNaWQsIG9mZmVyUnRwUGFyYW1ldGVycywgYW5zd2VyUnRwUGFyYW1ldGVycywgY29kZWNPcHRpb25zLCBleHRtYXBBbGxvd01peGVkID0gZmFsc2UgfSkge1xuICAgICAgICBjb25zdCBtZWRpYVNlY3Rpb24gPSBuZXcgTWVkaWFTZWN0aW9uXzEuQW5zd2VyTWVkaWFTZWN0aW9uKHtcbiAgICAgICAgICAgIGljZVBhcmFtZXRlcnM6IHRoaXMuX2ljZVBhcmFtZXRlcnMsXG4gICAgICAgICAgICBpY2VDYW5kaWRhdGVzOiB0aGlzLl9pY2VDYW5kaWRhdGVzLFxuICAgICAgICAgICAgZHRsc1BhcmFtZXRlcnM6IHRoaXMuX2R0bHNQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgcGxhaW5SdHBQYXJhbWV0ZXJzOiB0aGlzLl9wbGFpblJ0cFBhcmFtZXRlcnMsXG4gICAgICAgICAgICBwbGFuQjogdGhpcy5fcGxhbkIsXG4gICAgICAgICAgICBvZmZlck1lZGlhT2JqZWN0LFxuICAgICAgICAgICAgb2ZmZXJSdHBQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgYW5zd2VyUnRwUGFyYW1ldGVycyxcbiAgICAgICAgICAgIGNvZGVjT3B0aW9ucyxcbiAgICAgICAgICAgIGV4dG1hcEFsbG93TWl4ZWRcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIFVuaWZpZWQtUGxhbiB3aXRoIGNsb3NlZCBtZWRpYSBzZWN0aW9uIHJlcGxhY2VtZW50LlxuICAgICAgICBpZiAocmV1c2VNaWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3JlcGxhY2VNZWRpYVNlY3Rpb24obWVkaWFTZWN0aW9uLCByZXVzZU1pZCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVW5pZmllZC1QbGFuIG9yIFBsYW4tQiB3aXRoIGRpZmZlcmVudCBtZWRpYSBraW5kLlxuICAgICAgICBlbHNlIGlmICghdGhpcy5fbWlkVG9JbmRleC5oYXMobWVkaWFTZWN0aW9uLm1pZCkpIHtcbiAgICAgICAgICAgIHRoaXMuX2FkZE1lZGlhU2VjdGlvbihtZWRpYVNlY3Rpb24pO1xuICAgICAgICB9XG4gICAgICAgIC8vIFBsYW4tQiB3aXRoIHNhbWUgbWVkaWEga2luZC5cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9yZXBsYWNlTWVkaWFTZWN0aW9uKG1lZGlhU2VjdGlvbik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVjZWl2ZSh7IG1pZCwga2luZCwgb2ZmZXJSdHBQYXJhbWV0ZXJzLCBzdHJlYW1JZCwgdHJhY2tJZCB9KSB7XG4gICAgICAgIGNvbnN0IGlkeCA9IHRoaXMuX21pZFRvSW5kZXguZ2V0KG1pZCk7XG4gICAgICAgIGxldCBtZWRpYVNlY3Rpb247XG4gICAgICAgIGlmIChpZHggIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIG1lZGlhU2VjdGlvbiA9IHRoaXMuX21lZGlhU2VjdGlvbnNbaWR4XTtcbiAgICAgICAgLy8gVW5pZmllZC1QbGFuIG9yIGRpZmZlcmVudCBtZWRpYSBraW5kLlxuICAgICAgICBpZiAoIW1lZGlhU2VjdGlvbikge1xuICAgICAgICAgICAgbWVkaWFTZWN0aW9uID0gbmV3IE1lZGlhU2VjdGlvbl8xLk9mZmVyTWVkaWFTZWN0aW9uKHtcbiAgICAgICAgICAgICAgICBpY2VQYXJhbWV0ZXJzOiB0aGlzLl9pY2VQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgIGljZUNhbmRpZGF0ZXM6IHRoaXMuX2ljZUNhbmRpZGF0ZXMsXG4gICAgICAgICAgICAgICAgZHRsc1BhcmFtZXRlcnM6IHRoaXMuX2R0bHNQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgIHBsYWluUnRwUGFyYW1ldGVyczogdGhpcy5fcGxhaW5SdHBQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgIHBsYW5COiB0aGlzLl9wbGFuQixcbiAgICAgICAgICAgICAgICBtaWQsXG4gICAgICAgICAgICAgICAga2luZCxcbiAgICAgICAgICAgICAgICBvZmZlclJ0cFBhcmFtZXRlcnMsXG4gICAgICAgICAgICAgICAgc3RyZWFtSWQsXG4gICAgICAgICAgICAgICAgdHJhY2tJZFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLl9hZGRNZWRpYVNlY3Rpb24obWVkaWFTZWN0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBQbGFuLUIuXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbWVkaWFTZWN0aW9uLnBsYW5CUmVjZWl2ZSh7IG9mZmVyUnRwUGFyYW1ldGVycywgc3RyZWFtSWQsIHRyYWNrSWQgfSk7XG4gICAgICAgICAgICB0aGlzLl9yZXBsYWNlTWVkaWFTZWN0aW9uKG1lZGlhU2VjdGlvbik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZGlzYWJsZU1lZGlhU2VjdGlvbihtaWQpIHtcbiAgICAgICAgY29uc3QgaWR4ID0gdGhpcy5fbWlkVG9JbmRleC5nZXQobWlkKTtcbiAgICAgICAgaWYgKGlkeCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYG5vIG1lZGlhIHNlY3Rpb24gZm91bmQgd2l0aCBtaWQgJyR7bWlkfSdgKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtZWRpYVNlY3Rpb24gPSB0aGlzLl9tZWRpYVNlY3Rpb25zW2lkeF07XG4gICAgICAgIG1lZGlhU2VjdGlvbi5kaXNhYmxlKCk7XG4gICAgfVxuICAgIGNsb3NlTWVkaWFTZWN0aW9uKG1pZCkge1xuICAgICAgICBjb25zdCBpZHggPSB0aGlzLl9taWRUb0luZGV4LmdldChtaWQpO1xuICAgICAgICBpZiAoaWR4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgbm8gbWVkaWEgc2VjdGlvbiBmb3VuZCB3aXRoIG1pZCAnJHttaWR9J2ApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1lZGlhU2VjdGlvbiA9IHRoaXMuX21lZGlhU2VjdGlvbnNbaWR4XTtcbiAgICAgICAgLy8gTk9URTogQ2xvc2luZyB0aGUgZmlyc3QgbSBzZWN0aW9uIGlzIGEgcGFpbiBzaW5jZSBpdCBpbnZhbGlkYXRlcyB0aGVcbiAgICAgICAgLy8gYnVuZGxlZCB0cmFuc3BvcnQsIHNvIGxldCdzIGF2b2lkIGl0LlxuICAgICAgICBpZiAobWlkID09PSB0aGlzLl9maXJzdE1pZCkge1xuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdjbG9zZU1lZGlhU2VjdGlvbigpIHwgY2Fubm90IGNsb3NlIGZpcnN0IG1lZGlhIHNlY3Rpb24sIGRpc2FibGluZyBpdCBpbnN0ZWFkIFttaWQ6JXNdJywgbWlkKTtcbiAgICAgICAgICAgIHRoaXMuZGlzYWJsZU1lZGlhU2VjdGlvbihtaWQpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIG1lZGlhU2VjdGlvbi5jbG9zZSgpO1xuICAgICAgICAvLyBSZWdlbmVyYXRlIEJVTkRMRSBtaWRzLlxuICAgICAgICB0aGlzLl9yZWdlbmVyYXRlQnVuZGxlTWlkcygpO1xuICAgIH1cbiAgICBwbGFuQlN0b3BSZWNlaXZpbmcoeyBtaWQsIG9mZmVyUnRwUGFyYW1ldGVycyB9KSB7XG4gICAgICAgIGNvbnN0IGlkeCA9IHRoaXMuX21pZFRvSW5kZXguZ2V0KG1pZCk7XG4gICAgICAgIGlmIChpZHggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBubyBtZWRpYSBzZWN0aW9uIGZvdW5kIHdpdGggbWlkICcke21pZH0nYCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWVkaWFTZWN0aW9uID0gdGhpcy5fbWVkaWFTZWN0aW9uc1tpZHhdO1xuICAgICAgICBtZWRpYVNlY3Rpb24ucGxhbkJTdG9wUmVjZWl2aW5nKHsgb2ZmZXJSdHBQYXJhbWV0ZXJzIH0pO1xuICAgICAgICB0aGlzLl9yZXBsYWNlTWVkaWFTZWN0aW9uKG1lZGlhU2VjdGlvbik7XG4gICAgfVxuICAgIHNlbmRTY3RwQXNzb2NpYXRpb24oeyBvZmZlck1lZGlhT2JqZWN0IH0pIHtcbiAgICAgICAgY29uc3QgbWVkaWFTZWN0aW9uID0gbmV3IE1lZGlhU2VjdGlvbl8xLkFuc3dlck1lZGlhU2VjdGlvbih7XG4gICAgICAgICAgICBpY2VQYXJhbWV0ZXJzOiB0aGlzLl9pY2VQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgaWNlQ2FuZGlkYXRlczogdGhpcy5faWNlQ2FuZGlkYXRlcyxcbiAgICAgICAgICAgIGR0bHNQYXJhbWV0ZXJzOiB0aGlzLl9kdGxzUGFyYW1ldGVycyxcbiAgICAgICAgICAgIHNjdHBQYXJhbWV0ZXJzOiB0aGlzLl9zY3RwUGFyYW1ldGVycyxcbiAgICAgICAgICAgIHBsYWluUnRwUGFyYW1ldGVyczogdGhpcy5fcGxhaW5SdHBQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgb2ZmZXJNZWRpYU9iamVjdFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fYWRkTWVkaWFTZWN0aW9uKG1lZGlhU2VjdGlvbik7XG4gICAgfVxuICAgIHJlY2VpdmVTY3RwQXNzb2NpYXRpb24oeyBvbGREYXRhQ2hhbm5lbFNwZWMgPSBmYWxzZSB9ID0ge30pIHtcbiAgICAgICAgY29uc3QgbWVkaWFTZWN0aW9uID0gbmV3IE1lZGlhU2VjdGlvbl8xLk9mZmVyTWVkaWFTZWN0aW9uKHtcbiAgICAgICAgICAgIGljZVBhcmFtZXRlcnM6IHRoaXMuX2ljZVBhcmFtZXRlcnMsXG4gICAgICAgICAgICBpY2VDYW5kaWRhdGVzOiB0aGlzLl9pY2VDYW5kaWRhdGVzLFxuICAgICAgICAgICAgZHRsc1BhcmFtZXRlcnM6IHRoaXMuX2R0bHNQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgc2N0cFBhcmFtZXRlcnM6IHRoaXMuX3NjdHBQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgcGxhaW5SdHBQYXJhbWV0ZXJzOiB0aGlzLl9wbGFpblJ0cFBhcmFtZXRlcnMsXG4gICAgICAgICAgICBtaWQ6ICdkYXRhY2hhbm5lbCcsXG4gICAgICAgICAgICBraW5kOiAnYXBwbGljYXRpb24nLFxuICAgICAgICAgICAgb2xkRGF0YUNoYW5uZWxTcGVjXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9hZGRNZWRpYVNlY3Rpb24obWVkaWFTZWN0aW9uKTtcbiAgICB9XG4gICAgZ2V0U2RwKCkge1xuICAgICAgICAvLyBJbmNyZWFzZSBTRFAgdmVyc2lvbi5cbiAgICAgICAgdGhpcy5fc2RwT2JqZWN0Lm9yaWdpbi5zZXNzaW9uVmVyc2lvbisrO1xuICAgICAgICByZXR1cm4gc2RwVHJhbnNmb3JtLndyaXRlKHRoaXMuX3NkcE9iamVjdCk7XG4gICAgfVxuICAgIF9hZGRNZWRpYVNlY3Rpb24obmV3TWVkaWFTZWN0aW9uKSB7XG4gICAgICAgIGlmICghdGhpcy5fZmlyc3RNaWQpXG4gICAgICAgICAgICB0aGlzLl9maXJzdE1pZCA9IG5ld01lZGlhU2VjdGlvbi5taWQ7XG4gICAgICAgIC8vIEFkZCB0byB0aGUgdmVjdG9yLlxuICAgICAgICB0aGlzLl9tZWRpYVNlY3Rpb25zLnB1c2gobmV3TWVkaWFTZWN0aW9uKTtcbiAgICAgICAgLy8gQWRkIHRvIHRoZSBtYXAuXG4gICAgICAgIHRoaXMuX21pZFRvSW5kZXguc2V0KG5ld01lZGlhU2VjdGlvbi5taWQsIHRoaXMuX21lZGlhU2VjdGlvbnMubGVuZ3RoIC0gMSk7XG4gICAgICAgIC8vIEFkZCB0byB0aGUgU0RQIG9iamVjdC5cbiAgICAgICAgdGhpcy5fc2RwT2JqZWN0Lm1lZGlhLnB1c2gobmV3TWVkaWFTZWN0aW9uLmdldE9iamVjdCgpKTtcbiAgICAgICAgLy8gUmVnZW5lcmF0ZSBCVU5ETEUgbWlkcy5cbiAgICAgICAgdGhpcy5fcmVnZW5lcmF0ZUJ1bmRsZU1pZHMoKTtcbiAgICB9XG4gICAgX3JlcGxhY2VNZWRpYVNlY3Rpb24obmV3TWVkaWFTZWN0aW9uLCByZXVzZU1pZCkge1xuICAgICAgICAvLyBTdG9yZSBpdCBpbiB0aGUgbWFwLlxuICAgICAgICBpZiAodHlwZW9mIHJldXNlTWlkID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgY29uc3QgaWR4ID0gdGhpcy5fbWlkVG9JbmRleC5nZXQocmV1c2VNaWQpO1xuICAgICAgICAgICAgaWYgKGlkeCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBubyBtZWRpYSBzZWN0aW9uIGZvdW5kIGZvciByZXVzZU1pZCAnJHtyZXVzZU1pZH0nYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBvbGRNZWRpYVNlY3Rpb24gPSB0aGlzLl9tZWRpYVNlY3Rpb25zW2lkeF07XG4gICAgICAgICAgICAvLyBSZXBsYWNlIHRoZSBpbmRleCBpbiB0aGUgdmVjdG9yIHdpdGggdGhlIG5ldyBtZWRpYSBzZWN0aW9uLlxuICAgICAgICAgICAgdGhpcy5fbWVkaWFTZWN0aW9uc1tpZHhdID0gbmV3TWVkaWFTZWN0aW9uO1xuICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBtYXAuXG4gICAgICAgICAgICB0aGlzLl9taWRUb0luZGV4LmRlbGV0ZShvbGRNZWRpYVNlY3Rpb24ubWlkKTtcbiAgICAgICAgICAgIHRoaXMuX21pZFRvSW5kZXguc2V0KG5ld01lZGlhU2VjdGlvbi5taWQsIGlkeCk7XG4gICAgICAgICAgICAvLyBVcGRhdGUgdGhlIFNEUCBvYmplY3QuXG4gICAgICAgICAgICB0aGlzLl9zZHBPYmplY3QubWVkaWFbaWR4XSA9IG5ld01lZGlhU2VjdGlvbi5nZXRPYmplY3QoKTtcbiAgICAgICAgICAgIC8vIFJlZ2VuZXJhdGUgQlVORExFIG1pZHMuXG4gICAgICAgICAgICB0aGlzLl9yZWdlbmVyYXRlQnVuZGxlTWlkcygpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgaWR4ID0gdGhpcy5fbWlkVG9JbmRleC5nZXQobmV3TWVkaWFTZWN0aW9uLm1pZCk7XG4gICAgICAgICAgICBpZiAoaWR4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYG5vIG1lZGlhIHNlY3Rpb24gZm91bmQgd2l0aCBtaWQgJyR7bmV3TWVkaWFTZWN0aW9uLm1pZH0nYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBSZXBsYWNlIHRoZSBpbmRleCBpbiB0aGUgdmVjdG9yIHdpdGggdGhlIG5ldyBtZWRpYSBzZWN0aW9uLlxuICAgICAgICAgICAgdGhpcy5fbWVkaWFTZWN0aW9uc1tpZHhdID0gbmV3TWVkaWFTZWN0aW9uO1xuICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBTRFAgb2JqZWN0LlxuICAgICAgICAgICAgdGhpcy5fc2RwT2JqZWN0Lm1lZGlhW2lkeF0gPSBuZXdNZWRpYVNlY3Rpb24uZ2V0T2JqZWN0KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX3JlZ2VuZXJhdGVCdW5kbGVNaWRzKCkge1xuICAgICAgICBpZiAoIXRoaXMuX2R0bHNQYXJhbWV0ZXJzKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLl9zZHBPYmplY3QuZ3JvdXBzWzBdLm1pZHMgPSB0aGlzLl9tZWRpYVNlY3Rpb25zXG4gICAgICAgICAgICAuZmlsdGVyKChtZWRpYVNlY3Rpb24pID0+ICFtZWRpYVNlY3Rpb24uY2xvc2VkKVxuICAgICAgICAgICAgLm1hcCgobWVkaWFTZWN0aW9uKSA9PiBtZWRpYVNlY3Rpb24ubWlkKVxuICAgICAgICAgICAgLmpvaW4oJyAnKTtcbiAgICB9XG59XG5leHBvcnRzLlJlbW90ZVNkcCA9IFJlbW90ZVNkcDtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgU2NhbGFiaWxpdHlNb2RlUmVnZXggPSBuZXcgUmVnRXhwKCdeW0xTXShbMS05XVxcXFxkezAsMX0pVChbMS05XVxcXFxkezAsMX0pJyk7XG5mdW5jdGlvbiBwYXJzZShzY2FsYWJpbGl0eU1vZGUpIHtcbiAgICBjb25zdCBtYXRjaCA9IFNjYWxhYmlsaXR5TW9kZVJlZ2V4LmV4ZWMoc2NhbGFiaWxpdHlNb2RlIHx8ICcnKTtcbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNwYXRpYWxMYXllcnM6IE51bWJlcihtYXRjaFsxXSksXG4gICAgICAgICAgICB0ZW1wb3JhbExheWVyczogTnVtYmVyKG1hdGNoWzJdKVxuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNwYXRpYWxMYXllcnM6IDEsXG4gICAgICAgICAgICB0ZW1wb3JhbExheWVyczogMVxuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydHMucGFyc2UgPSBwYXJzZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3Qgc2RwVHJhbnNmb3JtID0gcmVxdWlyZShcInNkcC10cmFuc2Zvcm1cIik7XG5jb25zdCBMb2dnZXJfMSA9IHJlcXVpcmUoXCIuLi9Mb2dnZXJcIik7XG5jb25zdCB1dGlscyA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcbmNvbnN0IG9ydGMgPSByZXF1aXJlKFwiLi4vb3J0Y1wiKTtcbmNvbnN0IHNkcENvbW1vblV0aWxzID0gcmVxdWlyZShcIi4vc2RwL2NvbW1vblV0aWxzXCIpO1xuY29uc3Qgc2RwVW5pZmllZFBsYW5VdGlscyA9IHJlcXVpcmUoXCIuL3NkcC91bmlmaWVkUGxhblV0aWxzXCIpO1xuY29uc3QgSGFuZGxlckludGVyZmFjZV8xID0gcmVxdWlyZShcIi4vSGFuZGxlckludGVyZmFjZVwiKTtcbmNvbnN0IFJlbW90ZVNkcF8xID0gcmVxdWlyZShcIi4vc2RwL1JlbW90ZVNkcFwiKTtcbmNvbnN0IHNjYWxhYmlsaXR5TW9kZXNfMSA9IHJlcXVpcmUoXCIuLi9zY2FsYWJpbGl0eU1vZGVzXCIpO1xuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcl8xLkxvZ2dlcignQ2hyb21lNzQnKTtcbmNvbnN0IFNDVFBfTlVNX1NUUkVBTVMgPSB7IE9TOiAxMDI0LCBNSVM6IDEwMjQgfTtcbmNsYXNzIENocm9tZTc0IGV4dGVuZHMgSGFuZGxlckludGVyZmFjZV8xLkhhbmRsZXJJbnRlcmZhY2Uge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICAvLyBNYXAgb2YgUlRDVHJhbnNjZWl2ZXJzIGluZGV4ZWQgYnkgTUlELlxuICAgICAgICB0aGlzLl9tYXBNaWRUcmFuc2NlaXZlciA9IG5ldyBNYXAoKTtcbiAgICAgICAgLy8gTG9jYWwgc3RyZWFtIGZvciBzZW5kaW5nLlxuICAgICAgICB0aGlzLl9zZW5kU3RyZWFtID0gbmV3IE1lZGlhU3RyZWFtKCk7XG4gICAgICAgIC8vIFdoZXRoZXIgYSBEYXRhQ2hhbm5lbCBtPWFwcGxpY2F0aW9uIHNlY3Rpb24gaGFzIGJlZW4gY3JlYXRlZC5cbiAgICAgICAgdGhpcy5faGFzRGF0YUNoYW5uZWxNZWRpYVNlY3Rpb24gPSBmYWxzZTtcbiAgICAgICAgLy8gU2VuZGluZyBEYXRhQ2hhbm5lbCBpZCB2YWx1ZSBjb3VudGVyLiBJbmNyZW1lbnRlZCBmb3IgZWFjaCBuZXcgRGF0YUNoYW5uZWwuXG4gICAgICAgIHRoaXMuX25leHRTZW5kU2N0cFN0cmVhbUlkID0gMDtcbiAgICAgICAgLy8gR290IHRyYW5zcG9ydCBsb2NhbCBhbmQgcmVtb3RlIHBhcmFtZXRlcnMuXG4gICAgICAgIHRoaXMuX3RyYW5zcG9ydFJlYWR5ID0gZmFsc2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmYWN0b3J5IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIHN0YXRpYyBjcmVhdGVGYWN0b3J5KCkge1xuICAgICAgICByZXR1cm4gKCkgPT4gbmV3IENocm9tZTc0KCk7XG4gICAgfVxuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gJ0Nocm9tZTc0JztcbiAgICB9XG4gICAgY2xvc2UoKSB7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZygnY2xvc2UoKScpO1xuICAgICAgICAvLyBDbG9zZSBSVENQZWVyQ29ubmVjdGlvbi5cbiAgICAgICAgaWYgKHRoaXMuX3BjKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3BjLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHsgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIGdldE5hdGl2ZVJ0cENhcGFiaWxpdGllcygpIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdnZXROYXRpdmVSdHBDYXBhYmlsaXRpZXMoKScpO1xuICAgICAgICBjb25zdCBwYyA9IG5ldyBSVENQZWVyQ29ubmVjdGlvbih7XG4gICAgICAgICAgICBpY2VTZXJ2ZXJzOiBbXSxcbiAgICAgICAgICAgIGljZVRyYW5zcG9ydFBvbGljeTogJ2FsbCcsXG4gICAgICAgICAgICBidW5kbGVQb2xpY3k6ICdtYXgtYnVuZGxlJyxcbiAgICAgICAgICAgIHJ0Y3BNdXhQb2xpY3k6ICdyZXF1aXJlJyxcbiAgICAgICAgICAgIHNkcFNlbWFudGljczogJ3VuaWZpZWQtcGxhbidcbiAgICAgICAgfSk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBwYy5hZGRUcmFuc2NlaXZlcignYXVkaW8nKTtcbiAgICAgICAgICAgIHBjLmFkZFRyYW5zY2VpdmVyKCd2aWRlbycpO1xuICAgICAgICAgICAgY29uc3Qgb2ZmZXIgPSBhd2FpdCBwYy5jcmVhdGVPZmZlcigpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBwYy5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7IH1cbiAgICAgICAgICAgIGNvbnN0IHNkcE9iamVjdCA9IHNkcFRyYW5zZm9ybS5wYXJzZShvZmZlci5zZHApO1xuICAgICAgICAgICAgY29uc3QgbmF0aXZlUnRwQ2FwYWJpbGl0aWVzID0gc2RwQ29tbW9uVXRpbHMuZXh0cmFjdFJ0cENhcGFiaWxpdGllcyh7IHNkcE9iamVjdCB9KTtcbiAgICAgICAgICAgIHJldHVybiBuYXRpdmVSdHBDYXBhYmlsaXRpZXM7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHBjLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IyKSB7IH1cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIGdldE5hdGl2ZVNjdHBDYXBhYmlsaXRpZXMoKSB7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZygnZ2V0TmF0aXZlU2N0cENhcGFiaWxpdGllcygpJyk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBudW1TdHJlYW1zOiBTQ1RQX05VTV9TVFJFQU1TXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJ1bih7IGRpcmVjdGlvbiwgaWNlUGFyYW1ldGVycywgaWNlQ2FuZGlkYXRlcywgZHRsc1BhcmFtZXRlcnMsIHNjdHBQYXJhbWV0ZXJzLCBpY2VTZXJ2ZXJzLCBpY2VUcmFuc3BvcnRQb2xpY3ksIGFkZGl0aW9uYWxTZXR0aW5ncywgcHJvcHJpZXRhcnlDb25zdHJhaW50cywgZXh0ZW5kZWRSdHBDYXBhYmlsaXRpZXMgfSkge1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3J1bigpJyk7XG4gICAgICAgIHRoaXMuX2RpcmVjdGlvbiA9IGRpcmVjdGlvbjtcbiAgICAgICAgdGhpcy5fcmVtb3RlU2RwID0gbmV3IFJlbW90ZVNkcF8xLlJlbW90ZVNkcCh7XG4gICAgICAgICAgICBpY2VQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgaWNlQ2FuZGlkYXRlcyxcbiAgICAgICAgICAgIGR0bHNQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgc2N0cFBhcmFtZXRlcnNcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX3NlbmRpbmdSdHBQYXJhbWV0ZXJzQnlLaW5kID1cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBhdWRpbzogb3J0Yy5nZXRTZW5kaW5nUnRwUGFyYW1ldGVycygnYXVkaW8nLCBleHRlbmRlZFJ0cENhcGFiaWxpdGllcyksXG4gICAgICAgICAgICAgICAgdmlkZW86IG9ydGMuZ2V0U2VuZGluZ1J0cFBhcmFtZXRlcnMoJ3ZpZGVvJywgZXh0ZW5kZWRSdHBDYXBhYmlsaXRpZXMpXG4gICAgICAgICAgICB9O1xuICAgICAgICB0aGlzLl9zZW5kaW5nUmVtb3RlUnRwUGFyYW1ldGVyc0J5S2luZCA9XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYXVkaW86IG9ydGMuZ2V0U2VuZGluZ1JlbW90ZVJ0cFBhcmFtZXRlcnMoJ2F1ZGlvJywgZXh0ZW5kZWRSdHBDYXBhYmlsaXRpZXMpLFxuICAgICAgICAgICAgICAgIHZpZGVvOiBvcnRjLmdldFNlbmRpbmdSZW1vdGVSdHBQYXJhbWV0ZXJzKCd2aWRlbycsIGV4dGVuZGVkUnRwQ2FwYWJpbGl0aWVzKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fcGMgPSBuZXcgUlRDUGVlckNvbm5lY3Rpb24oe1xuICAgICAgICAgICAgaWNlU2VydmVyczogaWNlU2VydmVycyB8fCBbXSxcbiAgICAgICAgICAgIGljZVRyYW5zcG9ydFBvbGljeTogaWNlVHJhbnNwb3J0UG9saWN5IHx8ICdhbGwnLFxuICAgICAgICAgICAgYnVuZGxlUG9saWN5OiAnbWF4LWJ1bmRsZScsXG4gICAgICAgICAgICBydGNwTXV4UG9saWN5OiAncmVxdWlyZScsXG4gICAgICAgICAgICBzZHBTZW1hbnRpY3M6ICd1bmlmaWVkLXBsYW4nLFxuICAgICAgICAgICAgLi4uYWRkaXRpb25hbFNldHRpbmdzXG4gICAgICAgIH0sIHByb3ByaWV0YXJ5Q29uc3RyYWludHMpO1xuICAgICAgICAvLyBIYW5kbGUgUlRDUGVlckNvbm5lY3Rpb24gY29ubmVjdGlvbiBzdGF0dXMuXG4gICAgICAgIHRoaXMuX3BjLmFkZEV2ZW50TGlzdGVuZXIoJ2ljZWNvbm5lY3Rpb25zdGF0ZWNoYW5nZScsICgpID0+IHtcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5fcGMuaWNlQ29ubmVjdGlvblN0YXRlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnY2hlY2tpbmcnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ0Bjb25uZWN0aW9uc3RhdGVjaGFuZ2UnLCAnY29ubmVjdGluZycpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdjb25uZWN0ZWQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2NvbXBsZXRlZCc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnQGNvbm5lY3Rpb25zdGF0ZWNoYW5nZScsICdjb25uZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnZmFpbGVkJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdAY29ubmVjdGlvbnN0YXRlY2hhbmdlJywgJ2ZhaWxlZCcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdkaXNjb25uZWN0ZWQnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ0Bjb25uZWN0aW9uc3RhdGVjaGFuZ2UnLCAnZGlzY29ubmVjdGVkJyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2Nsb3NlZCc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnQGNvbm5lY3Rpb25zdGF0ZWNoYW5nZScsICdjbG9zZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhc3luYyB1cGRhdGVJY2VTZXJ2ZXJzKGljZVNlcnZlcnMpIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCd1cGRhdGVJY2VTZXJ2ZXJzKCknKTtcbiAgICAgICAgY29uc3QgY29uZmlndXJhdGlvbiA9IHRoaXMuX3BjLmdldENvbmZpZ3VyYXRpb24oKTtcbiAgICAgICAgY29uZmlndXJhdGlvbi5pY2VTZXJ2ZXJzID0gaWNlU2VydmVycztcbiAgICAgICAgdGhpcy5fcGMuc2V0Q29uZmlndXJhdGlvbihjb25maWd1cmF0aW9uKTtcbiAgICB9XG4gICAgYXN5bmMgcmVzdGFydEljZShpY2VQYXJhbWV0ZXJzKSB7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZygncmVzdGFydEljZSgpJyk7XG4gICAgICAgIC8vIFByb3ZpZGUgdGhlIHJlbW90ZSBTRFAgaGFuZGxlciB3aXRoIG5ldyByZW1vdGUgSUNFIHBhcmFtZXRlcnMuXG4gICAgICAgIHRoaXMuX3JlbW90ZVNkcC51cGRhdGVJY2VQYXJhbWV0ZXJzKGljZVBhcmFtZXRlcnMpO1xuICAgICAgICBpZiAoIXRoaXMuX3RyYW5zcG9ydFJlYWR5KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpZiAodGhpcy5fZGlyZWN0aW9uID09PSAnc2VuZCcpIHtcbiAgICAgICAgICAgIGNvbnN0IG9mZmVyID0gYXdhaXQgdGhpcy5fcGMuY3JlYXRlT2ZmZXIoeyBpY2VSZXN0YXJ0OiB0cnVlIH0pO1xuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdyZXN0YXJ0SWNlKCkgfCBjYWxsaW5nIHBjLnNldExvY2FsRGVzY3JpcHRpb24oKSBbb2ZmZXI6JW9dJywgb2ZmZXIpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5fcGMuc2V0TG9jYWxEZXNjcmlwdGlvbihvZmZlcik7XG4gICAgICAgICAgICBjb25zdCBhbnN3ZXIgPSB7IHR5cGU6ICdhbnN3ZXInLCBzZHA6IHRoaXMuX3JlbW90ZVNkcC5nZXRTZHAoKSB9O1xuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdyZXN0YXJ0SWNlKCkgfCBjYWxsaW5nIHBjLnNldFJlbW90ZURlc2NyaXB0aW9uKCkgW2Fuc3dlcjolb10nLCBhbnN3ZXIpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5fcGMuc2V0UmVtb3RlRGVzY3JpcHRpb24oYW5zd2VyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IG9mZmVyID0geyB0eXBlOiAnb2ZmZXInLCBzZHA6IHRoaXMuX3JlbW90ZVNkcC5nZXRTZHAoKSB9O1xuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdyZXN0YXJ0SWNlKCkgfCBjYWxsaW5nIHBjLnNldFJlbW90ZURlc2NyaXB0aW9uKCkgW29mZmVyOiVvXScsIG9mZmVyKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX3BjLnNldFJlbW90ZURlc2NyaXB0aW9uKG9mZmVyKTtcbiAgICAgICAgICAgIGNvbnN0IGFuc3dlciA9IGF3YWl0IHRoaXMuX3BjLmNyZWF0ZUFuc3dlcigpO1xuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdyZXN0YXJ0SWNlKCkgfCBjYWxsaW5nIHBjLnNldExvY2FsRGVzY3JpcHRpb24oKSBbYW5zd2VyOiVvXScsIGFuc3dlcik7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLl9wYy5zZXRMb2NhbERlc2NyaXB0aW9uKGFuc3dlcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgZ2V0VHJhbnNwb3J0U3RhdHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wYy5nZXRTdGF0cygpO1xuICAgIH1cbiAgICBhc3luYyBzZW5kKHsgdHJhY2ssIGVuY29kaW5ncywgY29kZWNPcHRpb25zLCBjb2RlYyB9KSB7XG4gICAgICAgIHRoaXMuX2Fzc2VydFNlbmREaXJlY3Rpb24oKTtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdzZW5kKCkgW2tpbmQ6JXMsIHRyYWNrLmlkOiVzXScsIHRyYWNrLmtpbmQsIHRyYWNrLmlkKTtcbiAgICAgICAgaWYgKGVuY29kaW5ncyAmJiBlbmNvZGluZ3MubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgZW5jb2RpbmdzLmZvckVhY2goKGVuY29kaW5nLCBpZHgpID0+IHtcbiAgICAgICAgICAgICAgICBlbmNvZGluZy5yaWQgPSBgciR7aWR4fWA7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzZW5kaW5nUnRwUGFyYW1ldGVycyA9IHV0aWxzLmNsb25lKHRoaXMuX3NlbmRpbmdSdHBQYXJhbWV0ZXJzQnlLaW5kW3RyYWNrLmtpbmRdKTtcbiAgICAgICAgLy8gVGhpcyBtYXkgdGhyb3cuXG4gICAgICAgIHNlbmRpbmdSdHBQYXJhbWV0ZXJzLmNvZGVjcyA9XG4gICAgICAgICAgICBvcnRjLnJlZHVjZUNvZGVjcyhzZW5kaW5nUnRwUGFyYW1ldGVycy5jb2RlY3MsIGNvZGVjKTtcbiAgICAgICAgY29uc3Qgc2VuZGluZ1JlbW90ZVJ0cFBhcmFtZXRlcnMgPSB1dGlscy5jbG9uZSh0aGlzLl9zZW5kaW5nUmVtb3RlUnRwUGFyYW1ldGVyc0J5S2luZFt0cmFjay5raW5kXSk7XG4gICAgICAgIC8vIFRoaXMgbWF5IHRocm93LlxuICAgICAgICBzZW5kaW5nUmVtb3RlUnRwUGFyYW1ldGVycy5jb2RlY3MgPVxuICAgICAgICAgICAgb3J0Yy5yZWR1Y2VDb2RlY3Moc2VuZGluZ1JlbW90ZVJ0cFBhcmFtZXRlcnMuY29kZWNzLCBjb2RlYyk7XG4gICAgICAgIGNvbnN0IG1lZGlhU2VjdGlvbklkeCA9IHRoaXMuX3JlbW90ZVNkcC5nZXROZXh0TWVkaWFTZWN0aW9uSWR4KCk7XG4gICAgICAgIGNvbnN0IHRyYW5zY2VpdmVyID0gdGhpcy5fcGMuYWRkVHJhbnNjZWl2ZXIodHJhY2ssIHtcbiAgICAgICAgICAgIGRpcmVjdGlvbjogJ3NlbmRvbmx5JyxcbiAgICAgICAgICAgIHN0cmVhbXM6IFt0aGlzLl9zZW5kU3RyZWFtXSxcbiAgICAgICAgICAgIHNlbmRFbmNvZGluZ3M6IGVuY29kaW5nc1xuICAgICAgICB9KTtcbiAgICAgICAgbGV0IG9mZmVyID0gYXdhaXQgdGhpcy5fcGMuY3JlYXRlT2ZmZXIoKTtcbiAgICAgICAgbGV0IGxvY2FsU2RwT2JqZWN0ID0gc2RwVHJhbnNmb3JtLnBhcnNlKG9mZmVyLnNkcCk7XG4gICAgICAgIGxldCBvZmZlck1lZGlhT2JqZWN0O1xuICAgICAgICBpZiAoIXRoaXMuX3RyYW5zcG9ydFJlYWR5KVxuICAgICAgICAgICAgYXdhaXQgdGhpcy5fc2V0dXBUcmFuc3BvcnQoeyBsb2NhbER0bHNSb2xlOiAnc2VydmVyJywgbG9jYWxTZHBPYmplY3QgfSk7XG4gICAgICAgIC8vIFNwZWNpYWwgY2FzZSBmb3IgVlA5IHdpdGggU1ZDLlxuICAgICAgICBsZXQgaGFja1ZwOVN2YyA9IGZhbHNlO1xuICAgICAgICBjb25zdCBsYXllcnMgPSBzY2FsYWJpbGl0eU1vZGVzXzEucGFyc2UoKGVuY29kaW5ncyB8fCBbe31dKVswXS5zY2FsYWJpbGl0eU1vZGUpO1xuICAgICAgICBpZiAoZW5jb2RpbmdzICYmXG4gICAgICAgICAgICBlbmNvZGluZ3MubGVuZ3RoID09PSAxICYmXG4gICAgICAgICAgICBsYXllcnMuc3BhdGlhbExheWVycyA+IDEgJiZcbiAgICAgICAgICAgIHNlbmRpbmdSdHBQYXJhbWV0ZXJzLmNvZGVjc1swXS5taW1lVHlwZS50b0xvd2VyQ2FzZSgpID09PSAndmlkZW8vdnA5Jykge1xuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdzZW5kKCkgfCBlbmFibGluZyBsZWdhY3kgc2ltdWxjYXN0IGZvciBWUDkgU1ZDJyk7XG4gICAgICAgICAgICBoYWNrVnA5U3ZjID0gdHJ1ZTtcbiAgICAgICAgICAgIGxvY2FsU2RwT2JqZWN0ID0gc2RwVHJhbnNmb3JtLnBhcnNlKG9mZmVyLnNkcCk7XG4gICAgICAgICAgICBvZmZlck1lZGlhT2JqZWN0ID0gbG9jYWxTZHBPYmplY3QubWVkaWFbbWVkaWFTZWN0aW9uSWR4LmlkeF07XG4gICAgICAgICAgICBzZHBVbmlmaWVkUGxhblV0aWxzLmFkZExlZ2FjeVNpbXVsY2FzdCh7XG4gICAgICAgICAgICAgICAgb2ZmZXJNZWRpYU9iamVjdCxcbiAgICAgICAgICAgICAgICBudW1TdHJlYW1zOiBsYXllcnMuc3BhdGlhbExheWVyc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBvZmZlciA9IHsgdHlwZTogJ29mZmVyJywgc2RwOiBzZHBUcmFuc2Zvcm0ud3JpdGUobG9jYWxTZHBPYmplY3QpIH07XG4gICAgICAgIH1cbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdzZW5kKCkgfCBjYWxsaW5nIHBjLnNldExvY2FsRGVzY3JpcHRpb24oKSBbb2ZmZXI6JW9dJywgb2ZmZXIpO1xuICAgICAgICBhd2FpdCB0aGlzLl9wYy5zZXRMb2NhbERlc2NyaXB0aW9uKG9mZmVyKTtcbiAgICAgICAgLy8gV2UgY2FuIG5vdyBnZXQgdGhlIHRyYW5zY2VpdmVyLm1pZC5cbiAgICAgICAgY29uc3QgbG9jYWxJZCA9IHRyYW5zY2VpdmVyLm1pZDtcbiAgICAgICAgLy8gU2V0IE1JRC5cbiAgICAgICAgc2VuZGluZ1J0cFBhcmFtZXRlcnMubWlkID0gbG9jYWxJZDtcbiAgICAgICAgbG9jYWxTZHBPYmplY3QgPSBzZHBUcmFuc2Zvcm0ucGFyc2UodGhpcy5fcGMubG9jYWxEZXNjcmlwdGlvbi5zZHApO1xuICAgICAgICBvZmZlck1lZGlhT2JqZWN0ID0gbG9jYWxTZHBPYmplY3QubWVkaWFbbWVkaWFTZWN0aW9uSWR4LmlkeF07XG4gICAgICAgIC8vIFNldCBSVENQIENOQU1FLlxuICAgICAgICBzZW5kaW5nUnRwUGFyYW1ldGVycy5ydGNwLmNuYW1lID1cbiAgICAgICAgICAgIHNkcENvbW1vblV0aWxzLmdldENuYW1lKHsgb2ZmZXJNZWRpYU9iamVjdCB9KTtcbiAgICAgICAgLy8gU2V0IFJUUCBlbmNvZGluZ3MgYnkgcGFyc2luZyB0aGUgU0RQIG9mZmVyIGlmIG5vIGVuY29kaW5ncyBhcmUgZ2l2ZW4uXG4gICAgICAgIGlmICghZW5jb2RpbmdzKSB7XG4gICAgICAgICAgICBzZW5kaW5nUnRwUGFyYW1ldGVycy5lbmNvZGluZ3MgPVxuICAgICAgICAgICAgICAgIHNkcFVuaWZpZWRQbGFuVXRpbHMuZ2V0UnRwRW5jb2RpbmdzKHsgb2ZmZXJNZWRpYU9iamVjdCB9KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTZXQgUlRQIGVuY29kaW5ncyBieSBwYXJzaW5nIHRoZSBTRFAgb2ZmZXIgYW5kIGNvbXBsZXRlIHRoZW0gd2l0aCBnaXZlblxuICAgICAgICAvLyBvbmUgaWYganVzdCBhIHNpbmdsZSBlbmNvZGluZyBoYXMgYmVlbiBnaXZlbi5cbiAgICAgICAgZWxzZSBpZiAoZW5jb2RpbmdzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgbGV0IG5ld0VuY29kaW5ncyA9IHNkcFVuaWZpZWRQbGFuVXRpbHMuZ2V0UnRwRW5jb2RpbmdzKHsgb2ZmZXJNZWRpYU9iamVjdCB9KTtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24obmV3RW5jb2RpbmdzWzBdLCBlbmNvZGluZ3NbMF0pO1xuICAgICAgICAgICAgLy8gSGFjayBmb3IgVlA5IFNWQy5cbiAgICAgICAgICAgIGlmIChoYWNrVnA5U3ZjKVxuICAgICAgICAgICAgICAgIG5ld0VuY29kaW5ncyA9IFtuZXdFbmNvZGluZ3NbMF1dO1xuICAgICAgICAgICAgc2VuZGluZ1J0cFBhcmFtZXRlcnMuZW5jb2RpbmdzID0gbmV3RW5jb2RpbmdzO1xuICAgICAgICB9XG4gICAgICAgIC8vIE90aGVyd2lzZSBpZiBtb3JlIHRoYW4gMSBlbmNvZGluZyBhcmUgZ2l2ZW4gdXNlIHRoZW0gdmVyYmF0aW0uXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc2VuZGluZ1J0cFBhcmFtZXRlcnMuZW5jb2RpbmdzID0gZW5jb2RpbmdzO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIFZQOCBvciBIMjY0IGFuZCB0aGVyZSBpcyBlZmZlY3RpdmUgc2ltdWxjYXN0LCBhZGQgc2NhbGFiaWxpdHlNb2RlIHRvXG4gICAgICAgIC8vIGVhY2ggZW5jb2RpbmcuXG4gICAgICAgIGlmIChzZW5kaW5nUnRwUGFyYW1ldGVycy5lbmNvZGluZ3MubGVuZ3RoID4gMSAmJlxuICAgICAgICAgICAgKHNlbmRpbmdSdHBQYXJhbWV0ZXJzLmNvZGVjc1swXS5taW1lVHlwZS50b0xvd2VyQ2FzZSgpID09PSAndmlkZW8vdnA4JyB8fFxuICAgICAgICAgICAgICAgIHNlbmRpbmdSdHBQYXJhbWV0ZXJzLmNvZGVjc1swXS5taW1lVHlwZS50b0xvd2VyQ2FzZSgpID09PSAndmlkZW8vaDI2NCcpKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGVuY29kaW5nIG9mIHNlbmRpbmdSdHBQYXJhbWV0ZXJzLmVuY29kaW5ncykge1xuICAgICAgICAgICAgICAgIGVuY29kaW5nLnNjYWxhYmlsaXR5TW9kZSA9ICdTMVQzJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9yZW1vdGVTZHAuc2VuZCh7XG4gICAgICAgICAgICBvZmZlck1lZGlhT2JqZWN0LFxuICAgICAgICAgICAgcmV1c2VNaWQ6IG1lZGlhU2VjdGlvbklkeC5yZXVzZU1pZCxcbiAgICAgICAgICAgIG9mZmVyUnRwUGFyYW1ldGVyczogc2VuZGluZ1J0cFBhcmFtZXRlcnMsXG4gICAgICAgICAgICBhbnN3ZXJSdHBQYXJhbWV0ZXJzOiBzZW5kaW5nUmVtb3RlUnRwUGFyYW1ldGVycyxcbiAgICAgICAgICAgIGNvZGVjT3B0aW9ucyxcbiAgICAgICAgICAgIGV4dG1hcEFsbG93TWl4ZWQ6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGFuc3dlciA9IHsgdHlwZTogJ2Fuc3dlcicsIHNkcDogdGhpcy5fcmVtb3RlU2RwLmdldFNkcCgpIH07XG4gICAgICAgIGxvZ2dlci5kZWJ1Zygnc2VuZCgpIHwgY2FsbGluZyBwYy5zZXRSZW1vdGVEZXNjcmlwdGlvbigpIFthbnN3ZXI6JW9dJywgYW5zd2VyKTtcbiAgICAgICAgYXdhaXQgdGhpcy5fcGMuc2V0UmVtb3RlRGVzY3JpcHRpb24oYW5zd2VyKTtcbiAgICAgICAgLy8gU3RvcmUgaW4gdGhlIG1hcC5cbiAgICAgICAgdGhpcy5fbWFwTWlkVHJhbnNjZWl2ZXIuc2V0KGxvY2FsSWQsIHRyYW5zY2VpdmVyKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxvY2FsSWQsXG4gICAgICAgICAgICBydHBQYXJhbWV0ZXJzOiBzZW5kaW5nUnRwUGFyYW1ldGVycyxcbiAgICAgICAgICAgIHJ0cFNlbmRlcjogdHJhbnNjZWl2ZXIuc2VuZGVyXG4gICAgICAgIH07XG4gICAgfVxuICAgIGFzeW5jIHN0b3BTZW5kaW5nKGxvY2FsSWQpIHtcbiAgICAgICAgdGhpcy5fYXNzZXJ0U2VuZERpcmVjdGlvbigpO1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3N0b3BTZW5kaW5nKCkgW2xvY2FsSWQ6JXNdJywgbG9jYWxJZCk7XG4gICAgICAgIGNvbnN0IHRyYW5zY2VpdmVyID0gdGhpcy5fbWFwTWlkVHJhbnNjZWl2ZXIuZ2V0KGxvY2FsSWQpO1xuICAgICAgICBpZiAoIXRyYW5zY2VpdmVyKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdhc3NvY2lhdGVkIFJUQ1J0cFRyYW5zY2VpdmVyIG5vdCBmb3VuZCcpO1xuICAgICAgICB0cmFuc2NlaXZlci5zZW5kZXIucmVwbGFjZVRyYWNrKG51bGwpO1xuICAgICAgICB0aGlzLl9wYy5yZW1vdmVUcmFjayh0cmFuc2NlaXZlci5zZW5kZXIpO1xuICAgICAgICB0aGlzLl9yZW1vdGVTZHAuY2xvc2VNZWRpYVNlY3Rpb24odHJhbnNjZWl2ZXIubWlkKTtcbiAgICAgICAgY29uc3Qgb2ZmZXIgPSBhd2FpdCB0aGlzLl9wYy5jcmVhdGVPZmZlcigpO1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3N0b3BTZW5kaW5nKCkgfCBjYWxsaW5nIHBjLnNldExvY2FsRGVzY3JpcHRpb24oKSBbb2ZmZXI6JW9dJywgb2ZmZXIpO1xuICAgICAgICBhd2FpdCB0aGlzLl9wYy5zZXRMb2NhbERlc2NyaXB0aW9uKG9mZmVyKTtcbiAgICAgICAgY29uc3QgYW5zd2VyID0geyB0eXBlOiAnYW5zd2VyJywgc2RwOiB0aGlzLl9yZW1vdGVTZHAuZ2V0U2RwKCkgfTtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdzdG9wU2VuZGluZygpIHwgY2FsbGluZyBwYy5zZXRSZW1vdGVEZXNjcmlwdGlvbigpIFthbnN3ZXI6JW9dJywgYW5zd2VyKTtcbiAgICAgICAgYXdhaXQgdGhpcy5fcGMuc2V0UmVtb3RlRGVzY3JpcHRpb24oYW5zd2VyKTtcbiAgICB9XG4gICAgYXN5bmMgcmVwbGFjZVRyYWNrKGxvY2FsSWQsIHRyYWNrKSB7XG4gICAgICAgIHRoaXMuX2Fzc2VydFNlbmREaXJlY3Rpb24oKTtcbiAgICAgICAgaWYgKHRyYWNrKSB7XG4gICAgICAgICAgICBsb2dnZXIuZGVidWcoJ3JlcGxhY2VUcmFjaygpIFtsb2NhbElkOiVzLCB0cmFjay5pZDolc10nLCBsb2NhbElkLCB0cmFjay5pZCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsb2dnZXIuZGVidWcoJ3JlcGxhY2VUcmFjaygpIFtsb2NhbElkOiVzLCBubyB0cmFja10nLCBsb2NhbElkKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0cmFuc2NlaXZlciA9IHRoaXMuX21hcE1pZFRyYW5zY2VpdmVyLmdldChsb2NhbElkKTtcbiAgICAgICAgaWYgKCF0cmFuc2NlaXZlcilcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYXNzb2NpYXRlZCBSVENSdHBUcmFuc2NlaXZlciBub3QgZm91bmQnKTtcbiAgICAgICAgYXdhaXQgdHJhbnNjZWl2ZXIuc2VuZGVyLnJlcGxhY2VUcmFjayh0cmFjayk7XG4gICAgfVxuICAgIGFzeW5jIHNldE1heFNwYXRpYWxMYXllcihsb2NhbElkLCBzcGF0aWFsTGF5ZXIpIHtcbiAgICAgICAgdGhpcy5fYXNzZXJ0U2VuZERpcmVjdGlvbigpO1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3NldE1heFNwYXRpYWxMYXllcigpIFtsb2NhbElkOiVzLCBzcGF0aWFsTGF5ZXI6JXNdJywgbG9jYWxJZCwgc3BhdGlhbExheWVyKTtcbiAgICAgICAgY29uc3QgdHJhbnNjZWl2ZXIgPSB0aGlzLl9tYXBNaWRUcmFuc2NlaXZlci5nZXQobG9jYWxJZCk7XG4gICAgICAgIGlmICghdHJhbnNjZWl2ZXIpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Fzc29jaWF0ZWQgUlRDUnRwVHJhbnNjZWl2ZXIgbm90IGZvdW5kJyk7XG4gICAgICAgIGNvbnN0IHBhcmFtZXRlcnMgPSB0cmFuc2NlaXZlci5zZW5kZXIuZ2V0UGFyYW1ldGVycygpO1xuICAgICAgICBwYXJhbWV0ZXJzLmVuY29kaW5ncy5mb3JFYWNoKChlbmNvZGluZywgaWR4KSA9PiB7XG4gICAgICAgICAgICBpZiAoaWR4IDw9IHNwYXRpYWxMYXllcilcbiAgICAgICAgICAgICAgICBlbmNvZGluZy5hY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGVuY29kaW5nLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICB9KTtcbiAgICAgICAgYXdhaXQgdHJhbnNjZWl2ZXIuc2VuZGVyLnNldFBhcmFtZXRlcnMocGFyYW1ldGVycyk7XG4gICAgfVxuICAgIGFzeW5jIHNldFJ0cEVuY29kaW5nUGFyYW1ldGVycyhsb2NhbElkLCBwYXJhbXMpIHtcbiAgICAgICAgdGhpcy5fYXNzZXJ0U2VuZERpcmVjdGlvbigpO1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3NldFJ0cEVuY29kaW5nUGFyYW1ldGVycygpIFtsb2NhbElkOiVzLCBwYXJhbXM6JW9dJywgbG9jYWxJZCwgcGFyYW1zKTtcbiAgICAgICAgY29uc3QgdHJhbnNjZWl2ZXIgPSB0aGlzLl9tYXBNaWRUcmFuc2NlaXZlci5nZXQobG9jYWxJZCk7XG4gICAgICAgIGlmICghdHJhbnNjZWl2ZXIpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Fzc29jaWF0ZWQgUlRDUnRwVHJhbnNjZWl2ZXIgbm90IGZvdW5kJyk7XG4gICAgICAgIGNvbnN0IHBhcmFtZXRlcnMgPSB0cmFuc2NlaXZlci5zZW5kZXIuZ2V0UGFyYW1ldGVycygpO1xuICAgICAgICBwYXJhbWV0ZXJzLmVuY29kaW5ncy5mb3JFYWNoKChlbmNvZGluZywgaWR4KSA9PiB7XG4gICAgICAgICAgICBwYXJhbWV0ZXJzLmVuY29kaW5nc1tpZHhdID0geyAuLi5lbmNvZGluZywgLi4ucGFyYW1zIH07XG4gICAgICAgIH0pO1xuICAgICAgICBhd2FpdCB0cmFuc2NlaXZlci5zZW5kZXIuc2V0UGFyYW1ldGVycyhwYXJhbWV0ZXJzKTtcbiAgICB9XG4gICAgYXN5bmMgZ2V0U2VuZGVyU3RhdHMobG9jYWxJZCkge1xuICAgICAgICB0aGlzLl9hc3NlcnRTZW5kRGlyZWN0aW9uKCk7XG4gICAgICAgIGNvbnN0IHRyYW5zY2VpdmVyID0gdGhpcy5fbWFwTWlkVHJhbnNjZWl2ZXIuZ2V0KGxvY2FsSWQpO1xuICAgICAgICBpZiAoIXRyYW5zY2VpdmVyKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdhc3NvY2lhdGVkIFJUQ1J0cFRyYW5zY2VpdmVyIG5vdCBmb3VuZCcpO1xuICAgICAgICByZXR1cm4gdHJhbnNjZWl2ZXIuc2VuZGVyLmdldFN0YXRzKCk7XG4gICAgfVxuICAgIGFzeW5jIHNlbmREYXRhQ2hhbm5lbCh7IG9yZGVyZWQsIG1heFBhY2tldExpZmVUaW1lLCBtYXhSZXRyYW5zbWl0cywgbGFiZWwsIHByb3RvY29sLCBwcmlvcml0eSB9KSB7XG4gICAgICAgIHRoaXMuX2Fzc2VydFNlbmREaXJlY3Rpb24oKTtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIG5lZ290aWF0ZWQ6IHRydWUsXG4gICAgICAgICAgICBpZDogdGhpcy5fbmV4dFNlbmRTY3RwU3RyZWFtSWQsXG4gICAgICAgICAgICBvcmRlcmVkLFxuICAgICAgICAgICAgbWF4UGFja2V0TGlmZVRpbWUsXG4gICAgICAgICAgICBtYXhSZXRyYW5zbWl0cyxcbiAgICAgICAgICAgIHByb3RvY29sLFxuICAgICAgICAgICAgcHJpb3JpdHlcbiAgICAgICAgfTtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdzZW5kRGF0YUNoYW5uZWwoKSBbb3B0aW9uczolb10nLCBvcHRpb25zKTtcbiAgICAgICAgY29uc3QgZGF0YUNoYW5uZWwgPSB0aGlzLl9wYy5jcmVhdGVEYXRhQ2hhbm5lbChsYWJlbCwgb3B0aW9ucyk7XG4gICAgICAgIC8vIEluY3JlYXNlIG5leHQgaWQuXG4gICAgICAgIHRoaXMuX25leHRTZW5kU2N0cFN0cmVhbUlkID1cbiAgICAgICAgICAgICsrdGhpcy5fbmV4dFNlbmRTY3RwU3RyZWFtSWQgJSBTQ1RQX05VTV9TVFJFQU1TLk1JUztcbiAgICAgICAgLy8gSWYgdGhpcyBpcyB0aGUgZmlyc3QgRGF0YUNoYW5uZWwgd2UgbmVlZCB0byBjcmVhdGUgdGhlIFNEUCBhbnN3ZXIgd2l0aFxuICAgICAgICAvLyBtPWFwcGxpY2F0aW9uIHNlY3Rpb24uXG4gICAgICAgIGlmICghdGhpcy5faGFzRGF0YUNoYW5uZWxNZWRpYVNlY3Rpb24pIHtcbiAgICAgICAgICAgIGNvbnN0IG9mZmVyID0gYXdhaXQgdGhpcy5fcGMuY3JlYXRlT2ZmZXIoKTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsU2RwT2JqZWN0ID0gc2RwVHJhbnNmb3JtLnBhcnNlKG9mZmVyLnNkcCk7XG4gICAgICAgICAgICBjb25zdCBvZmZlck1lZGlhT2JqZWN0ID0gbG9jYWxTZHBPYmplY3QubWVkaWFcbiAgICAgICAgICAgICAgICAuZmluZCgobSkgPT4gbS50eXBlID09PSAnYXBwbGljYXRpb24nKTtcbiAgICAgICAgICAgIGlmICghdGhpcy5fdHJhbnNwb3J0UmVhZHkpXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5fc2V0dXBUcmFuc3BvcnQoeyBsb2NhbER0bHNSb2xlOiAnc2VydmVyJywgbG9jYWxTZHBPYmplY3QgfSk7XG4gICAgICAgICAgICBsb2dnZXIuZGVidWcoJ3NlbmREYXRhQ2hhbm5lbCgpIHwgY2FsbGluZyBwYy5zZXRMb2NhbERlc2NyaXB0aW9uKCkgW29mZmVyOiVvXScsIG9mZmVyKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX3BjLnNldExvY2FsRGVzY3JpcHRpb24ob2ZmZXIpO1xuICAgICAgICAgICAgdGhpcy5fcmVtb3RlU2RwLnNlbmRTY3RwQXNzb2NpYXRpb24oeyBvZmZlck1lZGlhT2JqZWN0IH0pO1xuICAgICAgICAgICAgY29uc3QgYW5zd2VyID0geyB0eXBlOiAnYW5zd2VyJywgc2RwOiB0aGlzLl9yZW1vdGVTZHAuZ2V0U2RwKCkgfTtcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1Zygnc2VuZERhdGFDaGFubmVsKCkgfCBjYWxsaW5nIHBjLnNldFJlbW90ZURlc2NyaXB0aW9uKCkgW2Fuc3dlcjolb10nLCBhbnN3ZXIpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5fcGMuc2V0UmVtb3RlRGVzY3JpcHRpb24oYW5zd2VyKTtcbiAgICAgICAgICAgIHRoaXMuX2hhc0RhdGFDaGFubmVsTWVkaWFTZWN0aW9uID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzY3RwU3RyZWFtUGFyYW1ldGVycyA9IHtcbiAgICAgICAgICAgIHN0cmVhbUlkOiBvcHRpb25zLmlkLFxuICAgICAgICAgICAgb3JkZXJlZDogb3B0aW9ucy5vcmRlcmVkLFxuICAgICAgICAgICAgbWF4UGFja2V0TGlmZVRpbWU6IG9wdGlvbnMubWF4UGFja2V0TGlmZVRpbWUsXG4gICAgICAgICAgICBtYXhSZXRyYW5zbWl0czogb3B0aW9ucy5tYXhSZXRyYW5zbWl0c1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4geyBkYXRhQ2hhbm5lbCwgc2N0cFN0cmVhbVBhcmFtZXRlcnMgfTtcbiAgICB9XG4gICAgYXN5bmMgcmVjZWl2ZSh7IHRyYWNrSWQsIGtpbmQsIHJ0cFBhcmFtZXRlcnMgfSkge1xuICAgICAgICB0aGlzLl9hc3NlcnRSZWN2RGlyZWN0aW9uKCk7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZygncmVjZWl2ZSgpIFt0cmFja0lkOiVzLCBraW5kOiVzXScsIHRyYWNrSWQsIGtpbmQpO1xuICAgICAgICBjb25zdCBsb2NhbElkID0gcnRwUGFyYW1ldGVycy5taWQgfHwgU3RyaW5nKHRoaXMuX21hcE1pZFRyYW5zY2VpdmVyLnNpemUpO1xuICAgICAgICB0aGlzLl9yZW1vdGVTZHAucmVjZWl2ZSh7XG4gICAgICAgICAgICBtaWQ6IGxvY2FsSWQsXG4gICAgICAgICAgICBraW5kLFxuICAgICAgICAgICAgb2ZmZXJSdHBQYXJhbWV0ZXJzOiBydHBQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgc3RyZWFtSWQ6IHJ0cFBhcmFtZXRlcnMucnRjcC5jbmFtZSxcbiAgICAgICAgICAgIHRyYWNrSWRcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IG9mZmVyID0geyB0eXBlOiAnb2ZmZXInLCBzZHA6IHRoaXMuX3JlbW90ZVNkcC5nZXRTZHAoKSB9O1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3JlY2VpdmUoKSB8IGNhbGxpbmcgcGMuc2V0UmVtb3RlRGVzY3JpcHRpb24oKSBbb2ZmZXI6JW9dJywgb2ZmZXIpO1xuICAgICAgICBhd2FpdCB0aGlzLl9wYy5zZXRSZW1vdGVEZXNjcmlwdGlvbihvZmZlcik7XG4gICAgICAgIGxldCBhbnN3ZXIgPSBhd2FpdCB0aGlzLl9wYy5jcmVhdGVBbnN3ZXIoKTtcbiAgICAgICAgY29uc3QgbG9jYWxTZHBPYmplY3QgPSBzZHBUcmFuc2Zvcm0ucGFyc2UoYW5zd2VyLnNkcCk7XG4gICAgICAgIGNvbnN0IGFuc3dlck1lZGlhT2JqZWN0ID0gbG9jYWxTZHBPYmplY3QubWVkaWFcbiAgICAgICAgICAgIC5maW5kKChtKSA9PiBTdHJpbmcobS5taWQpID09PSBsb2NhbElkKTtcbiAgICAgICAgLy8gTWF5IG5lZWQgdG8gbW9kaWZ5IGNvZGVjIHBhcmFtZXRlcnMgaW4gdGhlIGFuc3dlciBiYXNlZCBvbiBjb2RlY1xuICAgICAgICAvLyBwYXJhbWV0ZXJzIGluIHRoZSBvZmZlci5cbiAgICAgICAgc2RwQ29tbW9uVXRpbHMuYXBwbHlDb2RlY1BhcmFtZXRlcnMoe1xuICAgICAgICAgICAgb2ZmZXJSdHBQYXJhbWV0ZXJzOiBydHBQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgYW5zd2VyTWVkaWFPYmplY3RcbiAgICAgICAgfSk7XG4gICAgICAgIGFuc3dlciA9IHsgdHlwZTogJ2Fuc3dlcicsIHNkcDogc2RwVHJhbnNmb3JtLndyaXRlKGxvY2FsU2RwT2JqZWN0KSB9O1xuICAgICAgICBpZiAoIXRoaXMuX3RyYW5zcG9ydFJlYWR5KVxuICAgICAgICAgICAgYXdhaXQgdGhpcy5fc2V0dXBUcmFuc3BvcnQoeyBsb2NhbER0bHNSb2xlOiAnY2xpZW50JywgbG9jYWxTZHBPYmplY3QgfSk7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZygncmVjZWl2ZSgpIHwgY2FsbGluZyBwYy5zZXRMb2NhbERlc2NyaXB0aW9uKCkgW2Fuc3dlcjolb10nLCBhbnN3ZXIpO1xuICAgICAgICBhd2FpdCB0aGlzLl9wYy5zZXRMb2NhbERlc2NyaXB0aW9uKGFuc3dlcik7XG4gICAgICAgIGNvbnN0IHRyYW5zY2VpdmVyID0gdGhpcy5fcGMuZ2V0VHJhbnNjZWl2ZXJzKClcbiAgICAgICAgICAgIC5maW5kKCh0KSA9PiB0Lm1pZCA9PT0gbG9jYWxJZCk7XG4gICAgICAgIGlmICghdHJhbnNjZWl2ZXIpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25ldyBSVENSdHBUcmFuc2NlaXZlciBub3QgZm91bmQnKTtcbiAgICAgICAgLy8gU3RvcmUgaW4gdGhlIG1hcC5cbiAgICAgICAgdGhpcy5fbWFwTWlkVHJhbnNjZWl2ZXIuc2V0KGxvY2FsSWQsIHRyYW5zY2VpdmVyKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxvY2FsSWQsXG4gICAgICAgICAgICB0cmFjazogdHJhbnNjZWl2ZXIucmVjZWl2ZXIudHJhY2ssXG4gICAgICAgICAgICBydHBSZWNlaXZlcjogdHJhbnNjZWl2ZXIucmVjZWl2ZXJcbiAgICAgICAgfTtcbiAgICB9XG4gICAgYXN5bmMgc3RvcFJlY2VpdmluZyhsb2NhbElkKSB7XG4gICAgICAgIHRoaXMuX2Fzc2VydFJlY3ZEaXJlY3Rpb24oKTtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdzdG9wUmVjZWl2aW5nKCkgW2xvY2FsSWQ6JXNdJywgbG9jYWxJZCk7XG4gICAgICAgIGNvbnN0IHRyYW5zY2VpdmVyID0gdGhpcy5fbWFwTWlkVHJhbnNjZWl2ZXIuZ2V0KGxvY2FsSWQpO1xuICAgICAgICBpZiAoIXRyYW5zY2VpdmVyKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdhc3NvY2lhdGVkIFJUQ1J0cFRyYW5zY2VpdmVyIG5vdCBmb3VuZCcpO1xuICAgICAgICB0aGlzLl9yZW1vdGVTZHAuY2xvc2VNZWRpYVNlY3Rpb24odHJhbnNjZWl2ZXIubWlkKTtcbiAgICAgICAgY29uc3Qgb2ZmZXIgPSB7IHR5cGU6ICdvZmZlcicsIHNkcDogdGhpcy5fcmVtb3RlU2RwLmdldFNkcCgpIH07XG4gICAgICAgIGxvZ2dlci5kZWJ1Zygnc3RvcFJlY2VpdmluZygpIHwgY2FsbGluZyBwYy5zZXRSZW1vdGVEZXNjcmlwdGlvbigpIFtvZmZlcjolb10nLCBvZmZlcik7XG4gICAgICAgIGF3YWl0IHRoaXMuX3BjLnNldFJlbW90ZURlc2NyaXB0aW9uKG9mZmVyKTtcbiAgICAgICAgY29uc3QgYW5zd2VyID0gYXdhaXQgdGhpcy5fcGMuY3JlYXRlQW5zd2VyKCk7XG4gICAgICAgIGxvZ2dlci5kZWJ1Zygnc3RvcFJlY2VpdmluZygpIHwgY2FsbGluZyBwYy5zZXRMb2NhbERlc2NyaXB0aW9uKCkgW2Fuc3dlcjolb10nLCBhbnN3ZXIpO1xuICAgICAgICBhd2FpdCB0aGlzLl9wYy5zZXRMb2NhbERlc2NyaXB0aW9uKGFuc3dlcik7XG4gICAgfVxuICAgIGFzeW5jIGdldFJlY2VpdmVyU3RhdHMobG9jYWxJZCkge1xuICAgICAgICB0aGlzLl9hc3NlcnRSZWN2RGlyZWN0aW9uKCk7XG4gICAgICAgIGNvbnN0IHRyYW5zY2VpdmVyID0gdGhpcy5fbWFwTWlkVHJhbnNjZWl2ZXIuZ2V0KGxvY2FsSWQpO1xuICAgICAgICBpZiAoIXRyYW5zY2VpdmVyKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdhc3NvY2lhdGVkIFJUQ1J0cFRyYW5zY2VpdmVyIG5vdCBmb3VuZCcpO1xuICAgICAgICByZXR1cm4gdHJhbnNjZWl2ZXIucmVjZWl2ZXIuZ2V0U3RhdHMoKTtcbiAgICB9XG4gICAgYXN5bmMgcmVjZWl2ZURhdGFDaGFubmVsKHsgc2N0cFN0cmVhbVBhcmFtZXRlcnMsIGxhYmVsLCBwcm90b2NvbCB9KSB7XG4gICAgICAgIHRoaXMuX2Fzc2VydFJlY3ZEaXJlY3Rpb24oKTtcbiAgICAgICAgY29uc3QgeyBzdHJlYW1JZCwgb3JkZXJlZCwgbWF4UGFja2V0TGlmZVRpbWUsIG1heFJldHJhbnNtaXRzIH0gPSBzY3RwU3RyZWFtUGFyYW1ldGVycztcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIG5lZ290aWF0ZWQ6IHRydWUsXG4gICAgICAgICAgICBpZDogc3RyZWFtSWQsXG4gICAgICAgICAgICBvcmRlcmVkLFxuICAgICAgICAgICAgbWF4UGFja2V0TGlmZVRpbWUsXG4gICAgICAgICAgICBtYXhSZXRyYW5zbWl0cyxcbiAgICAgICAgICAgIHByb3RvY29sXG4gICAgICAgIH07XG4gICAgICAgIGxvZ2dlci5kZWJ1ZygncmVjZWl2ZURhdGFDaGFubmVsKCkgW29wdGlvbnM6JW9dJywgb3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IGRhdGFDaGFubmVsID0gdGhpcy5fcGMuY3JlYXRlRGF0YUNoYW5uZWwobGFiZWwsIG9wdGlvbnMpO1xuICAgICAgICAvLyBJZiB0aGlzIGlzIHRoZSBmaXJzdCBEYXRhQ2hhbm5lbCB3ZSBuZWVkIHRvIGNyZWF0ZSB0aGUgU0RQIG9mZmVyIHdpdGhcbiAgICAgICAgLy8gbT1hcHBsaWNhdGlvbiBzZWN0aW9uLlxuICAgICAgICBpZiAoIXRoaXMuX2hhc0RhdGFDaGFubmVsTWVkaWFTZWN0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLl9yZW1vdGVTZHAucmVjZWl2ZVNjdHBBc3NvY2lhdGlvbigpO1xuICAgICAgICAgICAgY29uc3Qgb2ZmZXIgPSB7IHR5cGU6ICdvZmZlcicsIHNkcDogdGhpcy5fcmVtb3RlU2RwLmdldFNkcCgpIH07XG4gICAgICAgICAgICBsb2dnZXIuZGVidWcoJ3JlY2VpdmVEYXRhQ2hhbm5lbCgpIHwgY2FsbGluZyBwYy5zZXRSZW1vdGVEZXNjcmlwdGlvbigpIFtvZmZlcjolb10nLCBvZmZlcik7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLl9wYy5zZXRSZW1vdGVEZXNjcmlwdGlvbihvZmZlcik7XG4gICAgICAgICAgICBjb25zdCBhbnN3ZXIgPSBhd2FpdCB0aGlzLl9wYy5jcmVhdGVBbnN3ZXIoKTtcbiAgICAgICAgICAgIGlmICghdGhpcy5fdHJhbnNwb3J0UmVhZHkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2NhbFNkcE9iamVjdCA9IHNkcFRyYW5zZm9ybS5wYXJzZShhbnN3ZXIuc2RwKTtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLl9zZXR1cFRyYW5zcG9ydCh7IGxvY2FsRHRsc1JvbGU6ICdjbGllbnQnLCBsb2NhbFNkcE9iamVjdCB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZygncmVjZWl2ZURhdGFDaGFubmVsKCkgfCBjYWxsaW5nIHBjLnNldFJlbW90ZURlc2NyaXB0aW9uKCkgW2Fuc3dlcjolb10nLCBhbnN3ZXIpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5fcGMuc2V0TG9jYWxEZXNjcmlwdGlvbihhbnN3ZXIpO1xuICAgICAgICAgICAgdGhpcy5faGFzRGF0YUNoYW5uZWxNZWRpYVNlY3Rpb24gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGRhdGFDaGFubmVsIH07XG4gICAgfVxuICAgIGFzeW5jIF9zZXR1cFRyYW5zcG9ydCh7IGxvY2FsRHRsc1JvbGUsIGxvY2FsU2RwT2JqZWN0IH0pIHtcbiAgICAgICAgaWYgKCFsb2NhbFNkcE9iamVjdClcbiAgICAgICAgICAgIGxvY2FsU2RwT2JqZWN0ID0gc2RwVHJhbnNmb3JtLnBhcnNlKHRoaXMuX3BjLmxvY2FsRGVzY3JpcHRpb24uc2RwKTtcbiAgICAgICAgLy8gR2V0IG91ciBsb2NhbCBEVExTIHBhcmFtZXRlcnMuXG4gICAgICAgIGNvbnN0IGR0bHNQYXJhbWV0ZXJzID0gc2RwQ29tbW9uVXRpbHMuZXh0cmFjdER0bHNQYXJhbWV0ZXJzKHsgc2RwT2JqZWN0OiBsb2NhbFNkcE9iamVjdCB9KTtcbiAgICAgICAgLy8gU2V0IG91ciBEVExTIHJvbGUuXG4gICAgICAgIGR0bHNQYXJhbWV0ZXJzLnJvbGUgPSBsb2NhbER0bHNSb2xlO1xuICAgICAgICAvLyBVcGRhdGUgdGhlIHJlbW90ZSBEVExTIHJvbGUgaW4gdGhlIFNEUC5cbiAgICAgICAgdGhpcy5fcmVtb3RlU2RwLnVwZGF0ZUR0bHNSb2xlKGxvY2FsRHRsc1JvbGUgPT09ICdjbGllbnQnID8gJ3NlcnZlcicgOiAnY2xpZW50Jyk7XG4gICAgICAgIC8vIE5lZWQgdG8gdGVsbCB0aGUgcmVtb3RlIHRyYW5zcG9ydCBhYm91dCBvdXIgcGFyYW1ldGVycy5cbiAgICAgICAgYXdhaXQgdGhpcy5zYWZlRW1pdEFzUHJvbWlzZSgnQGNvbm5lY3QnLCB7IGR0bHNQYXJhbWV0ZXJzIH0pO1xuICAgICAgICB0aGlzLl90cmFuc3BvcnRSZWFkeSA9IHRydWU7XG4gICAgfVxuICAgIF9hc3NlcnRTZW5kRGlyZWN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5fZGlyZWN0aW9uICE9PSAnc2VuZCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbWV0aG9kIGNhbiBqdXN0IGJlIGNhbGxlZCBmb3IgaGFuZGxlcnMgd2l0aCBcInNlbmRcIiBkaXJlY3Rpb24nKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfYXNzZXJ0UmVjdkRpcmVjdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuX2RpcmVjdGlvbiAhPT0gJ3JlY3YnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ21ldGhvZCBjYW4ganVzdCBiZSBjYWxsZWQgZm9yIGhhbmRsZXJzIHdpdGggXCJyZWN2XCIgZGlyZWN0aW9uJyk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkNocm9tZTc0ID0gQ2hyb21lNzQ7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHNkcFRyYW5zZm9ybSA9IHJlcXVpcmUoXCJzZHAtdHJhbnNmb3JtXCIpO1xuY29uc3QgTG9nZ2VyXzEgPSByZXF1aXJlKFwiLi4vTG9nZ2VyXCIpO1xuY29uc3QgdXRpbHMgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG5jb25zdCBvcnRjID0gcmVxdWlyZShcIi4uL29ydGNcIik7XG5jb25zdCBzZHBDb21tb25VdGlscyA9IHJlcXVpcmUoXCIuL3NkcC9jb21tb25VdGlsc1wiKTtcbmNvbnN0IHNkcFVuaWZpZWRQbGFuVXRpbHMgPSByZXF1aXJlKFwiLi9zZHAvdW5pZmllZFBsYW5VdGlsc1wiKTtcbmNvbnN0IEhhbmRsZXJJbnRlcmZhY2VfMSA9IHJlcXVpcmUoXCIuL0hhbmRsZXJJbnRlcmZhY2VcIik7XG5jb25zdCBSZW1vdGVTZHBfMSA9IHJlcXVpcmUoXCIuL3NkcC9SZW1vdGVTZHBcIik7XG5jb25zdCBzY2FsYWJpbGl0eU1vZGVzXzEgPSByZXF1aXJlKFwiLi4vc2NhbGFiaWxpdHlNb2Rlc1wiKTtcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXJfMS5Mb2dnZXIoJ0Nocm9tZTcwJyk7XG5jb25zdCBTQ1RQX05VTV9TVFJFQU1TID0geyBPUzogMTAyNCwgTUlTOiAxMDI0IH07XG5jbGFzcyBDaHJvbWU3MCBleHRlbmRzIEhhbmRsZXJJbnRlcmZhY2VfMS5IYW5kbGVySW50ZXJmYWNlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgLy8gTWFwIG9mIFJUQ1RyYW5zY2VpdmVycyBpbmRleGVkIGJ5IE1JRC5cbiAgICAgICAgdGhpcy5fbWFwTWlkVHJhbnNjZWl2ZXIgPSBuZXcgTWFwKCk7XG4gICAgICAgIC8vIExvY2FsIHN0cmVhbSBmb3Igc2VuZGluZy5cbiAgICAgICAgdGhpcy5fc2VuZFN0cmVhbSA9IG5ldyBNZWRpYVN0cmVhbSgpO1xuICAgICAgICAvLyBXaGV0aGVyIGEgRGF0YUNoYW5uZWwgbT1hcHBsaWNhdGlvbiBzZWN0aW9uIGhhcyBiZWVuIGNyZWF0ZWQuXG4gICAgICAgIHRoaXMuX2hhc0RhdGFDaGFubmVsTWVkaWFTZWN0aW9uID0gZmFsc2U7XG4gICAgICAgIC8vIFNlbmRpbmcgRGF0YUNoYW5uZWwgaWQgdmFsdWUgY291bnRlci4gSW5jcmVtZW50ZWQgZm9yIGVhY2ggbmV3IERhdGFDaGFubmVsLlxuICAgICAgICB0aGlzLl9uZXh0U2VuZFNjdHBTdHJlYW1JZCA9IDA7XG4gICAgICAgIC8vIEdvdCB0cmFuc3BvcnQgbG9jYWwgYW5kIHJlbW90ZSBwYXJhbWV0ZXJzLlxuICAgICAgICB0aGlzLl90cmFuc3BvcnRSZWFkeSA9IGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZmFjdG9yeSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBzdGF0aWMgY3JlYXRlRmFjdG9yeSgpIHtcbiAgICAgICAgcmV0dXJuICgpID0+IG5ldyBDaHJvbWU3MCgpO1xuICAgIH1cbiAgICBnZXQgbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdDaHJvbWU3MCc7XG4gICAgfVxuICAgIGNsb3NlKCkge1xuICAgICAgICBsb2dnZXIuZGVidWcoJ2Nsb3NlKCknKTtcbiAgICAgICAgLy8gQ2xvc2UgUlRDUGVlckNvbm5lY3Rpb24uXG4gICAgICAgIGlmICh0aGlzLl9wYykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wYy5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7IH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBnZXROYXRpdmVSdHBDYXBhYmlsaXRpZXMoKSB7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZygnZ2V0TmF0aXZlUnRwQ2FwYWJpbGl0aWVzKCknKTtcbiAgICAgICAgY29uc3QgcGMgPSBuZXcgUlRDUGVlckNvbm5lY3Rpb24oe1xuICAgICAgICAgICAgaWNlU2VydmVyczogW10sXG4gICAgICAgICAgICBpY2VUcmFuc3BvcnRQb2xpY3k6ICdhbGwnLFxuICAgICAgICAgICAgYnVuZGxlUG9saWN5OiAnbWF4LWJ1bmRsZScsXG4gICAgICAgICAgICBydGNwTXV4UG9saWN5OiAncmVxdWlyZScsXG4gICAgICAgICAgICBzZHBTZW1hbnRpY3M6ICd1bmlmaWVkLXBsYW4nXG4gICAgICAgIH0pO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcGMuYWRkVHJhbnNjZWl2ZXIoJ2F1ZGlvJyk7XG4gICAgICAgICAgICBwYy5hZGRUcmFuc2NlaXZlcigndmlkZW8nKTtcbiAgICAgICAgICAgIGNvbnN0IG9mZmVyID0gYXdhaXQgcGMuY3JlYXRlT2ZmZXIoKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcGMuY2xvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikgeyB9XG4gICAgICAgICAgICBjb25zdCBzZHBPYmplY3QgPSBzZHBUcmFuc2Zvcm0ucGFyc2Uob2ZmZXIuc2RwKTtcbiAgICAgICAgICAgIGNvbnN0IG5hdGl2ZVJ0cENhcGFiaWxpdGllcyA9IHNkcENvbW1vblV0aWxzLmV4dHJhY3RSdHBDYXBhYmlsaXRpZXMoeyBzZHBPYmplY3QgfSk7XG4gICAgICAgICAgICByZXR1cm4gbmF0aXZlUnRwQ2FwYWJpbGl0aWVzO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBwYy5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yMikgeyB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBnZXROYXRpdmVTY3RwQ2FwYWJpbGl0aWVzKCkge1xuICAgICAgICBsb2dnZXIuZGVidWcoJ2dldE5hdGl2ZVNjdHBDYXBhYmlsaXRpZXMoKScpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbnVtU3RyZWFtczogU0NUUF9OVU1fU1RSRUFNU1xuICAgICAgICB9O1xuICAgIH1cbiAgICBydW4oeyBkaXJlY3Rpb24sIGljZVBhcmFtZXRlcnMsIGljZUNhbmRpZGF0ZXMsIGR0bHNQYXJhbWV0ZXJzLCBzY3RwUGFyYW1ldGVycywgaWNlU2VydmVycywgaWNlVHJhbnNwb3J0UG9saWN5LCBhZGRpdGlvbmFsU2V0dGluZ3MsIHByb3ByaWV0YXJ5Q29uc3RyYWludHMsIGV4dGVuZGVkUnRwQ2FwYWJpbGl0aWVzIH0pIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdydW4oKScpO1xuICAgICAgICB0aGlzLl9kaXJlY3Rpb24gPSBkaXJlY3Rpb247XG4gICAgICAgIHRoaXMuX3JlbW90ZVNkcCA9IG5ldyBSZW1vdGVTZHBfMS5SZW1vdGVTZHAoe1xuICAgICAgICAgICAgaWNlUGFyYW1ldGVycyxcbiAgICAgICAgICAgIGljZUNhbmRpZGF0ZXMsXG4gICAgICAgICAgICBkdGxzUGFyYW1ldGVycyxcbiAgICAgICAgICAgIHNjdHBQYXJhbWV0ZXJzXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9zZW5kaW5nUnRwUGFyYW1ldGVyc0J5S2luZCA9XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYXVkaW86IG9ydGMuZ2V0U2VuZGluZ1J0cFBhcmFtZXRlcnMoJ2F1ZGlvJywgZXh0ZW5kZWRSdHBDYXBhYmlsaXRpZXMpLFxuICAgICAgICAgICAgICAgIHZpZGVvOiBvcnRjLmdldFNlbmRpbmdSdHBQYXJhbWV0ZXJzKCd2aWRlbycsIGV4dGVuZGVkUnRwQ2FwYWJpbGl0aWVzKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fc2VuZGluZ1JlbW90ZVJ0cFBhcmFtZXRlcnNCeUtpbmQgPVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGF1ZGlvOiBvcnRjLmdldFNlbmRpbmdSZW1vdGVSdHBQYXJhbWV0ZXJzKCdhdWRpbycsIGV4dGVuZGVkUnRwQ2FwYWJpbGl0aWVzKSxcbiAgICAgICAgICAgICAgICB2aWRlbzogb3J0Yy5nZXRTZW5kaW5nUmVtb3RlUnRwUGFyYW1ldGVycygndmlkZW8nLCBleHRlbmRlZFJ0cENhcGFiaWxpdGllcylcbiAgICAgICAgICAgIH07XG4gICAgICAgIHRoaXMuX3BjID0gbmV3IFJUQ1BlZXJDb25uZWN0aW9uKHtcbiAgICAgICAgICAgIGljZVNlcnZlcnM6IGljZVNlcnZlcnMgfHwgW10sXG4gICAgICAgICAgICBpY2VUcmFuc3BvcnRQb2xpY3k6IGljZVRyYW5zcG9ydFBvbGljeSB8fCAnYWxsJyxcbiAgICAgICAgICAgIGJ1bmRsZVBvbGljeTogJ21heC1idW5kbGUnLFxuICAgICAgICAgICAgcnRjcE11eFBvbGljeTogJ3JlcXVpcmUnLFxuICAgICAgICAgICAgc2RwU2VtYW50aWNzOiAndW5pZmllZC1wbGFuJyxcbiAgICAgICAgICAgIC4uLmFkZGl0aW9uYWxTZXR0aW5nc1xuICAgICAgICB9LCBwcm9wcmlldGFyeUNvbnN0cmFpbnRzKTtcbiAgICAgICAgLy8gSGFuZGxlIFJUQ1BlZXJDb25uZWN0aW9uIGNvbm5lY3Rpb24gc3RhdHVzLlxuICAgICAgICB0aGlzLl9wYy5hZGRFdmVudExpc3RlbmVyKCdpY2Vjb25uZWN0aW9uc3RhdGVjaGFuZ2UnLCAoKSA9PiB7XG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMuX3BjLmljZUNvbm5lY3Rpb25TdGF0ZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2NoZWNraW5nJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdAY29ubmVjdGlvbnN0YXRlY2hhbmdlJywgJ2Nvbm5lY3RpbmcnKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnY29ubmVjdGVkJzpcbiAgICAgICAgICAgICAgICBjYXNlICdjb21wbGV0ZWQnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ0Bjb25uZWN0aW9uc3RhdGVjaGFuZ2UnLCAnY29ubmVjdGVkJyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2ZhaWxlZCc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnQGNvbm5lY3Rpb25zdGF0ZWNoYW5nZScsICdmYWlsZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnZGlzY29ubmVjdGVkJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdAY29ubmVjdGlvbnN0YXRlY2hhbmdlJywgJ2Rpc2Nvbm5lY3RlZCcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdjbG9zZWQnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ0Bjb25uZWN0aW9uc3RhdGVjaGFuZ2UnLCAnY2xvc2VkJyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgYXN5bmMgdXBkYXRlSWNlU2VydmVycyhpY2VTZXJ2ZXJzKSB7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZygndXBkYXRlSWNlU2VydmVycygpJyk7XG4gICAgICAgIGNvbnN0IGNvbmZpZ3VyYXRpb24gPSB0aGlzLl9wYy5nZXRDb25maWd1cmF0aW9uKCk7XG4gICAgICAgIGNvbmZpZ3VyYXRpb24uaWNlU2VydmVycyA9IGljZVNlcnZlcnM7XG4gICAgICAgIHRoaXMuX3BjLnNldENvbmZpZ3VyYXRpb24oY29uZmlndXJhdGlvbik7XG4gICAgfVxuICAgIGFzeW5jIHJlc3RhcnRJY2UoaWNlUGFyYW1ldGVycykge1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3Jlc3RhcnRJY2UoKScpO1xuICAgICAgICAvLyBQcm92aWRlIHRoZSByZW1vdGUgU0RQIGhhbmRsZXIgd2l0aCBuZXcgcmVtb3RlIElDRSBwYXJhbWV0ZXJzLlxuICAgICAgICB0aGlzLl9yZW1vdGVTZHAudXBkYXRlSWNlUGFyYW1ldGVycyhpY2VQYXJhbWV0ZXJzKTtcbiAgICAgICAgaWYgKCF0aGlzLl90cmFuc3BvcnRSZWFkeSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaWYgKHRoaXMuX2RpcmVjdGlvbiA9PT0gJ3NlbmQnKSB7XG4gICAgICAgICAgICBjb25zdCBvZmZlciA9IGF3YWl0IHRoaXMuX3BjLmNyZWF0ZU9mZmVyKHsgaWNlUmVzdGFydDogdHJ1ZSB9KTtcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZygncmVzdGFydEljZSgpIHwgY2FsbGluZyBwYy5zZXRMb2NhbERlc2NyaXB0aW9uKCkgW29mZmVyOiVvXScsIG9mZmVyKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX3BjLnNldExvY2FsRGVzY3JpcHRpb24ob2ZmZXIpO1xuICAgICAgICAgICAgY29uc3QgYW5zd2VyID0geyB0eXBlOiAnYW5zd2VyJywgc2RwOiB0aGlzLl9yZW1vdGVTZHAuZ2V0U2RwKCkgfTtcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZygncmVzdGFydEljZSgpIHwgY2FsbGluZyBwYy5zZXRSZW1vdGVEZXNjcmlwdGlvbigpIFthbnN3ZXI6JW9dJywgYW5zd2VyKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX3BjLnNldFJlbW90ZURlc2NyaXB0aW9uKGFuc3dlcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBvZmZlciA9IHsgdHlwZTogJ29mZmVyJywgc2RwOiB0aGlzLl9yZW1vdGVTZHAuZ2V0U2RwKCkgfTtcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZygncmVzdGFydEljZSgpIHwgY2FsbGluZyBwYy5zZXRSZW1vdGVEZXNjcmlwdGlvbigpIFtvZmZlcjolb10nLCBvZmZlcik7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLl9wYy5zZXRSZW1vdGVEZXNjcmlwdGlvbihvZmZlcik7XG4gICAgICAgICAgICBjb25zdCBhbnN3ZXIgPSBhd2FpdCB0aGlzLl9wYy5jcmVhdGVBbnN3ZXIoKTtcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZygncmVzdGFydEljZSgpIHwgY2FsbGluZyBwYy5zZXRMb2NhbERlc2NyaXB0aW9uKCkgW2Fuc3dlcjolb10nLCBhbnN3ZXIpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5fcGMuc2V0TG9jYWxEZXNjcmlwdGlvbihhbnN3ZXIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIGdldFRyYW5zcG9ydFN0YXRzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGMuZ2V0U3RhdHMoKTtcbiAgICB9XG4gICAgYXN5bmMgc2VuZCh7IHRyYWNrLCBlbmNvZGluZ3MsIGNvZGVjT3B0aW9ucywgY29kZWMgfSkge1xuICAgICAgICB0aGlzLl9hc3NlcnRTZW5kRGlyZWN0aW9uKCk7XG4gICAgICAgIGxvZ2dlci5kZWJ1Zygnc2VuZCgpIFtraW5kOiVzLCB0cmFjay5pZDolc10nLCB0cmFjay5raW5kLCB0cmFjay5pZCk7XG4gICAgICAgIGNvbnN0IHNlbmRpbmdSdHBQYXJhbWV0ZXJzID0gdXRpbHMuY2xvbmUodGhpcy5fc2VuZGluZ1J0cFBhcmFtZXRlcnNCeUtpbmRbdHJhY2sua2luZF0pO1xuICAgICAgICAvLyBUaGlzIG1heSB0aHJvdy5cbiAgICAgICAgc2VuZGluZ1J0cFBhcmFtZXRlcnMuY29kZWNzID1cbiAgICAgICAgICAgIG9ydGMucmVkdWNlQ29kZWNzKHNlbmRpbmdSdHBQYXJhbWV0ZXJzLmNvZGVjcywgY29kZWMpO1xuICAgICAgICBjb25zdCBzZW5kaW5nUmVtb3RlUnRwUGFyYW1ldGVycyA9IHV0aWxzLmNsb25lKHRoaXMuX3NlbmRpbmdSZW1vdGVSdHBQYXJhbWV0ZXJzQnlLaW5kW3RyYWNrLmtpbmRdKTtcbiAgICAgICAgLy8gVGhpcyBtYXkgdGhyb3cuXG4gICAgICAgIHNlbmRpbmdSZW1vdGVSdHBQYXJhbWV0ZXJzLmNvZGVjcyA9XG4gICAgICAgICAgICBvcnRjLnJlZHVjZUNvZGVjcyhzZW5kaW5nUmVtb3RlUnRwUGFyYW1ldGVycy5jb2RlY3MsIGNvZGVjKTtcbiAgICAgICAgY29uc3QgbWVkaWFTZWN0aW9uSWR4ID0gdGhpcy5fcmVtb3RlU2RwLmdldE5leHRNZWRpYVNlY3Rpb25JZHgoKTtcbiAgICAgICAgY29uc3QgdHJhbnNjZWl2ZXIgPSB0aGlzLl9wYy5hZGRUcmFuc2NlaXZlcih0cmFjaywgeyBkaXJlY3Rpb246ICdzZW5kb25seScsIHN0cmVhbXM6IFt0aGlzLl9zZW5kU3RyZWFtXSB9KTtcbiAgICAgICAgbGV0IG9mZmVyID0gYXdhaXQgdGhpcy5fcGMuY3JlYXRlT2ZmZXIoKTtcbiAgICAgICAgbGV0IGxvY2FsU2RwT2JqZWN0ID0gc2RwVHJhbnNmb3JtLnBhcnNlKG9mZmVyLnNkcCk7XG4gICAgICAgIGxldCBvZmZlck1lZGlhT2JqZWN0O1xuICAgICAgICBpZiAoIXRoaXMuX3RyYW5zcG9ydFJlYWR5KVxuICAgICAgICAgICAgYXdhaXQgdGhpcy5fc2V0dXBUcmFuc3BvcnQoeyBsb2NhbER0bHNSb2xlOiAnc2VydmVyJywgbG9jYWxTZHBPYmplY3QgfSk7XG4gICAgICAgIGlmIChlbmNvZGluZ3MgJiYgZW5jb2RpbmdzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1Zygnc2VuZCgpIHwgZW5hYmxpbmcgbGVnYWN5IHNpbXVsY2FzdCcpO1xuICAgICAgICAgICAgbG9jYWxTZHBPYmplY3QgPSBzZHBUcmFuc2Zvcm0ucGFyc2Uob2ZmZXIuc2RwKTtcbiAgICAgICAgICAgIG9mZmVyTWVkaWFPYmplY3QgPSBsb2NhbFNkcE9iamVjdC5tZWRpYVttZWRpYVNlY3Rpb25JZHguaWR4XTtcbiAgICAgICAgICAgIHNkcFVuaWZpZWRQbGFuVXRpbHMuYWRkTGVnYWN5U2ltdWxjYXN0KHtcbiAgICAgICAgICAgICAgICBvZmZlck1lZGlhT2JqZWN0LFxuICAgICAgICAgICAgICAgIG51bVN0cmVhbXM6IGVuY29kaW5ncy5sZW5ndGhcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgb2ZmZXIgPSB7IHR5cGU6ICdvZmZlcicsIHNkcDogc2RwVHJhbnNmb3JtLndyaXRlKGxvY2FsU2RwT2JqZWN0KSB9O1xuICAgICAgICB9XG4gICAgICAgIC8vIFNwZWNpYWwgY2FzZSBmb3IgVlA5IHdpdGggU1ZDLlxuICAgICAgICBsZXQgaGFja1ZwOVN2YyA9IGZhbHNlO1xuICAgICAgICBjb25zdCBsYXllcnMgPSBzY2FsYWJpbGl0eU1vZGVzXzEucGFyc2UoKGVuY29kaW5ncyB8fCBbe31dKVswXS5zY2FsYWJpbGl0eU1vZGUpO1xuICAgICAgICBpZiAoZW5jb2RpbmdzICYmXG4gICAgICAgICAgICBlbmNvZGluZ3MubGVuZ3RoID09PSAxICYmXG4gICAgICAgICAgICBsYXllcnMuc3BhdGlhbExheWVycyA+IDEgJiZcbiAgICAgICAgICAgIHNlbmRpbmdSdHBQYXJhbWV0ZXJzLmNvZGVjc1swXS5taW1lVHlwZS50b0xvd2VyQ2FzZSgpID09PSAndmlkZW8vdnA5Jykge1xuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdzZW5kKCkgfCBlbmFibGluZyBsZWdhY3kgc2ltdWxjYXN0IGZvciBWUDkgU1ZDJyk7XG4gICAgICAgICAgICBoYWNrVnA5U3ZjID0gdHJ1ZTtcbiAgICAgICAgICAgIGxvY2FsU2RwT2JqZWN0ID0gc2RwVHJhbnNmb3JtLnBhcnNlKG9mZmVyLnNkcCk7XG4gICAgICAgICAgICBvZmZlck1lZGlhT2JqZWN0ID0gbG9jYWxTZHBPYmplY3QubWVkaWFbbWVkaWFTZWN0aW9uSWR4LmlkeF07XG4gICAgICAgICAgICBzZHBVbmlmaWVkUGxhblV0aWxzLmFkZExlZ2FjeVNpbXVsY2FzdCh7XG4gICAgICAgICAgICAgICAgb2ZmZXJNZWRpYU9iamVjdCxcbiAgICAgICAgICAgICAgICBudW1TdHJlYW1zOiBsYXllcnMuc3BhdGlhbExheWVyc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBvZmZlciA9IHsgdHlwZTogJ29mZmVyJywgc2RwOiBzZHBUcmFuc2Zvcm0ud3JpdGUobG9jYWxTZHBPYmplY3QpIH07XG4gICAgICAgIH1cbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdzZW5kKCkgfCBjYWxsaW5nIHBjLnNldExvY2FsRGVzY3JpcHRpb24oKSBbb2ZmZXI6JW9dJywgb2ZmZXIpO1xuICAgICAgICBhd2FpdCB0aGlzLl9wYy5zZXRMb2NhbERlc2NyaXB0aW9uKG9mZmVyKTtcbiAgICAgICAgLy8gSWYgZW5jb2RpbmdzIGFyZSBnaXZlbiwgYXBwbHkgdGhlbSBub3cuXG4gICAgICAgIGlmIChlbmNvZGluZ3MpIHtcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1Zygnc2VuZCgpIHwgYXBwbHlpbmcgZ2l2ZW4gZW5jb2RpbmdzJyk7XG4gICAgICAgICAgICBjb25zdCBwYXJhbWV0ZXJzID0gdHJhbnNjZWl2ZXIuc2VuZGVyLmdldFBhcmFtZXRlcnMoKTtcbiAgICAgICAgICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IChwYXJhbWV0ZXJzLmVuY29kaW5ncyB8fCBbXSkubGVuZ3RoOyArK2lkeCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVuY29kaW5nID0gcGFyYW1ldGVycy5lbmNvZGluZ3NbaWR4XTtcbiAgICAgICAgICAgICAgICBjb25zdCBkZXNpcmVkRW5jb2RpbmcgPSBlbmNvZGluZ3NbaWR4XTtcbiAgICAgICAgICAgICAgICAvLyBTaG91bGQgbm90IGhhcHBlbiBidXQganVzdCBpbiBjYXNlLlxuICAgICAgICAgICAgICAgIGlmICghZGVzaXJlZEVuY29kaW5nKVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzLmVuY29kaW5nc1tpZHhdID0gT2JqZWN0LmFzc2lnbihlbmNvZGluZywgZGVzaXJlZEVuY29kaW5nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF3YWl0IHRyYW5zY2VpdmVyLnNlbmRlci5zZXRQYXJhbWV0ZXJzKHBhcmFtZXRlcnMpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFdlIGNhbiBub3cgZ2V0IHRoZSB0cmFuc2NlaXZlci5taWQuXG4gICAgICAgIGNvbnN0IGxvY2FsSWQgPSB0cmFuc2NlaXZlci5taWQ7XG4gICAgICAgIC8vIFNldCBNSUQuXG4gICAgICAgIHNlbmRpbmdSdHBQYXJhbWV0ZXJzLm1pZCA9IGxvY2FsSWQ7XG4gICAgICAgIGxvY2FsU2RwT2JqZWN0ID0gc2RwVHJhbnNmb3JtLnBhcnNlKHRoaXMuX3BjLmxvY2FsRGVzY3JpcHRpb24uc2RwKTtcbiAgICAgICAgb2ZmZXJNZWRpYU9iamVjdCA9IGxvY2FsU2RwT2JqZWN0Lm1lZGlhW21lZGlhU2VjdGlvbklkeC5pZHhdO1xuICAgICAgICAvLyBTZXQgUlRDUCBDTkFNRS5cbiAgICAgICAgc2VuZGluZ1J0cFBhcmFtZXRlcnMucnRjcC5jbmFtZSA9XG4gICAgICAgICAgICBzZHBDb21tb25VdGlscy5nZXRDbmFtZSh7IG9mZmVyTWVkaWFPYmplY3QgfSk7XG4gICAgICAgIC8vIFNldCBSVFAgZW5jb2RpbmdzLlxuICAgICAgICBzZW5kaW5nUnRwUGFyYW1ldGVycy5lbmNvZGluZ3MgPVxuICAgICAgICAgICAgc2RwVW5pZmllZFBsYW5VdGlscy5nZXRSdHBFbmNvZGluZ3MoeyBvZmZlck1lZGlhT2JqZWN0IH0pO1xuICAgICAgICAvLyBDb21wbGV0ZSBlbmNvZGluZ3Mgd2l0aCBnaXZlbiB2YWx1ZXMuXG4gICAgICAgIGlmIChlbmNvZGluZ3MpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IHNlbmRpbmdSdHBQYXJhbWV0ZXJzLmVuY29kaW5ncy5sZW5ndGg7ICsraWR4KSB7XG4gICAgICAgICAgICAgICAgaWYgKGVuY29kaW5nc1tpZHhdKVxuICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHNlbmRpbmdSdHBQYXJhbWV0ZXJzLmVuY29kaW5nc1tpZHhdLCBlbmNvZGluZ3NbaWR4XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gSGFjayBmb3IgVlA5IFNWQy5cbiAgICAgICAgaWYgKGhhY2tWcDlTdmMpIHtcbiAgICAgICAgICAgIHNlbmRpbmdSdHBQYXJhbWV0ZXJzLmVuY29kaW5ncyA9IFtzZW5kaW5nUnRwUGFyYW1ldGVycy5lbmNvZGluZ3NbMF1dO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIFZQOCBvciBIMjY0IGFuZCB0aGVyZSBpcyBlZmZlY3RpdmUgc2ltdWxjYXN0LCBhZGQgc2NhbGFiaWxpdHlNb2RlIHRvXG4gICAgICAgIC8vIGVhY2ggZW5jb2RpbmcuXG4gICAgICAgIGlmIChzZW5kaW5nUnRwUGFyYW1ldGVycy5lbmNvZGluZ3MubGVuZ3RoID4gMSAmJlxuICAgICAgICAgICAgKHNlbmRpbmdSdHBQYXJhbWV0ZXJzLmNvZGVjc1swXS5taW1lVHlwZS50b0xvd2VyQ2FzZSgpID09PSAndmlkZW8vdnA4JyB8fFxuICAgICAgICAgICAgICAgIHNlbmRpbmdSdHBQYXJhbWV0ZXJzLmNvZGVjc1swXS5taW1lVHlwZS50b0xvd2VyQ2FzZSgpID09PSAndmlkZW8vaDI2NCcpKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGVuY29kaW5nIG9mIHNlbmRpbmdSdHBQYXJhbWV0ZXJzLmVuY29kaW5ncykge1xuICAgICAgICAgICAgICAgIGVuY29kaW5nLnNjYWxhYmlsaXR5TW9kZSA9ICdTMVQzJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9yZW1vdGVTZHAuc2VuZCh7XG4gICAgICAgICAgICBvZmZlck1lZGlhT2JqZWN0LFxuICAgICAgICAgICAgcmV1c2VNaWQ6IG1lZGlhU2VjdGlvbklkeC5yZXVzZU1pZCxcbiAgICAgICAgICAgIG9mZmVyUnRwUGFyYW1ldGVyczogc2VuZGluZ1J0cFBhcmFtZXRlcnMsXG4gICAgICAgICAgICBhbnN3ZXJSdHBQYXJhbWV0ZXJzOiBzZW5kaW5nUmVtb3RlUnRwUGFyYW1ldGVycyxcbiAgICAgICAgICAgIGNvZGVjT3B0aW9uc1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgYW5zd2VyID0geyB0eXBlOiAnYW5zd2VyJywgc2RwOiB0aGlzLl9yZW1vdGVTZHAuZ2V0U2RwKCkgfTtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdzZW5kKCkgfCBjYWxsaW5nIHBjLnNldFJlbW90ZURlc2NyaXB0aW9uKCkgW2Fuc3dlcjolb10nLCBhbnN3ZXIpO1xuICAgICAgICBhd2FpdCB0aGlzLl9wYy5zZXRSZW1vdGVEZXNjcmlwdGlvbihhbnN3ZXIpO1xuICAgICAgICAvLyBTdG9yZSBpbiB0aGUgbWFwLlxuICAgICAgICB0aGlzLl9tYXBNaWRUcmFuc2NlaXZlci5zZXQobG9jYWxJZCwgdHJhbnNjZWl2ZXIpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbG9jYWxJZCxcbiAgICAgICAgICAgIHJ0cFBhcmFtZXRlcnM6IHNlbmRpbmdSdHBQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgcnRwU2VuZGVyOiB0cmFuc2NlaXZlci5zZW5kZXJcbiAgICAgICAgfTtcbiAgICB9XG4gICAgYXN5bmMgc3RvcFNlbmRpbmcobG9jYWxJZCkge1xuICAgICAgICB0aGlzLl9hc3NlcnRTZW5kRGlyZWN0aW9uKCk7XG4gICAgICAgIGxvZ2dlci5kZWJ1Zygnc3RvcFNlbmRpbmcoKSBbbG9jYWxJZDolc10nLCBsb2NhbElkKTtcbiAgICAgICAgY29uc3QgdHJhbnNjZWl2ZXIgPSB0aGlzLl9tYXBNaWRUcmFuc2NlaXZlci5nZXQobG9jYWxJZCk7XG4gICAgICAgIGlmICghdHJhbnNjZWl2ZXIpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Fzc29jaWF0ZWQgUlRDUnRwVHJhbnNjZWl2ZXIgbm90IGZvdW5kJyk7XG4gICAgICAgIHRyYW5zY2VpdmVyLnNlbmRlci5yZXBsYWNlVHJhY2sobnVsbCk7XG4gICAgICAgIHRoaXMuX3BjLnJlbW92ZVRyYWNrKHRyYW5zY2VpdmVyLnNlbmRlcik7XG4gICAgICAgIHRoaXMuX3JlbW90ZVNkcC5jbG9zZU1lZGlhU2VjdGlvbih0cmFuc2NlaXZlci5taWQpO1xuICAgICAgICBjb25zdCBvZmZlciA9IGF3YWl0IHRoaXMuX3BjLmNyZWF0ZU9mZmVyKCk7XG4gICAgICAgIGxvZ2dlci5kZWJ1Zygnc3RvcFNlbmRpbmcoKSB8IGNhbGxpbmcgcGMuc2V0TG9jYWxEZXNjcmlwdGlvbigpIFtvZmZlcjolb10nLCBvZmZlcik7XG4gICAgICAgIGF3YWl0IHRoaXMuX3BjLnNldExvY2FsRGVzY3JpcHRpb24ob2ZmZXIpO1xuICAgICAgICBjb25zdCBhbnN3ZXIgPSB7IHR5cGU6ICdhbnN3ZXInLCBzZHA6IHRoaXMuX3JlbW90ZVNkcC5nZXRTZHAoKSB9O1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3N0b3BTZW5kaW5nKCkgfCBjYWxsaW5nIHBjLnNldFJlbW90ZURlc2NyaXB0aW9uKCkgW2Fuc3dlcjolb10nLCBhbnN3ZXIpO1xuICAgICAgICBhd2FpdCB0aGlzLl9wYy5zZXRSZW1vdGVEZXNjcmlwdGlvbihhbnN3ZXIpO1xuICAgIH1cbiAgICBhc3luYyByZXBsYWNlVHJhY2sobG9jYWxJZCwgdHJhY2spIHtcbiAgICAgICAgdGhpcy5fYXNzZXJ0U2VuZERpcmVjdGlvbigpO1xuICAgICAgICBpZiAodHJhY2spIHtcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZygncmVwbGFjZVRyYWNrKCkgW2xvY2FsSWQ6JXMsIHRyYWNrLmlkOiVzXScsIGxvY2FsSWQsIHRyYWNrLmlkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZygncmVwbGFjZVRyYWNrKCkgW2xvY2FsSWQ6JXMsIG5vIHRyYWNrXScsIGxvY2FsSWQpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRyYW5zY2VpdmVyID0gdGhpcy5fbWFwTWlkVHJhbnNjZWl2ZXIuZ2V0KGxvY2FsSWQpO1xuICAgICAgICBpZiAoIXRyYW5zY2VpdmVyKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdhc3NvY2lhdGVkIFJUQ1J0cFRyYW5zY2VpdmVyIG5vdCBmb3VuZCcpO1xuICAgICAgICBhd2FpdCB0cmFuc2NlaXZlci5zZW5kZXIucmVwbGFjZVRyYWNrKHRyYWNrKTtcbiAgICB9XG4gICAgYXN5bmMgc2V0TWF4U3BhdGlhbExheWVyKGxvY2FsSWQsIHNwYXRpYWxMYXllcikge1xuICAgICAgICB0aGlzLl9hc3NlcnRTZW5kRGlyZWN0aW9uKCk7XG4gICAgICAgIGxvZ2dlci5kZWJ1Zygnc2V0TWF4U3BhdGlhbExheWVyKCkgW2xvY2FsSWQ6JXMsIHNwYXRpYWxMYXllcjolc10nLCBsb2NhbElkLCBzcGF0aWFsTGF5ZXIpO1xuICAgICAgICBjb25zdCB0cmFuc2NlaXZlciA9IHRoaXMuX21hcE1pZFRyYW5zY2VpdmVyLmdldChsb2NhbElkKTtcbiAgICAgICAgaWYgKCF0cmFuc2NlaXZlcilcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYXNzb2NpYXRlZCBSVENSdHBUcmFuc2NlaXZlciBub3QgZm91bmQnKTtcbiAgICAgICAgY29uc3QgcGFyYW1ldGVycyA9IHRyYW5zY2VpdmVyLnNlbmRlci5nZXRQYXJhbWV0ZXJzKCk7XG4gICAgICAgIHBhcmFtZXRlcnMuZW5jb2RpbmdzLmZvckVhY2goKGVuY29kaW5nLCBpZHgpID0+IHtcbiAgICAgICAgICAgIGlmIChpZHggPD0gc3BhdGlhbExheWVyKVxuICAgICAgICAgICAgICAgIGVuY29kaW5nLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgZW5jb2RpbmcuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgICAgICBhd2FpdCB0cmFuc2NlaXZlci5zZW5kZXIuc2V0UGFyYW1ldGVycyhwYXJhbWV0ZXJzKTtcbiAgICB9XG4gICAgYXN5bmMgc2V0UnRwRW5jb2RpbmdQYXJhbWV0ZXJzKGxvY2FsSWQsIHBhcmFtcykge1xuICAgICAgICB0aGlzLl9hc3NlcnRTZW5kRGlyZWN0aW9uKCk7XG4gICAgICAgIGxvZ2dlci5kZWJ1Zygnc2V0UnRwRW5jb2RpbmdQYXJhbWV0ZXJzKCkgW2xvY2FsSWQ6JXMsIHBhcmFtczolb10nLCBsb2NhbElkLCBwYXJhbXMpO1xuICAgICAgICBjb25zdCB0cmFuc2NlaXZlciA9IHRoaXMuX21hcE1pZFRyYW5zY2VpdmVyLmdldChsb2NhbElkKTtcbiAgICAgICAgaWYgKCF0cmFuc2NlaXZlcilcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYXNzb2NpYXRlZCBSVENSdHBUcmFuc2NlaXZlciBub3QgZm91bmQnKTtcbiAgICAgICAgY29uc3QgcGFyYW1ldGVycyA9IHRyYW5zY2VpdmVyLnNlbmRlci5nZXRQYXJhbWV0ZXJzKCk7XG4gICAgICAgIHBhcmFtZXRlcnMuZW5jb2RpbmdzLmZvckVhY2goKGVuY29kaW5nLCBpZHgpID0+IHtcbiAgICAgICAgICAgIHBhcmFtZXRlcnMuZW5jb2RpbmdzW2lkeF0gPSB7IC4uLmVuY29kaW5nLCAuLi5wYXJhbXMgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIGF3YWl0IHRyYW5zY2VpdmVyLnNlbmRlci5zZXRQYXJhbWV0ZXJzKHBhcmFtZXRlcnMpO1xuICAgIH1cbiAgICBhc3luYyBnZXRTZW5kZXJTdGF0cyhsb2NhbElkKSB7XG4gICAgICAgIHRoaXMuX2Fzc2VydFNlbmREaXJlY3Rpb24oKTtcbiAgICAgICAgY29uc3QgdHJhbnNjZWl2ZXIgPSB0aGlzLl9tYXBNaWRUcmFuc2NlaXZlci5nZXQobG9jYWxJZCk7XG4gICAgICAgIGlmICghdHJhbnNjZWl2ZXIpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Fzc29jaWF0ZWQgUlRDUnRwVHJhbnNjZWl2ZXIgbm90IGZvdW5kJyk7XG4gICAgICAgIHJldHVybiB0cmFuc2NlaXZlci5zZW5kZXIuZ2V0U3RhdHMoKTtcbiAgICB9XG4gICAgYXN5bmMgc2VuZERhdGFDaGFubmVsKHsgb3JkZXJlZCwgbWF4UGFja2V0TGlmZVRpbWUsIG1heFJldHJhbnNtaXRzLCBsYWJlbCwgcHJvdG9jb2wsIHByaW9yaXR5IH0pIHtcbiAgICAgICAgdGhpcy5fYXNzZXJ0U2VuZERpcmVjdGlvbigpO1xuICAgICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAgICAgbmVnb3RpYXRlZDogdHJ1ZSxcbiAgICAgICAgICAgIGlkOiB0aGlzLl9uZXh0U2VuZFNjdHBTdHJlYW1JZCxcbiAgICAgICAgICAgIG9yZGVyZWQsXG4gICAgICAgICAgICBtYXhQYWNrZXRMaWZlVGltZSxcbiAgICAgICAgICAgIG1heFJldHJhbnNtaXRUaW1lOiBtYXhQYWNrZXRMaWZlVGltZSxcbiAgICAgICAgICAgIG1heFJldHJhbnNtaXRzLFxuICAgICAgICAgICAgcHJvdG9jb2wsXG4gICAgICAgICAgICBwcmlvcml0eVxuICAgICAgICB9O1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3NlbmREYXRhQ2hhbm5lbCgpIFtvcHRpb25zOiVvXScsIG9wdGlvbnMpO1xuICAgICAgICBjb25zdCBkYXRhQ2hhbm5lbCA9IHRoaXMuX3BjLmNyZWF0ZURhdGFDaGFubmVsKGxhYmVsLCBvcHRpb25zKTtcbiAgICAgICAgLy8gSW5jcmVhc2UgbmV4dCBpZC5cbiAgICAgICAgdGhpcy5fbmV4dFNlbmRTY3RwU3RyZWFtSWQgPVxuICAgICAgICAgICAgKyt0aGlzLl9uZXh0U2VuZFNjdHBTdHJlYW1JZCAlIFNDVFBfTlVNX1NUUkVBTVMuTUlTO1xuICAgICAgICAvLyBJZiB0aGlzIGlzIHRoZSBmaXJzdCBEYXRhQ2hhbm5lbCB3ZSBuZWVkIHRvIGNyZWF0ZSB0aGUgU0RQIGFuc3dlciB3aXRoXG4gICAgICAgIC8vIG09YXBwbGljYXRpb24gc2VjdGlvbi5cbiAgICAgICAgaWYgKCF0aGlzLl9oYXNEYXRhQ2hhbm5lbE1lZGlhU2VjdGlvbikge1xuICAgICAgICAgICAgY29uc3Qgb2ZmZXIgPSBhd2FpdCB0aGlzLl9wYy5jcmVhdGVPZmZlcigpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxTZHBPYmplY3QgPSBzZHBUcmFuc2Zvcm0ucGFyc2Uob2ZmZXIuc2RwKTtcbiAgICAgICAgICAgIGNvbnN0IG9mZmVyTWVkaWFPYmplY3QgPSBsb2NhbFNkcE9iamVjdC5tZWRpYVxuICAgICAgICAgICAgICAgIC5maW5kKChtKSA9PiBtLnR5cGUgPT09ICdhcHBsaWNhdGlvbicpO1xuICAgICAgICAgICAgaWYgKCF0aGlzLl90cmFuc3BvcnRSZWFkeSlcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLl9zZXR1cFRyYW5zcG9ydCh7IGxvY2FsRHRsc1JvbGU6ICdzZXJ2ZXInLCBsb2NhbFNkcE9iamVjdCB9KTtcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1Zygnc2VuZERhdGFDaGFubmVsKCkgfCBjYWxsaW5nIHBjLnNldExvY2FsRGVzY3JpcHRpb24oKSBbb2ZmZXI6JW9dJywgb2ZmZXIpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5fcGMuc2V0TG9jYWxEZXNjcmlwdGlvbihvZmZlcik7XG4gICAgICAgICAgICB0aGlzLl9yZW1vdGVTZHAuc2VuZFNjdHBBc3NvY2lhdGlvbih7IG9mZmVyTWVkaWFPYmplY3QgfSk7XG4gICAgICAgICAgICBjb25zdCBhbnN3ZXIgPSB7IHR5cGU6ICdhbnN3ZXInLCBzZHA6IHRoaXMuX3JlbW90ZVNkcC5nZXRTZHAoKSB9O1xuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdzZW5kRGF0YUNoYW5uZWwoKSB8IGNhbGxpbmcgcGMuc2V0UmVtb3RlRGVzY3JpcHRpb24oKSBbYW5zd2VyOiVvXScsIGFuc3dlcik7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLl9wYy5zZXRSZW1vdGVEZXNjcmlwdGlvbihhbnN3ZXIpO1xuICAgICAgICAgICAgdGhpcy5faGFzRGF0YUNoYW5uZWxNZWRpYVNlY3Rpb24gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNjdHBTdHJlYW1QYXJhbWV0ZXJzID0ge1xuICAgICAgICAgICAgc3RyZWFtSWQ6IG9wdGlvbnMuaWQsXG4gICAgICAgICAgICBvcmRlcmVkOiBvcHRpb25zLm9yZGVyZWQsXG4gICAgICAgICAgICBtYXhQYWNrZXRMaWZlVGltZTogb3B0aW9ucy5tYXhQYWNrZXRMaWZlVGltZSxcbiAgICAgICAgICAgIG1heFJldHJhbnNtaXRzOiBvcHRpb25zLm1heFJldHJhbnNtaXRzXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB7IGRhdGFDaGFubmVsLCBzY3RwU3RyZWFtUGFyYW1ldGVycyB9O1xuICAgIH1cbiAgICBhc3luYyByZWNlaXZlKHsgdHJhY2tJZCwga2luZCwgcnRwUGFyYW1ldGVycyB9KSB7XG4gICAgICAgIHRoaXMuX2Fzc2VydFJlY3ZEaXJlY3Rpb24oKTtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdyZWNlaXZlKCkgW3RyYWNrSWQ6JXMsIGtpbmQ6JXNdJywgdHJhY2tJZCwga2luZCk7XG4gICAgICAgIGNvbnN0IGxvY2FsSWQgPSBydHBQYXJhbWV0ZXJzLm1pZCB8fCBTdHJpbmcodGhpcy5fbWFwTWlkVHJhbnNjZWl2ZXIuc2l6ZSk7XG4gICAgICAgIHRoaXMuX3JlbW90ZVNkcC5yZWNlaXZlKHtcbiAgICAgICAgICAgIG1pZDogbG9jYWxJZCxcbiAgICAgICAgICAgIGtpbmQsXG4gICAgICAgICAgICBvZmZlclJ0cFBhcmFtZXRlcnM6IHJ0cFBhcmFtZXRlcnMsXG4gICAgICAgICAgICBzdHJlYW1JZDogcnRwUGFyYW1ldGVycy5ydGNwLmNuYW1lLFxuICAgICAgICAgICAgdHJhY2tJZFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3Qgb2ZmZXIgPSB7IHR5cGU6ICdvZmZlcicsIHNkcDogdGhpcy5fcmVtb3RlU2RwLmdldFNkcCgpIH07XG4gICAgICAgIGxvZ2dlci5kZWJ1ZygncmVjZWl2ZSgpIHwgY2FsbGluZyBwYy5zZXRSZW1vdGVEZXNjcmlwdGlvbigpIFtvZmZlcjolb10nLCBvZmZlcik7XG4gICAgICAgIGF3YWl0IHRoaXMuX3BjLnNldFJlbW90ZURlc2NyaXB0aW9uKG9mZmVyKTtcbiAgICAgICAgbGV0IGFuc3dlciA9IGF3YWl0IHRoaXMuX3BjLmNyZWF0ZUFuc3dlcigpO1xuICAgICAgICBjb25zdCBsb2NhbFNkcE9iamVjdCA9IHNkcFRyYW5zZm9ybS5wYXJzZShhbnN3ZXIuc2RwKTtcbiAgICAgICAgY29uc3QgYW5zd2VyTWVkaWFPYmplY3QgPSBsb2NhbFNkcE9iamVjdC5tZWRpYVxuICAgICAgICAgICAgLmZpbmQoKG0pID0+IFN0cmluZyhtLm1pZCkgPT09IGxvY2FsSWQpO1xuICAgICAgICAvLyBNYXkgbmVlZCB0byBtb2RpZnkgY29kZWMgcGFyYW1ldGVycyBpbiB0aGUgYW5zd2VyIGJhc2VkIG9uIGNvZGVjXG4gICAgICAgIC8vIHBhcmFtZXRlcnMgaW4gdGhlIG9mZmVyLlxuICAgICAgICBzZHBDb21tb25VdGlscy5hcHBseUNvZGVjUGFyYW1ldGVycyh7XG4gICAgICAgICAgICBvZmZlclJ0cFBhcmFtZXRlcnM6IHJ0cFBhcmFtZXRlcnMsXG4gICAgICAgICAgICBhbnN3ZXJNZWRpYU9iamVjdFxuICAgICAgICB9KTtcbiAgICAgICAgYW5zd2VyID0geyB0eXBlOiAnYW5zd2VyJywgc2RwOiBzZHBUcmFuc2Zvcm0ud3JpdGUobG9jYWxTZHBPYmplY3QpIH07XG4gICAgICAgIGlmICghdGhpcy5fdHJhbnNwb3J0UmVhZHkpXG4gICAgICAgICAgICBhd2FpdCB0aGlzLl9zZXR1cFRyYW5zcG9ydCh7IGxvY2FsRHRsc1JvbGU6ICdjbGllbnQnLCBsb2NhbFNkcE9iamVjdCB9KTtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdyZWNlaXZlKCkgfCBjYWxsaW5nIHBjLnNldExvY2FsRGVzY3JpcHRpb24oKSBbYW5zd2VyOiVvXScsIGFuc3dlcik7XG4gICAgICAgIGF3YWl0IHRoaXMuX3BjLnNldExvY2FsRGVzY3JpcHRpb24oYW5zd2VyKTtcbiAgICAgICAgY29uc3QgdHJhbnNjZWl2ZXIgPSB0aGlzLl9wYy5nZXRUcmFuc2NlaXZlcnMoKVxuICAgICAgICAgICAgLmZpbmQoKHQpID0+IHQubWlkID09PSBsb2NhbElkKTtcbiAgICAgICAgaWYgKCF0cmFuc2NlaXZlcilcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbmV3IFJUQ1J0cFRyYW5zY2VpdmVyIG5vdCBmb3VuZCcpO1xuICAgICAgICAvLyBTdG9yZSBpbiB0aGUgbWFwLlxuICAgICAgICB0aGlzLl9tYXBNaWRUcmFuc2NlaXZlci5zZXQobG9jYWxJZCwgdHJhbnNjZWl2ZXIpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbG9jYWxJZCxcbiAgICAgICAgICAgIHRyYWNrOiB0cmFuc2NlaXZlci5yZWNlaXZlci50cmFjayxcbiAgICAgICAgICAgIHJ0cFJlY2VpdmVyOiB0cmFuc2NlaXZlci5yZWNlaXZlclxuICAgICAgICB9O1xuICAgIH1cbiAgICBhc3luYyBzdG9wUmVjZWl2aW5nKGxvY2FsSWQpIHtcbiAgICAgICAgdGhpcy5fYXNzZXJ0UmVjdkRpcmVjdGlvbigpO1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3N0b3BSZWNlaXZpbmcoKSBbbG9jYWxJZDolc10nLCBsb2NhbElkKTtcbiAgICAgICAgY29uc3QgdHJhbnNjZWl2ZXIgPSB0aGlzLl9tYXBNaWRUcmFuc2NlaXZlci5nZXQobG9jYWxJZCk7XG4gICAgICAgIGlmICghdHJhbnNjZWl2ZXIpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Fzc29jaWF0ZWQgUlRDUnRwVHJhbnNjZWl2ZXIgbm90IGZvdW5kJyk7XG4gICAgICAgIHRoaXMuX3JlbW90ZVNkcC5jbG9zZU1lZGlhU2VjdGlvbih0cmFuc2NlaXZlci5taWQpO1xuICAgICAgICBjb25zdCBvZmZlciA9IHsgdHlwZTogJ29mZmVyJywgc2RwOiB0aGlzLl9yZW1vdGVTZHAuZ2V0U2RwKCkgfTtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdzdG9wUmVjZWl2aW5nKCkgfCBjYWxsaW5nIHBjLnNldFJlbW90ZURlc2NyaXB0aW9uKCkgW29mZmVyOiVvXScsIG9mZmVyKTtcbiAgICAgICAgYXdhaXQgdGhpcy5fcGMuc2V0UmVtb3RlRGVzY3JpcHRpb24ob2ZmZXIpO1xuICAgICAgICBjb25zdCBhbnN3ZXIgPSBhd2FpdCB0aGlzLl9wYy5jcmVhdGVBbnN3ZXIoKTtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdzdG9wUmVjZWl2aW5nKCkgfCBjYWxsaW5nIHBjLnNldExvY2FsRGVzY3JpcHRpb24oKSBbYW5zd2VyOiVvXScsIGFuc3dlcik7XG4gICAgICAgIGF3YWl0IHRoaXMuX3BjLnNldExvY2FsRGVzY3JpcHRpb24oYW5zd2VyKTtcbiAgICB9XG4gICAgYXN5bmMgZ2V0UmVjZWl2ZXJTdGF0cyhsb2NhbElkKSB7XG4gICAgICAgIHRoaXMuX2Fzc2VydFJlY3ZEaXJlY3Rpb24oKTtcbiAgICAgICAgY29uc3QgdHJhbnNjZWl2ZXIgPSB0aGlzLl9tYXBNaWRUcmFuc2NlaXZlci5nZXQobG9jYWxJZCk7XG4gICAgICAgIGlmICghdHJhbnNjZWl2ZXIpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Fzc29jaWF0ZWQgUlRDUnRwVHJhbnNjZWl2ZXIgbm90IGZvdW5kJyk7XG4gICAgICAgIHJldHVybiB0cmFuc2NlaXZlci5yZWNlaXZlci5nZXRTdGF0cygpO1xuICAgIH1cbiAgICBhc3luYyByZWNlaXZlRGF0YUNoYW5uZWwoeyBzY3RwU3RyZWFtUGFyYW1ldGVycywgbGFiZWwsIHByb3RvY29sIH0pIHtcbiAgICAgICAgdGhpcy5fYXNzZXJ0UmVjdkRpcmVjdGlvbigpO1xuICAgICAgICBjb25zdCB7IHN0cmVhbUlkLCBvcmRlcmVkLCBtYXhQYWNrZXRMaWZlVGltZSwgbWF4UmV0cmFuc21pdHMgfSA9IHNjdHBTdHJlYW1QYXJhbWV0ZXJzO1xuICAgICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAgICAgbmVnb3RpYXRlZDogdHJ1ZSxcbiAgICAgICAgICAgIGlkOiBzdHJlYW1JZCxcbiAgICAgICAgICAgIG9yZGVyZWQsXG4gICAgICAgICAgICBtYXhQYWNrZXRMaWZlVGltZSxcbiAgICAgICAgICAgIG1heFJldHJhbnNtaXRUaW1lOiBtYXhQYWNrZXRMaWZlVGltZSxcbiAgICAgICAgICAgIG1heFJldHJhbnNtaXRzLFxuICAgICAgICAgICAgcHJvdG9jb2xcbiAgICAgICAgfTtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdyZWNlaXZlRGF0YUNoYW5uZWwoKSBbb3B0aW9uczolb10nLCBvcHRpb25zKTtcbiAgICAgICAgY29uc3QgZGF0YUNoYW5uZWwgPSB0aGlzLl9wYy5jcmVhdGVEYXRhQ2hhbm5lbChsYWJlbCwgb3B0aW9ucyk7XG4gICAgICAgIC8vIElmIHRoaXMgaXMgdGhlIGZpcnN0IERhdGFDaGFubmVsIHdlIG5lZWQgdG8gY3JlYXRlIHRoZSBTRFAgb2ZmZXIgd2l0aFxuICAgICAgICAvLyBtPWFwcGxpY2F0aW9uIHNlY3Rpb24uXG4gICAgICAgIGlmICghdGhpcy5faGFzRGF0YUNoYW5uZWxNZWRpYVNlY3Rpb24pIHtcbiAgICAgICAgICAgIHRoaXMuX3JlbW90ZVNkcC5yZWNlaXZlU2N0cEFzc29jaWF0aW9uKCk7XG4gICAgICAgICAgICBjb25zdCBvZmZlciA9IHsgdHlwZTogJ29mZmVyJywgc2RwOiB0aGlzLl9yZW1vdGVTZHAuZ2V0U2RwKCkgfTtcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZygncmVjZWl2ZURhdGFDaGFubmVsKCkgfCBjYWxsaW5nIHBjLnNldFJlbW90ZURlc2NyaXB0aW9uKCkgW29mZmVyOiVvXScsIG9mZmVyKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX3BjLnNldFJlbW90ZURlc2NyaXB0aW9uKG9mZmVyKTtcbiAgICAgICAgICAgIGNvbnN0IGFuc3dlciA9IGF3YWl0IHRoaXMuX3BjLmNyZWF0ZUFuc3dlcigpO1xuICAgICAgICAgICAgaWYgKCF0aGlzLl90cmFuc3BvcnRSZWFkeSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsU2RwT2JqZWN0ID0gc2RwVHJhbnNmb3JtLnBhcnNlKGFuc3dlci5zZHApO1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuX3NldHVwVHJhbnNwb3J0KHsgbG9jYWxEdGxzUm9sZTogJ2NsaWVudCcsIGxvY2FsU2RwT2JqZWN0IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdyZWNlaXZlRGF0YUNoYW5uZWwoKSB8IGNhbGxpbmcgcGMuc2V0UmVtb3RlRGVzY3JpcHRpb24oKSBbYW5zd2VyOiVvXScsIGFuc3dlcik7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLl9wYy5zZXRMb2NhbERlc2NyaXB0aW9uKGFuc3dlcik7XG4gICAgICAgICAgICB0aGlzLl9oYXNEYXRhQ2hhbm5lbE1lZGlhU2VjdGlvbiA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgZGF0YUNoYW5uZWwgfTtcbiAgICB9XG4gICAgYXN5bmMgX3NldHVwVHJhbnNwb3J0KHsgbG9jYWxEdGxzUm9sZSwgbG9jYWxTZHBPYmplY3QgfSkge1xuICAgICAgICBpZiAoIWxvY2FsU2RwT2JqZWN0KVxuICAgICAgICAgICAgbG9jYWxTZHBPYmplY3QgPSBzZHBUcmFuc2Zvcm0ucGFyc2UodGhpcy5fcGMubG9jYWxEZXNjcmlwdGlvbi5zZHApO1xuICAgICAgICAvLyBHZXQgb3VyIGxvY2FsIERUTFMgcGFyYW1ldGVycy5cbiAgICAgICAgY29uc3QgZHRsc1BhcmFtZXRlcnMgPSBzZHBDb21tb25VdGlscy5leHRyYWN0RHRsc1BhcmFtZXRlcnMoeyBzZHBPYmplY3Q6IGxvY2FsU2RwT2JqZWN0IH0pO1xuICAgICAgICAvLyBTZXQgb3VyIERUTFMgcm9sZS5cbiAgICAgICAgZHRsc1BhcmFtZXRlcnMucm9sZSA9IGxvY2FsRHRsc1JvbGU7XG4gICAgICAgIC8vIFVwZGF0ZSB0aGUgcmVtb3RlIERUTFMgcm9sZSBpbiB0aGUgU0RQLlxuICAgICAgICB0aGlzLl9yZW1vdGVTZHAudXBkYXRlRHRsc1JvbGUobG9jYWxEdGxzUm9sZSA9PT0gJ2NsaWVudCcgPyAnc2VydmVyJyA6ICdjbGllbnQnKTtcbiAgICAgICAgLy8gTmVlZCB0byB0ZWxsIHRoZSByZW1vdGUgdHJhbnNwb3J0IGFib3V0IG91ciBwYXJhbWV0ZXJzLlxuICAgICAgICBhd2FpdCB0aGlzLnNhZmVFbWl0QXNQcm9taXNlKCdAY29ubmVjdCcsIHsgZHRsc1BhcmFtZXRlcnMgfSk7XG4gICAgICAgIHRoaXMuX3RyYW5zcG9ydFJlYWR5ID0gdHJ1ZTtcbiAgICB9XG4gICAgX2Fzc2VydFNlbmREaXJlY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLl9kaXJlY3Rpb24gIT09ICdzZW5kJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdtZXRob2QgY2FuIGp1c3QgYmUgY2FsbGVkIGZvciBoYW5kbGVycyB3aXRoIFwic2VuZFwiIGRpcmVjdGlvbicpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9hc3NlcnRSZWN2RGlyZWN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5fZGlyZWN0aW9uICE9PSAncmVjdicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbWV0aG9kIGNhbiBqdXN0IGJlIGNhbGxlZCBmb3IgaGFuZGxlcnMgd2l0aCBcInJlY3ZcIiBkaXJlY3Rpb24nKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuQ2hyb21lNzAgPSBDaHJvbWU3MDtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZnVuY3Rpb24gZ2V0UnRwRW5jb2RpbmdzKHsgb2ZmZXJNZWRpYU9iamVjdCwgdHJhY2sgfSkge1xuICAgIC8vIEZpcnN0IG1lZGlhIFNTUkMgKG9yIHRoZSBvbmx5IG9uZSkuXG4gICAgbGV0IGZpcnN0U3NyYztcbiAgICBjb25zdCBzc3JjcyA9IG5ldyBTZXQoKTtcbiAgICBmb3IgKGNvbnN0IGxpbmUgb2Ygb2ZmZXJNZWRpYU9iamVjdC5zc3JjcyB8fCBbXSkge1xuICAgICAgICBpZiAobGluZS5hdHRyaWJ1dGUgIT09ICdtc2lkJylcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjb25zdCB0cmFja0lkID0gbGluZS52YWx1ZS5zcGxpdCgnICcpWzFdO1xuICAgICAgICBpZiAodHJhY2tJZCA9PT0gdHJhY2suaWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHNzcmMgPSBsaW5lLmlkO1xuICAgICAgICAgICAgc3NyY3MuYWRkKHNzcmMpO1xuICAgICAgICAgICAgaWYgKCFmaXJzdFNzcmMpXG4gICAgICAgICAgICAgICAgZmlyc3RTc3JjID0gc3NyYztcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoc3NyY3Muc2l6ZSA9PT0gMClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBhPXNzcmMgbGluZSB3aXRoIG1zaWQgaW5mb3JtYXRpb24gbm90IGZvdW5kIFt0cmFjay5pZDoke3RyYWNrLmlkfV1gKTtcbiAgICBjb25zdCBzc3JjVG9SdHhTc3JjID0gbmV3IE1hcCgpO1xuICAgIC8vIEZpcnN0IGFzc3VtZSBSVFggaXMgdXNlZC5cbiAgICBmb3IgKGNvbnN0IGxpbmUgb2Ygb2ZmZXJNZWRpYU9iamVjdC5zc3JjR3JvdXBzIHx8IFtdKSB7XG4gICAgICAgIGlmIChsaW5lLnNlbWFudGljcyAhPT0gJ0ZJRCcpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgbGV0IFtzc3JjLCBydHhTc3JjXSA9IGxpbmUuc3NyY3Muc3BsaXQoL1xccysvKTtcbiAgICAgICAgc3NyYyA9IE51bWJlcihzc3JjKTtcbiAgICAgICAgcnR4U3NyYyA9IE51bWJlcihydHhTc3JjKTtcbiAgICAgICAgaWYgKHNzcmNzLmhhcyhzc3JjKSkge1xuICAgICAgICAgICAgLy8gUmVtb3ZlIGJvdGggdGhlIFNTUkMgYW5kIFJUWCBTU1JDIGZyb20gdGhlIHNldCBzbyBsYXRlciB3ZSBrbm93IHRoYXQgdGhleVxuICAgICAgICAgICAgLy8gYXJlIGFscmVhZHkgaGFuZGxlZC5cbiAgICAgICAgICAgIHNzcmNzLmRlbGV0ZShzc3JjKTtcbiAgICAgICAgICAgIHNzcmNzLmRlbGV0ZShydHhTc3JjKTtcbiAgICAgICAgICAgIC8vIEFkZCB0byB0aGUgbWFwLlxuICAgICAgICAgICAgc3NyY1RvUnR4U3NyYy5zZXQoc3NyYywgcnR4U3NyYyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gSWYgdGhlIHNldCBvZiBTU1JDcyBpcyBub3QgZW1wdHkgaXQgbWVhbnMgdGhhdCBSVFggaXMgbm90IGJlaW5nIHVzZWQsIHNvIHRha2VcbiAgICAvLyBtZWRpYSBTU1JDcyBmcm9tIHRoZXJlLlxuICAgIGZvciAoY29uc3Qgc3NyYyBvZiBzc3Jjcykge1xuICAgICAgICAvLyBBZGQgdG8gdGhlIG1hcC5cbiAgICAgICAgc3NyY1RvUnR4U3NyYy5zZXQoc3NyYywgbnVsbCk7XG4gICAgfVxuICAgIGNvbnN0IGVuY29kaW5ncyA9IFtdO1xuICAgIGZvciAoY29uc3QgW3NzcmMsIHJ0eFNzcmNdIG9mIHNzcmNUb1J0eFNzcmMpIHtcbiAgICAgICAgY29uc3QgZW5jb2RpbmcgPSB7IHNzcmMgfTtcbiAgICAgICAgaWYgKHJ0eFNzcmMpXG4gICAgICAgICAgICBlbmNvZGluZy5ydHggPSB7IHNzcmM6IHJ0eFNzcmMgfTtcbiAgICAgICAgZW5jb2RpbmdzLnB1c2goZW5jb2RpbmcpO1xuICAgIH1cbiAgICByZXR1cm4gZW5jb2RpbmdzO1xufVxuZXhwb3J0cy5nZXRSdHBFbmNvZGluZ3MgPSBnZXRSdHBFbmNvZGluZ3M7XG4vKipcbiAqIEFkZHMgbXVsdGktc3NyYyBiYXNlZCBzaW11bGNhc3QgaW50byB0aGUgZ2l2ZW4gU0RQIG1lZGlhIHNlY3Rpb24gb2ZmZXIuXG4gKi9cbmZ1bmN0aW9uIGFkZExlZ2FjeVNpbXVsY2FzdCh7IG9mZmVyTWVkaWFPYmplY3QsIHRyYWNrLCBudW1TdHJlYW1zIH0pIHtcbiAgICBpZiAobnVtU3RyZWFtcyA8PSAxKVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdudW1TdHJlYW1zIG11c3QgYmUgZ3JlYXRlciB0aGFuIDEnKTtcbiAgICBsZXQgZmlyc3RTc3JjO1xuICAgIGxldCBmaXJzdFJ0eFNzcmM7XG4gICAgbGV0IHN0cmVhbUlkO1xuICAgIC8vIEdldCB0aGUgU1NSQy5cbiAgICBjb25zdCBzc3JjTXNpZExpbmUgPSAob2ZmZXJNZWRpYU9iamVjdC5zc3JjcyB8fCBbXSlcbiAgICAgICAgLmZpbmQoKGxpbmUpID0+IHtcbiAgICAgICAgaWYgKGxpbmUuYXR0cmlidXRlICE9PSAnbXNpZCcpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGNvbnN0IHRyYWNrSWQgPSBsaW5lLnZhbHVlLnNwbGl0KCcgJylbMV07XG4gICAgICAgIGlmICh0cmFja0lkID09PSB0cmFjay5pZCkge1xuICAgICAgICAgICAgZmlyc3RTc3JjID0gbGluZS5pZDtcbiAgICAgICAgICAgIHN0cmVhbUlkID0gbGluZS52YWx1ZS5zcGxpdCgnICcpWzBdO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoIXNzcmNNc2lkTGluZSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBhPXNzcmMgbGluZSB3aXRoIG1zaWQgaW5mb3JtYXRpb24gbm90IGZvdW5kIFt0cmFjay5pZDoke3RyYWNrLmlkfV1gKTtcbiAgICAvLyBHZXQgdGhlIFNTUkMgZm9yIFJUWC5cbiAgICAob2ZmZXJNZWRpYU9iamVjdC5zc3JjR3JvdXBzIHx8IFtdKVxuICAgICAgICAuc29tZSgobGluZSkgPT4ge1xuICAgICAgICBpZiAobGluZS5zZW1hbnRpY3MgIT09ICdGSUQnKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBjb25zdCBzc3JjcyA9IGxpbmUuc3NyY3Muc3BsaXQoL1xccysvKTtcbiAgICAgICAgaWYgKE51bWJlcihzc3Jjc1swXSkgPT09IGZpcnN0U3NyYykge1xuICAgICAgICAgICAgZmlyc3RSdHhTc3JjID0gTnVtYmVyKHNzcmNzWzFdKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgY29uc3Qgc3NyY0NuYW1lTGluZSA9IG9mZmVyTWVkaWFPYmplY3Quc3NyY3NcbiAgICAgICAgLmZpbmQoKGxpbmUpID0+IChsaW5lLmF0dHJpYnV0ZSA9PT0gJ2NuYW1lJyAmJiBsaW5lLmlkID09PSBmaXJzdFNzcmMpKTtcbiAgICBpZiAoIXNzcmNDbmFtZUxpbmUpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgYT1zc3JjIGxpbmUgd2l0aCBjbmFtZSBpbmZvcm1hdGlvbiBub3QgZm91bmQgW3RyYWNrLmlkOiR7dHJhY2suaWR9XWApO1xuICAgIGNvbnN0IGNuYW1lID0gc3NyY0NuYW1lTGluZS52YWx1ZTtcbiAgICBjb25zdCBzc3JjcyA9IFtdO1xuICAgIGNvbnN0IHJ0eFNzcmNzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1TdHJlYW1zOyArK2kpIHtcbiAgICAgICAgc3NyY3MucHVzaChmaXJzdFNzcmMgKyBpKTtcbiAgICAgICAgaWYgKGZpcnN0UnR4U3NyYylcbiAgICAgICAgICAgIHJ0eFNzcmNzLnB1c2goZmlyc3RSdHhTc3JjICsgaSk7XG4gICAgfVxuICAgIG9mZmVyTWVkaWFPYmplY3Quc3NyY0dyb3VwcyA9IG9mZmVyTWVkaWFPYmplY3Quc3NyY0dyb3VwcyB8fCBbXTtcbiAgICBvZmZlck1lZGlhT2JqZWN0LnNzcmNzID0gb2ZmZXJNZWRpYU9iamVjdC5zc3JjcyB8fCBbXTtcbiAgICBvZmZlck1lZGlhT2JqZWN0LnNzcmNHcm91cHMucHVzaCh7XG4gICAgICAgIHNlbWFudGljczogJ1NJTScsXG4gICAgICAgIHNzcmNzOiBzc3Jjcy5qb2luKCcgJylcbiAgICB9KTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNzcmNzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNvbnN0IHNzcmMgPSBzc3Jjc1tpXTtcbiAgICAgICAgb2ZmZXJNZWRpYU9iamVjdC5zc3Jjcy5wdXNoKHtcbiAgICAgICAgICAgIGlkOiBzc3JjLFxuICAgICAgICAgICAgYXR0cmlidXRlOiAnY25hbWUnLFxuICAgICAgICAgICAgdmFsdWU6IGNuYW1lXG4gICAgICAgIH0pO1xuICAgICAgICBvZmZlck1lZGlhT2JqZWN0LnNzcmNzLnB1c2goe1xuICAgICAgICAgICAgaWQ6IHNzcmMsXG4gICAgICAgICAgICBhdHRyaWJ1dGU6ICdtc2lkJyxcbiAgICAgICAgICAgIHZhbHVlOiBgJHtzdHJlYW1JZH0gJHt0cmFjay5pZH1gXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJ0eFNzcmNzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNvbnN0IHNzcmMgPSBzc3Jjc1tpXTtcbiAgICAgICAgY29uc3QgcnR4U3NyYyA9IHJ0eFNzcmNzW2ldO1xuICAgICAgICBvZmZlck1lZGlhT2JqZWN0LnNzcmNzLnB1c2goe1xuICAgICAgICAgICAgaWQ6IHJ0eFNzcmMsXG4gICAgICAgICAgICBhdHRyaWJ1dGU6ICdjbmFtZScsXG4gICAgICAgICAgICB2YWx1ZTogY25hbWVcbiAgICAgICAgfSk7XG4gICAgICAgIG9mZmVyTWVkaWFPYmplY3Quc3NyY3MucHVzaCh7XG4gICAgICAgICAgICBpZDogcnR4U3NyYyxcbiAgICAgICAgICAgIGF0dHJpYnV0ZTogJ21zaWQnLFxuICAgICAgICAgICAgdmFsdWU6IGAke3N0cmVhbUlkfSAke3RyYWNrLmlkfWBcbiAgICAgICAgfSk7XG4gICAgICAgIG9mZmVyTWVkaWFPYmplY3Quc3NyY0dyb3Vwcy5wdXNoKHtcbiAgICAgICAgICAgIHNlbWFudGljczogJ0ZJRCcsXG4gICAgICAgICAgICBzc3JjczogYCR7c3NyY30gJHtydHhTc3JjfWBcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5hZGRMZWdhY3lTaW11bGNhc3QgPSBhZGRMZWdhY3lTaW11bGNhc3Q7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHNkcFRyYW5zZm9ybSA9IHJlcXVpcmUoXCJzZHAtdHJhbnNmb3JtXCIpO1xuY29uc3QgTG9nZ2VyXzEgPSByZXF1aXJlKFwiLi4vTG9nZ2VyXCIpO1xuY29uc3QgdXRpbHMgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG5jb25zdCBvcnRjID0gcmVxdWlyZShcIi4uL29ydGNcIik7XG5jb25zdCBzZHBDb21tb25VdGlscyA9IHJlcXVpcmUoXCIuL3NkcC9jb21tb25VdGlsc1wiKTtcbmNvbnN0IHNkcFBsYW5CVXRpbHMgPSByZXF1aXJlKFwiLi9zZHAvcGxhbkJVdGlsc1wiKTtcbmNvbnN0IEhhbmRsZXJJbnRlcmZhY2VfMSA9IHJlcXVpcmUoXCIuL0hhbmRsZXJJbnRlcmZhY2VcIik7XG5jb25zdCBSZW1vdGVTZHBfMSA9IHJlcXVpcmUoXCIuL3NkcC9SZW1vdGVTZHBcIik7XG5jb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyXzEuTG9nZ2VyKCdDaHJvbWU2NycpO1xuY29uc3QgU0NUUF9OVU1fU1RSRUFNUyA9IHsgT1M6IDEwMjQsIE1JUzogMTAyNCB9O1xuY2xhc3MgQ2hyb21lNjcgZXh0ZW5kcyBIYW5kbGVySW50ZXJmYWNlXzEuSGFuZGxlckludGVyZmFjZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIC8vIExvY2FsIHN0cmVhbSBmb3Igc2VuZGluZy5cbiAgICAgICAgdGhpcy5fc2VuZFN0cmVhbSA9IG5ldyBNZWRpYVN0cmVhbSgpO1xuICAgICAgICAvLyBNYXAgb2YgUlRDUnRwU2VuZGVyIGluZGV4ZWQgYnkgbG9jYWxJZC5cbiAgICAgICAgdGhpcy5fbWFwU2VuZExvY2FsSWRSdHBTZW5kZXIgPSBuZXcgTWFwKCk7XG4gICAgICAgIC8vIE5leHQgc2VuZGluZyBsb2NhbElkLlxuICAgICAgICB0aGlzLl9uZXh0U2VuZExvY2FsSWQgPSAwO1xuICAgICAgICAvLyBNYXAgb2YgTUlELCBSVFAgcGFyYW1ldGVycyBhbmQgUlRDUnRwUmVjZWl2ZXIgaW5kZXhlZCBieSBsb2NhbCBpZC5cbiAgICAgICAgLy8gVmFsdWUgaXMgYW4gT2JqZWN0IHdpdGggbWlkLCBydHBQYXJhbWV0ZXJzIGFuZCBydHBSZWNlaXZlci5cbiAgICAgICAgdGhpcy5fbWFwUmVjdkxvY2FsSWRJbmZvID0gbmV3IE1hcCgpO1xuICAgICAgICAvLyBXaGV0aGVyIGEgRGF0YUNoYW5uZWwgbT1hcHBsaWNhdGlvbiBzZWN0aW9uIGhhcyBiZWVuIGNyZWF0ZWQuXG4gICAgICAgIHRoaXMuX2hhc0RhdGFDaGFubmVsTWVkaWFTZWN0aW9uID0gZmFsc2U7XG4gICAgICAgIC8vIFNlbmRpbmcgRGF0YUNoYW5uZWwgaWQgdmFsdWUgY291bnRlci4gSW5jcmVtZW50ZWQgZm9yIGVhY2ggbmV3IERhdGFDaGFubmVsLlxuICAgICAgICB0aGlzLl9uZXh0U2VuZFNjdHBTdHJlYW1JZCA9IDA7XG4gICAgICAgIC8vIEdvdCB0cmFuc3BvcnQgbG9jYWwgYW5kIHJlbW90ZSBwYXJhbWV0ZXJzLlxuICAgICAgICB0aGlzLl90cmFuc3BvcnRSZWFkeSA9IGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZmFjdG9yeSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBzdGF0aWMgY3JlYXRlRmFjdG9yeSgpIHtcbiAgICAgICAgcmV0dXJuICgpID0+IG5ldyBDaHJvbWU2NygpO1xuICAgIH1cbiAgICBnZXQgbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdDaHJvbWU2Nyc7XG4gICAgfVxuICAgIGNsb3NlKCkge1xuICAgICAgICBsb2dnZXIuZGVidWcoJ2Nsb3NlKCknKTtcbiAgICAgICAgLy8gQ2xvc2UgUlRDUGVlckNvbm5lY3Rpb24uXG4gICAgICAgIGlmICh0aGlzLl9wYykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wYy5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7IH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBnZXROYXRpdmVSdHBDYXBhYmlsaXRpZXMoKSB7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZygnZ2V0TmF0aXZlUnRwQ2FwYWJpbGl0aWVzKCknKTtcbiAgICAgICAgY29uc3QgcGMgPSBuZXcgUlRDUGVlckNvbm5lY3Rpb24oe1xuICAgICAgICAgICAgaWNlU2VydmVyczogW10sXG4gICAgICAgICAgICBpY2VUcmFuc3BvcnRQb2xpY3k6ICdhbGwnLFxuICAgICAgICAgICAgYnVuZGxlUG9saWN5OiAnbWF4LWJ1bmRsZScsXG4gICAgICAgICAgICBydGNwTXV4UG9saWN5OiAncmVxdWlyZScsXG4gICAgICAgICAgICBzZHBTZW1hbnRpY3M6ICdwbGFuLWInXG4gICAgICAgIH0pO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3Qgb2ZmZXIgPSBhd2FpdCBwYy5jcmVhdGVPZmZlcih7XG4gICAgICAgICAgICAgICAgb2ZmZXJUb1JlY2VpdmVBdWRpbzogdHJ1ZSxcbiAgICAgICAgICAgICAgICBvZmZlclRvUmVjZWl2ZVZpZGVvOiB0cnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcGMuY2xvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikgeyB9XG4gICAgICAgICAgICBjb25zdCBzZHBPYmplY3QgPSBzZHBUcmFuc2Zvcm0ucGFyc2Uob2ZmZXIuc2RwKTtcbiAgICAgICAgICAgIGNvbnN0IG5hdGl2ZVJ0cENhcGFiaWxpdGllcyA9IHNkcENvbW1vblV0aWxzLmV4dHJhY3RSdHBDYXBhYmlsaXRpZXMoeyBzZHBPYmplY3QgfSk7XG4gICAgICAgICAgICByZXR1cm4gbmF0aXZlUnRwQ2FwYWJpbGl0aWVzO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBwYy5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yMikgeyB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBnZXROYXRpdmVTY3RwQ2FwYWJpbGl0aWVzKCkge1xuICAgICAgICBsb2dnZXIuZGVidWcoJ2dldE5hdGl2ZVNjdHBDYXBhYmlsaXRpZXMoKScpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbnVtU3RyZWFtczogU0NUUF9OVU1fU1RSRUFNU1xuICAgICAgICB9O1xuICAgIH1cbiAgICBydW4oeyBkaXJlY3Rpb24sIGljZVBhcmFtZXRlcnMsIGljZUNhbmRpZGF0ZXMsIGR0bHNQYXJhbWV0ZXJzLCBzY3RwUGFyYW1ldGVycywgaWNlU2VydmVycywgaWNlVHJhbnNwb3J0UG9saWN5LCBhZGRpdGlvbmFsU2V0dGluZ3MsIHByb3ByaWV0YXJ5Q29uc3RyYWludHMsIGV4dGVuZGVkUnRwQ2FwYWJpbGl0aWVzIH0pIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdydW4oKScpO1xuICAgICAgICB0aGlzLl9kaXJlY3Rpb24gPSBkaXJlY3Rpb247XG4gICAgICAgIHRoaXMuX3JlbW90ZVNkcCA9IG5ldyBSZW1vdGVTZHBfMS5SZW1vdGVTZHAoe1xuICAgICAgICAgICAgaWNlUGFyYW1ldGVycyxcbiAgICAgICAgICAgIGljZUNhbmRpZGF0ZXMsXG4gICAgICAgICAgICBkdGxzUGFyYW1ldGVycyxcbiAgICAgICAgICAgIHNjdHBQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgcGxhbkI6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX3NlbmRpbmdSdHBQYXJhbWV0ZXJzQnlLaW5kID1cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBhdWRpbzogb3J0Yy5nZXRTZW5kaW5nUnRwUGFyYW1ldGVycygnYXVkaW8nLCBleHRlbmRlZFJ0cENhcGFiaWxpdGllcyksXG4gICAgICAgICAgICAgICAgdmlkZW86IG9ydGMuZ2V0U2VuZGluZ1J0cFBhcmFtZXRlcnMoJ3ZpZGVvJywgZXh0ZW5kZWRSdHBDYXBhYmlsaXRpZXMpXG4gICAgICAgICAgICB9O1xuICAgICAgICB0aGlzLl9zZW5kaW5nUmVtb3RlUnRwUGFyYW1ldGVyc0J5S2luZCA9XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYXVkaW86IG9ydGMuZ2V0U2VuZGluZ1JlbW90ZVJ0cFBhcmFtZXRlcnMoJ2F1ZGlvJywgZXh0ZW5kZWRSdHBDYXBhYmlsaXRpZXMpLFxuICAgICAgICAgICAgICAgIHZpZGVvOiBvcnRjLmdldFNlbmRpbmdSZW1vdGVSdHBQYXJhbWV0ZXJzKCd2aWRlbycsIGV4dGVuZGVkUnRwQ2FwYWJpbGl0aWVzKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fcGMgPSBuZXcgUlRDUGVlckNvbm5lY3Rpb24oe1xuICAgICAgICAgICAgaWNlU2VydmVyczogaWNlU2VydmVycyB8fCBbXSxcbiAgICAgICAgICAgIGljZVRyYW5zcG9ydFBvbGljeTogaWNlVHJhbnNwb3J0UG9saWN5IHx8ICdhbGwnLFxuICAgICAgICAgICAgYnVuZGxlUG9saWN5OiAnbWF4LWJ1bmRsZScsXG4gICAgICAgICAgICBydGNwTXV4UG9saWN5OiAncmVxdWlyZScsXG4gICAgICAgICAgICBzZHBTZW1hbnRpY3M6ICdwbGFuLWInLFxuICAgICAgICAgICAgLi4uYWRkaXRpb25hbFNldHRpbmdzXG4gICAgICAgIH0sIHByb3ByaWV0YXJ5Q29uc3RyYWludHMpO1xuICAgICAgICAvLyBIYW5kbGUgUlRDUGVlckNvbm5lY3Rpb24gY29ubmVjdGlvbiBzdGF0dXMuXG4gICAgICAgIHRoaXMuX3BjLmFkZEV2ZW50TGlzdGVuZXIoJ2ljZWNvbm5lY3Rpb25zdGF0ZWNoYW5nZScsICgpID0+IHtcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5fcGMuaWNlQ29ubmVjdGlvblN0YXRlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnY2hlY2tpbmcnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ0Bjb25uZWN0aW9uc3RhdGVjaGFuZ2UnLCAnY29ubmVjdGluZycpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdjb25uZWN0ZWQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2NvbXBsZXRlZCc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnQGNvbm5lY3Rpb25zdGF0ZWNoYW5nZScsICdjb25uZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnZmFpbGVkJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdAY29ubmVjdGlvbnN0YXRlY2hhbmdlJywgJ2ZhaWxlZCcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdkaXNjb25uZWN0ZWQnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ0Bjb25uZWN0aW9uc3RhdGVjaGFuZ2UnLCAnZGlzY29ubmVjdGVkJyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2Nsb3NlZCc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnQGNvbm5lY3Rpb25zdGF0ZWNoYW5nZScsICdjbG9zZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhc3luYyB1cGRhdGVJY2VTZXJ2ZXJzKGljZVNlcnZlcnMpIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCd1cGRhdGVJY2VTZXJ2ZXJzKCknKTtcbiAgICAgICAgY29uc3QgY29uZmlndXJhdGlvbiA9IHRoaXMuX3BjLmdldENvbmZpZ3VyYXRpb24oKTtcbiAgICAgICAgY29uZmlndXJhdGlvbi5pY2VTZXJ2ZXJzID0gaWNlU2VydmVycztcbiAgICAgICAgdGhpcy5fcGMuc2V0Q29uZmlndXJhdGlvbihjb25maWd1cmF0aW9uKTtcbiAgICB9XG4gICAgYXN5bmMgcmVzdGFydEljZShpY2VQYXJhbWV0ZXJzKSB7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZygncmVzdGFydEljZSgpJyk7XG4gICAgICAgIC8vIFByb3ZpZGUgdGhlIHJlbW90ZSBTRFAgaGFuZGxlciB3aXRoIG5ldyByZW1vdGUgSUNFIHBhcmFtZXRlcnMuXG4gICAgICAgIHRoaXMuX3JlbW90ZVNkcC51cGRhdGVJY2VQYXJhbWV0ZXJzKGljZVBhcmFtZXRlcnMpO1xuICAgICAgICBpZiAoIXRoaXMuX3RyYW5zcG9ydFJlYWR5KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpZiAodGhpcy5fZGlyZWN0aW9uID09PSAnc2VuZCcpIHtcbiAgICAgICAgICAgIGNvbnN0IG9mZmVyID0gYXdhaXQgdGhpcy5fcGMuY3JlYXRlT2ZmZXIoeyBpY2VSZXN0YXJ0OiB0cnVlIH0pO1xuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdyZXN0YXJ0SWNlKCkgfCBjYWxsaW5nIHBjLnNldExvY2FsRGVzY3JpcHRpb24oKSBbb2ZmZXI6JW9dJywgb2ZmZXIpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5fcGMuc2V0TG9jYWxEZXNjcmlwdGlvbihvZmZlcik7XG4gICAgICAgICAgICBjb25zdCBhbnN3ZXIgPSB7IHR5cGU6ICdhbnN3ZXInLCBzZHA6IHRoaXMuX3JlbW90ZVNkcC5nZXRTZHAoKSB9O1xuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdyZXN0YXJ0SWNlKCkgfCBjYWxsaW5nIHBjLnNldFJlbW90ZURlc2NyaXB0aW9uKCkgW2Fuc3dlcjolb10nLCBhbnN3ZXIpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5fcGMuc2V0UmVtb3RlRGVzY3JpcHRpb24oYW5zd2VyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IG9mZmVyID0geyB0eXBlOiAnb2ZmZXInLCBzZHA6IHRoaXMuX3JlbW90ZVNkcC5nZXRTZHAoKSB9O1xuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdyZXN0YXJ0SWNlKCkgfCBjYWxsaW5nIHBjLnNldFJlbW90ZURlc2NyaXB0aW9uKCkgW29mZmVyOiVvXScsIG9mZmVyKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX3BjLnNldFJlbW90ZURlc2NyaXB0aW9uKG9mZmVyKTtcbiAgICAgICAgICAgIGNvbnN0IGFuc3dlciA9IGF3YWl0IHRoaXMuX3BjLmNyZWF0ZUFuc3dlcigpO1xuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdyZXN0YXJ0SWNlKCkgfCBjYWxsaW5nIHBjLnNldExvY2FsRGVzY3JpcHRpb24oKSBbYW5zd2VyOiVvXScsIGFuc3dlcik7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLl9wYy5zZXRMb2NhbERlc2NyaXB0aW9uKGFuc3dlcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgZ2V0VHJhbnNwb3J0U3RhdHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wYy5nZXRTdGF0cygpO1xuICAgIH1cbiAgICBhc3luYyBzZW5kKHsgdHJhY2ssIGVuY29kaW5ncywgY29kZWNPcHRpb25zLCBjb2RlYyB9KSB7XG4gICAgICAgIHRoaXMuX2Fzc2VydFNlbmREaXJlY3Rpb24oKTtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdzZW5kKCkgW2tpbmQ6JXMsIHRyYWNrLmlkOiVzXScsIHRyYWNrLmtpbmQsIHRyYWNrLmlkKTtcbiAgICAgICAgaWYgKGNvZGVjKSB7XG4gICAgICAgICAgICBsb2dnZXIud2Fybignc2VuZCgpIHwgY29kZWMgc2VsZWN0aW9uIGlzIG5vdCBhdmFpbGFibGUgaW4gJXMgaGFuZGxlcicsIHRoaXMubmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc2VuZFN0cmVhbS5hZGRUcmFjayh0cmFjayk7XG4gICAgICAgIHRoaXMuX3BjLmFkZFRyYWNrKHRyYWNrLCB0aGlzLl9zZW5kU3RyZWFtKTtcbiAgICAgICAgbGV0IG9mZmVyID0gYXdhaXQgdGhpcy5fcGMuY3JlYXRlT2ZmZXIoKTtcbiAgICAgICAgbGV0IGxvY2FsU2RwT2JqZWN0ID0gc2RwVHJhbnNmb3JtLnBhcnNlKG9mZmVyLnNkcCk7XG4gICAgICAgIGxldCBvZmZlck1lZGlhT2JqZWN0O1xuICAgICAgICBjb25zdCBzZW5kaW5nUnRwUGFyYW1ldGVycyA9IHV0aWxzLmNsb25lKHRoaXMuX3NlbmRpbmdSdHBQYXJhbWV0ZXJzQnlLaW5kW3RyYWNrLmtpbmRdKTtcbiAgICAgICAgc2VuZGluZ1J0cFBhcmFtZXRlcnMuY29kZWNzID1cbiAgICAgICAgICAgIG9ydGMucmVkdWNlQ29kZWNzKHNlbmRpbmdSdHBQYXJhbWV0ZXJzLmNvZGVjcyk7XG4gICAgICAgIGNvbnN0IHNlbmRpbmdSZW1vdGVSdHBQYXJhbWV0ZXJzID0gdXRpbHMuY2xvbmUodGhpcy5fc2VuZGluZ1JlbW90ZVJ0cFBhcmFtZXRlcnNCeUtpbmRbdHJhY2sua2luZF0pO1xuICAgICAgICBzZW5kaW5nUmVtb3RlUnRwUGFyYW1ldGVycy5jb2RlY3MgPVxuICAgICAgICAgICAgb3J0Yy5yZWR1Y2VDb2RlY3Moc2VuZGluZ1JlbW90ZVJ0cFBhcmFtZXRlcnMuY29kZWNzKTtcbiAgICAgICAgaWYgKCF0aGlzLl90cmFuc3BvcnRSZWFkeSlcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX3NldHVwVHJhbnNwb3J0KHsgbG9jYWxEdGxzUm9sZTogJ3NlcnZlcicsIGxvY2FsU2RwT2JqZWN0IH0pO1xuICAgICAgICBpZiAodHJhY2sua2luZCA9PT0gJ3ZpZGVvJyAmJiBlbmNvZGluZ3MgJiYgZW5jb2RpbmdzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1Zygnc2VuZCgpIHwgZW5hYmxpbmcgc2ltdWxjYXN0Jyk7XG4gICAgICAgICAgICBsb2NhbFNkcE9iamVjdCA9IHNkcFRyYW5zZm9ybS5wYXJzZShvZmZlci5zZHApO1xuICAgICAgICAgICAgb2ZmZXJNZWRpYU9iamVjdCA9IGxvY2FsU2RwT2JqZWN0Lm1lZGlhXG4gICAgICAgICAgICAgICAgLmZpbmQoKG0pID0+IG0udHlwZSA9PT0gJ3ZpZGVvJyk7XG4gICAgICAgICAgICBzZHBQbGFuQlV0aWxzLmFkZExlZ2FjeVNpbXVsY2FzdCh7XG4gICAgICAgICAgICAgICAgb2ZmZXJNZWRpYU9iamVjdCxcbiAgICAgICAgICAgICAgICB0cmFjayxcbiAgICAgICAgICAgICAgICBudW1TdHJlYW1zOiBlbmNvZGluZ3MubGVuZ3RoXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIG9mZmVyID0geyB0eXBlOiAnb2ZmZXInLCBzZHA6IHNkcFRyYW5zZm9ybS53cml0ZShsb2NhbFNkcE9iamVjdCkgfTtcbiAgICAgICAgfVxuICAgICAgICBsb2dnZXIuZGVidWcoJ3NlbmQoKSB8IGNhbGxpbmcgcGMuc2V0TG9jYWxEZXNjcmlwdGlvbigpIFtvZmZlcjolb10nLCBvZmZlcik7XG4gICAgICAgIGF3YWl0IHRoaXMuX3BjLnNldExvY2FsRGVzY3JpcHRpb24ob2ZmZXIpO1xuICAgICAgICBsb2NhbFNkcE9iamVjdCA9IHNkcFRyYW5zZm9ybS5wYXJzZSh0aGlzLl9wYy5sb2NhbERlc2NyaXB0aW9uLnNkcCk7XG4gICAgICAgIG9mZmVyTWVkaWFPYmplY3QgPSBsb2NhbFNkcE9iamVjdC5tZWRpYVxuICAgICAgICAgICAgLmZpbmQoKG0pID0+IG0udHlwZSA9PT0gdHJhY2sua2luZCk7XG4gICAgICAgIC8vIFNldCBSVENQIENOQU1FLlxuICAgICAgICBzZW5kaW5nUnRwUGFyYW1ldGVycy5ydGNwLmNuYW1lID1cbiAgICAgICAgICAgIHNkcENvbW1vblV0aWxzLmdldENuYW1lKHsgb2ZmZXJNZWRpYU9iamVjdCB9KTtcbiAgICAgICAgLy8gU2V0IFJUUCBlbmNvZGluZ3MuXG4gICAgICAgIHNlbmRpbmdSdHBQYXJhbWV0ZXJzLmVuY29kaW5ncyA9XG4gICAgICAgICAgICBzZHBQbGFuQlV0aWxzLmdldFJ0cEVuY29kaW5ncyh7IG9mZmVyTWVkaWFPYmplY3QsIHRyYWNrIH0pO1xuICAgICAgICAvLyBDb21wbGV0ZSBlbmNvZGluZ3Mgd2l0aCBnaXZlbiB2YWx1ZXMuXG4gICAgICAgIGlmIChlbmNvZGluZ3MpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IHNlbmRpbmdSdHBQYXJhbWV0ZXJzLmVuY29kaW5ncy5sZW5ndGg7ICsraWR4KSB7XG4gICAgICAgICAgICAgICAgaWYgKGVuY29kaW5nc1tpZHhdKVxuICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHNlbmRpbmdSdHBQYXJhbWV0ZXJzLmVuY29kaW5nc1tpZHhdLCBlbmNvZGluZ3NbaWR4XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgVlA4IGFuZCB0aGVyZSBpcyBlZmZlY3RpdmUgc2ltdWxjYXN0LCBhZGQgc2NhbGFiaWxpdHlNb2RlIHRvIGVhY2hcbiAgICAgICAgLy8gZW5jb2RpbmcuXG4gICAgICAgIGlmIChzZW5kaW5nUnRwUGFyYW1ldGVycy5lbmNvZGluZ3MubGVuZ3RoID4gMSAmJlxuICAgICAgICAgICAgc2VuZGluZ1J0cFBhcmFtZXRlcnMuY29kZWNzWzBdLm1pbWVUeXBlLnRvTG93ZXJDYXNlKCkgPT09ICd2aWRlby92cDgnKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGVuY29kaW5nIG9mIHNlbmRpbmdSdHBQYXJhbWV0ZXJzLmVuY29kaW5ncykge1xuICAgICAgICAgICAgICAgIGVuY29kaW5nLnNjYWxhYmlsaXR5TW9kZSA9ICdTMVQzJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9yZW1vdGVTZHAuc2VuZCh7XG4gICAgICAgICAgICBvZmZlck1lZGlhT2JqZWN0LFxuICAgICAgICAgICAgb2ZmZXJSdHBQYXJhbWV0ZXJzOiBzZW5kaW5nUnRwUGFyYW1ldGVycyxcbiAgICAgICAgICAgIGFuc3dlclJ0cFBhcmFtZXRlcnM6IHNlbmRpbmdSZW1vdGVSdHBQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgY29kZWNPcHRpb25zXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBhbnN3ZXIgPSB7IHR5cGU6ICdhbnN3ZXInLCBzZHA6IHRoaXMuX3JlbW90ZVNkcC5nZXRTZHAoKSB9O1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3NlbmQoKSB8IGNhbGxpbmcgcGMuc2V0UmVtb3RlRGVzY3JpcHRpb24oKSBbYW5zd2VyOiVvXScsIGFuc3dlcik7XG4gICAgICAgIGF3YWl0IHRoaXMuX3BjLnNldFJlbW90ZURlc2NyaXB0aW9uKGFuc3dlcik7XG4gICAgICAgIGNvbnN0IGxvY2FsSWQgPSBTdHJpbmcodGhpcy5fbmV4dFNlbmRMb2NhbElkKTtcbiAgICAgICAgdGhpcy5fbmV4dFNlbmRMb2NhbElkKys7XG4gICAgICAgIGNvbnN0IHJ0cFNlbmRlciA9IHRoaXMuX3BjLmdldFNlbmRlcnMoKVxuICAgICAgICAgICAgLmZpbmQoKHMpID0+IHMudHJhY2sgPT09IHRyYWNrKTtcbiAgICAgICAgLy8gSW5zZXJ0IGludG8gdGhlIG1hcC5cbiAgICAgICAgdGhpcy5fbWFwU2VuZExvY2FsSWRSdHBTZW5kZXIuc2V0KGxvY2FsSWQsIHJ0cFNlbmRlcik7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsb2NhbElkOiBsb2NhbElkLFxuICAgICAgICAgICAgcnRwUGFyYW1ldGVyczogc2VuZGluZ1J0cFBhcmFtZXRlcnMsXG4gICAgICAgICAgICBydHBTZW5kZXJcbiAgICAgICAgfTtcbiAgICB9XG4gICAgYXN5bmMgc3RvcFNlbmRpbmcobG9jYWxJZCkge1xuICAgICAgICB0aGlzLl9hc3NlcnRTZW5kRGlyZWN0aW9uKCk7XG4gICAgICAgIGxvZ2dlci5kZWJ1Zygnc3RvcFNlbmRpbmcoKSBbbG9jYWxJZDolc10nLCBsb2NhbElkKTtcbiAgICAgICAgY29uc3QgcnRwU2VuZGVyID0gdGhpcy5fbWFwU2VuZExvY2FsSWRSdHBTZW5kZXIuZ2V0KGxvY2FsSWQpO1xuICAgICAgICBpZiAoIXJ0cFNlbmRlcilcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYXNzb2NpYXRlZCBSVENSdHBTZW5kZXIgbm90IGZvdW5kJyk7XG4gICAgICAgIHRoaXMuX3BjLnJlbW92ZVRyYWNrKHJ0cFNlbmRlcik7XG4gICAgICAgIGlmIChydHBTZW5kZXIudHJhY2spXG4gICAgICAgICAgICB0aGlzLl9zZW5kU3RyZWFtLnJlbW92ZVRyYWNrKHJ0cFNlbmRlci50cmFjayk7XG4gICAgICAgIHRoaXMuX21hcFNlbmRMb2NhbElkUnRwU2VuZGVyLmRlbGV0ZShsb2NhbElkKTtcbiAgICAgICAgY29uc3Qgb2ZmZXIgPSBhd2FpdCB0aGlzLl9wYy5jcmVhdGVPZmZlcigpO1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3N0b3BTZW5kaW5nKCkgfCBjYWxsaW5nIHBjLnNldExvY2FsRGVzY3JpcHRpb24oKSBbb2ZmZXI6JW9dJywgb2ZmZXIpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5fcGMuc2V0TG9jYWxEZXNjcmlwdGlvbihvZmZlcik7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAvLyBOT1RFOiBJZiB0aGVyZSBhcmUgbm8gc2VuZGluZyB0cmFja3MsIHNldExvY2FsRGVzY3JpcHRpb24oKSB3aWxsIGZhaWwgd2l0aFxuICAgICAgICAgICAgLy8gXCJGYWlsZWQgdG8gY3JlYXRlIGNoYW5uZWxzXCIuIElmIHNvLCBpZ25vcmUgaXQuXG4gICAgICAgICAgICBpZiAodGhpcy5fc2VuZFN0cmVhbS5nZXRUcmFja3MoKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIud2Fybignc3RvcFNlbmRpbmcoKSB8IGlnbm9yaW5nIGV4cGVjdGVkIGVycm9yIGR1ZSBubyBzZW5kaW5nIHRyYWNrczogJXMnLCBlcnJvci50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fcGMuc2lnbmFsaW5nU3RhdGUgPT09ICdzdGFibGUnKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCBhbnN3ZXIgPSB7IHR5cGU6ICdhbnN3ZXInLCBzZHA6IHRoaXMuX3JlbW90ZVNkcC5nZXRTZHAoKSB9O1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3N0b3BTZW5kaW5nKCkgfCBjYWxsaW5nIHBjLnNldFJlbW90ZURlc2NyaXB0aW9uKCkgW2Fuc3dlcjolb10nLCBhbnN3ZXIpO1xuICAgICAgICBhd2FpdCB0aGlzLl9wYy5zZXRSZW1vdGVEZXNjcmlwdGlvbihhbnN3ZXIpO1xuICAgIH1cbiAgICBhc3luYyByZXBsYWNlVHJhY2sobG9jYWxJZCwgdHJhY2spIHtcbiAgICAgICAgdGhpcy5fYXNzZXJ0U2VuZERpcmVjdGlvbigpO1xuICAgICAgICBpZiAodHJhY2spIHtcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZygncmVwbGFjZVRyYWNrKCkgW2xvY2FsSWQ6JXMsIHRyYWNrLmlkOiVzXScsIGxvY2FsSWQsIHRyYWNrLmlkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZygncmVwbGFjZVRyYWNrKCkgW2xvY2FsSWQ6JXMsIG5vIHRyYWNrXScsIGxvY2FsSWQpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJ0cFNlbmRlciA9IHRoaXMuX21hcFNlbmRMb2NhbElkUnRwU2VuZGVyLmdldChsb2NhbElkKTtcbiAgICAgICAgaWYgKCFydHBTZW5kZXIpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Fzc29jaWF0ZWQgUlRDUnRwU2VuZGVyIG5vdCBmb3VuZCcpO1xuICAgICAgICBjb25zdCBvbGRUcmFjayA9IHJ0cFNlbmRlci50cmFjaztcbiAgICAgICAgYXdhaXQgcnRwU2VuZGVyLnJlcGxhY2VUcmFjayh0cmFjayk7XG4gICAgICAgIC8vIFJlbW92ZSB0aGUgb2xkIHRyYWNrIGZyb20gdGhlIGxvY2FsIHN0cmVhbS5cbiAgICAgICAgaWYgKG9sZFRyYWNrKVxuICAgICAgICAgICAgdGhpcy5fc2VuZFN0cmVhbS5yZW1vdmVUcmFjayhvbGRUcmFjayk7XG4gICAgICAgIC8vIEFkZCB0aGUgbmV3IHRyYWNrIHRvIHRoZSBsb2NhbCBzdHJlYW0uXG4gICAgICAgIGlmICh0cmFjaylcbiAgICAgICAgICAgIHRoaXMuX3NlbmRTdHJlYW0uYWRkVHJhY2sodHJhY2spO1xuICAgIH1cbiAgICBhc3luYyBzZXRNYXhTcGF0aWFsTGF5ZXIobG9jYWxJZCwgc3BhdGlhbExheWVyKSB7XG4gICAgICAgIHRoaXMuX2Fzc2VydFNlbmREaXJlY3Rpb24oKTtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdzZXRNYXhTcGF0aWFsTGF5ZXIoKSBbbG9jYWxJZDolcywgc3BhdGlhbExheWVyOiVzXScsIGxvY2FsSWQsIHNwYXRpYWxMYXllcik7XG4gICAgICAgIGNvbnN0IHJ0cFNlbmRlciA9IHRoaXMuX21hcFNlbmRMb2NhbElkUnRwU2VuZGVyLmdldChsb2NhbElkKTtcbiAgICAgICAgaWYgKCFydHBTZW5kZXIpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Fzc29jaWF0ZWQgUlRDUnRwU2VuZGVyIG5vdCBmb3VuZCcpO1xuICAgICAgICBjb25zdCBwYXJhbWV0ZXJzID0gcnRwU2VuZGVyLmdldFBhcmFtZXRlcnMoKTtcbiAgICAgICAgcGFyYW1ldGVycy5lbmNvZGluZ3MuZm9yRWFjaCgoZW5jb2RpbmcsIGlkeCkgPT4ge1xuICAgICAgICAgICAgaWYgKGlkeCA8PSBzcGF0aWFsTGF5ZXIpXG4gICAgICAgICAgICAgICAgZW5jb2RpbmcuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBlbmNvZGluZy5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGF3YWl0IHJ0cFNlbmRlci5zZXRQYXJhbWV0ZXJzKHBhcmFtZXRlcnMpO1xuICAgIH1cbiAgICBhc3luYyBzZXRSdHBFbmNvZGluZ1BhcmFtZXRlcnMobG9jYWxJZCwgcGFyYW1zKSB7XG4gICAgICAgIHRoaXMuX2Fzc2VydFNlbmREaXJlY3Rpb24oKTtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdzZXRSdHBFbmNvZGluZ1BhcmFtZXRlcnMoKSBbbG9jYWxJZDolcywgcGFyYW1zOiVvXScsIGxvY2FsSWQsIHBhcmFtcyk7XG4gICAgICAgIGNvbnN0IHJ0cFNlbmRlciA9IHRoaXMuX21hcFNlbmRMb2NhbElkUnRwU2VuZGVyLmdldChsb2NhbElkKTtcbiAgICAgICAgaWYgKCFydHBTZW5kZXIpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Fzc29jaWF0ZWQgUlRDUnRwU2VuZGVyIG5vdCBmb3VuZCcpO1xuICAgICAgICBjb25zdCBwYXJhbWV0ZXJzID0gcnRwU2VuZGVyLmdldFBhcmFtZXRlcnMoKTtcbiAgICAgICAgcGFyYW1ldGVycy5lbmNvZGluZ3MuZm9yRWFjaCgoZW5jb2RpbmcsIGlkeCkgPT4ge1xuICAgICAgICAgICAgcGFyYW1ldGVycy5lbmNvZGluZ3NbaWR4XSA9IHsgLi4uZW5jb2RpbmcsIC4uLnBhcmFtcyB9O1xuICAgICAgICB9KTtcbiAgICAgICAgYXdhaXQgcnRwU2VuZGVyLnNldFBhcmFtZXRlcnMocGFyYW1ldGVycyk7XG4gICAgfVxuICAgIGFzeW5jIGdldFNlbmRlclN0YXRzKGxvY2FsSWQpIHtcbiAgICAgICAgdGhpcy5fYXNzZXJ0U2VuZERpcmVjdGlvbigpO1xuICAgICAgICBjb25zdCBydHBTZW5kZXIgPSB0aGlzLl9tYXBTZW5kTG9jYWxJZFJ0cFNlbmRlci5nZXQobG9jYWxJZCk7XG4gICAgICAgIGlmICghcnRwU2VuZGVyKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdhc3NvY2lhdGVkIFJUQ1J0cFNlbmRlciBub3QgZm91bmQnKTtcbiAgICAgICAgcmV0dXJuIHJ0cFNlbmRlci5nZXRTdGF0cygpO1xuICAgIH1cbiAgICBhc3luYyBzZW5kRGF0YUNoYW5uZWwoeyBvcmRlcmVkLCBtYXhQYWNrZXRMaWZlVGltZSwgbWF4UmV0cmFuc21pdHMsIGxhYmVsLCBwcm90b2NvbCwgcHJpb3JpdHkgfSkge1xuICAgICAgICB0aGlzLl9hc3NlcnRTZW5kRGlyZWN0aW9uKCk7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICBuZWdvdGlhdGVkOiB0cnVlLFxuICAgICAgICAgICAgaWQ6IHRoaXMuX25leHRTZW5kU2N0cFN0cmVhbUlkLFxuICAgICAgICAgICAgb3JkZXJlZCxcbiAgICAgICAgICAgIG1heFBhY2tldExpZmVUaW1lLFxuICAgICAgICAgICAgbWF4UmV0cmFuc21pdFRpbWU6IG1heFBhY2tldExpZmVUaW1lLFxuICAgICAgICAgICAgbWF4UmV0cmFuc21pdHMsXG4gICAgICAgICAgICBwcm90b2NvbCxcbiAgICAgICAgICAgIHByaW9yaXR5XG4gICAgICAgIH07XG4gICAgICAgIGxvZ2dlci5kZWJ1Zygnc2VuZERhdGFDaGFubmVsKCkgW29wdGlvbnM6JW9dJywgb3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IGRhdGFDaGFubmVsID0gdGhpcy5fcGMuY3JlYXRlRGF0YUNoYW5uZWwobGFiZWwsIG9wdGlvbnMpO1xuICAgICAgICAvLyBJbmNyZWFzZSBuZXh0IGlkLlxuICAgICAgICB0aGlzLl9uZXh0U2VuZFNjdHBTdHJlYW1JZCA9XG4gICAgICAgICAgICArK3RoaXMuX25leHRTZW5kU2N0cFN0cmVhbUlkICUgU0NUUF9OVU1fU1RSRUFNUy5NSVM7XG4gICAgICAgIC8vIElmIHRoaXMgaXMgdGhlIGZpcnN0IERhdGFDaGFubmVsIHdlIG5lZWQgdG8gY3JlYXRlIHRoZSBTRFAgYW5zd2VyIHdpdGhcbiAgICAgICAgLy8gbT1hcHBsaWNhdGlvbiBzZWN0aW9uLlxuICAgICAgICBpZiAoIXRoaXMuX2hhc0RhdGFDaGFubmVsTWVkaWFTZWN0aW9uKSB7XG4gICAgICAgICAgICBjb25zdCBvZmZlciA9IGF3YWl0IHRoaXMuX3BjLmNyZWF0ZU9mZmVyKCk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFNkcE9iamVjdCA9IHNkcFRyYW5zZm9ybS5wYXJzZShvZmZlci5zZHApO1xuICAgICAgICAgICAgY29uc3Qgb2ZmZXJNZWRpYU9iamVjdCA9IGxvY2FsU2RwT2JqZWN0Lm1lZGlhXG4gICAgICAgICAgICAgICAgLmZpbmQoKG0pID0+IG0udHlwZSA9PT0gJ2FwcGxpY2F0aW9uJyk7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX3RyYW5zcG9ydFJlYWR5KVxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuX3NldHVwVHJhbnNwb3J0KHsgbG9jYWxEdGxzUm9sZTogJ3NlcnZlcicsIGxvY2FsU2RwT2JqZWN0IH0pO1xuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdzZW5kRGF0YUNoYW5uZWwoKSB8IGNhbGxpbmcgcGMuc2V0TG9jYWxEZXNjcmlwdGlvbigpIFtvZmZlcjolb10nLCBvZmZlcik7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLl9wYy5zZXRMb2NhbERlc2NyaXB0aW9uKG9mZmVyKTtcbiAgICAgICAgICAgIHRoaXMuX3JlbW90ZVNkcC5zZW5kU2N0cEFzc29jaWF0aW9uKHsgb2ZmZXJNZWRpYU9iamVjdCB9KTtcbiAgICAgICAgICAgIGNvbnN0IGFuc3dlciA9IHsgdHlwZTogJ2Fuc3dlcicsIHNkcDogdGhpcy5fcmVtb3RlU2RwLmdldFNkcCgpIH07XG4gICAgICAgICAgICBsb2dnZXIuZGVidWcoJ3NlbmREYXRhQ2hhbm5lbCgpIHwgY2FsbGluZyBwYy5zZXRSZW1vdGVEZXNjcmlwdGlvbigpIFthbnN3ZXI6JW9dJywgYW5zd2VyKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX3BjLnNldFJlbW90ZURlc2NyaXB0aW9uKGFuc3dlcik7XG4gICAgICAgICAgICB0aGlzLl9oYXNEYXRhQ2hhbm5lbE1lZGlhU2VjdGlvbiA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2N0cFN0cmVhbVBhcmFtZXRlcnMgPSB7XG4gICAgICAgICAgICBzdHJlYW1JZDogb3B0aW9ucy5pZCxcbiAgICAgICAgICAgIG9yZGVyZWQ6IG9wdGlvbnMub3JkZXJlZCxcbiAgICAgICAgICAgIG1heFBhY2tldExpZmVUaW1lOiBvcHRpb25zLm1heFBhY2tldExpZmVUaW1lLFxuICAgICAgICAgICAgbWF4UmV0cmFuc21pdHM6IG9wdGlvbnMubWF4UmV0cmFuc21pdHNcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHsgZGF0YUNoYW5uZWwsIHNjdHBTdHJlYW1QYXJhbWV0ZXJzIH07XG4gICAgfVxuICAgIGFzeW5jIHJlY2VpdmUoeyB0cmFja0lkLCBraW5kLCBydHBQYXJhbWV0ZXJzIH0pIHtcbiAgICAgICAgdGhpcy5fYXNzZXJ0UmVjdkRpcmVjdGlvbigpO1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3JlY2VpdmUoKSBbdHJhY2tJZDolcywga2luZDolc10nLCB0cmFja0lkLCBraW5kKTtcbiAgICAgICAgY29uc3QgbG9jYWxJZCA9IHRyYWNrSWQ7XG4gICAgICAgIGNvbnN0IG1pZCA9IGtpbmQ7XG4gICAgICAgIHRoaXMuX3JlbW90ZVNkcC5yZWNlaXZlKHtcbiAgICAgICAgICAgIG1pZCxcbiAgICAgICAgICAgIGtpbmQsXG4gICAgICAgICAgICBvZmZlclJ0cFBhcmFtZXRlcnM6IHJ0cFBhcmFtZXRlcnMsXG4gICAgICAgICAgICBzdHJlYW1JZDogcnRwUGFyYW1ldGVycy5ydGNwLmNuYW1lLFxuICAgICAgICAgICAgdHJhY2tJZFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3Qgb2ZmZXIgPSB7IHR5cGU6ICdvZmZlcicsIHNkcDogdGhpcy5fcmVtb3RlU2RwLmdldFNkcCgpIH07XG4gICAgICAgIGxvZ2dlci5kZWJ1ZygncmVjZWl2ZSgpIHwgY2FsbGluZyBwYy5zZXRSZW1vdGVEZXNjcmlwdGlvbigpIFtvZmZlcjolb10nLCBvZmZlcik7XG4gICAgICAgIGF3YWl0IHRoaXMuX3BjLnNldFJlbW90ZURlc2NyaXB0aW9uKG9mZmVyKTtcbiAgICAgICAgbGV0IGFuc3dlciA9IGF3YWl0IHRoaXMuX3BjLmNyZWF0ZUFuc3dlcigpO1xuICAgICAgICBjb25zdCBsb2NhbFNkcE9iamVjdCA9IHNkcFRyYW5zZm9ybS5wYXJzZShhbnN3ZXIuc2RwKTtcbiAgICAgICAgY29uc3QgYW5zd2VyTWVkaWFPYmplY3QgPSBsb2NhbFNkcE9iamVjdC5tZWRpYVxuICAgICAgICAgICAgLmZpbmQoKG0pID0+IFN0cmluZyhtLm1pZCkgPT09IG1pZCk7XG4gICAgICAgIC8vIE1heSBuZWVkIHRvIG1vZGlmeSBjb2RlYyBwYXJhbWV0ZXJzIGluIHRoZSBhbnN3ZXIgYmFzZWQgb24gY29kZWNcbiAgICAgICAgLy8gcGFyYW1ldGVycyBpbiB0aGUgb2ZmZXIuXG4gICAgICAgIHNkcENvbW1vblV0aWxzLmFwcGx5Q29kZWNQYXJhbWV0ZXJzKHtcbiAgICAgICAgICAgIG9mZmVyUnRwUGFyYW1ldGVyczogcnRwUGFyYW1ldGVycyxcbiAgICAgICAgICAgIGFuc3dlck1lZGlhT2JqZWN0XG4gICAgICAgIH0pO1xuICAgICAgICBhbnN3ZXIgPSB7IHR5cGU6ICdhbnN3ZXInLCBzZHA6IHNkcFRyYW5zZm9ybS53cml0ZShsb2NhbFNkcE9iamVjdCkgfTtcbiAgICAgICAgaWYgKCF0aGlzLl90cmFuc3BvcnRSZWFkeSlcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX3NldHVwVHJhbnNwb3J0KHsgbG9jYWxEdGxzUm9sZTogJ2NsaWVudCcsIGxvY2FsU2RwT2JqZWN0IH0pO1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3JlY2VpdmUoKSB8IGNhbGxpbmcgcGMuc2V0TG9jYWxEZXNjcmlwdGlvbigpIFthbnN3ZXI6JW9dJywgYW5zd2VyKTtcbiAgICAgICAgYXdhaXQgdGhpcy5fcGMuc2V0TG9jYWxEZXNjcmlwdGlvbihhbnN3ZXIpO1xuICAgICAgICBjb25zdCBydHBSZWNlaXZlciA9IHRoaXMuX3BjLmdldFJlY2VpdmVycygpXG4gICAgICAgICAgICAuZmluZCgocikgPT4gci50cmFjayAmJiByLnRyYWNrLmlkID09PSBsb2NhbElkKTtcbiAgICAgICAgaWYgKCFydHBSZWNlaXZlcilcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbmV3IFJUQ1J0cFJlY2VpdmVyIG5vdCcpO1xuICAgICAgICAvLyBJbnNlcnQgaW50byB0aGUgbWFwLlxuICAgICAgICB0aGlzLl9tYXBSZWN2TG9jYWxJZEluZm8uc2V0KGxvY2FsSWQsIHsgbWlkLCBydHBQYXJhbWV0ZXJzLCBydHBSZWNlaXZlciB9KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxvY2FsSWQsXG4gICAgICAgICAgICB0cmFjazogcnRwUmVjZWl2ZXIudHJhY2ssXG4gICAgICAgICAgICBydHBSZWNlaXZlclxuICAgICAgICB9O1xuICAgIH1cbiAgICBhc3luYyBzdG9wUmVjZWl2aW5nKGxvY2FsSWQpIHtcbiAgICAgICAgdGhpcy5fYXNzZXJ0UmVjdkRpcmVjdGlvbigpO1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3N0b3BSZWNlaXZpbmcoKSBbbG9jYWxJZDolc10nLCBsb2NhbElkKTtcbiAgICAgICAgY29uc3QgeyBtaWQsIHJ0cFBhcmFtZXRlcnMgfSA9IHRoaXMuX21hcFJlY3ZMb2NhbElkSW5mby5nZXQobG9jYWxJZCkgfHwge307XG4gICAgICAgIC8vIFJlbW92ZSBmcm9tIHRoZSBtYXAuXG4gICAgICAgIHRoaXMuX21hcFJlY3ZMb2NhbElkSW5mby5kZWxldGUobG9jYWxJZCk7XG4gICAgICAgIHRoaXMuX3JlbW90ZVNkcC5wbGFuQlN0b3BSZWNlaXZpbmcoeyBtaWQ6IG1pZCwgb2ZmZXJSdHBQYXJhbWV0ZXJzOiBydHBQYXJhbWV0ZXJzIH0pO1xuICAgICAgICBjb25zdCBvZmZlciA9IHsgdHlwZTogJ29mZmVyJywgc2RwOiB0aGlzLl9yZW1vdGVTZHAuZ2V0U2RwKCkgfTtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdzdG9wUmVjZWl2aW5nKCkgfCBjYWxsaW5nIHBjLnNldFJlbW90ZURlc2NyaXB0aW9uKCkgW29mZmVyOiVvXScsIG9mZmVyKTtcbiAgICAgICAgYXdhaXQgdGhpcy5fcGMuc2V0UmVtb3RlRGVzY3JpcHRpb24ob2ZmZXIpO1xuICAgICAgICBjb25zdCBhbnN3ZXIgPSBhd2FpdCB0aGlzLl9wYy5jcmVhdGVBbnN3ZXIoKTtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdzdG9wUmVjZWl2aW5nKCkgfCBjYWxsaW5nIHBjLnNldExvY2FsRGVzY3JpcHRpb24oKSBbYW5zd2VyOiVvXScsIGFuc3dlcik7XG4gICAgICAgIGF3YWl0IHRoaXMuX3BjLnNldExvY2FsRGVzY3JpcHRpb24oYW5zd2VyKTtcbiAgICB9XG4gICAgYXN5bmMgZ2V0UmVjZWl2ZXJTdGF0cyhsb2NhbElkKSB7XG4gICAgICAgIHRoaXMuX2Fzc2VydFJlY3ZEaXJlY3Rpb24oKTtcbiAgICAgICAgY29uc3QgeyBydHBSZWNlaXZlciB9ID0gdGhpcy5fbWFwUmVjdkxvY2FsSWRJbmZvLmdldChsb2NhbElkKSB8fCB7fTtcbiAgICAgICAgaWYgKCFydHBSZWNlaXZlcilcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYXNzb2NpYXRlZCBSVENSdHBSZWNlaXZlciBub3QgZm91bmQnKTtcbiAgICAgICAgcmV0dXJuIHJ0cFJlY2VpdmVyLmdldFN0YXRzKCk7XG4gICAgfVxuICAgIGFzeW5jIHJlY2VpdmVEYXRhQ2hhbm5lbCh7IHNjdHBTdHJlYW1QYXJhbWV0ZXJzLCBsYWJlbCwgcHJvdG9jb2wgfSkge1xuICAgICAgICB0aGlzLl9hc3NlcnRSZWN2RGlyZWN0aW9uKCk7XG4gICAgICAgIGNvbnN0IHsgc3RyZWFtSWQsIG9yZGVyZWQsIG1heFBhY2tldExpZmVUaW1lLCBtYXhSZXRyYW5zbWl0cyB9ID0gc2N0cFN0cmVhbVBhcmFtZXRlcnM7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICBuZWdvdGlhdGVkOiB0cnVlLFxuICAgICAgICAgICAgaWQ6IHN0cmVhbUlkLFxuICAgICAgICAgICAgb3JkZXJlZCxcbiAgICAgICAgICAgIG1heFBhY2tldExpZmVUaW1lLFxuICAgICAgICAgICAgbWF4UmV0cmFuc21pdFRpbWU6IG1heFBhY2tldExpZmVUaW1lLFxuICAgICAgICAgICAgbWF4UmV0cmFuc21pdHMsXG4gICAgICAgICAgICBwcm90b2NvbFxuICAgICAgICB9O1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3JlY2VpdmVEYXRhQ2hhbm5lbCgpIFtvcHRpb25zOiVvXScsIG9wdGlvbnMpO1xuICAgICAgICBjb25zdCBkYXRhQ2hhbm5lbCA9IHRoaXMuX3BjLmNyZWF0ZURhdGFDaGFubmVsKGxhYmVsLCBvcHRpb25zKTtcbiAgICAgICAgLy8gSWYgdGhpcyBpcyB0aGUgZmlyc3QgRGF0YUNoYW5uZWwgd2UgbmVlZCB0byBjcmVhdGUgdGhlIFNEUCBvZmZlciB3aXRoXG4gICAgICAgIC8vIG09YXBwbGljYXRpb24gc2VjdGlvbi5cbiAgICAgICAgaWYgKCF0aGlzLl9oYXNEYXRhQ2hhbm5lbE1lZGlhU2VjdGlvbikge1xuICAgICAgICAgICAgdGhpcy5fcmVtb3RlU2RwLnJlY2VpdmVTY3RwQXNzb2NpYXRpb24oeyBvbGREYXRhQ2hhbm5lbFNwZWM6IHRydWUgfSk7XG4gICAgICAgICAgICBjb25zdCBvZmZlciA9IHsgdHlwZTogJ29mZmVyJywgc2RwOiB0aGlzLl9yZW1vdGVTZHAuZ2V0U2RwKCkgfTtcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZygncmVjZWl2ZURhdGFDaGFubmVsKCkgfCBjYWxsaW5nIHBjLnNldFJlbW90ZURlc2NyaXB0aW9uKCkgW29mZmVyOiVvXScsIG9mZmVyKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX3BjLnNldFJlbW90ZURlc2NyaXB0aW9uKG9mZmVyKTtcbiAgICAgICAgICAgIGNvbnN0IGFuc3dlciA9IGF3YWl0IHRoaXMuX3BjLmNyZWF0ZUFuc3dlcigpO1xuICAgICAgICAgICAgaWYgKCF0aGlzLl90cmFuc3BvcnRSZWFkeSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsU2RwT2JqZWN0ID0gc2RwVHJhbnNmb3JtLnBhcnNlKGFuc3dlci5zZHApO1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuX3NldHVwVHJhbnNwb3J0KHsgbG9jYWxEdGxzUm9sZTogJ2NsaWVudCcsIGxvY2FsU2RwT2JqZWN0IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdyZWNlaXZlRGF0YUNoYW5uZWwoKSB8IGNhbGxpbmcgcGMuc2V0UmVtb3RlRGVzY3JpcHRpb24oKSBbYW5zd2VyOiVvXScsIGFuc3dlcik7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLl9wYy5zZXRMb2NhbERlc2NyaXB0aW9uKGFuc3dlcik7XG4gICAgICAgICAgICB0aGlzLl9oYXNEYXRhQ2hhbm5lbE1lZGlhU2VjdGlvbiA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgZGF0YUNoYW5uZWwgfTtcbiAgICB9XG4gICAgYXN5bmMgX3NldHVwVHJhbnNwb3J0KHsgbG9jYWxEdGxzUm9sZSwgbG9jYWxTZHBPYmplY3QgfSkge1xuICAgICAgICBpZiAoIWxvY2FsU2RwT2JqZWN0KVxuICAgICAgICAgICAgbG9jYWxTZHBPYmplY3QgPSBzZHBUcmFuc2Zvcm0ucGFyc2UodGhpcy5fcGMubG9jYWxEZXNjcmlwdGlvbi5zZHApO1xuICAgICAgICAvLyBHZXQgb3VyIGxvY2FsIERUTFMgcGFyYW1ldGVycy5cbiAgICAgICAgY29uc3QgZHRsc1BhcmFtZXRlcnMgPSBzZHBDb21tb25VdGlscy5leHRyYWN0RHRsc1BhcmFtZXRlcnMoeyBzZHBPYmplY3Q6IGxvY2FsU2RwT2JqZWN0IH0pO1xuICAgICAgICAvLyBTZXQgb3VyIERUTFMgcm9sZS5cbiAgICAgICAgZHRsc1BhcmFtZXRlcnMucm9sZSA9IGxvY2FsRHRsc1JvbGU7XG4gICAgICAgIC8vIFVwZGF0ZSB0aGUgcmVtb3RlIERUTFMgcm9sZSBpbiB0aGUgU0RQLlxuICAgICAgICB0aGlzLl9yZW1vdGVTZHAudXBkYXRlRHRsc1JvbGUobG9jYWxEdGxzUm9sZSA9PT0gJ2NsaWVudCcgPyAnc2VydmVyJyA6ICdjbGllbnQnKTtcbiAgICAgICAgLy8gTmVlZCB0byB0ZWxsIHRoZSByZW1vdGUgdHJhbnNwb3J0IGFib3V0IG91ciBwYXJhbWV0ZXJzLlxuICAgICAgICBhd2FpdCB0aGlzLnNhZmVFbWl0QXNQcm9taXNlKCdAY29ubmVjdCcsIHsgZHRsc1BhcmFtZXRlcnMgfSk7XG4gICAgICAgIHRoaXMuX3RyYW5zcG9ydFJlYWR5ID0gdHJ1ZTtcbiAgICB9XG4gICAgX2Fzc2VydFNlbmREaXJlY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLl9kaXJlY3Rpb24gIT09ICdzZW5kJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdtZXRob2QgY2FuIGp1c3QgYmUgY2FsbGVkIGZvciBoYW5kbGVycyB3aXRoIFwic2VuZFwiIGRpcmVjdGlvbicpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9hc3NlcnRSZWN2RGlyZWN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5fZGlyZWN0aW9uICE9PSAncmVjdicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbWV0aG9kIGNhbiBqdXN0IGJlIGNhbGxlZCBmb3IgaGFuZGxlcnMgd2l0aCBcInJlY3ZcIiBkaXJlY3Rpb24nKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuQ2hyb21lNjcgPSBDaHJvbWU2NztcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3Qgc2RwVHJhbnNmb3JtID0gcmVxdWlyZShcInNkcC10cmFuc2Zvcm1cIik7XG5jb25zdCBMb2dnZXJfMSA9IHJlcXVpcmUoXCIuLi9Mb2dnZXJcIik7XG5jb25zdCBlcnJvcnNfMSA9IHJlcXVpcmUoXCIuLi9lcnJvcnNcIik7XG5jb25zdCB1dGlscyA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcbmNvbnN0IG9ydGMgPSByZXF1aXJlKFwiLi4vb3J0Y1wiKTtcbmNvbnN0IHNkcENvbW1vblV0aWxzID0gcmVxdWlyZShcIi4vc2RwL2NvbW1vblV0aWxzXCIpO1xuY29uc3Qgc2RwUGxhbkJVdGlscyA9IHJlcXVpcmUoXCIuL3NkcC9wbGFuQlV0aWxzXCIpO1xuY29uc3QgSGFuZGxlckludGVyZmFjZV8xID0gcmVxdWlyZShcIi4vSGFuZGxlckludGVyZmFjZVwiKTtcbmNvbnN0IFJlbW90ZVNkcF8xID0gcmVxdWlyZShcIi4vc2RwL1JlbW90ZVNkcFwiKTtcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXJfMS5Mb2dnZXIoJ0Nocm9tZTU1Jyk7XG5jb25zdCBTQ1RQX05VTV9TVFJFQU1TID0geyBPUzogMTAyNCwgTUlTOiAxMDI0IH07XG5jbGFzcyBDaHJvbWU1NSBleHRlbmRzIEhhbmRsZXJJbnRlcmZhY2VfMS5IYW5kbGVySW50ZXJmYWNlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgLy8gTG9jYWwgc3RyZWFtIGZvciBzZW5kaW5nLlxuICAgICAgICB0aGlzLl9zZW5kU3RyZWFtID0gbmV3IE1lZGlhU3RyZWFtKCk7XG4gICAgICAgIC8vIE1hcCBvZiBzZW5kaW5nIE1lZGlhU3RyZWFtVHJhY2tzIGluZGV4ZWQgYnkgbG9jYWxJZC5cbiAgICAgICAgdGhpcy5fbWFwU2VuZExvY2FsSWRUcmFjayA9IG5ldyBNYXAoKTtcbiAgICAgICAgLy8gTmV4dCBzZW5kaW5nIGxvY2FsSWQuXG4gICAgICAgIHRoaXMuX25leHRTZW5kTG9jYWxJZCA9IDA7XG4gICAgICAgIC8vIE1hcCBvZiBNSUQsIFJUUCBwYXJhbWV0ZXJzIGFuZCBSVENSdHBSZWNlaXZlciBpbmRleGVkIGJ5IGxvY2FsIGlkLlxuICAgICAgICAvLyBWYWx1ZSBpcyBhbiBPYmplY3Qgd2l0aCBtaWQsIHJ0cFBhcmFtZXRlcnMgYW5kIHJ0cFJlY2VpdmVyLlxuICAgICAgICB0aGlzLl9tYXBSZWN2TG9jYWxJZEluZm8gPSBuZXcgTWFwKCk7XG4gICAgICAgIC8vIFdoZXRoZXIgYSBEYXRhQ2hhbm5lbCBtPWFwcGxpY2F0aW9uIHNlY3Rpb24gaGFzIGJlZW4gY3JlYXRlZC5cbiAgICAgICAgdGhpcy5faGFzRGF0YUNoYW5uZWxNZWRpYVNlY3Rpb24gPSBmYWxzZTtcbiAgICAgICAgLy8gU2VuZGluZyBEYXRhQ2hhbm5lbCBpZCB2YWx1ZSBjb3VudGVyLiBJbmNyZW1lbnRlZCBmb3IgZWFjaCBuZXcgRGF0YUNoYW5uZWwuXG4gICAgICAgIHRoaXMuX25leHRTZW5kU2N0cFN0cmVhbUlkID0gMDtcbiAgICAgICAgLy8gR290IHRyYW5zcG9ydCBsb2NhbCBhbmQgcmVtb3RlIHBhcmFtZXRlcnMuXG4gICAgICAgIHRoaXMuX3RyYW5zcG9ydFJlYWR5ID0gZmFsc2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmYWN0b3J5IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIHN0YXRpYyBjcmVhdGVGYWN0b3J5KCkge1xuICAgICAgICByZXR1cm4gKCkgPT4gbmV3IENocm9tZTU1KCk7XG4gICAgfVxuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gJ0Nocm9tZTU1JztcbiAgICB9XG4gICAgY2xvc2UoKSB7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZygnY2xvc2UoKScpO1xuICAgICAgICAvLyBDbG9zZSBSVENQZWVyQ29ubmVjdGlvbi5cbiAgICAgICAgaWYgKHRoaXMuX3BjKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3BjLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHsgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIGdldE5hdGl2ZVJ0cENhcGFiaWxpdGllcygpIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdnZXROYXRpdmVSdHBDYXBhYmlsaXRpZXMoKScpO1xuICAgICAgICBjb25zdCBwYyA9IG5ldyBSVENQZWVyQ29ubmVjdGlvbih7XG4gICAgICAgICAgICBpY2VTZXJ2ZXJzOiBbXSxcbiAgICAgICAgICAgIGljZVRyYW5zcG9ydFBvbGljeTogJ2FsbCcsXG4gICAgICAgICAgICBidW5kbGVQb2xpY3k6ICdtYXgtYnVuZGxlJyxcbiAgICAgICAgICAgIHJ0Y3BNdXhQb2xpY3k6ICdyZXF1aXJlJyxcbiAgICAgICAgICAgIHNkcFNlbWFudGljczogJ3BsYW4tYidcbiAgICAgICAgfSk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBvZmZlciA9IGF3YWl0IHBjLmNyZWF0ZU9mZmVyKHtcbiAgICAgICAgICAgICAgICBvZmZlclRvUmVjZWl2ZUF1ZGlvOiB0cnVlLFxuICAgICAgICAgICAgICAgIG9mZmVyVG9SZWNlaXZlVmlkZW86IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBwYy5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7IH1cbiAgICAgICAgICAgIGNvbnN0IHNkcE9iamVjdCA9IHNkcFRyYW5zZm9ybS5wYXJzZShvZmZlci5zZHApO1xuICAgICAgICAgICAgY29uc3QgbmF0aXZlUnRwQ2FwYWJpbGl0aWVzID0gc2RwQ29tbW9uVXRpbHMuZXh0cmFjdFJ0cENhcGFiaWxpdGllcyh7IHNkcE9iamVjdCB9KTtcbiAgICAgICAgICAgIHJldHVybiBuYXRpdmVSdHBDYXBhYmlsaXRpZXM7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHBjLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IyKSB7IH1cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIGdldE5hdGl2ZVNjdHBDYXBhYmlsaXRpZXMoKSB7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZygnZ2V0TmF0aXZlU2N0cENhcGFiaWxpdGllcygpJyk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBudW1TdHJlYW1zOiBTQ1RQX05VTV9TVFJFQU1TXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJ1bih7IGRpcmVjdGlvbiwgaWNlUGFyYW1ldGVycywgaWNlQ2FuZGlkYXRlcywgZHRsc1BhcmFtZXRlcnMsIHNjdHBQYXJhbWV0ZXJzLCBpY2VTZXJ2ZXJzLCBpY2VUcmFuc3BvcnRQb2xpY3ksIGFkZGl0aW9uYWxTZXR0aW5ncywgcHJvcHJpZXRhcnlDb25zdHJhaW50cywgZXh0ZW5kZWRSdHBDYXBhYmlsaXRpZXMgfSkge1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3J1bigpJyk7XG4gICAgICAgIHRoaXMuX2RpcmVjdGlvbiA9IGRpcmVjdGlvbjtcbiAgICAgICAgdGhpcy5fcmVtb3RlU2RwID0gbmV3IFJlbW90ZVNkcF8xLlJlbW90ZVNkcCh7XG4gICAgICAgICAgICBpY2VQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgaWNlQ2FuZGlkYXRlcyxcbiAgICAgICAgICAgIGR0bHNQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgc2N0cFBhcmFtZXRlcnMsXG4gICAgICAgICAgICBwbGFuQjogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fc2VuZGluZ1J0cFBhcmFtZXRlcnNCeUtpbmQgPVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGF1ZGlvOiBvcnRjLmdldFNlbmRpbmdSdHBQYXJhbWV0ZXJzKCdhdWRpbycsIGV4dGVuZGVkUnRwQ2FwYWJpbGl0aWVzKSxcbiAgICAgICAgICAgICAgICB2aWRlbzogb3J0Yy5nZXRTZW5kaW5nUnRwUGFyYW1ldGVycygndmlkZW8nLCBleHRlbmRlZFJ0cENhcGFiaWxpdGllcylcbiAgICAgICAgICAgIH07XG4gICAgICAgIHRoaXMuX3NlbmRpbmdSZW1vdGVSdHBQYXJhbWV0ZXJzQnlLaW5kID1cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBhdWRpbzogb3J0Yy5nZXRTZW5kaW5nUmVtb3RlUnRwUGFyYW1ldGVycygnYXVkaW8nLCBleHRlbmRlZFJ0cENhcGFiaWxpdGllcyksXG4gICAgICAgICAgICAgICAgdmlkZW86IG9ydGMuZ2V0U2VuZGluZ1JlbW90ZVJ0cFBhcmFtZXRlcnMoJ3ZpZGVvJywgZXh0ZW5kZWRSdHBDYXBhYmlsaXRpZXMpXG4gICAgICAgICAgICB9O1xuICAgICAgICB0aGlzLl9wYyA9IG5ldyBSVENQZWVyQ29ubmVjdGlvbih7XG4gICAgICAgICAgICBpY2VTZXJ2ZXJzOiBpY2VTZXJ2ZXJzIHx8IFtdLFxuICAgICAgICAgICAgaWNlVHJhbnNwb3J0UG9saWN5OiBpY2VUcmFuc3BvcnRQb2xpY3kgfHwgJ2FsbCcsXG4gICAgICAgICAgICBidW5kbGVQb2xpY3k6ICdtYXgtYnVuZGxlJyxcbiAgICAgICAgICAgIHJ0Y3BNdXhQb2xpY3k6ICdyZXF1aXJlJyxcbiAgICAgICAgICAgIHNkcFNlbWFudGljczogJ3BsYW4tYicsXG4gICAgICAgICAgICAuLi5hZGRpdGlvbmFsU2V0dGluZ3NcbiAgICAgICAgfSwgcHJvcHJpZXRhcnlDb25zdHJhaW50cyk7XG4gICAgICAgIC8vIEhhbmRsZSBSVENQZWVyQ29ubmVjdGlvbiBjb25uZWN0aW9uIHN0YXR1cy5cbiAgICAgICAgdGhpcy5fcGMuYWRkRXZlbnRMaXN0ZW5lcignaWNlY29ubmVjdGlvbnN0YXRlY2hhbmdlJywgKCkgPT4ge1xuICAgICAgICAgICAgc3dpdGNoICh0aGlzLl9wYy5pY2VDb25uZWN0aW9uU3RhdGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdjaGVja2luZyc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnQGNvbm5lY3Rpb25zdGF0ZWNoYW5nZScsICdjb25uZWN0aW5nJyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2Nvbm5lY3RlZCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnY29tcGxldGVkJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdAY29ubmVjdGlvbnN0YXRlY2hhbmdlJywgJ2Nvbm5lY3RlZCcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdmYWlsZWQnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ0Bjb25uZWN0aW9uc3RhdGVjaGFuZ2UnLCAnZmFpbGVkJyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2Rpc2Nvbm5lY3RlZCc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnQGNvbm5lY3Rpb25zdGF0ZWNoYW5nZScsICdkaXNjb25uZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnY2xvc2VkJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdAY29ubmVjdGlvbnN0YXRlY2hhbmdlJywgJ2Nsb3NlZCcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFzeW5jIHVwZGF0ZUljZVNlcnZlcnMoaWNlU2VydmVycykge1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3VwZGF0ZUljZVNlcnZlcnMoKScpO1xuICAgICAgICBjb25zdCBjb25maWd1cmF0aW9uID0gdGhpcy5fcGMuZ2V0Q29uZmlndXJhdGlvbigpO1xuICAgICAgICBjb25maWd1cmF0aW9uLmljZVNlcnZlcnMgPSBpY2VTZXJ2ZXJzO1xuICAgICAgICB0aGlzLl9wYy5zZXRDb25maWd1cmF0aW9uKGNvbmZpZ3VyYXRpb24pO1xuICAgIH1cbiAgICBhc3luYyByZXN0YXJ0SWNlKGljZVBhcmFtZXRlcnMpIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdyZXN0YXJ0SWNlKCknKTtcbiAgICAgICAgLy8gUHJvdmlkZSB0aGUgcmVtb3RlIFNEUCBoYW5kbGVyIHdpdGggbmV3IHJlbW90ZSBJQ0UgcGFyYW1ldGVycy5cbiAgICAgICAgdGhpcy5fcmVtb3RlU2RwLnVwZGF0ZUljZVBhcmFtZXRlcnMoaWNlUGFyYW1ldGVycyk7XG4gICAgICAgIGlmICghdGhpcy5fdHJhbnNwb3J0UmVhZHkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmICh0aGlzLl9kaXJlY3Rpb24gPT09ICdzZW5kJykge1xuICAgICAgICAgICAgY29uc3Qgb2ZmZXIgPSBhd2FpdCB0aGlzLl9wYy5jcmVhdGVPZmZlcih7IGljZVJlc3RhcnQ6IHRydWUgfSk7XG4gICAgICAgICAgICBsb2dnZXIuZGVidWcoJ3Jlc3RhcnRJY2UoKSB8IGNhbGxpbmcgcGMuc2V0TG9jYWxEZXNjcmlwdGlvbigpIFtvZmZlcjolb10nLCBvZmZlcik7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLl9wYy5zZXRMb2NhbERlc2NyaXB0aW9uKG9mZmVyKTtcbiAgICAgICAgICAgIGNvbnN0IGFuc3dlciA9IHsgdHlwZTogJ2Fuc3dlcicsIHNkcDogdGhpcy5fcmVtb3RlU2RwLmdldFNkcCgpIH07XG4gICAgICAgICAgICBsb2dnZXIuZGVidWcoJ3Jlc3RhcnRJY2UoKSB8IGNhbGxpbmcgcGMuc2V0UmVtb3RlRGVzY3JpcHRpb24oKSBbYW5zd2VyOiVvXScsIGFuc3dlcik7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLl9wYy5zZXRSZW1vdGVEZXNjcmlwdGlvbihhbnN3ZXIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3Qgb2ZmZXIgPSB7IHR5cGU6ICdvZmZlcicsIHNkcDogdGhpcy5fcmVtb3RlU2RwLmdldFNkcCgpIH07XG4gICAgICAgICAgICBsb2dnZXIuZGVidWcoJ3Jlc3RhcnRJY2UoKSB8IGNhbGxpbmcgcGMuc2V0UmVtb3RlRGVzY3JpcHRpb24oKSBbb2ZmZXI6JW9dJywgb2ZmZXIpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5fcGMuc2V0UmVtb3RlRGVzY3JpcHRpb24ob2ZmZXIpO1xuICAgICAgICAgICAgY29uc3QgYW5zd2VyID0gYXdhaXQgdGhpcy5fcGMuY3JlYXRlQW5zd2VyKCk7XG4gICAgICAgICAgICBsb2dnZXIuZGVidWcoJ3Jlc3RhcnRJY2UoKSB8IGNhbGxpbmcgcGMuc2V0TG9jYWxEZXNjcmlwdGlvbigpIFthbnN3ZXI6JW9dJywgYW5zd2VyKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX3BjLnNldExvY2FsRGVzY3JpcHRpb24oYW5zd2VyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBnZXRUcmFuc3BvcnRTdGF0cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BjLmdldFN0YXRzKCk7XG4gICAgfVxuICAgIGFzeW5jIHNlbmQoeyB0cmFjaywgZW5jb2RpbmdzLCBjb2RlY09wdGlvbnMsIGNvZGVjIH0pIHtcbiAgICAgICAgdGhpcy5fYXNzZXJ0U2VuZERpcmVjdGlvbigpO1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3NlbmQoKSBba2luZDolcywgdHJhY2suaWQ6JXNdJywgdHJhY2sua2luZCwgdHJhY2suaWQpO1xuICAgICAgICBpZiAoY29kZWMpIHtcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKCdzZW5kKCkgfCBjb2RlYyBzZWxlY3Rpb24gaXMgbm90IGF2YWlsYWJsZSBpbiAlcyBoYW5kbGVyJywgdGhpcy5uYW1lKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zZW5kU3RyZWFtLmFkZFRyYWNrKHRyYWNrKTtcbiAgICAgICAgdGhpcy5fcGMuYWRkU3RyZWFtKHRoaXMuX3NlbmRTdHJlYW0pO1xuICAgICAgICBsZXQgb2ZmZXIgPSBhd2FpdCB0aGlzLl9wYy5jcmVhdGVPZmZlcigpO1xuICAgICAgICBsZXQgbG9jYWxTZHBPYmplY3QgPSBzZHBUcmFuc2Zvcm0ucGFyc2Uob2ZmZXIuc2RwKTtcbiAgICAgICAgbGV0IG9mZmVyTWVkaWFPYmplY3Q7XG4gICAgICAgIGNvbnN0IHNlbmRpbmdSdHBQYXJhbWV0ZXJzID0gdXRpbHMuY2xvbmUodGhpcy5fc2VuZGluZ1J0cFBhcmFtZXRlcnNCeUtpbmRbdHJhY2sua2luZF0pO1xuICAgICAgICBzZW5kaW5nUnRwUGFyYW1ldGVycy5jb2RlY3MgPVxuICAgICAgICAgICAgb3J0Yy5yZWR1Y2VDb2RlY3Moc2VuZGluZ1J0cFBhcmFtZXRlcnMuY29kZWNzKTtcbiAgICAgICAgY29uc3Qgc2VuZGluZ1JlbW90ZVJ0cFBhcmFtZXRlcnMgPSB1dGlscy5jbG9uZSh0aGlzLl9zZW5kaW5nUmVtb3RlUnRwUGFyYW1ldGVyc0J5S2luZFt0cmFjay5raW5kXSk7XG4gICAgICAgIHNlbmRpbmdSZW1vdGVSdHBQYXJhbWV0ZXJzLmNvZGVjcyA9XG4gICAgICAgICAgICBvcnRjLnJlZHVjZUNvZGVjcyhzZW5kaW5nUmVtb3RlUnRwUGFyYW1ldGVycy5jb2RlY3MpO1xuICAgICAgICBpZiAoIXRoaXMuX3RyYW5zcG9ydFJlYWR5KVxuICAgICAgICAgICAgYXdhaXQgdGhpcy5fc2V0dXBUcmFuc3BvcnQoeyBsb2NhbER0bHNSb2xlOiAnc2VydmVyJywgbG9jYWxTZHBPYmplY3QgfSk7XG4gICAgICAgIGlmICh0cmFjay5raW5kID09PSAndmlkZW8nICYmIGVuY29kaW5ncyAmJiBlbmNvZGluZ3MubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdzZW5kKCkgfCBlbmFibGluZyBzaW11bGNhc3QnKTtcbiAgICAgICAgICAgIGxvY2FsU2RwT2JqZWN0ID0gc2RwVHJhbnNmb3JtLnBhcnNlKG9mZmVyLnNkcCk7XG4gICAgICAgICAgICBvZmZlck1lZGlhT2JqZWN0ID0gbG9jYWxTZHBPYmplY3QubWVkaWEuZmluZCgobSkgPT4gbS50eXBlID09PSAndmlkZW8nKTtcbiAgICAgICAgICAgIHNkcFBsYW5CVXRpbHMuYWRkTGVnYWN5U2ltdWxjYXN0KHtcbiAgICAgICAgICAgICAgICBvZmZlck1lZGlhT2JqZWN0LFxuICAgICAgICAgICAgICAgIHRyYWNrLFxuICAgICAgICAgICAgICAgIG51bVN0cmVhbXM6IGVuY29kaW5ncy5sZW5ndGhcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgb2ZmZXIgPSB7IHR5cGU6ICdvZmZlcicsIHNkcDogc2RwVHJhbnNmb3JtLndyaXRlKGxvY2FsU2RwT2JqZWN0KSB9O1xuICAgICAgICB9XG4gICAgICAgIGxvZ2dlci5kZWJ1Zygnc2VuZCgpIHwgY2FsbGluZyBwYy5zZXRMb2NhbERlc2NyaXB0aW9uKCkgW29mZmVyOiVvXScsIG9mZmVyKTtcbiAgICAgICAgYXdhaXQgdGhpcy5fcGMuc2V0TG9jYWxEZXNjcmlwdGlvbihvZmZlcik7XG4gICAgICAgIGxvY2FsU2RwT2JqZWN0ID0gc2RwVHJhbnNmb3JtLnBhcnNlKHRoaXMuX3BjLmxvY2FsRGVzY3JpcHRpb24uc2RwKTtcbiAgICAgICAgb2ZmZXJNZWRpYU9iamVjdCA9IGxvY2FsU2RwT2JqZWN0Lm1lZGlhXG4gICAgICAgICAgICAuZmluZCgobSkgPT4gbS50eXBlID09PSB0cmFjay5raW5kKTtcbiAgICAgICAgLy8gU2V0IFJUQ1AgQ05BTUUuXG4gICAgICAgIHNlbmRpbmdSdHBQYXJhbWV0ZXJzLnJ0Y3AuY25hbWUgPVxuICAgICAgICAgICAgc2RwQ29tbW9uVXRpbHMuZ2V0Q25hbWUoeyBvZmZlck1lZGlhT2JqZWN0IH0pO1xuICAgICAgICAvLyBTZXQgUlRQIGVuY29kaW5ncy5cbiAgICAgICAgc2VuZGluZ1J0cFBhcmFtZXRlcnMuZW5jb2RpbmdzID1cbiAgICAgICAgICAgIHNkcFBsYW5CVXRpbHMuZ2V0UnRwRW5jb2RpbmdzKHsgb2ZmZXJNZWRpYU9iamVjdCwgdHJhY2sgfSk7XG4gICAgICAgIC8vIENvbXBsZXRlIGVuY29kaW5ncyB3aXRoIGdpdmVuIHZhbHVlcy5cbiAgICAgICAgaWYgKGVuY29kaW5ncykge1xuICAgICAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgc2VuZGluZ1J0cFBhcmFtZXRlcnMuZW5jb2RpbmdzLmxlbmd0aDsgKytpZHgpIHtcbiAgICAgICAgICAgICAgICBpZiAoZW5jb2RpbmdzW2lkeF0pXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oc2VuZGluZ1J0cFBhcmFtZXRlcnMuZW5jb2RpbmdzW2lkeF0sIGVuY29kaW5nc1tpZHhdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBJZiBWUDggYW5kIHRoZXJlIGlzIGVmZmVjdGl2ZSBzaW11bGNhc3QsIGFkZCBzY2FsYWJpbGl0eU1vZGUgdG8gZWFjaFxuICAgICAgICAvLyBlbmNvZGluZy5cbiAgICAgICAgaWYgKHNlbmRpbmdSdHBQYXJhbWV0ZXJzLmVuY29kaW5ncy5sZW5ndGggPiAxICYmXG4gICAgICAgICAgICBzZW5kaW5nUnRwUGFyYW1ldGVycy5jb2RlY3NbMF0ubWltZVR5cGUudG9Mb3dlckNhc2UoKSA9PT0gJ3ZpZGVvL3ZwOCcpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgZW5jb2Rpbmcgb2Ygc2VuZGluZ1J0cFBhcmFtZXRlcnMuZW5jb2RpbmdzKSB7XG4gICAgICAgICAgICAgICAgZW5jb2Rpbmcuc2NhbGFiaWxpdHlNb2RlID0gJ1MxVDMnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3JlbW90ZVNkcC5zZW5kKHtcbiAgICAgICAgICAgIG9mZmVyTWVkaWFPYmplY3QsXG4gICAgICAgICAgICBvZmZlclJ0cFBhcmFtZXRlcnM6IHNlbmRpbmdSdHBQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgYW5zd2VyUnRwUGFyYW1ldGVyczogc2VuZGluZ1JlbW90ZVJ0cFBhcmFtZXRlcnMsXG4gICAgICAgICAgICBjb2RlY09wdGlvbnNcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGFuc3dlciA9IHsgdHlwZTogJ2Fuc3dlcicsIHNkcDogdGhpcy5fcmVtb3RlU2RwLmdldFNkcCgpIH07XG4gICAgICAgIGxvZ2dlci5kZWJ1Zygnc2VuZCgpIHwgY2FsbGluZyBwYy5zZXRSZW1vdGVEZXNjcmlwdGlvbigpIFthbnN3ZXI6JW9dJywgYW5zd2VyKTtcbiAgICAgICAgYXdhaXQgdGhpcy5fcGMuc2V0UmVtb3RlRGVzY3JpcHRpb24oYW5zd2VyKTtcbiAgICAgICAgY29uc3QgbG9jYWxJZCA9IFN0cmluZyh0aGlzLl9uZXh0U2VuZExvY2FsSWQpO1xuICAgICAgICB0aGlzLl9uZXh0U2VuZExvY2FsSWQrKztcbiAgICAgICAgLy8gSW5zZXJ0IGludG8gdGhlIG1hcC5cbiAgICAgICAgdGhpcy5fbWFwU2VuZExvY2FsSWRUcmFjay5zZXQobG9jYWxJZCwgdHJhY2spO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbG9jYWxJZDogbG9jYWxJZCxcbiAgICAgICAgICAgIHJ0cFBhcmFtZXRlcnM6IHNlbmRpbmdSdHBQYXJhbWV0ZXJzXG4gICAgICAgIH07XG4gICAgfVxuICAgIGFzeW5jIHN0b3BTZW5kaW5nKGxvY2FsSWQpIHtcbiAgICAgICAgdGhpcy5fYXNzZXJ0U2VuZERpcmVjdGlvbigpO1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3N0b3BTZW5kaW5nKCkgW2xvY2FsSWQ6JXNdJywgbG9jYWxJZCk7XG4gICAgICAgIGNvbnN0IHRyYWNrID0gdGhpcy5fbWFwU2VuZExvY2FsSWRUcmFjay5nZXQobG9jYWxJZCk7XG4gICAgICAgIGlmICghdHJhY2spXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3RyYWNrIG5vdCBmb3VuZCcpO1xuICAgICAgICB0aGlzLl9tYXBTZW5kTG9jYWxJZFRyYWNrLmRlbGV0ZShsb2NhbElkKTtcbiAgICAgICAgdGhpcy5fc2VuZFN0cmVhbS5yZW1vdmVUcmFjayh0cmFjayk7XG4gICAgICAgIHRoaXMuX3BjLmFkZFN0cmVhbSh0aGlzLl9zZW5kU3RyZWFtKTtcbiAgICAgICAgY29uc3Qgb2ZmZXIgPSBhd2FpdCB0aGlzLl9wYy5jcmVhdGVPZmZlcigpO1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3N0b3BTZW5kaW5nKCkgfCBjYWxsaW5nIHBjLnNldExvY2FsRGVzY3JpcHRpb24oKSBbb2ZmZXI6JW9dJywgb2ZmZXIpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5fcGMuc2V0TG9jYWxEZXNjcmlwdGlvbihvZmZlcik7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAvLyBOT1RFOiBJZiB0aGVyZSBhcmUgbm8gc2VuZGluZyB0cmFja3MsIHNldExvY2FsRGVzY3JpcHRpb24oKSB3aWxsIGZhaWwgd2l0aFxuICAgICAgICAgICAgLy8gXCJGYWlsZWQgdG8gY3JlYXRlIGNoYW5uZWxzXCIuIElmIHNvLCBpZ25vcmUgaXQuXG4gICAgICAgICAgICBpZiAodGhpcy5fc2VuZFN0cmVhbS5nZXRUcmFja3MoKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIud2Fybignc3RvcFNlbmRpbmcoKSB8IGlnbm9yaW5nIGV4cGVjdGVkIGVycm9yIGR1ZSBubyBzZW5kaW5nIHRyYWNrczogJXMnLCBlcnJvci50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fcGMuc2lnbmFsaW5nU3RhdGUgPT09ICdzdGFibGUnKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCBhbnN3ZXIgPSB7IHR5cGU6ICdhbnN3ZXInLCBzZHA6IHRoaXMuX3JlbW90ZVNkcC5nZXRTZHAoKSB9O1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3N0b3BTZW5kaW5nKCkgfCBjYWxsaW5nIHBjLnNldFJlbW90ZURlc2NyaXB0aW9uKCkgW2Fuc3dlcjolb10nLCBhbnN3ZXIpO1xuICAgICAgICBhd2FpdCB0aGlzLl9wYy5zZXRSZW1vdGVEZXNjcmlwdGlvbihhbnN3ZXIpO1xuICAgIH1cbiAgICBhc3luYyByZXBsYWNlVHJhY2soXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuICAgIGxvY2FsSWQsIHRyYWNrKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5VbnN1cHBvcnRlZEVycm9yKCdub3QgaW1wbGVtZW50ZWQnKTtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuICAgIGFzeW5jIHNldE1heFNwYXRpYWxMYXllcihsb2NhbElkLCBzcGF0aWFsTGF5ZXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLlVuc3VwcG9ydGVkRXJyb3IoJyBub3QgaW1wbGVtZW50ZWQnKTtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuICAgIGFzeW5jIHNldFJ0cEVuY29kaW5nUGFyYW1ldGVycyhsb2NhbElkLCBwYXJhbXMpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLlVuc3VwcG9ydGVkRXJyb3IoJ25vdCBzdXBwb3J0ZWQnKTtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuICAgIGFzeW5jIGdldFNlbmRlclN0YXRzKGxvY2FsSWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLlVuc3VwcG9ydGVkRXJyb3IoJ25vdCBpbXBsZW1lbnRlZCcpO1xuICAgIH1cbiAgICBhc3luYyBzZW5kRGF0YUNoYW5uZWwoeyBvcmRlcmVkLCBtYXhQYWNrZXRMaWZlVGltZSwgbWF4UmV0cmFuc21pdHMsIGxhYmVsLCBwcm90b2NvbCwgcHJpb3JpdHkgfSkge1xuICAgICAgICB0aGlzLl9hc3NlcnRTZW5kRGlyZWN0aW9uKCk7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICBuZWdvdGlhdGVkOiB0cnVlLFxuICAgICAgICAgICAgaWQ6IHRoaXMuX25leHRTZW5kU2N0cFN0cmVhbUlkLFxuICAgICAgICAgICAgb3JkZXJlZCxcbiAgICAgICAgICAgIG1heFBhY2tldExpZmVUaW1lLFxuICAgICAgICAgICAgbWF4UmV0cmFuc21pdFRpbWU6IG1heFBhY2tldExpZmVUaW1lLFxuICAgICAgICAgICAgbWF4UmV0cmFuc21pdHMsXG4gICAgICAgICAgICBwcm90b2NvbCxcbiAgICAgICAgICAgIHByaW9yaXR5XG4gICAgICAgIH07XG4gICAgICAgIGxvZ2dlci5kZWJ1Zygnc2VuZERhdGFDaGFubmVsKCkgW29wdGlvbnM6JW9dJywgb3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IGRhdGFDaGFubmVsID0gdGhpcy5fcGMuY3JlYXRlRGF0YUNoYW5uZWwobGFiZWwsIG9wdGlvbnMpO1xuICAgICAgICAvLyBJbmNyZWFzZSBuZXh0IGlkLlxuICAgICAgICB0aGlzLl9uZXh0U2VuZFNjdHBTdHJlYW1JZCA9XG4gICAgICAgICAgICArK3RoaXMuX25leHRTZW5kU2N0cFN0cmVhbUlkICUgU0NUUF9OVU1fU1RSRUFNUy5NSVM7XG4gICAgICAgIC8vIElmIHRoaXMgaXMgdGhlIGZpcnN0IERhdGFDaGFubmVsIHdlIG5lZWQgdG8gY3JlYXRlIHRoZSBTRFAgYW5zd2VyIHdpdGhcbiAgICAgICAgLy8gbT1hcHBsaWNhdGlvbiBzZWN0aW9uLlxuICAgICAgICBpZiAoIXRoaXMuX2hhc0RhdGFDaGFubmVsTWVkaWFTZWN0aW9uKSB7XG4gICAgICAgICAgICBjb25zdCBvZmZlciA9IGF3YWl0IHRoaXMuX3BjLmNyZWF0ZU9mZmVyKCk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFNkcE9iamVjdCA9IHNkcFRyYW5zZm9ybS5wYXJzZShvZmZlci5zZHApO1xuICAgICAgICAgICAgY29uc3Qgb2ZmZXJNZWRpYU9iamVjdCA9IGxvY2FsU2RwT2JqZWN0Lm1lZGlhXG4gICAgICAgICAgICAgICAgLmZpbmQoKG0pID0+IG0udHlwZSA9PT0gJ2FwcGxpY2F0aW9uJyk7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX3RyYW5zcG9ydFJlYWR5KVxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuX3NldHVwVHJhbnNwb3J0KHsgbG9jYWxEdGxzUm9sZTogJ3NlcnZlcicsIGxvY2FsU2RwT2JqZWN0IH0pO1xuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdzZW5kRGF0YUNoYW5uZWwoKSB8IGNhbGxpbmcgcGMuc2V0TG9jYWxEZXNjcmlwdGlvbigpIFtvZmZlcjolb10nLCBvZmZlcik7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLl9wYy5zZXRMb2NhbERlc2NyaXB0aW9uKG9mZmVyKTtcbiAgICAgICAgICAgIHRoaXMuX3JlbW90ZVNkcC5zZW5kU2N0cEFzc29jaWF0aW9uKHsgb2ZmZXJNZWRpYU9iamVjdCB9KTtcbiAgICAgICAgICAgIGNvbnN0IGFuc3dlciA9IHsgdHlwZTogJ2Fuc3dlcicsIHNkcDogdGhpcy5fcmVtb3RlU2RwLmdldFNkcCgpIH07XG4gICAgICAgICAgICBsb2dnZXIuZGVidWcoJ3NlbmREYXRhQ2hhbm5lbCgpIHwgY2FsbGluZyBwYy5zZXRSZW1vdGVEZXNjcmlwdGlvbigpIFthbnN3ZXI6JW9dJywgYW5zd2VyKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX3BjLnNldFJlbW90ZURlc2NyaXB0aW9uKGFuc3dlcik7XG4gICAgICAgICAgICB0aGlzLl9oYXNEYXRhQ2hhbm5lbE1lZGlhU2VjdGlvbiA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2N0cFN0cmVhbVBhcmFtZXRlcnMgPSB7XG4gICAgICAgICAgICBzdHJlYW1JZDogb3B0aW9ucy5pZCxcbiAgICAgICAgICAgIG9yZGVyZWQ6IG9wdGlvbnMub3JkZXJlZCxcbiAgICAgICAgICAgIG1heFBhY2tldExpZmVUaW1lOiBvcHRpb25zLm1heFBhY2tldExpZmVUaW1lLFxuICAgICAgICAgICAgbWF4UmV0cmFuc21pdHM6IG9wdGlvbnMubWF4UmV0cmFuc21pdHNcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHsgZGF0YUNoYW5uZWwsIHNjdHBTdHJlYW1QYXJhbWV0ZXJzIH07XG4gICAgfVxuICAgIGFzeW5jIHJlY2VpdmUoeyB0cmFja0lkLCBraW5kLCBydHBQYXJhbWV0ZXJzIH0pIHtcbiAgICAgICAgdGhpcy5fYXNzZXJ0UmVjdkRpcmVjdGlvbigpO1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3JlY2VpdmUoKSBbdHJhY2tJZDolcywga2luZDolc10nLCB0cmFja0lkLCBraW5kKTtcbiAgICAgICAgY29uc3QgbG9jYWxJZCA9IHRyYWNrSWQ7XG4gICAgICAgIGNvbnN0IG1pZCA9IGtpbmQ7XG4gICAgICAgIGNvbnN0IHN0cmVhbUlkID0gcnRwUGFyYW1ldGVycy5ydGNwLmNuYW1lO1xuICAgICAgICB0aGlzLl9yZW1vdGVTZHAucmVjZWl2ZSh7XG4gICAgICAgICAgICBtaWQsXG4gICAgICAgICAgICBraW5kLFxuICAgICAgICAgICAgb2ZmZXJSdHBQYXJhbWV0ZXJzOiBydHBQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgc3RyZWFtSWQsXG4gICAgICAgICAgICB0cmFja0lkXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBvZmZlciA9IHsgdHlwZTogJ29mZmVyJywgc2RwOiB0aGlzLl9yZW1vdGVTZHAuZ2V0U2RwKCkgfTtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdyZWNlaXZlKCkgfCBjYWxsaW5nIHBjLnNldFJlbW90ZURlc2NyaXB0aW9uKCkgW29mZmVyOiVvXScsIG9mZmVyKTtcbiAgICAgICAgYXdhaXQgdGhpcy5fcGMuc2V0UmVtb3RlRGVzY3JpcHRpb24ob2ZmZXIpO1xuICAgICAgICBsZXQgYW5zd2VyID0gYXdhaXQgdGhpcy5fcGMuY3JlYXRlQW5zd2VyKCk7XG4gICAgICAgIGNvbnN0IGxvY2FsU2RwT2JqZWN0ID0gc2RwVHJhbnNmb3JtLnBhcnNlKGFuc3dlci5zZHApO1xuICAgICAgICBjb25zdCBhbnN3ZXJNZWRpYU9iamVjdCA9IGxvY2FsU2RwT2JqZWN0Lm1lZGlhXG4gICAgICAgICAgICAuZmluZCgobSkgPT4gU3RyaW5nKG0ubWlkKSA9PT0gbWlkKTtcbiAgICAgICAgLy8gTWF5IG5lZWQgdG8gbW9kaWZ5IGNvZGVjIHBhcmFtZXRlcnMgaW4gdGhlIGFuc3dlciBiYXNlZCBvbiBjb2RlY1xuICAgICAgICAvLyBwYXJhbWV0ZXJzIGluIHRoZSBvZmZlci5cbiAgICAgICAgc2RwQ29tbW9uVXRpbHMuYXBwbHlDb2RlY1BhcmFtZXRlcnMoe1xuICAgICAgICAgICAgb2ZmZXJSdHBQYXJhbWV0ZXJzOiBydHBQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgYW5zd2VyTWVkaWFPYmplY3RcbiAgICAgICAgfSk7XG4gICAgICAgIGFuc3dlciA9IHsgdHlwZTogJ2Fuc3dlcicsIHNkcDogc2RwVHJhbnNmb3JtLndyaXRlKGxvY2FsU2RwT2JqZWN0KSB9O1xuICAgICAgICBpZiAoIXRoaXMuX3RyYW5zcG9ydFJlYWR5KVxuICAgICAgICAgICAgYXdhaXQgdGhpcy5fc2V0dXBUcmFuc3BvcnQoeyBsb2NhbER0bHNSb2xlOiAnY2xpZW50JywgbG9jYWxTZHBPYmplY3QgfSk7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZygncmVjZWl2ZSgpIHwgY2FsbGluZyBwYy5zZXRMb2NhbERlc2NyaXB0aW9uKCkgW2Fuc3dlcjolb10nLCBhbnN3ZXIpO1xuICAgICAgICBhd2FpdCB0aGlzLl9wYy5zZXRMb2NhbERlc2NyaXB0aW9uKGFuc3dlcik7XG4gICAgICAgIGNvbnN0IHN0cmVhbSA9IHRoaXMuX3BjLmdldFJlbW90ZVN0cmVhbXMoKVxuICAgICAgICAgICAgLmZpbmQoKHMpID0+IHMuaWQgPT09IHN0cmVhbUlkKTtcbiAgICAgICAgY29uc3QgdHJhY2sgPSBzdHJlYW0uZ2V0VHJhY2tCeUlkKGxvY2FsSWQpO1xuICAgICAgICBpZiAoIXRyYWNrKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdyZW1vdGUgdHJhY2sgbm90IGZvdW5kJyk7XG4gICAgICAgIC8vIEluc2VydCBpbnRvIHRoZSBtYXAuXG4gICAgICAgIHRoaXMuX21hcFJlY3ZMb2NhbElkSW5mby5zZXQobG9jYWxJZCwgeyBtaWQsIHJ0cFBhcmFtZXRlcnMgfSk7XG4gICAgICAgIHJldHVybiB7IGxvY2FsSWQsIHRyYWNrIH07XG4gICAgfVxuICAgIGFzeW5jIHN0b3BSZWNlaXZpbmcobG9jYWxJZCkge1xuICAgICAgICB0aGlzLl9hc3NlcnRSZWN2RGlyZWN0aW9uKCk7XG4gICAgICAgIGxvZ2dlci5kZWJ1Zygnc3RvcFJlY2VpdmluZygpIFtsb2NhbElkOiVzXScsIGxvY2FsSWQpO1xuICAgICAgICBjb25zdCB7IG1pZCwgcnRwUGFyYW1ldGVycyB9ID0gdGhpcy5fbWFwUmVjdkxvY2FsSWRJbmZvLmdldChsb2NhbElkKSB8fCB7fTtcbiAgICAgICAgLy8gUmVtb3ZlIGZyb20gdGhlIG1hcC5cbiAgICAgICAgdGhpcy5fbWFwUmVjdkxvY2FsSWRJbmZvLmRlbGV0ZShsb2NhbElkKTtcbiAgICAgICAgdGhpcy5fcmVtb3RlU2RwLnBsYW5CU3RvcFJlY2VpdmluZyh7IG1pZDogbWlkLCBvZmZlclJ0cFBhcmFtZXRlcnM6IHJ0cFBhcmFtZXRlcnMgfSk7XG4gICAgICAgIGNvbnN0IG9mZmVyID0geyB0eXBlOiAnb2ZmZXInLCBzZHA6IHRoaXMuX3JlbW90ZVNkcC5nZXRTZHAoKSB9O1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3N0b3BSZWNlaXZpbmcoKSB8IGNhbGxpbmcgcGMuc2V0UmVtb3RlRGVzY3JpcHRpb24oKSBbb2ZmZXI6JW9dJywgb2ZmZXIpO1xuICAgICAgICBhd2FpdCB0aGlzLl9wYy5zZXRSZW1vdGVEZXNjcmlwdGlvbihvZmZlcik7XG4gICAgICAgIGNvbnN0IGFuc3dlciA9IGF3YWl0IHRoaXMuX3BjLmNyZWF0ZUFuc3dlcigpO1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3N0b3BSZWNlaXZpbmcoKSB8IGNhbGxpbmcgcGMuc2V0TG9jYWxEZXNjcmlwdGlvbigpIFthbnN3ZXI6JW9dJywgYW5zd2VyKTtcbiAgICAgICAgYXdhaXQgdGhpcy5fcGMuc2V0TG9jYWxEZXNjcmlwdGlvbihhbnN3ZXIpO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgYXN5bmMgZ2V0UmVjZWl2ZXJTdGF0cyhsb2NhbElkKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5VbnN1cHBvcnRlZEVycm9yKCdub3QgaW1wbGVtZW50ZWQnKTtcbiAgICB9XG4gICAgYXN5bmMgcmVjZWl2ZURhdGFDaGFubmVsKHsgc2N0cFN0cmVhbVBhcmFtZXRlcnMsIGxhYmVsLCBwcm90b2NvbCB9KSB7XG4gICAgICAgIHRoaXMuX2Fzc2VydFJlY3ZEaXJlY3Rpb24oKTtcbiAgICAgICAgY29uc3QgeyBzdHJlYW1JZCwgb3JkZXJlZCwgbWF4UGFja2V0TGlmZVRpbWUsIG1heFJldHJhbnNtaXRzIH0gPSBzY3RwU3RyZWFtUGFyYW1ldGVycztcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIG5lZ290aWF0ZWQ6IHRydWUsXG4gICAgICAgICAgICBpZDogc3RyZWFtSWQsXG4gICAgICAgICAgICBvcmRlcmVkLFxuICAgICAgICAgICAgbWF4UGFja2V0TGlmZVRpbWUsXG4gICAgICAgICAgICBtYXhSZXRyYW5zbWl0VGltZTogbWF4UGFja2V0TGlmZVRpbWUsXG4gICAgICAgICAgICBtYXhSZXRyYW5zbWl0cyxcbiAgICAgICAgICAgIHByb3RvY29sXG4gICAgICAgIH07XG4gICAgICAgIGxvZ2dlci5kZWJ1ZygncmVjZWl2ZURhdGFDaGFubmVsKCkgW29wdGlvbnM6JW9dJywgb3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IGRhdGFDaGFubmVsID0gdGhpcy5fcGMuY3JlYXRlRGF0YUNoYW5uZWwobGFiZWwsIG9wdGlvbnMpO1xuICAgICAgICAvLyBJZiB0aGlzIGlzIHRoZSBmaXJzdCBEYXRhQ2hhbm5lbCB3ZSBuZWVkIHRvIGNyZWF0ZSB0aGUgU0RQIG9mZmVyIHdpdGhcbiAgICAgICAgLy8gbT1hcHBsaWNhdGlvbiBzZWN0aW9uLlxuICAgICAgICBpZiAoIXRoaXMuX2hhc0RhdGFDaGFubmVsTWVkaWFTZWN0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLl9yZW1vdGVTZHAucmVjZWl2ZVNjdHBBc3NvY2lhdGlvbih7IG9sZERhdGFDaGFubmVsU3BlYzogdHJ1ZSB9KTtcbiAgICAgICAgICAgIGNvbnN0IG9mZmVyID0geyB0eXBlOiAnb2ZmZXInLCBzZHA6IHRoaXMuX3JlbW90ZVNkcC5nZXRTZHAoKSB9O1xuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdyZWNlaXZlRGF0YUNoYW5uZWwoKSB8IGNhbGxpbmcgcGMuc2V0UmVtb3RlRGVzY3JpcHRpb24oKSBbb2ZmZXI6JW9dJywgb2ZmZXIpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5fcGMuc2V0UmVtb3RlRGVzY3JpcHRpb24ob2ZmZXIpO1xuICAgICAgICAgICAgY29uc3QgYW5zd2VyID0gYXdhaXQgdGhpcy5fcGMuY3JlYXRlQW5zd2VyKCk7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX3RyYW5zcG9ydFJlYWR5KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxTZHBPYmplY3QgPSBzZHBUcmFuc2Zvcm0ucGFyc2UoYW5zd2VyLnNkcCk7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5fc2V0dXBUcmFuc3BvcnQoeyBsb2NhbER0bHNSb2xlOiAnY2xpZW50JywgbG9jYWxTZHBPYmplY3QgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsb2dnZXIuZGVidWcoJ3JlY2VpdmVEYXRhQ2hhbm5lbCgpIHwgY2FsbGluZyBwYy5zZXRSZW1vdGVEZXNjcmlwdGlvbigpIFthbnN3ZXI6JW9dJywgYW5zd2VyKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX3BjLnNldExvY2FsRGVzY3JpcHRpb24oYW5zd2VyKTtcbiAgICAgICAgICAgIHRoaXMuX2hhc0RhdGFDaGFubmVsTWVkaWFTZWN0aW9uID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBkYXRhQ2hhbm5lbCB9O1xuICAgIH1cbiAgICBhc3luYyBfc2V0dXBUcmFuc3BvcnQoeyBsb2NhbER0bHNSb2xlLCBsb2NhbFNkcE9iamVjdCB9KSB7XG4gICAgICAgIGlmICghbG9jYWxTZHBPYmplY3QpXG4gICAgICAgICAgICBsb2NhbFNkcE9iamVjdCA9IHNkcFRyYW5zZm9ybS5wYXJzZSh0aGlzLl9wYy5sb2NhbERlc2NyaXB0aW9uLnNkcCk7XG4gICAgICAgIC8vIEdldCBvdXIgbG9jYWwgRFRMUyBwYXJhbWV0ZXJzLlxuICAgICAgICBjb25zdCBkdGxzUGFyYW1ldGVycyA9IHNkcENvbW1vblV0aWxzLmV4dHJhY3REdGxzUGFyYW1ldGVycyh7IHNkcE9iamVjdDogbG9jYWxTZHBPYmplY3QgfSk7XG4gICAgICAgIC8vIFNldCBvdXIgRFRMUyByb2xlLlxuICAgICAgICBkdGxzUGFyYW1ldGVycy5yb2xlID0gbG9jYWxEdGxzUm9sZTtcbiAgICAgICAgLy8gVXBkYXRlIHRoZSByZW1vdGUgRFRMUyByb2xlIGluIHRoZSBTRFAuXG4gICAgICAgIHRoaXMuX3JlbW90ZVNkcC51cGRhdGVEdGxzUm9sZShsb2NhbER0bHNSb2xlID09PSAnY2xpZW50JyA/ICdzZXJ2ZXInIDogJ2NsaWVudCcpO1xuICAgICAgICAvLyBOZWVkIHRvIHRlbGwgdGhlIHJlbW90ZSB0cmFuc3BvcnQgYWJvdXQgb3VyIHBhcmFtZXRlcnMuXG4gICAgICAgIGF3YWl0IHRoaXMuc2FmZUVtaXRBc1Byb21pc2UoJ0Bjb25uZWN0JywgeyBkdGxzUGFyYW1ldGVycyB9KTtcbiAgICAgICAgdGhpcy5fdHJhbnNwb3J0UmVhZHkgPSB0cnVlO1xuICAgIH1cbiAgICBfYXNzZXJ0U2VuZERpcmVjdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuX2RpcmVjdGlvbiAhPT0gJ3NlbmQnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ21ldGhvZCBjYW4ganVzdCBiZSBjYWxsZWQgZm9yIGhhbmRsZXJzIHdpdGggXCJzZW5kXCIgZGlyZWN0aW9uJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX2Fzc2VydFJlY3ZEaXJlY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLl9kaXJlY3Rpb24gIT09ICdyZWN2Jykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdtZXRob2QgY2FuIGp1c3QgYmUgY2FsbGVkIGZvciBoYW5kbGVycyB3aXRoIFwicmVjdlwiIGRpcmVjdGlvbicpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5DaHJvbWU1NSA9IENocm9tZTU1O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBzZHBUcmFuc2Zvcm0gPSByZXF1aXJlKFwic2RwLXRyYW5zZm9ybVwiKTtcbmNvbnN0IExvZ2dlcl8xID0gcmVxdWlyZShcIi4uL0xvZ2dlclwiKTtcbmNvbnN0IGVycm9yc18xID0gcmVxdWlyZShcIi4uL2Vycm9yc1wiKTtcbmNvbnN0IHV0aWxzID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xuY29uc3Qgb3J0YyA9IHJlcXVpcmUoXCIuLi9vcnRjXCIpO1xuY29uc3Qgc2RwQ29tbW9uVXRpbHMgPSByZXF1aXJlKFwiLi9zZHAvY29tbW9uVXRpbHNcIik7XG5jb25zdCBzZHBVbmlmaWVkUGxhblV0aWxzID0gcmVxdWlyZShcIi4vc2RwL3VuaWZpZWRQbGFuVXRpbHNcIik7XG5jb25zdCBIYW5kbGVySW50ZXJmYWNlXzEgPSByZXF1aXJlKFwiLi9IYW5kbGVySW50ZXJmYWNlXCIpO1xuY29uc3QgUmVtb3RlU2RwXzEgPSByZXF1aXJlKFwiLi9zZHAvUmVtb3RlU2RwXCIpO1xuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcl8xLkxvZ2dlcignRmlyZWZveDYwJyk7XG5jb25zdCBTQ1RQX05VTV9TVFJFQU1TID0geyBPUzogMTYsIE1JUzogMjA0OCB9O1xuY2xhc3MgRmlyZWZveDYwIGV4dGVuZHMgSGFuZGxlckludGVyZmFjZV8xLkhhbmRsZXJJbnRlcmZhY2Uge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICAvLyBNYXAgb2YgUlRDVHJhbnNjZWl2ZXJzIGluZGV4ZWQgYnkgTUlELlxuICAgICAgICB0aGlzLl9tYXBNaWRUcmFuc2NlaXZlciA9IG5ldyBNYXAoKTtcbiAgICAgICAgLy8gTG9jYWwgc3RyZWFtIGZvciBzZW5kaW5nLlxuICAgICAgICB0aGlzLl9zZW5kU3RyZWFtID0gbmV3IE1lZGlhU3RyZWFtKCk7XG4gICAgICAgIC8vIFdoZXRoZXIgYSBEYXRhQ2hhbm5lbCBtPWFwcGxpY2F0aW9uIHNlY3Rpb24gaGFzIGJlZW4gY3JlYXRlZC5cbiAgICAgICAgdGhpcy5faGFzRGF0YUNoYW5uZWxNZWRpYVNlY3Rpb24gPSBmYWxzZTtcbiAgICAgICAgLy8gU2VuZGluZyBEYXRhQ2hhbm5lbCBpZCB2YWx1ZSBjb3VudGVyLiBJbmNyZW1lbnRlZCBmb3IgZWFjaCBuZXcgRGF0YUNoYW5uZWwuXG4gICAgICAgIHRoaXMuX25leHRTZW5kU2N0cFN0cmVhbUlkID0gMDtcbiAgICAgICAgLy8gR290IHRyYW5zcG9ydCBsb2NhbCBhbmQgcmVtb3RlIHBhcmFtZXRlcnMuXG4gICAgICAgIHRoaXMuX3RyYW5zcG9ydFJlYWR5ID0gZmFsc2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmYWN0b3J5IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIHN0YXRpYyBjcmVhdGVGYWN0b3J5KCkge1xuICAgICAgICByZXR1cm4gKCkgPT4gbmV3IEZpcmVmb3g2MCgpO1xuICAgIH1cbiAgICBnZXQgbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdGaXJlZm94NjAnO1xuICAgIH1cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdjbG9zZSgpJyk7XG4gICAgICAgIC8vIENsb3NlIFJUQ1BlZXJDb25uZWN0aW9uLlxuICAgICAgICBpZiAodGhpcy5fcGMpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcGMuY2xvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikgeyB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgZ2V0TmF0aXZlUnRwQ2FwYWJpbGl0aWVzKCkge1xuICAgICAgICBsb2dnZXIuZGVidWcoJ2dldE5hdGl2ZVJ0cENhcGFiaWxpdGllcygpJyk7XG4gICAgICAgIGNvbnN0IHBjID0gbmV3IFJUQ1BlZXJDb25uZWN0aW9uKHtcbiAgICAgICAgICAgIGljZVNlcnZlcnM6IFtdLFxuICAgICAgICAgICAgaWNlVHJhbnNwb3J0UG9saWN5OiAnYWxsJyxcbiAgICAgICAgICAgIGJ1bmRsZVBvbGljeTogJ21heC1idW5kbGUnLFxuICAgICAgICAgICAgcnRjcE11eFBvbGljeTogJ3JlcXVpcmUnXG4gICAgICAgIH0pO1xuICAgICAgICAvLyBOT1RFOiBXZSBuZWVkIHRvIGFkZCBhIHJlYWwgdmlkZW8gdHJhY2sgdG8gZ2V0IHRoZSBSSUQgZXh0ZW5zaW9uIG1hcHBpbmcuXG4gICAgICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgICAgICAvLyBOT1RFOiBPdGhlcndpc2UgRmlyZWZveCBmYWlscyBpbiBuZXh0IGxpbmUuXG4gICAgICAgIGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgICBjb25zdCBmYWtlU3RyZWFtID0gY2FudmFzLmNhcHR1cmVTdHJlYW0oKTtcbiAgICAgICAgY29uc3QgZmFrZVZpZGVvVHJhY2sgPSBmYWtlU3RyZWFtLmdldFZpZGVvVHJhY2tzKClbMF07XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBwYy5hZGRUcmFuc2NlaXZlcignYXVkaW8nLCB7IGRpcmVjdGlvbjogJ3NlbmRyZWN2JyB9KTtcbiAgICAgICAgICAgIGNvbnN0IHZpZGVvVHJhbnNjZWl2ZXIgPSBwYy5hZGRUcmFuc2NlaXZlcihmYWtlVmlkZW9UcmFjaywgeyBkaXJlY3Rpb246ICdzZW5kcmVjdicgfSk7XG4gICAgICAgICAgICBjb25zdCBwYXJhbWV0ZXJzID0gdmlkZW9UcmFuc2NlaXZlci5zZW5kZXIuZ2V0UGFyYW1ldGVycygpO1xuICAgICAgICAgICAgY29uc3QgZW5jb2RpbmdzID0gW1xuICAgICAgICAgICAgICAgIHsgcmlkOiAncjAnLCBtYXhCaXRyYXRlOiAxMDAwMDAgfSxcbiAgICAgICAgICAgICAgICB7IHJpZDogJ3IxJywgbWF4Qml0cmF0ZTogNTAwMDAwIH1cbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBwYXJhbWV0ZXJzLmVuY29kaW5ncyA9IGVuY29kaW5ncztcbiAgICAgICAgICAgIGF3YWl0IHZpZGVvVHJhbnNjZWl2ZXIuc2VuZGVyLnNldFBhcmFtZXRlcnMocGFyYW1ldGVycyk7XG4gICAgICAgICAgICBjb25zdCBvZmZlciA9IGF3YWl0IHBjLmNyZWF0ZU9mZmVyKCk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNhbnZhcy5yZW1vdmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikgeyB9XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZha2VWaWRlb1RyYWNrLnN0b3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikgeyB9XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHBjLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHsgfVxuICAgICAgICAgICAgY29uc3Qgc2RwT2JqZWN0ID0gc2RwVHJhbnNmb3JtLnBhcnNlKG9mZmVyLnNkcCk7XG4gICAgICAgICAgICBjb25zdCBuYXRpdmVSdHBDYXBhYmlsaXRpZXMgPSBzZHBDb21tb25VdGlscy5leHRyYWN0UnRwQ2FwYWJpbGl0aWVzKHsgc2RwT2JqZWN0IH0pO1xuICAgICAgICAgICAgcmV0dXJuIG5hdGl2ZVJ0cENhcGFiaWxpdGllcztcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY2FudmFzLnJlbW92ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yMikgeyB9XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZha2VWaWRlb1RyYWNrLnN0b3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcjIpIHsgfVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBwYy5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yMikgeyB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBnZXROYXRpdmVTY3RwQ2FwYWJpbGl0aWVzKCkge1xuICAgICAgICBsb2dnZXIuZGVidWcoJ2dldE5hdGl2ZVNjdHBDYXBhYmlsaXRpZXMoKScpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbnVtU3RyZWFtczogU0NUUF9OVU1fU1RSRUFNU1xuICAgICAgICB9O1xuICAgIH1cbiAgICBydW4oeyBkaXJlY3Rpb24sIGljZVBhcmFtZXRlcnMsIGljZUNhbmRpZGF0ZXMsIGR0bHNQYXJhbWV0ZXJzLCBzY3RwUGFyYW1ldGVycywgaWNlU2VydmVycywgaWNlVHJhbnNwb3J0UG9saWN5LCBhZGRpdGlvbmFsU2V0dGluZ3MsIHByb3ByaWV0YXJ5Q29uc3RyYWludHMsIGV4dGVuZGVkUnRwQ2FwYWJpbGl0aWVzIH0pIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdydW4oKScpO1xuICAgICAgICB0aGlzLl9kaXJlY3Rpb24gPSBkaXJlY3Rpb247XG4gICAgICAgIHRoaXMuX3JlbW90ZVNkcCA9IG5ldyBSZW1vdGVTZHBfMS5SZW1vdGVTZHAoe1xuICAgICAgICAgICAgaWNlUGFyYW1ldGVycyxcbiAgICAgICAgICAgIGljZUNhbmRpZGF0ZXMsXG4gICAgICAgICAgICBkdGxzUGFyYW1ldGVycyxcbiAgICAgICAgICAgIHNjdHBQYXJhbWV0ZXJzXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9zZW5kaW5nUnRwUGFyYW1ldGVyc0J5S2luZCA9XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYXVkaW86IG9ydGMuZ2V0U2VuZGluZ1J0cFBhcmFtZXRlcnMoJ2F1ZGlvJywgZXh0ZW5kZWRSdHBDYXBhYmlsaXRpZXMpLFxuICAgICAgICAgICAgICAgIHZpZGVvOiBvcnRjLmdldFNlbmRpbmdSdHBQYXJhbWV0ZXJzKCd2aWRlbycsIGV4dGVuZGVkUnRwQ2FwYWJpbGl0aWVzKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fc2VuZGluZ1JlbW90ZVJ0cFBhcmFtZXRlcnNCeUtpbmQgPVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGF1ZGlvOiBvcnRjLmdldFNlbmRpbmdSZW1vdGVSdHBQYXJhbWV0ZXJzKCdhdWRpbycsIGV4dGVuZGVkUnRwQ2FwYWJpbGl0aWVzKSxcbiAgICAgICAgICAgICAgICB2aWRlbzogb3J0Yy5nZXRTZW5kaW5nUmVtb3RlUnRwUGFyYW1ldGVycygndmlkZW8nLCBleHRlbmRlZFJ0cENhcGFiaWxpdGllcylcbiAgICAgICAgICAgIH07XG4gICAgICAgIHRoaXMuX3BjID0gbmV3IFJUQ1BlZXJDb25uZWN0aW9uKHtcbiAgICAgICAgICAgIGljZVNlcnZlcnM6IGljZVNlcnZlcnMgfHwgW10sXG4gICAgICAgICAgICBpY2VUcmFuc3BvcnRQb2xpY3k6IGljZVRyYW5zcG9ydFBvbGljeSB8fCAnYWxsJyxcbiAgICAgICAgICAgIGJ1bmRsZVBvbGljeTogJ21heC1idW5kbGUnLFxuICAgICAgICAgICAgcnRjcE11eFBvbGljeTogJ3JlcXVpcmUnLFxuICAgICAgICAgICAgLi4uYWRkaXRpb25hbFNldHRpbmdzXG4gICAgICAgIH0sIHByb3ByaWV0YXJ5Q29uc3RyYWludHMpO1xuICAgICAgICAvLyBIYW5kbGUgUlRDUGVlckNvbm5lY3Rpb24gY29ubmVjdGlvbiBzdGF0dXMuXG4gICAgICAgIHRoaXMuX3BjLmFkZEV2ZW50TGlzdGVuZXIoJ2ljZWNvbm5lY3Rpb25zdGF0ZWNoYW5nZScsICgpID0+IHtcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5fcGMuaWNlQ29ubmVjdGlvblN0YXRlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnY2hlY2tpbmcnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ0Bjb25uZWN0aW9uc3RhdGVjaGFuZ2UnLCAnY29ubmVjdGluZycpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdjb25uZWN0ZWQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2NvbXBsZXRlZCc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnQGNvbm5lY3Rpb25zdGF0ZWNoYW5nZScsICdjb25uZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnZmFpbGVkJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdAY29ubmVjdGlvbnN0YXRlY2hhbmdlJywgJ2ZhaWxlZCcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdkaXNjb25uZWN0ZWQnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ0Bjb25uZWN0aW9uc3RhdGVjaGFuZ2UnLCAnZGlzY29ubmVjdGVkJyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2Nsb3NlZCc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnQGNvbm5lY3Rpb25zdGF0ZWNoYW5nZScsICdjbG9zZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgYXN5bmMgdXBkYXRlSWNlU2VydmVycyhpY2VTZXJ2ZXJzKSB7XG4gICAgICAgIC8vIE5PVEU6IEZpcmVmb3ggZG9lcyBub3QgaW1wbGVtZW50IHBjLnNldENvbmZpZ3VyYXRpb24oKS5cbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLlVuc3VwcG9ydGVkRXJyb3IoJ25vdCBzdXBwb3J0ZWQnKTtcbiAgICB9XG4gICAgYXN5bmMgcmVzdGFydEljZShpY2VQYXJhbWV0ZXJzKSB7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZygncmVzdGFydEljZSgpJyk7XG4gICAgICAgIC8vIFByb3ZpZGUgdGhlIHJlbW90ZSBTRFAgaGFuZGxlciB3aXRoIG5ldyByZW1vdGUgSUNFIHBhcmFtZXRlcnMuXG4gICAgICAgIHRoaXMuX3JlbW90ZVNkcC51cGRhdGVJY2VQYXJhbWV0ZXJzKGljZVBhcmFtZXRlcnMpO1xuICAgICAgICBpZiAoIXRoaXMuX3RyYW5zcG9ydFJlYWR5KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpZiAodGhpcy5fZGlyZWN0aW9uID09PSAnc2VuZCcpIHtcbiAgICAgICAgICAgIGNvbnN0IG9mZmVyID0gYXdhaXQgdGhpcy5fcGMuY3JlYXRlT2ZmZXIoeyBpY2VSZXN0YXJ0OiB0cnVlIH0pO1xuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdyZXN0YXJ0SWNlKCkgfCBjYWxsaW5nIHBjLnNldExvY2FsRGVzY3JpcHRpb24oKSBbb2ZmZXI6JW9dJywgb2ZmZXIpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5fcGMuc2V0TG9jYWxEZXNjcmlwdGlvbihvZmZlcik7XG4gICAgICAgICAgICBjb25zdCBhbnN3ZXIgPSB7IHR5cGU6ICdhbnN3ZXInLCBzZHA6IHRoaXMuX3JlbW90ZVNkcC5nZXRTZHAoKSB9O1xuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdyZXN0YXJ0SWNlKCkgfCBjYWxsaW5nIHBjLnNldFJlbW90ZURlc2NyaXB0aW9uKCkgW2Fuc3dlcjolb10nLCBhbnN3ZXIpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5fcGMuc2V0UmVtb3RlRGVzY3JpcHRpb24oYW5zd2VyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IG9mZmVyID0geyB0eXBlOiAnb2ZmZXInLCBzZHA6IHRoaXMuX3JlbW90ZVNkcC5nZXRTZHAoKSB9O1xuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdyZXN0YXJ0SWNlKCkgfCBjYWxsaW5nIHBjLnNldFJlbW90ZURlc2NyaXB0aW9uKCkgW29mZmVyOiVvXScsIG9mZmVyKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX3BjLnNldFJlbW90ZURlc2NyaXB0aW9uKG9mZmVyKTtcbiAgICAgICAgICAgIGNvbnN0IGFuc3dlciA9IGF3YWl0IHRoaXMuX3BjLmNyZWF0ZUFuc3dlcigpO1xuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdyZXN0YXJ0SWNlKCkgfCBjYWxsaW5nIHBjLnNldExvY2FsRGVzY3JpcHRpb24oKSBbYW5zd2VyOiVvXScsIGFuc3dlcik7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLl9wYy5zZXRMb2NhbERlc2NyaXB0aW9uKGFuc3dlcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgZ2V0VHJhbnNwb3J0U3RhdHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wYy5nZXRTdGF0cygpO1xuICAgIH1cbiAgICBhc3luYyBzZW5kKHsgdHJhY2ssIGVuY29kaW5ncywgY29kZWNPcHRpb25zLCBjb2RlYyB9KSB7XG4gICAgICAgIHRoaXMuX2Fzc2VydFNlbmREaXJlY3Rpb24oKTtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdzZW5kKCkgW2tpbmQ6JXMsIHRyYWNrLmlkOiVzXScsIHRyYWNrLmtpbmQsIHRyYWNrLmlkKTtcbiAgICAgICAgbGV0IHJldmVyc2VFbmNvZGluZ3M7XG4gICAgICAgIGlmIChlbmNvZGluZ3MgJiYgZW5jb2RpbmdzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIGVuY29kaW5ncy5mb3JFYWNoKChlbmNvZGluZywgaWR4KSA9PiB7XG4gICAgICAgICAgICAgICAgZW5jb2RpbmcucmlkID0gYHIke2lkeH1gO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBDbG9uZSB0aGUgZW5jb2RpbmdzIGFuZCByZXZlcnNlIHRoZW0gYmVjYXVzZSBGaXJlZm94IGxpa2VzIHRoZW1cbiAgICAgICAgICAgIC8vIGZyb20gaGlnaCB0byBsb3cuXG4gICAgICAgICAgICByZXZlcnNlRW5jb2RpbmdzID0gdXRpbHMuY2xvbmUoZW5jb2RpbmdzKS5yZXZlcnNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2VuZGluZ1J0cFBhcmFtZXRlcnMgPSB1dGlscy5jbG9uZSh0aGlzLl9zZW5kaW5nUnRwUGFyYW1ldGVyc0J5S2luZFt0cmFjay5raW5kXSk7XG4gICAgICAgIC8vIFRoaXMgbWF5IHRocm93LlxuICAgICAgICBzZW5kaW5nUnRwUGFyYW1ldGVycy5jb2RlY3MgPVxuICAgICAgICAgICAgb3J0Yy5yZWR1Y2VDb2RlY3Moc2VuZGluZ1J0cFBhcmFtZXRlcnMuY29kZWNzLCBjb2RlYyk7XG4gICAgICAgIGNvbnN0IHNlbmRpbmdSZW1vdGVSdHBQYXJhbWV0ZXJzID0gdXRpbHMuY2xvbmUodGhpcy5fc2VuZGluZ1JlbW90ZVJ0cFBhcmFtZXRlcnNCeUtpbmRbdHJhY2sua2luZF0pO1xuICAgICAgICAvLyBUaGlzIG1heSB0aHJvdy5cbiAgICAgICAgc2VuZGluZ1JlbW90ZVJ0cFBhcmFtZXRlcnMuY29kZWNzID1cbiAgICAgICAgICAgIG9ydGMucmVkdWNlQ29kZWNzKHNlbmRpbmdSZW1vdGVSdHBQYXJhbWV0ZXJzLmNvZGVjcywgY29kZWMpO1xuICAgICAgICAvLyBOT1RFOiBGaXJlZm94IGZhaWxzIHNvbWV0aW1lcyB0byBwcm9wZXJseSBhbnRpY2lwYXRlIHRoZSBjbG9zZWQgbWVkaWFcbiAgICAgICAgLy8gc2VjdGlvbiB0aGF0IGl0IHNob3VsZCB1c2UsIHNvIGRvbid0IHJldXNlIGNsb3NlZCBtZWRpYSBzZWN0aW9ucy5cbiAgICAgICAgLy8gICBodHRwczovL2dpdGh1Yi5jb20vdmVyc2F0aWNhL21lZGlhc291cC1jbGllbnQvaXNzdWVzLzEwNFxuICAgICAgICAvL1xuICAgICAgICAvLyBjb25zdCBtZWRpYVNlY3Rpb25JZHggPSB0aGlzLl9yZW1vdGVTZHAhLmdldE5leHRNZWRpYVNlY3Rpb25JZHgoKTtcbiAgICAgICAgY29uc3QgdHJhbnNjZWl2ZXIgPSB0aGlzLl9wYy5hZGRUcmFuc2NlaXZlcih0cmFjaywgeyBkaXJlY3Rpb246ICdzZW5kb25seScsIHN0cmVhbXM6IFt0aGlzLl9zZW5kU3RyZWFtXSB9KTtcbiAgICAgICAgLy8gTk9URTogVGhpcyBpcyBub3Qgc3BlYyBjb21wbGlhbnRzLiBFbmNvZGluZ3Mgc2hvdWxkIGJlIGdpdmVuIGluIGFkZFRyYW5zY2VpdmVyXG4gICAgICAgIC8vIHNlY29uZCBhcmd1bWVudCwgYnV0IEZpcmVmb3ggZG9lcyBub3Qgc3VwcG9ydCBpdC5cbiAgICAgICAgaWYgKHJldmVyc2VFbmNvZGluZ3MpIHtcbiAgICAgICAgICAgIGNvbnN0IHBhcmFtZXRlcnMgPSB0cmFuc2NlaXZlci5zZW5kZXIuZ2V0UGFyYW1ldGVycygpO1xuICAgICAgICAgICAgcGFyYW1ldGVycy5lbmNvZGluZ3MgPSByZXZlcnNlRW5jb2RpbmdzO1xuICAgICAgICAgICAgYXdhaXQgdHJhbnNjZWl2ZXIuc2VuZGVyLnNldFBhcmFtZXRlcnMocGFyYW1ldGVycyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb2ZmZXIgPSBhd2FpdCB0aGlzLl9wYy5jcmVhdGVPZmZlcigpO1xuICAgICAgICBsZXQgbG9jYWxTZHBPYmplY3QgPSBzZHBUcmFuc2Zvcm0ucGFyc2Uob2ZmZXIuc2RwKTtcbiAgICAgICAgLy8gSW4gRmlyZWZveCB1c2UgRFRMUyByb2xlIGNsaWVudCBldmVuIGlmIHdlIGFyZSB0aGUgXCJvZmZlcmVyXCIgc2luY2VcbiAgICAgICAgLy8gRmlyZWZveCBkb2VzIG5vdCByZXNwZWN0IElDRS1MaXRlLlxuICAgICAgICBpZiAoIXRoaXMuX3RyYW5zcG9ydFJlYWR5KVxuICAgICAgICAgICAgYXdhaXQgdGhpcy5fc2V0dXBUcmFuc3BvcnQoeyBsb2NhbER0bHNSb2xlOiAnY2xpZW50JywgbG9jYWxTZHBPYmplY3QgfSk7XG4gICAgICAgIGxvZ2dlci5kZWJ1Zygnc2VuZCgpIHwgY2FsbGluZyBwYy5zZXRMb2NhbERlc2NyaXB0aW9uKCkgW29mZmVyOiVvXScsIG9mZmVyKTtcbiAgICAgICAgYXdhaXQgdGhpcy5fcGMuc2V0TG9jYWxEZXNjcmlwdGlvbihvZmZlcik7XG4gICAgICAgIC8vIFdlIGNhbiBub3cgZ2V0IHRoZSB0cmFuc2NlaXZlci5taWQuXG4gICAgICAgIGNvbnN0IGxvY2FsSWQgPSB0cmFuc2NlaXZlci5taWQ7XG4gICAgICAgIC8vIFNldCBNSUQuXG4gICAgICAgIHNlbmRpbmdSdHBQYXJhbWV0ZXJzLm1pZCA9IGxvY2FsSWQ7XG4gICAgICAgIGxvY2FsU2RwT2JqZWN0ID0gc2RwVHJhbnNmb3JtLnBhcnNlKHRoaXMuX3BjLmxvY2FsRGVzY3JpcHRpb24uc2RwKTtcbiAgICAgICAgY29uc3Qgb2ZmZXJNZWRpYU9iamVjdCA9IGxvY2FsU2RwT2JqZWN0Lm1lZGlhW2xvY2FsU2RwT2JqZWN0Lm1lZGlhLmxlbmd0aCAtIDFdO1xuICAgICAgICAvLyBTZXQgUlRDUCBDTkFNRS5cbiAgICAgICAgc2VuZGluZ1J0cFBhcmFtZXRlcnMucnRjcC5jbmFtZSA9XG4gICAgICAgICAgICBzZHBDb21tb25VdGlscy5nZXRDbmFtZSh7IG9mZmVyTWVkaWFPYmplY3QgfSk7XG4gICAgICAgIC8vIFNldCBSVFAgZW5jb2RpbmdzIGJ5IHBhcnNpbmcgdGhlIFNEUCBvZmZlciBpZiBubyBlbmNvZGluZ3MgYXJlIGdpdmVuLlxuICAgICAgICBpZiAoIWVuY29kaW5ncykge1xuICAgICAgICAgICAgc2VuZGluZ1J0cFBhcmFtZXRlcnMuZW5jb2RpbmdzID1cbiAgICAgICAgICAgICAgICBzZHBVbmlmaWVkUGxhblV0aWxzLmdldFJ0cEVuY29kaW5ncyh7IG9mZmVyTWVkaWFPYmplY3QgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2V0IFJUUCBlbmNvZGluZ3MgYnkgcGFyc2luZyB0aGUgU0RQIG9mZmVyIGFuZCBjb21wbGV0ZSB0aGVtIHdpdGggZ2l2ZW5cbiAgICAgICAgLy8gb25lIGlmIGp1c3QgYSBzaW5nbGUgZW5jb2RpbmcgaGFzIGJlZW4gZ2l2ZW4uXG4gICAgICAgIGVsc2UgaWYgKGVuY29kaW5ncy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld0VuY29kaW5ncyA9IHNkcFVuaWZpZWRQbGFuVXRpbHMuZ2V0UnRwRW5jb2RpbmdzKHsgb2ZmZXJNZWRpYU9iamVjdCB9KTtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24obmV3RW5jb2RpbmdzWzBdLCBlbmNvZGluZ3NbMF0pO1xuICAgICAgICAgICAgc2VuZGluZ1J0cFBhcmFtZXRlcnMuZW5jb2RpbmdzID0gbmV3RW5jb2RpbmdzO1xuICAgICAgICB9XG4gICAgICAgIC8vIE90aGVyd2lzZSBpZiBtb3JlIHRoYW4gMSBlbmNvZGluZyBhcmUgZ2l2ZW4gdXNlIHRoZW0gdmVyYmF0aW0uXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc2VuZGluZ1J0cFBhcmFtZXRlcnMuZW5jb2RpbmdzID0gZW5jb2RpbmdzO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIFZQOCBvciBIMjY0IGFuZCB0aGVyZSBpcyBlZmZlY3RpdmUgc2ltdWxjYXN0LCBhZGQgc2NhbGFiaWxpdHlNb2RlIHRvXG4gICAgICAgIC8vIGVhY2ggZW5jb2RpbmcuXG4gICAgICAgIGlmIChzZW5kaW5nUnRwUGFyYW1ldGVycy5lbmNvZGluZ3MubGVuZ3RoID4gMSAmJlxuICAgICAgICAgICAgKHNlbmRpbmdSdHBQYXJhbWV0ZXJzLmNvZGVjc1swXS5taW1lVHlwZS50b0xvd2VyQ2FzZSgpID09PSAndmlkZW8vdnA4JyB8fFxuICAgICAgICAgICAgICAgIHNlbmRpbmdSdHBQYXJhbWV0ZXJzLmNvZGVjc1swXS5taW1lVHlwZS50b0xvd2VyQ2FzZSgpID09PSAndmlkZW8vaDI2NCcpKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGVuY29kaW5nIG9mIHNlbmRpbmdSdHBQYXJhbWV0ZXJzLmVuY29kaW5ncykge1xuICAgICAgICAgICAgICAgIGVuY29kaW5nLnNjYWxhYmlsaXR5TW9kZSA9ICdTMVQzJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9yZW1vdGVTZHAuc2VuZCh7XG4gICAgICAgICAgICBvZmZlck1lZGlhT2JqZWN0LFxuICAgICAgICAgICAgb2ZmZXJSdHBQYXJhbWV0ZXJzOiBzZW5kaW5nUnRwUGFyYW1ldGVycyxcbiAgICAgICAgICAgIGFuc3dlclJ0cFBhcmFtZXRlcnM6IHNlbmRpbmdSZW1vdGVSdHBQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgY29kZWNPcHRpb25zLFxuICAgICAgICAgICAgZXh0bWFwQWxsb3dNaXhlZDogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgYW5zd2VyID0geyB0eXBlOiAnYW5zd2VyJywgc2RwOiB0aGlzLl9yZW1vdGVTZHAuZ2V0U2RwKCkgfTtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdzZW5kKCkgfCBjYWxsaW5nIHBjLnNldFJlbW90ZURlc2NyaXB0aW9uKCkgW2Fuc3dlcjolb10nLCBhbnN3ZXIpO1xuICAgICAgICBhd2FpdCB0aGlzLl9wYy5zZXRSZW1vdGVEZXNjcmlwdGlvbihhbnN3ZXIpO1xuICAgICAgICAvLyBTdG9yZSBpbiB0aGUgbWFwLlxuICAgICAgICB0aGlzLl9tYXBNaWRUcmFuc2NlaXZlci5zZXQobG9jYWxJZCwgdHJhbnNjZWl2ZXIpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbG9jYWxJZCxcbiAgICAgICAgICAgIHJ0cFBhcmFtZXRlcnM6IHNlbmRpbmdSdHBQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgcnRwU2VuZGVyOiB0cmFuc2NlaXZlci5zZW5kZXJcbiAgICAgICAgfTtcbiAgICB9XG4gICAgYXN5bmMgc3RvcFNlbmRpbmcobG9jYWxJZCkge1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3N0b3BTZW5kaW5nKCkgW2xvY2FsSWQ6JXNdJywgbG9jYWxJZCk7XG4gICAgICAgIGNvbnN0IHRyYW5zY2VpdmVyID0gdGhpcy5fbWFwTWlkVHJhbnNjZWl2ZXIuZ2V0KGxvY2FsSWQpO1xuICAgICAgICBpZiAoIXRyYW5zY2VpdmVyKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdhc3NvY2lhdGVkIHRyYW5zY2VpdmVyIG5vdCBmb3VuZCcpO1xuICAgICAgICB0cmFuc2NlaXZlci5zZW5kZXIucmVwbGFjZVRyYWNrKG51bGwpO1xuICAgICAgICB0aGlzLl9wYy5yZW1vdmVUcmFjayh0cmFuc2NlaXZlci5zZW5kZXIpO1xuICAgICAgICAvLyBOT1RFOiBDYW5ub3QgdXNlIGNsb3NlTWVkaWFTZWN0aW9uKCkgZHVlIHRvIHRoZSB0aGUgbm90ZSBhYm92ZSBpbiBzZW5kKClcbiAgICAgICAgLy8gbWV0aG9kLlxuICAgICAgICAvLyB0aGlzLl9yZW1vdGVTZHAhLmNsb3NlTWVkaWFTZWN0aW9uKHRyYW5zY2VpdmVyLm1pZCk7XG4gICAgICAgIHRoaXMuX3JlbW90ZVNkcC5kaXNhYmxlTWVkaWFTZWN0aW9uKHRyYW5zY2VpdmVyLm1pZCk7XG4gICAgICAgIGNvbnN0IG9mZmVyID0gYXdhaXQgdGhpcy5fcGMuY3JlYXRlT2ZmZXIoKTtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdzdG9wU2VuZGluZygpIHwgY2FsbGluZyBwYy5zZXRMb2NhbERlc2NyaXB0aW9uKCkgW29mZmVyOiVvXScsIG9mZmVyKTtcbiAgICAgICAgYXdhaXQgdGhpcy5fcGMuc2V0TG9jYWxEZXNjcmlwdGlvbihvZmZlcik7XG4gICAgICAgIGNvbnN0IGFuc3dlciA9IHsgdHlwZTogJ2Fuc3dlcicsIHNkcDogdGhpcy5fcmVtb3RlU2RwLmdldFNkcCgpIH07XG4gICAgICAgIGxvZ2dlci5kZWJ1Zygnc3RvcFNlbmRpbmcoKSB8IGNhbGxpbmcgcGMuc2V0UmVtb3RlRGVzY3JpcHRpb24oKSBbYW5zd2VyOiVvXScsIGFuc3dlcik7XG4gICAgICAgIGF3YWl0IHRoaXMuX3BjLnNldFJlbW90ZURlc2NyaXB0aW9uKGFuc3dlcik7XG4gICAgfVxuICAgIGFzeW5jIHJlcGxhY2VUcmFjayhsb2NhbElkLCB0cmFjaykge1xuICAgICAgICB0aGlzLl9hc3NlcnRTZW5kRGlyZWN0aW9uKCk7XG4gICAgICAgIGlmICh0cmFjaykge1xuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdyZXBsYWNlVHJhY2soKSBbbG9jYWxJZDolcywgdHJhY2suaWQ6JXNdJywgbG9jYWxJZCwgdHJhY2suaWQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdyZXBsYWNlVHJhY2soKSBbbG9jYWxJZDolcywgbm8gdHJhY2tdJywgbG9jYWxJZCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdHJhbnNjZWl2ZXIgPSB0aGlzLl9tYXBNaWRUcmFuc2NlaXZlci5nZXQobG9jYWxJZCk7XG4gICAgICAgIGlmICghdHJhbnNjZWl2ZXIpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Fzc29jaWF0ZWQgUlRDUnRwVHJhbnNjZWl2ZXIgbm90IGZvdW5kJyk7XG4gICAgICAgIGF3YWl0IHRyYW5zY2VpdmVyLnNlbmRlci5yZXBsYWNlVHJhY2sodHJhY2spO1xuICAgIH1cbiAgICBhc3luYyBzZXRNYXhTcGF0aWFsTGF5ZXIobG9jYWxJZCwgc3BhdGlhbExheWVyKSB7XG4gICAgICAgIHRoaXMuX2Fzc2VydFNlbmREaXJlY3Rpb24oKTtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdzZXRNYXhTcGF0aWFsTGF5ZXIoKSBbbG9jYWxJZDolcywgc3BhdGlhbExheWVyOiVzXScsIGxvY2FsSWQsIHNwYXRpYWxMYXllcik7XG4gICAgICAgIGNvbnN0IHRyYW5zY2VpdmVyID0gdGhpcy5fbWFwTWlkVHJhbnNjZWl2ZXIuZ2V0KGxvY2FsSWQpO1xuICAgICAgICBpZiAoIXRyYW5zY2VpdmVyKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdhc3NvY2lhdGVkIHRyYW5zY2VpdmVyIG5vdCBmb3VuZCcpO1xuICAgICAgICBjb25zdCBwYXJhbWV0ZXJzID0gdHJhbnNjZWl2ZXIuc2VuZGVyLmdldFBhcmFtZXRlcnMoKTtcbiAgICAgICAgLy8gTk9URTogV2UgcmVxdWlyZSBlbmNvZGluZ3MgZ2l2ZW4gZnJvbSBsb3cgdG8gaGlnaCwgaG93ZXZlciBGaXJlZm94XG4gICAgICAgIC8vIHJlcXVpcmVzIHRoZW0gaW4gcmV2ZXJzZSBvcmRlciwgc28gZG8gbWFnaWMgaGVyZS5cbiAgICAgICAgc3BhdGlhbExheWVyID0gcGFyYW1ldGVycy5lbmNvZGluZ3MubGVuZ3RoIC0gMSAtIHNwYXRpYWxMYXllcjtcbiAgICAgICAgcGFyYW1ldGVycy5lbmNvZGluZ3MuZm9yRWFjaCgoZW5jb2RpbmcsIGlkeCkgPT4ge1xuICAgICAgICAgICAgaWYgKGlkeCA+PSBzcGF0aWFsTGF5ZXIpXG4gICAgICAgICAgICAgICAgZW5jb2RpbmcuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBlbmNvZGluZy5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGF3YWl0IHRyYW5zY2VpdmVyLnNlbmRlci5zZXRQYXJhbWV0ZXJzKHBhcmFtZXRlcnMpO1xuICAgIH1cbiAgICBhc3luYyBzZXRSdHBFbmNvZGluZ1BhcmFtZXRlcnMobG9jYWxJZCwgcGFyYW1zKSB7XG4gICAgICAgIHRoaXMuX2Fzc2VydFNlbmREaXJlY3Rpb24oKTtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdzZXRSdHBFbmNvZGluZ1BhcmFtZXRlcnMoKSBbbG9jYWxJZDolcywgcGFyYW1zOiVvXScsIGxvY2FsSWQsIHBhcmFtcyk7XG4gICAgICAgIGNvbnN0IHRyYW5zY2VpdmVyID0gdGhpcy5fbWFwTWlkVHJhbnNjZWl2ZXIuZ2V0KGxvY2FsSWQpO1xuICAgICAgICBpZiAoIXRyYW5zY2VpdmVyKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdhc3NvY2lhdGVkIFJUQ1J0cFRyYW5zY2VpdmVyIG5vdCBmb3VuZCcpO1xuICAgICAgICBjb25zdCBwYXJhbWV0ZXJzID0gdHJhbnNjZWl2ZXIuc2VuZGVyLmdldFBhcmFtZXRlcnMoKTtcbiAgICAgICAgcGFyYW1ldGVycy5lbmNvZGluZ3MuZm9yRWFjaCgoZW5jb2RpbmcsIGlkeCkgPT4ge1xuICAgICAgICAgICAgcGFyYW1ldGVycy5lbmNvZGluZ3NbaWR4XSA9IHsgLi4uZW5jb2RpbmcsIC4uLnBhcmFtcyB9O1xuICAgICAgICB9KTtcbiAgICAgICAgYXdhaXQgdHJhbnNjZWl2ZXIuc2VuZGVyLnNldFBhcmFtZXRlcnMocGFyYW1ldGVycyk7XG4gICAgfVxuICAgIGFzeW5jIGdldFNlbmRlclN0YXRzKGxvY2FsSWQpIHtcbiAgICAgICAgdGhpcy5fYXNzZXJ0U2VuZERpcmVjdGlvbigpO1xuICAgICAgICBjb25zdCB0cmFuc2NlaXZlciA9IHRoaXMuX21hcE1pZFRyYW5zY2VpdmVyLmdldChsb2NhbElkKTtcbiAgICAgICAgaWYgKCF0cmFuc2NlaXZlcilcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYXNzb2NpYXRlZCBSVENSdHBUcmFuc2NlaXZlciBub3QgZm91bmQnKTtcbiAgICAgICAgcmV0dXJuIHRyYW5zY2VpdmVyLnNlbmRlci5nZXRTdGF0cygpO1xuICAgIH1cbiAgICBhc3luYyBzZW5kRGF0YUNoYW5uZWwoeyBvcmRlcmVkLCBtYXhQYWNrZXRMaWZlVGltZSwgbWF4UmV0cmFuc21pdHMsIGxhYmVsLCBwcm90b2NvbCwgcHJpb3JpdHkgfSkge1xuICAgICAgICB0aGlzLl9hc3NlcnRTZW5kRGlyZWN0aW9uKCk7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICBuZWdvdGlhdGVkOiB0cnVlLFxuICAgICAgICAgICAgaWQ6IHRoaXMuX25leHRTZW5kU2N0cFN0cmVhbUlkLFxuICAgICAgICAgICAgb3JkZXJlZCxcbiAgICAgICAgICAgIG1heFBhY2tldExpZmVUaW1lLFxuICAgICAgICAgICAgbWF4UmV0cmFuc21pdHMsXG4gICAgICAgICAgICBwcm90b2NvbCxcbiAgICAgICAgICAgIHByaW9yaXR5XG4gICAgICAgIH07XG4gICAgICAgIGxvZ2dlci5kZWJ1Zygnc2VuZERhdGFDaGFubmVsKCkgW29wdGlvbnM6JW9dJywgb3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IGRhdGFDaGFubmVsID0gdGhpcy5fcGMuY3JlYXRlRGF0YUNoYW5uZWwobGFiZWwsIG9wdGlvbnMpO1xuICAgICAgICAvLyBJbmNyZWFzZSBuZXh0IGlkLlxuICAgICAgICB0aGlzLl9uZXh0U2VuZFNjdHBTdHJlYW1JZCA9XG4gICAgICAgICAgICArK3RoaXMuX25leHRTZW5kU2N0cFN0cmVhbUlkICUgU0NUUF9OVU1fU1RSRUFNUy5NSVM7XG4gICAgICAgIC8vIElmIHRoaXMgaXMgdGhlIGZpcnN0IERhdGFDaGFubmVsIHdlIG5lZWQgdG8gY3JlYXRlIHRoZSBTRFAgYW5zd2VyIHdpdGhcbiAgICAgICAgLy8gbT1hcHBsaWNhdGlvbiBzZWN0aW9uLlxuICAgICAgICBpZiAoIXRoaXMuX2hhc0RhdGFDaGFubmVsTWVkaWFTZWN0aW9uKSB7XG4gICAgICAgICAgICBjb25zdCBvZmZlciA9IGF3YWl0IHRoaXMuX3BjLmNyZWF0ZU9mZmVyKCk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFNkcE9iamVjdCA9IHNkcFRyYW5zZm9ybS5wYXJzZShvZmZlci5zZHApO1xuICAgICAgICAgICAgY29uc3Qgb2ZmZXJNZWRpYU9iamVjdCA9IGxvY2FsU2RwT2JqZWN0Lm1lZGlhXG4gICAgICAgICAgICAgICAgLmZpbmQoKG0pID0+IG0udHlwZSA9PT0gJ2FwcGxpY2F0aW9uJyk7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX3RyYW5zcG9ydFJlYWR5KVxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuX3NldHVwVHJhbnNwb3J0KHsgbG9jYWxEdGxzUm9sZTogJ3NlcnZlcicsIGxvY2FsU2RwT2JqZWN0IH0pO1xuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdzZW5kRGF0YUNoYW5uZWwoKSB8IGNhbGxpbmcgcGMuc2V0TG9jYWxEZXNjcmlwdGlvbigpIFtvZmZlcjolb10nLCBvZmZlcik7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLl9wYy5zZXRMb2NhbERlc2NyaXB0aW9uKG9mZmVyKTtcbiAgICAgICAgICAgIHRoaXMuX3JlbW90ZVNkcC5zZW5kU2N0cEFzc29jaWF0aW9uKHsgb2ZmZXJNZWRpYU9iamVjdCB9KTtcbiAgICAgICAgICAgIGNvbnN0IGFuc3dlciA9IHsgdHlwZTogJ2Fuc3dlcicsIHNkcDogdGhpcy5fcmVtb3RlU2RwLmdldFNkcCgpIH07XG4gICAgICAgICAgICBsb2dnZXIuZGVidWcoJ3NlbmREYXRhQ2hhbm5lbCgpIHwgY2FsbGluZyBwYy5zZXRSZW1vdGVEZXNjcmlwdGlvbigpIFthbnN3ZXI6JW9dJywgYW5zd2VyKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX3BjLnNldFJlbW90ZURlc2NyaXB0aW9uKGFuc3dlcik7XG4gICAgICAgICAgICB0aGlzLl9oYXNEYXRhQ2hhbm5lbE1lZGlhU2VjdGlvbiA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2N0cFN0cmVhbVBhcmFtZXRlcnMgPSB7XG4gICAgICAgICAgICBzdHJlYW1JZDogb3B0aW9ucy5pZCxcbiAgICAgICAgICAgIG9yZGVyZWQ6IG9wdGlvbnMub3JkZXJlZCxcbiAgICAgICAgICAgIG1heFBhY2tldExpZmVUaW1lOiBvcHRpb25zLm1heFBhY2tldExpZmVUaW1lLFxuICAgICAgICAgICAgbWF4UmV0cmFuc21pdHM6IG9wdGlvbnMubWF4UmV0cmFuc21pdHNcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHsgZGF0YUNoYW5uZWwsIHNjdHBTdHJlYW1QYXJhbWV0ZXJzIH07XG4gICAgfVxuICAgIGFzeW5jIHJlY2VpdmUoeyB0cmFja0lkLCBraW5kLCBydHBQYXJhbWV0ZXJzIH0pIHtcbiAgICAgICAgdGhpcy5fYXNzZXJ0UmVjdkRpcmVjdGlvbigpO1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3JlY2VpdmUoKSBbdHJhY2tJZDolcywga2luZDolc10nLCB0cmFja0lkLCBraW5kKTtcbiAgICAgICAgY29uc3QgbG9jYWxJZCA9IHJ0cFBhcmFtZXRlcnMubWlkIHx8IFN0cmluZyh0aGlzLl9tYXBNaWRUcmFuc2NlaXZlci5zaXplKTtcbiAgICAgICAgdGhpcy5fcmVtb3RlU2RwLnJlY2VpdmUoe1xuICAgICAgICAgICAgbWlkOiBsb2NhbElkLFxuICAgICAgICAgICAga2luZCxcbiAgICAgICAgICAgIG9mZmVyUnRwUGFyYW1ldGVyczogcnRwUGFyYW1ldGVycyxcbiAgICAgICAgICAgIHN0cmVhbUlkOiBydHBQYXJhbWV0ZXJzLnJ0Y3AuY25hbWUsXG4gICAgICAgICAgICB0cmFja0lkXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBvZmZlciA9IHsgdHlwZTogJ29mZmVyJywgc2RwOiB0aGlzLl9yZW1vdGVTZHAuZ2V0U2RwKCkgfTtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdyZWNlaXZlKCkgfCBjYWxsaW5nIHBjLnNldFJlbW90ZURlc2NyaXB0aW9uKCkgW29mZmVyOiVvXScsIG9mZmVyKTtcbiAgICAgICAgYXdhaXQgdGhpcy5fcGMuc2V0UmVtb3RlRGVzY3JpcHRpb24ob2ZmZXIpO1xuICAgICAgICBsZXQgYW5zd2VyID0gYXdhaXQgdGhpcy5fcGMuY3JlYXRlQW5zd2VyKCk7XG4gICAgICAgIGNvbnN0IGxvY2FsU2RwT2JqZWN0ID0gc2RwVHJhbnNmb3JtLnBhcnNlKGFuc3dlci5zZHApO1xuICAgICAgICBjb25zdCBhbnN3ZXJNZWRpYU9iamVjdCA9IGxvY2FsU2RwT2JqZWN0Lm1lZGlhXG4gICAgICAgICAgICAuZmluZCgobSkgPT4gU3RyaW5nKG0ubWlkKSA9PT0gbG9jYWxJZCk7XG4gICAgICAgIC8vIE1heSBuZWVkIHRvIG1vZGlmeSBjb2RlYyBwYXJhbWV0ZXJzIGluIHRoZSBhbnN3ZXIgYmFzZWQgb24gY29kZWNcbiAgICAgICAgLy8gcGFyYW1ldGVycyBpbiB0aGUgb2ZmZXIuXG4gICAgICAgIHNkcENvbW1vblV0aWxzLmFwcGx5Q29kZWNQYXJhbWV0ZXJzKHtcbiAgICAgICAgICAgIG9mZmVyUnRwUGFyYW1ldGVyczogcnRwUGFyYW1ldGVycyxcbiAgICAgICAgICAgIGFuc3dlck1lZGlhT2JqZWN0XG4gICAgICAgIH0pO1xuICAgICAgICBhbnN3ZXIgPSB7IHR5cGU6ICdhbnN3ZXInLCBzZHA6IHNkcFRyYW5zZm9ybS53cml0ZShsb2NhbFNkcE9iamVjdCkgfTtcbiAgICAgICAgaWYgKCF0aGlzLl90cmFuc3BvcnRSZWFkeSlcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX3NldHVwVHJhbnNwb3J0KHsgbG9jYWxEdGxzUm9sZTogJ2NsaWVudCcsIGxvY2FsU2RwT2JqZWN0IH0pO1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3JlY2VpdmUoKSB8IGNhbGxpbmcgcGMuc2V0TG9jYWxEZXNjcmlwdGlvbigpIFthbnN3ZXI6JW9dJywgYW5zd2VyKTtcbiAgICAgICAgYXdhaXQgdGhpcy5fcGMuc2V0TG9jYWxEZXNjcmlwdGlvbihhbnN3ZXIpO1xuICAgICAgICBjb25zdCB0cmFuc2NlaXZlciA9IHRoaXMuX3BjLmdldFRyYW5zY2VpdmVycygpXG4gICAgICAgICAgICAuZmluZCgodCkgPT4gdC5taWQgPT09IGxvY2FsSWQpO1xuICAgICAgICBpZiAoIXRyYW5zY2VpdmVyKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCduZXcgUlRDUnRwVHJhbnNjZWl2ZXIgbm90IGZvdW5kJyk7XG4gICAgICAgIC8vIFN0b3JlIGluIHRoZSBtYXAuXG4gICAgICAgIHRoaXMuX21hcE1pZFRyYW5zY2VpdmVyLnNldChsb2NhbElkLCB0cmFuc2NlaXZlcik7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsb2NhbElkLFxuICAgICAgICAgICAgdHJhY2s6IHRyYW5zY2VpdmVyLnJlY2VpdmVyLnRyYWNrLFxuICAgICAgICAgICAgcnRwUmVjZWl2ZXI6IHRyYW5zY2VpdmVyLnJlY2VpdmVyXG4gICAgICAgIH07XG4gICAgfVxuICAgIGFzeW5jIHN0b3BSZWNlaXZpbmcobG9jYWxJZCkge1xuICAgICAgICB0aGlzLl9hc3NlcnRSZWN2RGlyZWN0aW9uKCk7XG4gICAgICAgIGxvZ2dlci5kZWJ1Zygnc3RvcFJlY2VpdmluZygpIFtsb2NhbElkOiVzXScsIGxvY2FsSWQpO1xuICAgICAgICBjb25zdCB0cmFuc2NlaXZlciA9IHRoaXMuX21hcE1pZFRyYW5zY2VpdmVyLmdldChsb2NhbElkKTtcbiAgICAgICAgaWYgKCF0cmFuc2NlaXZlcilcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYXNzb2NpYXRlZCBSVENSdHBUcmFuc2NlaXZlciBub3QgZm91bmQnKTtcbiAgICAgICAgdGhpcy5fcmVtb3RlU2RwLmNsb3NlTWVkaWFTZWN0aW9uKHRyYW5zY2VpdmVyLm1pZCk7XG4gICAgICAgIGNvbnN0IG9mZmVyID0geyB0eXBlOiAnb2ZmZXInLCBzZHA6IHRoaXMuX3JlbW90ZVNkcC5nZXRTZHAoKSB9O1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3N0b3BSZWNlaXZpbmcoKSB8IGNhbGxpbmcgcGMuc2V0UmVtb3RlRGVzY3JpcHRpb24oKSBbb2ZmZXI6JW9dJywgb2ZmZXIpO1xuICAgICAgICBhd2FpdCB0aGlzLl9wYy5zZXRSZW1vdGVEZXNjcmlwdGlvbihvZmZlcik7XG4gICAgICAgIGNvbnN0IGFuc3dlciA9IGF3YWl0IHRoaXMuX3BjLmNyZWF0ZUFuc3dlcigpO1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3N0b3BSZWNlaXZpbmcoKSB8IGNhbGxpbmcgcGMuc2V0TG9jYWxEZXNjcmlwdGlvbigpIFthbnN3ZXI6JW9dJywgYW5zd2VyKTtcbiAgICAgICAgYXdhaXQgdGhpcy5fcGMuc2V0TG9jYWxEZXNjcmlwdGlvbihhbnN3ZXIpO1xuICAgIH1cbiAgICBhc3luYyBnZXRSZWNlaXZlclN0YXRzKGxvY2FsSWQpIHtcbiAgICAgICAgdGhpcy5fYXNzZXJ0UmVjdkRpcmVjdGlvbigpO1xuICAgICAgICBjb25zdCB0cmFuc2NlaXZlciA9IHRoaXMuX21hcE1pZFRyYW5zY2VpdmVyLmdldChsb2NhbElkKTtcbiAgICAgICAgaWYgKCF0cmFuc2NlaXZlcilcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYXNzb2NpYXRlZCBSVENSdHBUcmFuc2NlaXZlciBub3QgZm91bmQnKTtcbiAgICAgICAgcmV0dXJuIHRyYW5zY2VpdmVyLnJlY2VpdmVyLmdldFN0YXRzKCk7XG4gICAgfVxuICAgIGFzeW5jIHJlY2VpdmVEYXRhQ2hhbm5lbCh7IHNjdHBTdHJlYW1QYXJhbWV0ZXJzLCBsYWJlbCwgcHJvdG9jb2wgfSkge1xuICAgICAgICB0aGlzLl9hc3NlcnRSZWN2RGlyZWN0aW9uKCk7XG4gICAgICAgIGNvbnN0IHsgc3RyZWFtSWQsIG9yZGVyZWQsIG1heFBhY2tldExpZmVUaW1lLCBtYXhSZXRyYW5zbWl0cyB9ID0gc2N0cFN0cmVhbVBhcmFtZXRlcnM7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICBuZWdvdGlhdGVkOiB0cnVlLFxuICAgICAgICAgICAgaWQ6IHN0cmVhbUlkLFxuICAgICAgICAgICAgb3JkZXJlZCxcbiAgICAgICAgICAgIG1heFBhY2tldExpZmVUaW1lLFxuICAgICAgICAgICAgbWF4UmV0cmFuc21pdHMsXG4gICAgICAgICAgICBwcm90b2NvbFxuICAgICAgICB9O1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3JlY2VpdmVEYXRhQ2hhbm5lbCgpIFtvcHRpb25zOiVvXScsIG9wdGlvbnMpO1xuICAgICAgICBjb25zdCBkYXRhQ2hhbm5lbCA9IHRoaXMuX3BjLmNyZWF0ZURhdGFDaGFubmVsKGxhYmVsLCBvcHRpb25zKTtcbiAgICAgICAgLy8gSWYgdGhpcyBpcyB0aGUgZmlyc3QgRGF0YUNoYW5uZWwgd2UgbmVlZCB0byBjcmVhdGUgdGhlIFNEUCBvZmZlciB3aXRoXG4gICAgICAgIC8vIG09YXBwbGljYXRpb24gc2VjdGlvbi5cbiAgICAgICAgaWYgKCF0aGlzLl9oYXNEYXRhQ2hhbm5lbE1lZGlhU2VjdGlvbikge1xuICAgICAgICAgICAgdGhpcy5fcmVtb3RlU2RwLnJlY2VpdmVTY3RwQXNzb2NpYXRpb24oKTtcbiAgICAgICAgICAgIGNvbnN0IG9mZmVyID0geyB0eXBlOiAnb2ZmZXInLCBzZHA6IHRoaXMuX3JlbW90ZVNkcC5nZXRTZHAoKSB9O1xuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdyZWNlaXZlRGF0YUNoYW5uZWwoKSB8IGNhbGxpbmcgcGMuc2V0UmVtb3RlRGVzY3JpcHRpb24oKSBbb2ZmZXI6JW9dJywgb2ZmZXIpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5fcGMuc2V0UmVtb3RlRGVzY3JpcHRpb24ob2ZmZXIpO1xuICAgICAgICAgICAgY29uc3QgYW5zd2VyID0gYXdhaXQgdGhpcy5fcGMuY3JlYXRlQW5zd2VyKCk7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX3RyYW5zcG9ydFJlYWR5KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxTZHBPYmplY3QgPSBzZHBUcmFuc2Zvcm0ucGFyc2UoYW5zd2VyLnNkcCk7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5fc2V0dXBUcmFuc3BvcnQoeyBsb2NhbER0bHNSb2xlOiAnY2xpZW50JywgbG9jYWxTZHBPYmplY3QgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsb2dnZXIuZGVidWcoJ3JlY2VpdmVEYXRhQ2hhbm5lbCgpIHwgY2FsbGluZyBwYy5zZXRSZW1vdGVEZXNjcmlwdGlvbigpIFthbnN3ZXI6JW9dJywgYW5zd2VyKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX3BjLnNldExvY2FsRGVzY3JpcHRpb24oYW5zd2VyKTtcbiAgICAgICAgICAgIHRoaXMuX2hhc0RhdGFDaGFubmVsTWVkaWFTZWN0aW9uID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBkYXRhQ2hhbm5lbCB9O1xuICAgIH1cbiAgICBhc3luYyBfc2V0dXBUcmFuc3BvcnQoeyBsb2NhbER0bHNSb2xlLCBsb2NhbFNkcE9iamVjdCB9KSB7XG4gICAgICAgIGlmICghbG9jYWxTZHBPYmplY3QpXG4gICAgICAgICAgICBsb2NhbFNkcE9iamVjdCA9IHNkcFRyYW5zZm9ybS5wYXJzZSh0aGlzLl9wYy5sb2NhbERlc2NyaXB0aW9uLnNkcCk7XG4gICAgICAgIC8vIEdldCBvdXIgbG9jYWwgRFRMUyBwYXJhbWV0ZXJzLlxuICAgICAgICBjb25zdCBkdGxzUGFyYW1ldGVycyA9IHNkcENvbW1vblV0aWxzLmV4dHJhY3REdGxzUGFyYW1ldGVycyh7IHNkcE9iamVjdDogbG9jYWxTZHBPYmplY3QgfSk7XG4gICAgICAgIC8vIFNldCBvdXIgRFRMUyByb2xlLlxuICAgICAgICBkdGxzUGFyYW1ldGVycy5yb2xlID0gbG9jYWxEdGxzUm9sZTtcbiAgICAgICAgLy8gVXBkYXRlIHRoZSByZW1vdGUgRFRMUyByb2xlIGluIHRoZSBTRFAuXG4gICAgICAgIHRoaXMuX3JlbW90ZVNkcC51cGRhdGVEdGxzUm9sZShsb2NhbER0bHNSb2xlID09PSAnY2xpZW50JyA/ICdzZXJ2ZXInIDogJ2NsaWVudCcpO1xuICAgICAgICAvLyBOZWVkIHRvIHRlbGwgdGhlIHJlbW90ZSB0cmFuc3BvcnQgYWJvdXQgb3VyIHBhcmFtZXRlcnMuXG4gICAgICAgIGF3YWl0IHRoaXMuc2FmZUVtaXRBc1Byb21pc2UoJ0Bjb25uZWN0JywgeyBkdGxzUGFyYW1ldGVycyB9KTtcbiAgICAgICAgdGhpcy5fdHJhbnNwb3J0UmVhZHkgPSB0cnVlO1xuICAgIH1cbiAgICBfYXNzZXJ0U2VuZERpcmVjdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuX2RpcmVjdGlvbiAhPT0gJ3NlbmQnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ21ldGhvZCBjYW4ganVzdCBiZSBjYWxsZWQgZm9yIGhhbmRsZXJzIHdpdGggXCJzZW5kXCIgZGlyZWN0aW9uJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX2Fzc2VydFJlY3ZEaXJlY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLl9kaXJlY3Rpb24gIT09ICdyZWN2Jykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdtZXRob2QgY2FuIGp1c3QgYmUgY2FsbGVkIGZvciBoYW5kbGVycyB3aXRoIFwicmVjdlwiIGRpcmVjdGlvbicpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5GaXJlZm94NjAgPSBGaXJlZm94NjA7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHNkcFRyYW5zZm9ybSA9IHJlcXVpcmUoXCJzZHAtdHJhbnNmb3JtXCIpO1xuY29uc3QgTG9nZ2VyXzEgPSByZXF1aXJlKFwiLi4vTG9nZ2VyXCIpO1xuY29uc3QgdXRpbHMgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG5jb25zdCBvcnRjID0gcmVxdWlyZShcIi4uL29ydGNcIik7XG5jb25zdCBzZHBDb21tb25VdGlscyA9IHJlcXVpcmUoXCIuL3NkcC9jb21tb25VdGlsc1wiKTtcbmNvbnN0IHNkcFVuaWZpZWRQbGFuVXRpbHMgPSByZXF1aXJlKFwiLi9zZHAvdW5pZmllZFBsYW5VdGlsc1wiKTtcbmNvbnN0IEhhbmRsZXJJbnRlcmZhY2VfMSA9IHJlcXVpcmUoXCIuL0hhbmRsZXJJbnRlcmZhY2VcIik7XG5jb25zdCBSZW1vdGVTZHBfMSA9IHJlcXVpcmUoXCIuL3NkcC9SZW1vdGVTZHBcIik7XG5jb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyXzEuTG9nZ2VyKCdTYWZhcmkxMicpO1xuY29uc3QgU0NUUF9OVU1fU1RSRUFNUyA9IHsgT1M6IDEwMjQsIE1JUzogMTAyNCB9O1xuY2xhc3MgU2FmYXJpMTIgZXh0ZW5kcyBIYW5kbGVySW50ZXJmYWNlXzEuSGFuZGxlckludGVyZmFjZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIC8vIE1hcCBvZiBSVENUcmFuc2NlaXZlcnMgaW5kZXhlZCBieSBNSUQuXG4gICAgICAgIHRoaXMuX21hcE1pZFRyYW5zY2VpdmVyID0gbmV3IE1hcCgpO1xuICAgICAgICAvLyBMb2NhbCBzdHJlYW0gZm9yIHNlbmRpbmcuXG4gICAgICAgIHRoaXMuX3NlbmRTdHJlYW0gPSBuZXcgTWVkaWFTdHJlYW0oKTtcbiAgICAgICAgLy8gV2hldGhlciBhIERhdGFDaGFubmVsIG09YXBwbGljYXRpb24gc2VjdGlvbiBoYXMgYmVlbiBjcmVhdGVkLlxuICAgICAgICB0aGlzLl9oYXNEYXRhQ2hhbm5lbE1lZGlhU2VjdGlvbiA9IGZhbHNlO1xuICAgICAgICAvLyBTZW5kaW5nIERhdGFDaGFubmVsIGlkIHZhbHVlIGNvdW50ZXIuIEluY3JlbWVudGVkIGZvciBlYWNoIG5ldyBEYXRhQ2hhbm5lbC5cbiAgICAgICAgdGhpcy5fbmV4dFNlbmRTY3RwU3RyZWFtSWQgPSAwO1xuICAgICAgICAvLyBHb3QgdHJhbnNwb3J0IGxvY2FsIGFuZCByZW1vdGUgcGFyYW1ldGVycy5cbiAgICAgICAgdGhpcy5fdHJhbnNwb3J0UmVhZHkgPSBmYWxzZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZhY3RvcnkgZnVuY3Rpb24uXG4gICAgICovXG4gICAgc3RhdGljIGNyZWF0ZUZhY3RvcnkoKSB7XG4gICAgICAgIHJldHVybiAoKSA9PiBuZXcgU2FmYXJpMTIoKTtcbiAgICB9XG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnU2FmYXJpMTInO1xuICAgIH1cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdjbG9zZSgpJyk7XG4gICAgICAgIC8vIENsb3NlIFJUQ1BlZXJDb25uZWN0aW9uLlxuICAgICAgICBpZiAodGhpcy5fcGMpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcGMuY2xvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikgeyB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgZ2V0TmF0aXZlUnRwQ2FwYWJpbGl0aWVzKCkge1xuICAgICAgICBsb2dnZXIuZGVidWcoJ2dldE5hdGl2ZVJ0cENhcGFiaWxpdGllcygpJyk7XG4gICAgICAgIGNvbnN0IHBjID0gbmV3IFJUQ1BlZXJDb25uZWN0aW9uKHtcbiAgICAgICAgICAgIGljZVNlcnZlcnM6IFtdLFxuICAgICAgICAgICAgaWNlVHJhbnNwb3J0UG9saWN5OiAnYWxsJyxcbiAgICAgICAgICAgIGJ1bmRsZVBvbGljeTogJ21heC1idW5kbGUnLFxuICAgICAgICAgICAgcnRjcE11eFBvbGljeTogJ3JlcXVpcmUnXG4gICAgICAgIH0pO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcGMuYWRkVHJhbnNjZWl2ZXIoJ2F1ZGlvJyk7XG4gICAgICAgICAgICBwYy5hZGRUcmFuc2NlaXZlcigndmlkZW8nKTtcbiAgICAgICAgICAgIGNvbnN0IG9mZmVyID0gYXdhaXQgcGMuY3JlYXRlT2ZmZXIoKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcGMuY2xvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikgeyB9XG4gICAgICAgICAgICBjb25zdCBzZHBPYmplY3QgPSBzZHBUcmFuc2Zvcm0ucGFyc2Uob2ZmZXIuc2RwKTtcbiAgICAgICAgICAgIGNvbnN0IG5hdGl2ZVJ0cENhcGFiaWxpdGllcyA9IHNkcENvbW1vblV0aWxzLmV4dHJhY3RSdHBDYXBhYmlsaXRpZXMoeyBzZHBPYmplY3QgfSk7XG4gICAgICAgICAgICByZXR1cm4gbmF0aXZlUnRwQ2FwYWJpbGl0aWVzO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBwYy5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yMikgeyB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBnZXROYXRpdmVTY3RwQ2FwYWJpbGl0aWVzKCkge1xuICAgICAgICBsb2dnZXIuZGVidWcoJ2dldE5hdGl2ZVNjdHBDYXBhYmlsaXRpZXMoKScpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbnVtU3RyZWFtczogU0NUUF9OVU1fU1RSRUFNU1xuICAgICAgICB9O1xuICAgIH1cbiAgICBydW4oeyBkaXJlY3Rpb24sIGljZVBhcmFtZXRlcnMsIGljZUNhbmRpZGF0ZXMsIGR0bHNQYXJhbWV0ZXJzLCBzY3RwUGFyYW1ldGVycywgaWNlU2VydmVycywgaWNlVHJhbnNwb3J0UG9saWN5LCBhZGRpdGlvbmFsU2V0dGluZ3MsIHByb3ByaWV0YXJ5Q29uc3RyYWludHMsIGV4dGVuZGVkUnRwQ2FwYWJpbGl0aWVzIH0pIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdydW4oKScpO1xuICAgICAgICB0aGlzLl9kaXJlY3Rpb24gPSBkaXJlY3Rpb247XG4gICAgICAgIHRoaXMuX3JlbW90ZVNkcCA9IG5ldyBSZW1vdGVTZHBfMS5SZW1vdGVTZHAoe1xuICAgICAgICAgICAgaWNlUGFyYW1ldGVycyxcbiAgICAgICAgICAgIGljZUNhbmRpZGF0ZXMsXG4gICAgICAgICAgICBkdGxzUGFyYW1ldGVycyxcbiAgICAgICAgICAgIHNjdHBQYXJhbWV0ZXJzXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9zZW5kaW5nUnRwUGFyYW1ldGVyc0J5S2luZCA9XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYXVkaW86IG9ydGMuZ2V0U2VuZGluZ1J0cFBhcmFtZXRlcnMoJ2F1ZGlvJywgZXh0ZW5kZWRSdHBDYXBhYmlsaXRpZXMpLFxuICAgICAgICAgICAgICAgIHZpZGVvOiBvcnRjLmdldFNlbmRpbmdSdHBQYXJhbWV0ZXJzKCd2aWRlbycsIGV4dGVuZGVkUnRwQ2FwYWJpbGl0aWVzKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fc2VuZGluZ1JlbW90ZVJ0cFBhcmFtZXRlcnNCeUtpbmQgPVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGF1ZGlvOiBvcnRjLmdldFNlbmRpbmdSZW1vdGVSdHBQYXJhbWV0ZXJzKCdhdWRpbycsIGV4dGVuZGVkUnRwQ2FwYWJpbGl0aWVzKSxcbiAgICAgICAgICAgICAgICB2aWRlbzogb3J0Yy5nZXRTZW5kaW5nUmVtb3RlUnRwUGFyYW1ldGVycygndmlkZW8nLCBleHRlbmRlZFJ0cENhcGFiaWxpdGllcylcbiAgICAgICAgICAgIH07XG4gICAgICAgIHRoaXMuX3BjID0gbmV3IFJUQ1BlZXJDb25uZWN0aW9uKHtcbiAgICAgICAgICAgIGljZVNlcnZlcnM6IGljZVNlcnZlcnMgfHwgW10sXG4gICAgICAgICAgICBpY2VUcmFuc3BvcnRQb2xpY3k6IGljZVRyYW5zcG9ydFBvbGljeSB8fCAnYWxsJyxcbiAgICAgICAgICAgIGJ1bmRsZVBvbGljeTogJ21heC1idW5kbGUnLFxuICAgICAgICAgICAgcnRjcE11eFBvbGljeTogJ3JlcXVpcmUnLFxuICAgICAgICAgICAgLi4uYWRkaXRpb25hbFNldHRpbmdzXG4gICAgICAgIH0sIHByb3ByaWV0YXJ5Q29uc3RyYWludHMpO1xuICAgICAgICAvLyBIYW5kbGUgUlRDUGVlckNvbm5lY3Rpb24gY29ubmVjdGlvbiBzdGF0dXMuXG4gICAgICAgIHRoaXMuX3BjLmFkZEV2ZW50TGlzdGVuZXIoJ2ljZWNvbm5lY3Rpb25zdGF0ZWNoYW5nZScsICgpID0+IHtcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5fcGMuaWNlQ29ubmVjdGlvblN0YXRlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnY2hlY2tpbmcnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ0Bjb25uZWN0aW9uc3RhdGVjaGFuZ2UnLCAnY29ubmVjdGluZycpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdjb25uZWN0ZWQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2NvbXBsZXRlZCc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnQGNvbm5lY3Rpb25zdGF0ZWNoYW5nZScsICdjb25uZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnZmFpbGVkJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdAY29ubmVjdGlvbnN0YXRlY2hhbmdlJywgJ2ZhaWxlZCcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdkaXNjb25uZWN0ZWQnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ0Bjb25uZWN0aW9uc3RhdGVjaGFuZ2UnLCAnZGlzY29ubmVjdGVkJyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2Nsb3NlZCc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnQGNvbm5lY3Rpb25zdGF0ZWNoYW5nZScsICdjbG9zZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhc3luYyB1cGRhdGVJY2VTZXJ2ZXJzKGljZVNlcnZlcnMpIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCd1cGRhdGVJY2VTZXJ2ZXJzKCknKTtcbiAgICAgICAgY29uc3QgY29uZmlndXJhdGlvbiA9IHRoaXMuX3BjLmdldENvbmZpZ3VyYXRpb24oKTtcbiAgICAgICAgY29uZmlndXJhdGlvbi5pY2VTZXJ2ZXJzID0gaWNlU2VydmVycztcbiAgICAgICAgdGhpcy5fcGMuc2V0Q29uZmlndXJhdGlvbihjb25maWd1cmF0aW9uKTtcbiAgICB9XG4gICAgYXN5bmMgcmVzdGFydEljZShpY2VQYXJhbWV0ZXJzKSB7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZygncmVzdGFydEljZSgpJyk7XG4gICAgICAgIC8vIFByb3ZpZGUgdGhlIHJlbW90ZSBTRFAgaGFuZGxlciB3aXRoIG5ldyByZW1vdGUgSUNFIHBhcmFtZXRlcnMuXG4gICAgICAgIHRoaXMuX3JlbW90ZVNkcC51cGRhdGVJY2VQYXJhbWV0ZXJzKGljZVBhcmFtZXRlcnMpO1xuICAgICAgICBpZiAoIXRoaXMuX3RyYW5zcG9ydFJlYWR5KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpZiAodGhpcy5fZGlyZWN0aW9uID09PSAnc2VuZCcpIHtcbiAgICAgICAgICAgIGNvbnN0IG9mZmVyID0gYXdhaXQgdGhpcy5fcGMuY3JlYXRlT2ZmZXIoeyBpY2VSZXN0YXJ0OiB0cnVlIH0pO1xuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdyZXN0YXJ0SWNlKCkgfCBjYWxsaW5nIHBjLnNldExvY2FsRGVzY3JpcHRpb24oKSBbb2ZmZXI6JW9dJywgb2ZmZXIpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5fcGMuc2V0TG9jYWxEZXNjcmlwdGlvbihvZmZlcik7XG4gICAgICAgICAgICBjb25zdCBhbnN3ZXIgPSB7IHR5cGU6ICdhbnN3ZXInLCBzZHA6IHRoaXMuX3JlbW90ZVNkcC5nZXRTZHAoKSB9O1xuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdyZXN0YXJ0SWNlKCkgfCBjYWxsaW5nIHBjLnNldFJlbW90ZURlc2NyaXB0aW9uKCkgW2Fuc3dlcjolb10nLCBhbnN3ZXIpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5fcGMuc2V0UmVtb3RlRGVzY3JpcHRpb24oYW5zd2VyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IG9mZmVyID0geyB0eXBlOiAnb2ZmZXInLCBzZHA6IHRoaXMuX3JlbW90ZVNkcC5nZXRTZHAoKSB9O1xuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdyZXN0YXJ0SWNlKCkgfCBjYWxsaW5nIHBjLnNldFJlbW90ZURlc2NyaXB0aW9uKCkgW29mZmVyOiVvXScsIG9mZmVyKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX3BjLnNldFJlbW90ZURlc2NyaXB0aW9uKG9mZmVyKTtcbiAgICAgICAgICAgIGNvbnN0IGFuc3dlciA9IGF3YWl0IHRoaXMuX3BjLmNyZWF0ZUFuc3dlcigpO1xuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdyZXN0YXJ0SWNlKCkgfCBjYWxsaW5nIHBjLnNldExvY2FsRGVzY3JpcHRpb24oKSBbYW5zd2VyOiVvXScsIGFuc3dlcik7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLl9wYy5zZXRMb2NhbERlc2NyaXB0aW9uKGFuc3dlcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgZ2V0VHJhbnNwb3J0U3RhdHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wYy5nZXRTdGF0cygpO1xuICAgIH1cbiAgICBhc3luYyBzZW5kKHsgdHJhY2ssIGVuY29kaW5ncywgY29kZWNPcHRpb25zLCBjb2RlYyB9KSB7XG4gICAgICAgIHRoaXMuX2Fzc2VydFNlbmREaXJlY3Rpb24oKTtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdzZW5kKCkgW2tpbmQ6JXMsIHRyYWNrLmlkOiVzXScsIHRyYWNrLmtpbmQsIHRyYWNrLmlkKTtcbiAgICAgICAgY29uc3Qgc2VuZGluZ1J0cFBhcmFtZXRlcnMgPSB1dGlscy5jbG9uZSh0aGlzLl9zZW5kaW5nUnRwUGFyYW1ldGVyc0J5S2luZFt0cmFjay5raW5kXSk7XG4gICAgICAgIC8vIFRoaXMgbWF5IHRocm93LlxuICAgICAgICBzZW5kaW5nUnRwUGFyYW1ldGVycy5jb2RlY3MgPVxuICAgICAgICAgICAgb3J0Yy5yZWR1Y2VDb2RlY3Moc2VuZGluZ1J0cFBhcmFtZXRlcnMuY29kZWNzLCBjb2RlYyk7XG4gICAgICAgIGNvbnN0IHNlbmRpbmdSZW1vdGVSdHBQYXJhbWV0ZXJzID0gdXRpbHMuY2xvbmUodGhpcy5fc2VuZGluZ1JlbW90ZVJ0cFBhcmFtZXRlcnNCeUtpbmRbdHJhY2sua2luZF0pO1xuICAgICAgICAvLyBUaGlzIG1heSB0aHJvdy5cbiAgICAgICAgc2VuZGluZ1JlbW90ZVJ0cFBhcmFtZXRlcnMuY29kZWNzID1cbiAgICAgICAgICAgIG9ydGMucmVkdWNlQ29kZWNzKHNlbmRpbmdSZW1vdGVSdHBQYXJhbWV0ZXJzLmNvZGVjcywgY29kZWMpO1xuICAgICAgICBjb25zdCBtZWRpYVNlY3Rpb25JZHggPSB0aGlzLl9yZW1vdGVTZHAuZ2V0TmV4dE1lZGlhU2VjdGlvbklkeCgpO1xuICAgICAgICBjb25zdCB0cmFuc2NlaXZlciA9IHRoaXMuX3BjLmFkZFRyYW5zY2VpdmVyKHRyYWNrLCB7IGRpcmVjdGlvbjogJ3NlbmRvbmx5Jywgc3RyZWFtczogW3RoaXMuX3NlbmRTdHJlYW1dIH0pO1xuICAgICAgICBsZXQgb2ZmZXIgPSBhd2FpdCB0aGlzLl9wYy5jcmVhdGVPZmZlcigpO1xuICAgICAgICBsZXQgbG9jYWxTZHBPYmplY3QgPSBzZHBUcmFuc2Zvcm0ucGFyc2Uob2ZmZXIuc2RwKTtcbiAgICAgICAgbGV0IG9mZmVyTWVkaWFPYmplY3Q7XG4gICAgICAgIGlmICghdGhpcy5fdHJhbnNwb3J0UmVhZHkpXG4gICAgICAgICAgICBhd2FpdCB0aGlzLl9zZXR1cFRyYW5zcG9ydCh7IGxvY2FsRHRsc1JvbGU6ICdzZXJ2ZXInLCBsb2NhbFNkcE9iamVjdCB9KTtcbiAgICAgICAgaWYgKGVuY29kaW5ncyAmJiBlbmNvZGluZ3MubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdzZW5kKCkgfCBlbmFibGluZyBsZWdhY3kgc2ltdWxjYXN0Jyk7XG4gICAgICAgICAgICBsb2NhbFNkcE9iamVjdCA9IHNkcFRyYW5zZm9ybS5wYXJzZShvZmZlci5zZHApO1xuICAgICAgICAgICAgb2ZmZXJNZWRpYU9iamVjdCA9IGxvY2FsU2RwT2JqZWN0Lm1lZGlhW21lZGlhU2VjdGlvbklkeC5pZHhdO1xuICAgICAgICAgICAgc2RwVW5pZmllZFBsYW5VdGlscy5hZGRMZWdhY3lTaW11bGNhc3Qoe1xuICAgICAgICAgICAgICAgIG9mZmVyTWVkaWFPYmplY3QsXG4gICAgICAgICAgICAgICAgbnVtU3RyZWFtczogZW5jb2RpbmdzLmxlbmd0aFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBvZmZlciA9IHsgdHlwZTogJ29mZmVyJywgc2RwOiBzZHBUcmFuc2Zvcm0ud3JpdGUobG9jYWxTZHBPYmplY3QpIH07XG4gICAgICAgIH1cbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdzZW5kKCkgfCBjYWxsaW5nIHBjLnNldExvY2FsRGVzY3JpcHRpb24oKSBbb2ZmZXI6JW9dJywgb2ZmZXIpO1xuICAgICAgICBhd2FpdCB0aGlzLl9wYy5zZXRMb2NhbERlc2NyaXB0aW9uKG9mZmVyKTtcbiAgICAgICAgLy8gV2UgY2FuIG5vdyBnZXQgdGhlIHRyYW5zY2VpdmVyLm1pZC5cbiAgICAgICAgY29uc3QgbG9jYWxJZCA9IHRyYW5zY2VpdmVyLm1pZDtcbiAgICAgICAgLy8gU2V0IE1JRC5cbiAgICAgICAgc2VuZGluZ1J0cFBhcmFtZXRlcnMubWlkID0gbG9jYWxJZDtcbiAgICAgICAgbG9jYWxTZHBPYmplY3QgPSBzZHBUcmFuc2Zvcm0ucGFyc2UodGhpcy5fcGMubG9jYWxEZXNjcmlwdGlvbi5zZHApO1xuICAgICAgICBvZmZlck1lZGlhT2JqZWN0ID0gbG9jYWxTZHBPYmplY3QubWVkaWFbbWVkaWFTZWN0aW9uSWR4LmlkeF07XG4gICAgICAgIC8vIFNldCBSVENQIENOQU1FLlxuICAgICAgICBzZW5kaW5nUnRwUGFyYW1ldGVycy5ydGNwLmNuYW1lID1cbiAgICAgICAgICAgIHNkcENvbW1vblV0aWxzLmdldENuYW1lKHsgb2ZmZXJNZWRpYU9iamVjdCB9KTtcbiAgICAgICAgLy8gU2V0IFJUUCBlbmNvZGluZ3MuXG4gICAgICAgIHNlbmRpbmdSdHBQYXJhbWV0ZXJzLmVuY29kaW5ncyA9XG4gICAgICAgICAgICBzZHBVbmlmaWVkUGxhblV0aWxzLmdldFJ0cEVuY29kaW5ncyh7IG9mZmVyTWVkaWFPYmplY3QgfSk7XG4gICAgICAgIC8vIENvbXBsZXRlIGVuY29kaW5ncyB3aXRoIGdpdmVuIHZhbHVlcy5cbiAgICAgICAgaWYgKGVuY29kaW5ncykge1xuICAgICAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgc2VuZGluZ1J0cFBhcmFtZXRlcnMuZW5jb2RpbmdzLmxlbmd0aDsgKytpZHgpIHtcbiAgICAgICAgICAgICAgICBpZiAoZW5jb2RpbmdzW2lkeF0pXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oc2VuZGluZ1J0cFBhcmFtZXRlcnMuZW5jb2RpbmdzW2lkeF0sIGVuY29kaW5nc1tpZHhdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBJZiBWUDggb3IgSDI2NCBhbmQgdGhlcmUgaXMgZWZmZWN0aXZlIHNpbXVsY2FzdCwgYWRkIHNjYWxhYmlsaXR5TW9kZSB0b1xuICAgICAgICAvLyBlYWNoIGVuY29kaW5nLlxuICAgICAgICBpZiAoc2VuZGluZ1J0cFBhcmFtZXRlcnMuZW5jb2RpbmdzLmxlbmd0aCA+IDEgJiZcbiAgICAgICAgICAgIChzZW5kaW5nUnRwUGFyYW1ldGVycy5jb2RlY3NbMF0ubWltZVR5cGUudG9Mb3dlckNhc2UoKSA9PT0gJ3ZpZGVvL3ZwOCcgfHxcbiAgICAgICAgICAgICAgICBzZW5kaW5nUnRwUGFyYW1ldGVycy5jb2RlY3NbMF0ubWltZVR5cGUudG9Mb3dlckNhc2UoKSA9PT0gJ3ZpZGVvL2gyNjQnKSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBlbmNvZGluZyBvZiBzZW5kaW5nUnRwUGFyYW1ldGVycy5lbmNvZGluZ3MpIHtcbiAgICAgICAgICAgICAgICBlbmNvZGluZy5zY2FsYWJpbGl0eU1vZGUgPSAnUzFUMyc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcmVtb3RlU2RwLnNlbmQoe1xuICAgICAgICAgICAgb2ZmZXJNZWRpYU9iamVjdCxcbiAgICAgICAgICAgIHJldXNlTWlkOiBtZWRpYVNlY3Rpb25JZHgucmV1c2VNaWQsXG4gICAgICAgICAgICBvZmZlclJ0cFBhcmFtZXRlcnM6IHNlbmRpbmdSdHBQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgYW5zd2VyUnRwUGFyYW1ldGVyczogc2VuZGluZ1JlbW90ZVJ0cFBhcmFtZXRlcnMsXG4gICAgICAgICAgICBjb2RlY09wdGlvbnNcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGFuc3dlciA9IHsgdHlwZTogJ2Fuc3dlcicsIHNkcDogdGhpcy5fcmVtb3RlU2RwLmdldFNkcCgpIH07XG4gICAgICAgIGxvZ2dlci5kZWJ1Zygnc2VuZCgpIHwgY2FsbGluZyBwYy5zZXRSZW1vdGVEZXNjcmlwdGlvbigpIFthbnN3ZXI6JW9dJywgYW5zd2VyKTtcbiAgICAgICAgYXdhaXQgdGhpcy5fcGMuc2V0UmVtb3RlRGVzY3JpcHRpb24oYW5zd2VyKTtcbiAgICAgICAgLy8gU3RvcmUgaW4gdGhlIG1hcC5cbiAgICAgICAgdGhpcy5fbWFwTWlkVHJhbnNjZWl2ZXIuc2V0KGxvY2FsSWQsIHRyYW5zY2VpdmVyKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxvY2FsSWQsXG4gICAgICAgICAgICBydHBQYXJhbWV0ZXJzOiBzZW5kaW5nUnRwUGFyYW1ldGVycyxcbiAgICAgICAgICAgIHJ0cFNlbmRlcjogdHJhbnNjZWl2ZXIuc2VuZGVyXG4gICAgICAgIH07XG4gICAgfVxuICAgIGFzeW5jIHN0b3BTZW5kaW5nKGxvY2FsSWQpIHtcbiAgICAgICAgdGhpcy5fYXNzZXJ0U2VuZERpcmVjdGlvbigpO1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3N0b3BTZW5kaW5nKCkgW2xvY2FsSWQ6JXNdJywgbG9jYWxJZCk7XG4gICAgICAgIGNvbnN0IHRyYW5zY2VpdmVyID0gdGhpcy5fbWFwTWlkVHJhbnNjZWl2ZXIuZ2V0KGxvY2FsSWQpO1xuICAgICAgICBpZiAoIXRyYW5zY2VpdmVyKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdhc3NvY2lhdGVkIFJUQ1J0cFRyYW5zY2VpdmVyIG5vdCBmb3VuZCcpO1xuICAgICAgICB0cmFuc2NlaXZlci5zZW5kZXIucmVwbGFjZVRyYWNrKG51bGwpO1xuICAgICAgICB0aGlzLl9wYy5yZW1vdmVUcmFjayh0cmFuc2NlaXZlci5zZW5kZXIpO1xuICAgICAgICB0aGlzLl9yZW1vdGVTZHAuY2xvc2VNZWRpYVNlY3Rpb24odHJhbnNjZWl2ZXIubWlkKTtcbiAgICAgICAgY29uc3Qgb2ZmZXIgPSBhd2FpdCB0aGlzLl9wYy5jcmVhdGVPZmZlcigpO1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3N0b3BTZW5kaW5nKCkgfCBjYWxsaW5nIHBjLnNldExvY2FsRGVzY3JpcHRpb24oKSBbb2ZmZXI6JW9dJywgb2ZmZXIpO1xuICAgICAgICBhd2FpdCB0aGlzLl9wYy5zZXRMb2NhbERlc2NyaXB0aW9uKG9mZmVyKTtcbiAgICAgICAgY29uc3QgYW5zd2VyID0geyB0eXBlOiAnYW5zd2VyJywgc2RwOiB0aGlzLl9yZW1vdGVTZHAuZ2V0U2RwKCkgfTtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdzdG9wU2VuZGluZygpIHwgY2FsbGluZyBwYy5zZXRSZW1vdGVEZXNjcmlwdGlvbigpIFthbnN3ZXI6JW9dJywgYW5zd2VyKTtcbiAgICAgICAgYXdhaXQgdGhpcy5fcGMuc2V0UmVtb3RlRGVzY3JpcHRpb24oYW5zd2VyKTtcbiAgICB9XG4gICAgYXN5bmMgcmVwbGFjZVRyYWNrKGxvY2FsSWQsIHRyYWNrKSB7XG4gICAgICAgIHRoaXMuX2Fzc2VydFNlbmREaXJlY3Rpb24oKTtcbiAgICAgICAgaWYgKHRyYWNrKSB7XG4gICAgICAgICAgICBsb2dnZXIuZGVidWcoJ3JlcGxhY2VUcmFjaygpIFtsb2NhbElkOiVzLCB0cmFjay5pZDolc10nLCBsb2NhbElkLCB0cmFjay5pZCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsb2dnZXIuZGVidWcoJ3JlcGxhY2VUcmFjaygpIFtsb2NhbElkOiVzLCBubyB0cmFja10nLCBsb2NhbElkKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0cmFuc2NlaXZlciA9IHRoaXMuX21hcE1pZFRyYW5zY2VpdmVyLmdldChsb2NhbElkKTtcbiAgICAgICAgaWYgKCF0cmFuc2NlaXZlcilcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYXNzb2NpYXRlZCBSVENSdHBUcmFuc2NlaXZlciBub3QgZm91bmQnKTtcbiAgICAgICAgYXdhaXQgdHJhbnNjZWl2ZXIuc2VuZGVyLnJlcGxhY2VUcmFjayh0cmFjayk7XG4gICAgfVxuICAgIGFzeW5jIHNldE1heFNwYXRpYWxMYXllcihsb2NhbElkLCBzcGF0aWFsTGF5ZXIpIHtcbiAgICAgICAgdGhpcy5fYXNzZXJ0U2VuZERpcmVjdGlvbigpO1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3NldE1heFNwYXRpYWxMYXllcigpIFtsb2NhbElkOiVzLCBzcGF0aWFsTGF5ZXI6JXNdJywgbG9jYWxJZCwgc3BhdGlhbExheWVyKTtcbiAgICAgICAgY29uc3QgdHJhbnNjZWl2ZXIgPSB0aGlzLl9tYXBNaWRUcmFuc2NlaXZlci5nZXQobG9jYWxJZCk7XG4gICAgICAgIGlmICghdHJhbnNjZWl2ZXIpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Fzc29jaWF0ZWQgUlRDUnRwVHJhbnNjZWl2ZXIgbm90IGZvdW5kJyk7XG4gICAgICAgIGNvbnN0IHBhcmFtZXRlcnMgPSB0cmFuc2NlaXZlci5zZW5kZXIuZ2V0UGFyYW1ldGVycygpO1xuICAgICAgICBwYXJhbWV0ZXJzLmVuY29kaW5ncy5mb3JFYWNoKChlbmNvZGluZywgaWR4KSA9PiB7XG4gICAgICAgICAgICBpZiAoaWR4IDw9IHNwYXRpYWxMYXllcilcbiAgICAgICAgICAgICAgICBlbmNvZGluZy5hY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGVuY29kaW5nLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICB9KTtcbiAgICAgICAgYXdhaXQgdHJhbnNjZWl2ZXIuc2VuZGVyLnNldFBhcmFtZXRlcnMocGFyYW1ldGVycyk7XG4gICAgfVxuICAgIGFzeW5jIHNldFJ0cEVuY29kaW5nUGFyYW1ldGVycyhsb2NhbElkLCBwYXJhbXMpIHtcbiAgICAgICAgdGhpcy5fYXNzZXJ0U2VuZERpcmVjdGlvbigpO1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3NldFJ0cEVuY29kaW5nUGFyYW1ldGVycygpIFtsb2NhbElkOiVzLCBwYXJhbXM6JW9dJywgbG9jYWxJZCwgcGFyYW1zKTtcbiAgICAgICAgY29uc3QgdHJhbnNjZWl2ZXIgPSB0aGlzLl9tYXBNaWRUcmFuc2NlaXZlci5nZXQobG9jYWxJZCk7XG4gICAgICAgIGlmICghdHJhbnNjZWl2ZXIpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Fzc29jaWF0ZWQgUlRDUnRwVHJhbnNjZWl2ZXIgbm90IGZvdW5kJyk7XG4gICAgICAgIGNvbnN0IHBhcmFtZXRlcnMgPSB0cmFuc2NlaXZlci5zZW5kZXIuZ2V0UGFyYW1ldGVycygpO1xuICAgICAgICBwYXJhbWV0ZXJzLmVuY29kaW5ncy5mb3JFYWNoKChlbmNvZGluZywgaWR4KSA9PiB7XG4gICAgICAgICAgICBwYXJhbWV0ZXJzLmVuY29kaW5nc1tpZHhdID0geyAuLi5lbmNvZGluZywgLi4ucGFyYW1zIH07XG4gICAgICAgIH0pO1xuICAgICAgICBhd2FpdCB0cmFuc2NlaXZlci5zZW5kZXIuc2V0UGFyYW1ldGVycyhwYXJhbWV0ZXJzKTtcbiAgICB9XG4gICAgYXN5bmMgZ2V0U2VuZGVyU3RhdHMobG9jYWxJZCkge1xuICAgICAgICB0aGlzLl9hc3NlcnRTZW5kRGlyZWN0aW9uKCk7XG4gICAgICAgIGNvbnN0IHRyYW5zY2VpdmVyID0gdGhpcy5fbWFwTWlkVHJhbnNjZWl2ZXIuZ2V0KGxvY2FsSWQpO1xuICAgICAgICBpZiAoIXRyYW5zY2VpdmVyKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdhc3NvY2lhdGVkIFJUQ1J0cFRyYW5zY2VpdmVyIG5vdCBmb3VuZCcpO1xuICAgICAgICByZXR1cm4gdHJhbnNjZWl2ZXIuc2VuZGVyLmdldFN0YXRzKCk7XG4gICAgfVxuICAgIGFzeW5jIHNlbmREYXRhQ2hhbm5lbCh7IG9yZGVyZWQsIG1heFBhY2tldExpZmVUaW1lLCBtYXhSZXRyYW5zbWl0cywgbGFiZWwsIHByb3RvY29sLCBwcmlvcml0eSB9KSB7XG4gICAgICAgIHRoaXMuX2Fzc2VydFNlbmREaXJlY3Rpb24oKTtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIG5lZ290aWF0ZWQ6IHRydWUsXG4gICAgICAgICAgICBpZDogdGhpcy5fbmV4dFNlbmRTY3RwU3RyZWFtSWQsXG4gICAgICAgICAgICBvcmRlcmVkLFxuICAgICAgICAgICAgbWF4UGFja2V0TGlmZVRpbWUsXG4gICAgICAgICAgICBtYXhSZXRyYW5zbWl0cyxcbiAgICAgICAgICAgIHByb3RvY29sLFxuICAgICAgICAgICAgcHJpb3JpdHlcbiAgICAgICAgfTtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdzZW5kRGF0YUNoYW5uZWwoKSBbb3B0aW9uczolb10nLCBvcHRpb25zKTtcbiAgICAgICAgY29uc3QgZGF0YUNoYW5uZWwgPSB0aGlzLl9wYy5jcmVhdGVEYXRhQ2hhbm5lbChsYWJlbCwgb3B0aW9ucyk7XG4gICAgICAgIC8vIEluY3JlYXNlIG5leHQgaWQuXG4gICAgICAgIHRoaXMuX25leHRTZW5kU2N0cFN0cmVhbUlkID1cbiAgICAgICAgICAgICsrdGhpcy5fbmV4dFNlbmRTY3RwU3RyZWFtSWQgJSBTQ1RQX05VTV9TVFJFQU1TLk1JUztcbiAgICAgICAgLy8gSWYgdGhpcyBpcyB0aGUgZmlyc3QgRGF0YUNoYW5uZWwgd2UgbmVlZCB0byBjcmVhdGUgdGhlIFNEUCBhbnN3ZXIgd2l0aFxuICAgICAgICAvLyBtPWFwcGxpY2F0aW9uIHNlY3Rpb24uXG4gICAgICAgIGlmICghdGhpcy5faGFzRGF0YUNoYW5uZWxNZWRpYVNlY3Rpb24pIHtcbiAgICAgICAgICAgIGNvbnN0IG9mZmVyID0gYXdhaXQgdGhpcy5fcGMuY3JlYXRlT2ZmZXIoKTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsU2RwT2JqZWN0ID0gc2RwVHJhbnNmb3JtLnBhcnNlKG9mZmVyLnNkcCk7XG4gICAgICAgICAgICBjb25zdCBvZmZlck1lZGlhT2JqZWN0ID0gbG9jYWxTZHBPYmplY3QubWVkaWFcbiAgICAgICAgICAgICAgICAuZmluZCgobSkgPT4gbS50eXBlID09PSAnYXBwbGljYXRpb24nKTtcbiAgICAgICAgICAgIGlmICghdGhpcy5fdHJhbnNwb3J0UmVhZHkpXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5fc2V0dXBUcmFuc3BvcnQoeyBsb2NhbER0bHNSb2xlOiAnc2VydmVyJywgbG9jYWxTZHBPYmplY3QgfSk7XG4gICAgICAgICAgICBsb2dnZXIuZGVidWcoJ3NlbmREYXRhQ2hhbm5lbCgpIHwgY2FsbGluZyBwYy5zZXRMb2NhbERlc2NyaXB0aW9uKCkgW29mZmVyOiVvXScsIG9mZmVyKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX3BjLnNldExvY2FsRGVzY3JpcHRpb24ob2ZmZXIpO1xuICAgICAgICAgICAgdGhpcy5fcmVtb3RlU2RwLnNlbmRTY3RwQXNzb2NpYXRpb24oeyBvZmZlck1lZGlhT2JqZWN0IH0pO1xuICAgICAgICAgICAgY29uc3QgYW5zd2VyID0geyB0eXBlOiAnYW5zd2VyJywgc2RwOiB0aGlzLl9yZW1vdGVTZHAuZ2V0U2RwKCkgfTtcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1Zygnc2VuZERhdGFDaGFubmVsKCkgfCBjYWxsaW5nIHBjLnNldFJlbW90ZURlc2NyaXB0aW9uKCkgW2Fuc3dlcjolb10nLCBhbnN3ZXIpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5fcGMuc2V0UmVtb3RlRGVzY3JpcHRpb24oYW5zd2VyKTtcbiAgICAgICAgICAgIHRoaXMuX2hhc0RhdGFDaGFubmVsTWVkaWFTZWN0aW9uID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzY3RwU3RyZWFtUGFyYW1ldGVycyA9IHtcbiAgICAgICAgICAgIHN0cmVhbUlkOiBvcHRpb25zLmlkLFxuICAgICAgICAgICAgb3JkZXJlZDogb3B0aW9ucy5vcmRlcmVkLFxuICAgICAgICAgICAgbWF4UGFja2V0TGlmZVRpbWU6IG9wdGlvbnMubWF4UGFja2V0TGlmZVRpbWUsXG4gICAgICAgICAgICBtYXhSZXRyYW5zbWl0czogb3B0aW9ucy5tYXhSZXRyYW5zbWl0c1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4geyBkYXRhQ2hhbm5lbCwgc2N0cFN0cmVhbVBhcmFtZXRlcnMgfTtcbiAgICB9XG4gICAgYXN5bmMgcmVjZWl2ZSh7IHRyYWNrSWQsIGtpbmQsIHJ0cFBhcmFtZXRlcnMgfSkge1xuICAgICAgICB0aGlzLl9hc3NlcnRSZWN2RGlyZWN0aW9uKCk7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZygncmVjZWl2ZSgpIFt0cmFja0lkOiVzLCBraW5kOiVzXScsIHRyYWNrSWQsIGtpbmQpO1xuICAgICAgICBjb25zdCBsb2NhbElkID0gcnRwUGFyYW1ldGVycy5taWQgfHwgU3RyaW5nKHRoaXMuX21hcE1pZFRyYW5zY2VpdmVyLnNpemUpO1xuICAgICAgICB0aGlzLl9yZW1vdGVTZHAucmVjZWl2ZSh7XG4gICAgICAgICAgICBtaWQ6IGxvY2FsSWQsXG4gICAgICAgICAgICBraW5kLFxuICAgICAgICAgICAgb2ZmZXJSdHBQYXJhbWV0ZXJzOiBydHBQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgc3RyZWFtSWQ6IHJ0cFBhcmFtZXRlcnMucnRjcC5jbmFtZSxcbiAgICAgICAgICAgIHRyYWNrSWRcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IG9mZmVyID0geyB0eXBlOiAnb2ZmZXInLCBzZHA6IHRoaXMuX3JlbW90ZVNkcC5nZXRTZHAoKSB9O1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3JlY2VpdmUoKSB8IGNhbGxpbmcgcGMuc2V0UmVtb3RlRGVzY3JpcHRpb24oKSBbb2ZmZXI6JW9dJywgb2ZmZXIpO1xuICAgICAgICBhd2FpdCB0aGlzLl9wYy5zZXRSZW1vdGVEZXNjcmlwdGlvbihvZmZlcik7XG4gICAgICAgIGxldCBhbnN3ZXIgPSBhd2FpdCB0aGlzLl9wYy5jcmVhdGVBbnN3ZXIoKTtcbiAgICAgICAgY29uc3QgbG9jYWxTZHBPYmplY3QgPSBzZHBUcmFuc2Zvcm0ucGFyc2UoYW5zd2VyLnNkcCk7XG4gICAgICAgIGNvbnN0IGFuc3dlck1lZGlhT2JqZWN0ID0gbG9jYWxTZHBPYmplY3QubWVkaWFcbiAgICAgICAgICAgIC5maW5kKChtKSA9PiBTdHJpbmcobS5taWQpID09PSBsb2NhbElkKTtcbiAgICAgICAgLy8gTWF5IG5lZWQgdG8gbW9kaWZ5IGNvZGVjIHBhcmFtZXRlcnMgaW4gdGhlIGFuc3dlciBiYXNlZCBvbiBjb2RlY1xuICAgICAgICAvLyBwYXJhbWV0ZXJzIGluIHRoZSBvZmZlci5cbiAgICAgICAgc2RwQ29tbW9uVXRpbHMuYXBwbHlDb2RlY1BhcmFtZXRlcnMoe1xuICAgICAgICAgICAgb2ZmZXJSdHBQYXJhbWV0ZXJzOiBydHBQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgYW5zd2VyTWVkaWFPYmplY3RcbiAgICAgICAgfSk7XG4gICAgICAgIGFuc3dlciA9IHsgdHlwZTogJ2Fuc3dlcicsIHNkcDogc2RwVHJhbnNmb3JtLndyaXRlKGxvY2FsU2RwT2JqZWN0KSB9O1xuICAgICAgICBpZiAoIXRoaXMuX3RyYW5zcG9ydFJlYWR5KVxuICAgICAgICAgICAgYXdhaXQgdGhpcy5fc2V0dXBUcmFuc3BvcnQoeyBsb2NhbER0bHNSb2xlOiAnY2xpZW50JywgbG9jYWxTZHBPYmplY3QgfSk7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZygncmVjZWl2ZSgpIHwgY2FsbGluZyBwYy5zZXRMb2NhbERlc2NyaXB0aW9uKCkgW2Fuc3dlcjolb10nLCBhbnN3ZXIpO1xuICAgICAgICBhd2FpdCB0aGlzLl9wYy5zZXRMb2NhbERlc2NyaXB0aW9uKGFuc3dlcik7XG4gICAgICAgIGNvbnN0IHRyYW5zY2VpdmVyID0gdGhpcy5fcGMuZ2V0VHJhbnNjZWl2ZXJzKClcbiAgICAgICAgICAgIC5maW5kKCh0KSA9PiB0Lm1pZCA9PT0gbG9jYWxJZCk7XG4gICAgICAgIGlmICghdHJhbnNjZWl2ZXIpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25ldyBSVENSdHBUcmFuc2NlaXZlciBub3QgZm91bmQnKTtcbiAgICAgICAgLy8gU3RvcmUgaW4gdGhlIG1hcC5cbiAgICAgICAgdGhpcy5fbWFwTWlkVHJhbnNjZWl2ZXIuc2V0KGxvY2FsSWQsIHRyYW5zY2VpdmVyKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxvY2FsSWQsXG4gICAgICAgICAgICB0cmFjazogdHJhbnNjZWl2ZXIucmVjZWl2ZXIudHJhY2ssXG4gICAgICAgICAgICBydHBSZWNlaXZlcjogdHJhbnNjZWl2ZXIucmVjZWl2ZXJcbiAgICAgICAgfTtcbiAgICB9XG4gICAgYXN5bmMgc3RvcFJlY2VpdmluZyhsb2NhbElkKSB7XG4gICAgICAgIHRoaXMuX2Fzc2VydFJlY3ZEaXJlY3Rpb24oKTtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdzdG9wUmVjZWl2aW5nKCkgW2xvY2FsSWQ6JXNdJywgbG9jYWxJZCk7XG4gICAgICAgIGNvbnN0IHRyYW5zY2VpdmVyID0gdGhpcy5fbWFwTWlkVHJhbnNjZWl2ZXIuZ2V0KGxvY2FsSWQpO1xuICAgICAgICBpZiAoIXRyYW5zY2VpdmVyKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdhc3NvY2lhdGVkIFJUQ1J0cFRyYW5zY2VpdmVyIG5vdCBmb3VuZCcpO1xuICAgICAgICB0aGlzLl9yZW1vdGVTZHAuY2xvc2VNZWRpYVNlY3Rpb24odHJhbnNjZWl2ZXIubWlkKTtcbiAgICAgICAgY29uc3Qgb2ZmZXIgPSB7IHR5cGU6ICdvZmZlcicsIHNkcDogdGhpcy5fcmVtb3RlU2RwLmdldFNkcCgpIH07XG4gICAgICAgIGxvZ2dlci5kZWJ1Zygnc3RvcFJlY2VpdmluZygpIHwgY2FsbGluZyBwYy5zZXRSZW1vdGVEZXNjcmlwdGlvbigpIFtvZmZlcjolb10nLCBvZmZlcik7XG4gICAgICAgIGF3YWl0IHRoaXMuX3BjLnNldFJlbW90ZURlc2NyaXB0aW9uKG9mZmVyKTtcbiAgICAgICAgY29uc3QgYW5zd2VyID0gYXdhaXQgdGhpcy5fcGMuY3JlYXRlQW5zd2VyKCk7XG4gICAgICAgIGxvZ2dlci5kZWJ1Zygnc3RvcFJlY2VpdmluZygpIHwgY2FsbGluZyBwYy5zZXRMb2NhbERlc2NyaXB0aW9uKCkgW2Fuc3dlcjolb10nLCBhbnN3ZXIpO1xuICAgICAgICBhd2FpdCB0aGlzLl9wYy5zZXRMb2NhbERlc2NyaXB0aW9uKGFuc3dlcik7XG4gICAgfVxuICAgIGFzeW5jIGdldFJlY2VpdmVyU3RhdHMobG9jYWxJZCkge1xuICAgICAgICB0aGlzLl9hc3NlcnRSZWN2RGlyZWN0aW9uKCk7XG4gICAgICAgIGNvbnN0IHRyYW5zY2VpdmVyID0gdGhpcy5fbWFwTWlkVHJhbnNjZWl2ZXIuZ2V0KGxvY2FsSWQpO1xuICAgICAgICBpZiAoIXRyYW5zY2VpdmVyKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdhc3NvY2lhdGVkIFJUQ1J0cFRyYW5zY2VpdmVyIG5vdCBmb3VuZCcpO1xuICAgICAgICByZXR1cm4gdHJhbnNjZWl2ZXIucmVjZWl2ZXIuZ2V0U3RhdHMoKTtcbiAgICB9XG4gICAgYXN5bmMgcmVjZWl2ZURhdGFDaGFubmVsKHsgc2N0cFN0cmVhbVBhcmFtZXRlcnMsIGxhYmVsLCBwcm90b2NvbCB9KSB7XG4gICAgICAgIHRoaXMuX2Fzc2VydFJlY3ZEaXJlY3Rpb24oKTtcbiAgICAgICAgY29uc3QgeyBzdHJlYW1JZCwgb3JkZXJlZCwgbWF4UGFja2V0TGlmZVRpbWUsIG1heFJldHJhbnNtaXRzIH0gPSBzY3RwU3RyZWFtUGFyYW1ldGVycztcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIG5lZ290aWF0ZWQ6IHRydWUsXG4gICAgICAgICAgICBpZDogc3RyZWFtSWQsXG4gICAgICAgICAgICBvcmRlcmVkLFxuICAgICAgICAgICAgbWF4UGFja2V0TGlmZVRpbWUsXG4gICAgICAgICAgICBtYXhSZXRyYW5zbWl0cyxcbiAgICAgICAgICAgIHByb3RvY29sXG4gICAgICAgIH07XG4gICAgICAgIGxvZ2dlci5kZWJ1ZygncmVjZWl2ZURhdGFDaGFubmVsKCkgW29wdGlvbnM6JW9dJywgb3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IGRhdGFDaGFubmVsID0gdGhpcy5fcGMuY3JlYXRlRGF0YUNoYW5uZWwobGFiZWwsIG9wdGlvbnMpO1xuICAgICAgICAvLyBJZiB0aGlzIGlzIHRoZSBmaXJzdCBEYXRhQ2hhbm5lbCB3ZSBuZWVkIHRvIGNyZWF0ZSB0aGUgU0RQIG9mZmVyIHdpdGhcbiAgICAgICAgLy8gbT1hcHBsaWNhdGlvbiBzZWN0aW9uLlxuICAgICAgICBpZiAoIXRoaXMuX2hhc0RhdGFDaGFubmVsTWVkaWFTZWN0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLl9yZW1vdGVTZHAucmVjZWl2ZVNjdHBBc3NvY2lhdGlvbigpO1xuICAgICAgICAgICAgY29uc3Qgb2ZmZXIgPSB7IHR5cGU6ICdvZmZlcicsIHNkcDogdGhpcy5fcmVtb3RlU2RwLmdldFNkcCgpIH07XG4gICAgICAgICAgICBsb2dnZXIuZGVidWcoJ3JlY2VpdmVEYXRhQ2hhbm5lbCgpIHwgY2FsbGluZyBwYy5zZXRSZW1vdGVEZXNjcmlwdGlvbigpIFtvZmZlcjolb10nLCBvZmZlcik7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLl9wYy5zZXRSZW1vdGVEZXNjcmlwdGlvbihvZmZlcik7XG4gICAgICAgICAgICBjb25zdCBhbnN3ZXIgPSBhd2FpdCB0aGlzLl9wYy5jcmVhdGVBbnN3ZXIoKTtcbiAgICAgICAgICAgIGlmICghdGhpcy5fdHJhbnNwb3J0UmVhZHkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2NhbFNkcE9iamVjdCA9IHNkcFRyYW5zZm9ybS5wYXJzZShhbnN3ZXIuc2RwKTtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLl9zZXR1cFRyYW5zcG9ydCh7IGxvY2FsRHRsc1JvbGU6ICdjbGllbnQnLCBsb2NhbFNkcE9iamVjdCB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZygncmVjZWl2ZURhdGFDaGFubmVsKCkgfCBjYWxsaW5nIHBjLnNldFJlbW90ZURlc2NyaXB0aW9uKCkgW2Fuc3dlcjolb10nLCBhbnN3ZXIpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5fcGMuc2V0TG9jYWxEZXNjcmlwdGlvbihhbnN3ZXIpO1xuICAgICAgICAgICAgdGhpcy5faGFzRGF0YUNoYW5uZWxNZWRpYVNlY3Rpb24gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGRhdGFDaGFubmVsIH07XG4gICAgfVxuICAgIGFzeW5jIF9zZXR1cFRyYW5zcG9ydCh7IGxvY2FsRHRsc1JvbGUsIGxvY2FsU2RwT2JqZWN0IH0pIHtcbiAgICAgICAgaWYgKCFsb2NhbFNkcE9iamVjdClcbiAgICAgICAgICAgIGxvY2FsU2RwT2JqZWN0ID0gc2RwVHJhbnNmb3JtLnBhcnNlKHRoaXMuX3BjLmxvY2FsRGVzY3JpcHRpb24uc2RwKTtcbiAgICAgICAgLy8gR2V0IG91ciBsb2NhbCBEVExTIHBhcmFtZXRlcnMuXG4gICAgICAgIGNvbnN0IGR0bHNQYXJhbWV0ZXJzID0gc2RwQ29tbW9uVXRpbHMuZXh0cmFjdER0bHNQYXJhbWV0ZXJzKHsgc2RwT2JqZWN0OiBsb2NhbFNkcE9iamVjdCB9KTtcbiAgICAgICAgLy8gU2V0IG91ciBEVExTIHJvbGUuXG4gICAgICAgIGR0bHNQYXJhbWV0ZXJzLnJvbGUgPSBsb2NhbER0bHNSb2xlO1xuICAgICAgICAvLyBVcGRhdGUgdGhlIHJlbW90ZSBEVExTIHJvbGUgaW4gdGhlIFNEUC5cbiAgICAgICAgdGhpcy5fcmVtb3RlU2RwLnVwZGF0ZUR0bHNSb2xlKGxvY2FsRHRsc1JvbGUgPT09ICdjbGllbnQnID8gJ3NlcnZlcicgOiAnY2xpZW50Jyk7XG4gICAgICAgIC8vIE5lZWQgdG8gdGVsbCB0aGUgcmVtb3RlIHRyYW5zcG9ydCBhYm91dCBvdXIgcGFyYW1ldGVycy5cbiAgICAgICAgYXdhaXQgdGhpcy5zYWZlRW1pdEFzUHJvbWlzZSgnQGNvbm5lY3QnLCB7IGR0bHNQYXJhbWV0ZXJzIH0pO1xuICAgICAgICB0aGlzLl90cmFuc3BvcnRSZWFkeSA9IHRydWU7XG4gICAgfVxuICAgIF9hc3NlcnRTZW5kRGlyZWN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5fZGlyZWN0aW9uICE9PSAnc2VuZCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbWV0aG9kIGNhbiBqdXN0IGJlIGNhbGxlZCBmb3IgaGFuZGxlcnMgd2l0aCBcInNlbmRcIiBkaXJlY3Rpb24nKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfYXNzZXJ0UmVjdkRpcmVjdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuX2RpcmVjdGlvbiAhPT0gJ3JlY3YnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ21ldGhvZCBjYW4ganVzdCBiZSBjYWxsZWQgZm9yIGhhbmRsZXJzIHdpdGggXCJyZWN2XCIgZGlyZWN0aW9uJyk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLlNhZmFyaTEyID0gU2FmYXJpMTI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHNkcFRyYW5zZm9ybSA9IHJlcXVpcmUoXCJzZHAtdHJhbnNmb3JtXCIpO1xuY29uc3QgTG9nZ2VyXzEgPSByZXF1aXJlKFwiLi4vTG9nZ2VyXCIpO1xuY29uc3QgdXRpbHMgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG5jb25zdCBvcnRjID0gcmVxdWlyZShcIi4uL29ydGNcIik7XG5jb25zdCBzZHBDb21tb25VdGlscyA9IHJlcXVpcmUoXCIuL3NkcC9jb21tb25VdGlsc1wiKTtcbmNvbnN0IHNkcFBsYW5CVXRpbHMgPSByZXF1aXJlKFwiLi9zZHAvcGxhbkJVdGlsc1wiKTtcbmNvbnN0IEhhbmRsZXJJbnRlcmZhY2VfMSA9IHJlcXVpcmUoXCIuL0hhbmRsZXJJbnRlcmZhY2VcIik7XG5jb25zdCBSZW1vdGVTZHBfMSA9IHJlcXVpcmUoXCIuL3NkcC9SZW1vdGVTZHBcIik7XG5jb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyXzEuTG9nZ2VyKCdTYWZhcmkxMScpO1xuY29uc3QgU0NUUF9OVU1fU1RSRUFNUyA9IHsgT1M6IDEwMjQsIE1JUzogMTAyNCB9O1xuY2xhc3MgU2FmYXJpMTEgZXh0ZW5kcyBIYW5kbGVySW50ZXJmYWNlXzEuSGFuZGxlckludGVyZmFjZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIC8vIExvY2FsIHN0cmVhbSBmb3Igc2VuZGluZy5cbiAgICAgICAgdGhpcy5fc2VuZFN0cmVhbSA9IG5ldyBNZWRpYVN0cmVhbSgpO1xuICAgICAgICAvLyBNYXAgb2YgUlRDUnRwU2VuZGVyIGluZGV4ZWQgYnkgbG9jYWxJZC5cbiAgICAgICAgdGhpcy5fbWFwU2VuZExvY2FsSWRSdHBTZW5kZXIgPSBuZXcgTWFwKCk7XG4gICAgICAgIC8vIE5leHQgc2VuZGluZyBsb2NhbElkLlxuICAgICAgICB0aGlzLl9uZXh0U2VuZExvY2FsSWQgPSAwO1xuICAgICAgICAvLyBNYXAgb2YgTUlELCBSVFAgcGFyYW1ldGVycyBhbmQgUlRDUnRwUmVjZWl2ZXIgaW5kZXhlZCBieSBsb2NhbCBpZC5cbiAgICAgICAgLy8gVmFsdWUgaXMgYW4gT2JqZWN0IHdpdGggbWlkLCBydHBQYXJhbWV0ZXJzIGFuZCBydHBSZWNlaXZlci5cbiAgICAgICAgdGhpcy5fbWFwUmVjdkxvY2FsSWRJbmZvID0gbmV3IE1hcCgpO1xuICAgICAgICAvLyBXaGV0aGVyIGEgRGF0YUNoYW5uZWwgbT1hcHBsaWNhdGlvbiBzZWN0aW9uIGhhcyBiZWVuIGNyZWF0ZWQuXG4gICAgICAgIHRoaXMuX2hhc0RhdGFDaGFubmVsTWVkaWFTZWN0aW9uID0gZmFsc2U7XG4gICAgICAgIC8vIFNlbmRpbmcgRGF0YUNoYW5uZWwgaWQgdmFsdWUgY291bnRlci4gSW5jcmVtZW50ZWQgZm9yIGVhY2ggbmV3IERhdGFDaGFubmVsLlxuICAgICAgICB0aGlzLl9uZXh0U2VuZFNjdHBTdHJlYW1JZCA9IDA7XG4gICAgICAgIC8vIEdvdCB0cmFuc3BvcnQgbG9jYWwgYW5kIHJlbW90ZSBwYXJhbWV0ZXJzLlxuICAgICAgICB0aGlzLl90cmFuc3BvcnRSZWFkeSA9IGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZmFjdG9yeSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBzdGF0aWMgY3JlYXRlRmFjdG9yeSgpIHtcbiAgICAgICAgcmV0dXJuICgpID0+IG5ldyBTYWZhcmkxMSgpO1xuICAgIH1cbiAgICBnZXQgbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdTYWZhcmkxMSc7XG4gICAgfVxuICAgIGNsb3NlKCkge1xuICAgICAgICBsb2dnZXIuZGVidWcoJ2Nsb3NlKCknKTtcbiAgICAgICAgLy8gQ2xvc2UgUlRDUGVlckNvbm5lY3Rpb24uXG4gICAgICAgIGlmICh0aGlzLl9wYykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wYy5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7IH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBnZXROYXRpdmVSdHBDYXBhYmlsaXRpZXMoKSB7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZygnZ2V0TmF0aXZlUnRwQ2FwYWJpbGl0aWVzKCknKTtcbiAgICAgICAgY29uc3QgcGMgPSBuZXcgUlRDUGVlckNvbm5lY3Rpb24oe1xuICAgICAgICAgICAgaWNlU2VydmVyczogW10sXG4gICAgICAgICAgICBpY2VUcmFuc3BvcnRQb2xpY3k6ICdhbGwnLFxuICAgICAgICAgICAgYnVuZGxlUG9saWN5OiAnbWF4LWJ1bmRsZScsXG4gICAgICAgICAgICBydGNwTXV4UG9saWN5OiAncmVxdWlyZScsXG4gICAgICAgICAgICBzZHBTZW1hbnRpY3M6ICdwbGFuLWInXG4gICAgICAgIH0pO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3Qgb2ZmZXIgPSBhd2FpdCBwYy5jcmVhdGVPZmZlcih7XG4gICAgICAgICAgICAgICAgb2ZmZXJUb1JlY2VpdmVBdWRpbzogdHJ1ZSxcbiAgICAgICAgICAgICAgICBvZmZlclRvUmVjZWl2ZVZpZGVvOiB0cnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcGMuY2xvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikgeyB9XG4gICAgICAgICAgICBjb25zdCBzZHBPYmplY3QgPSBzZHBUcmFuc2Zvcm0ucGFyc2Uob2ZmZXIuc2RwKTtcbiAgICAgICAgICAgIGNvbnN0IG5hdGl2ZVJ0cENhcGFiaWxpdGllcyA9IHNkcENvbW1vblV0aWxzLmV4dHJhY3RSdHBDYXBhYmlsaXRpZXMoeyBzZHBPYmplY3QgfSk7XG4gICAgICAgICAgICByZXR1cm4gbmF0aXZlUnRwQ2FwYWJpbGl0aWVzO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBwYy5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yMikgeyB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBnZXROYXRpdmVTY3RwQ2FwYWJpbGl0aWVzKCkge1xuICAgICAgICBsb2dnZXIuZGVidWcoJ2dldE5hdGl2ZVNjdHBDYXBhYmlsaXRpZXMoKScpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbnVtU3RyZWFtczogU0NUUF9OVU1fU1RSRUFNU1xuICAgICAgICB9O1xuICAgIH1cbiAgICBydW4oeyBkaXJlY3Rpb24sIGljZVBhcmFtZXRlcnMsIGljZUNhbmRpZGF0ZXMsIGR0bHNQYXJhbWV0ZXJzLCBzY3RwUGFyYW1ldGVycywgaWNlU2VydmVycywgaWNlVHJhbnNwb3J0UG9saWN5LCBhZGRpdGlvbmFsU2V0dGluZ3MsIHByb3ByaWV0YXJ5Q29uc3RyYWludHMsIGV4dGVuZGVkUnRwQ2FwYWJpbGl0aWVzIH0pIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdydW4oKScpO1xuICAgICAgICB0aGlzLl9kaXJlY3Rpb24gPSBkaXJlY3Rpb247XG4gICAgICAgIHRoaXMuX3JlbW90ZVNkcCA9IG5ldyBSZW1vdGVTZHBfMS5SZW1vdGVTZHAoe1xuICAgICAgICAgICAgaWNlUGFyYW1ldGVycyxcbiAgICAgICAgICAgIGljZUNhbmRpZGF0ZXMsXG4gICAgICAgICAgICBkdGxzUGFyYW1ldGVycyxcbiAgICAgICAgICAgIHNjdHBQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgcGxhbkI6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX3NlbmRpbmdSdHBQYXJhbWV0ZXJzQnlLaW5kID1cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBhdWRpbzogb3J0Yy5nZXRTZW5kaW5nUnRwUGFyYW1ldGVycygnYXVkaW8nLCBleHRlbmRlZFJ0cENhcGFiaWxpdGllcyksXG4gICAgICAgICAgICAgICAgdmlkZW86IG9ydGMuZ2V0U2VuZGluZ1J0cFBhcmFtZXRlcnMoJ3ZpZGVvJywgZXh0ZW5kZWRSdHBDYXBhYmlsaXRpZXMpXG4gICAgICAgICAgICB9O1xuICAgICAgICB0aGlzLl9zZW5kaW5nUmVtb3RlUnRwUGFyYW1ldGVyc0J5S2luZCA9XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYXVkaW86IG9ydGMuZ2V0U2VuZGluZ1JlbW90ZVJ0cFBhcmFtZXRlcnMoJ2F1ZGlvJywgZXh0ZW5kZWRSdHBDYXBhYmlsaXRpZXMpLFxuICAgICAgICAgICAgICAgIHZpZGVvOiBvcnRjLmdldFNlbmRpbmdSZW1vdGVSdHBQYXJhbWV0ZXJzKCd2aWRlbycsIGV4dGVuZGVkUnRwQ2FwYWJpbGl0aWVzKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fcGMgPSBuZXcgUlRDUGVlckNvbm5lY3Rpb24oe1xuICAgICAgICAgICAgaWNlU2VydmVyczogaWNlU2VydmVycyB8fCBbXSxcbiAgICAgICAgICAgIGljZVRyYW5zcG9ydFBvbGljeTogaWNlVHJhbnNwb3J0UG9saWN5IHx8ICdhbGwnLFxuICAgICAgICAgICAgYnVuZGxlUG9saWN5OiAnbWF4LWJ1bmRsZScsXG4gICAgICAgICAgICBydGNwTXV4UG9saWN5OiAncmVxdWlyZScsXG4gICAgICAgICAgICAuLi5hZGRpdGlvbmFsU2V0dGluZ3NcbiAgICAgICAgfSwgcHJvcHJpZXRhcnlDb25zdHJhaW50cyk7XG4gICAgICAgIC8vIEhhbmRsZSBSVENQZWVyQ29ubmVjdGlvbiBjb25uZWN0aW9uIHN0YXR1cy5cbiAgICAgICAgdGhpcy5fcGMuYWRkRXZlbnRMaXN0ZW5lcignaWNlY29ubmVjdGlvbnN0YXRlY2hhbmdlJywgKCkgPT4ge1xuICAgICAgICAgICAgc3dpdGNoICh0aGlzLl9wYy5pY2VDb25uZWN0aW9uU3RhdGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdjaGVja2luZyc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnQGNvbm5lY3Rpb25zdGF0ZWNoYW5nZScsICdjb25uZWN0aW5nJyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2Nvbm5lY3RlZCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnY29tcGxldGVkJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdAY29ubmVjdGlvbnN0YXRlY2hhbmdlJywgJ2Nvbm5lY3RlZCcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdmYWlsZWQnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ0Bjb25uZWN0aW9uc3RhdGVjaGFuZ2UnLCAnZmFpbGVkJyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2Rpc2Nvbm5lY3RlZCc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnQGNvbm5lY3Rpb25zdGF0ZWNoYW5nZScsICdkaXNjb25uZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnY2xvc2VkJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdAY29ubmVjdGlvbnN0YXRlY2hhbmdlJywgJ2Nsb3NlZCcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFzeW5jIHVwZGF0ZUljZVNlcnZlcnMoaWNlU2VydmVycykge1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3VwZGF0ZUljZVNlcnZlcnMoKScpO1xuICAgICAgICBjb25zdCBjb25maWd1cmF0aW9uID0gdGhpcy5fcGMuZ2V0Q29uZmlndXJhdGlvbigpO1xuICAgICAgICBjb25maWd1cmF0aW9uLmljZVNlcnZlcnMgPSBpY2VTZXJ2ZXJzO1xuICAgICAgICB0aGlzLl9wYy5zZXRDb25maWd1cmF0aW9uKGNvbmZpZ3VyYXRpb24pO1xuICAgIH1cbiAgICBhc3luYyByZXN0YXJ0SWNlKGljZVBhcmFtZXRlcnMpIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdyZXN0YXJ0SWNlKCknKTtcbiAgICAgICAgLy8gUHJvdmlkZSB0aGUgcmVtb3RlIFNEUCBoYW5kbGVyIHdpdGggbmV3IHJlbW90ZSBJQ0UgcGFyYW1ldGVycy5cbiAgICAgICAgdGhpcy5fcmVtb3RlU2RwLnVwZGF0ZUljZVBhcmFtZXRlcnMoaWNlUGFyYW1ldGVycyk7XG4gICAgICAgIGlmICghdGhpcy5fdHJhbnNwb3J0UmVhZHkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmICh0aGlzLl9kaXJlY3Rpb24gPT09ICdzZW5kJykge1xuICAgICAgICAgICAgY29uc3Qgb2ZmZXIgPSBhd2FpdCB0aGlzLl9wYy5jcmVhdGVPZmZlcih7IGljZVJlc3RhcnQ6IHRydWUgfSk7XG4gICAgICAgICAgICBsb2dnZXIuZGVidWcoJ3Jlc3RhcnRJY2UoKSB8IGNhbGxpbmcgcGMuc2V0TG9jYWxEZXNjcmlwdGlvbigpIFtvZmZlcjolb10nLCBvZmZlcik7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLl9wYy5zZXRMb2NhbERlc2NyaXB0aW9uKG9mZmVyKTtcbiAgICAgICAgICAgIGNvbnN0IGFuc3dlciA9IHsgdHlwZTogJ2Fuc3dlcicsIHNkcDogdGhpcy5fcmVtb3RlU2RwLmdldFNkcCgpIH07XG4gICAgICAgICAgICBsb2dnZXIuZGVidWcoJ3Jlc3RhcnRJY2UoKSB8IGNhbGxpbmcgcGMuc2V0UmVtb3RlRGVzY3JpcHRpb24oKSBbYW5zd2VyOiVvXScsIGFuc3dlcik7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLl9wYy5zZXRSZW1vdGVEZXNjcmlwdGlvbihhbnN3ZXIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3Qgb2ZmZXIgPSB7IHR5cGU6ICdvZmZlcicsIHNkcDogdGhpcy5fcmVtb3RlU2RwLmdldFNkcCgpIH07XG4gICAgICAgICAgICBsb2dnZXIuZGVidWcoJ3Jlc3RhcnRJY2UoKSB8IGNhbGxpbmcgcGMuc2V0UmVtb3RlRGVzY3JpcHRpb24oKSBbb2ZmZXI6JW9dJywgb2ZmZXIpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5fcGMuc2V0UmVtb3RlRGVzY3JpcHRpb24ob2ZmZXIpO1xuICAgICAgICAgICAgY29uc3QgYW5zd2VyID0gYXdhaXQgdGhpcy5fcGMuY3JlYXRlQW5zd2VyKCk7XG4gICAgICAgICAgICBsb2dnZXIuZGVidWcoJ3Jlc3RhcnRJY2UoKSB8IGNhbGxpbmcgcGMuc2V0TG9jYWxEZXNjcmlwdGlvbigpIFthbnN3ZXI6JW9dJywgYW5zd2VyKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX3BjLnNldExvY2FsRGVzY3JpcHRpb24oYW5zd2VyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBnZXRUcmFuc3BvcnRTdGF0cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BjLmdldFN0YXRzKCk7XG4gICAgfVxuICAgIGFzeW5jIHNlbmQoeyB0cmFjaywgZW5jb2RpbmdzLCBjb2RlY09wdGlvbnMsIGNvZGVjIH0pIHtcbiAgICAgICAgdGhpcy5fYXNzZXJ0U2VuZERpcmVjdGlvbigpO1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3NlbmQoKSBba2luZDolcywgdHJhY2suaWQ6JXNdJywgdHJhY2sua2luZCwgdHJhY2suaWQpO1xuICAgICAgICBpZiAoY29kZWMpIHtcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKCdzZW5kKCkgfCBjb2RlYyBzZWxlY3Rpb24gaXMgbm90IGF2YWlsYWJsZSBpbiAlcyBoYW5kbGVyJywgdGhpcy5uYW1lKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zZW5kU3RyZWFtLmFkZFRyYWNrKHRyYWNrKTtcbiAgICAgICAgdGhpcy5fcGMuYWRkVHJhY2sodHJhY2ssIHRoaXMuX3NlbmRTdHJlYW0pO1xuICAgICAgICBsZXQgb2ZmZXIgPSBhd2FpdCB0aGlzLl9wYy5jcmVhdGVPZmZlcigpO1xuICAgICAgICBsZXQgbG9jYWxTZHBPYmplY3QgPSBzZHBUcmFuc2Zvcm0ucGFyc2Uob2ZmZXIuc2RwKTtcbiAgICAgICAgbGV0IG9mZmVyTWVkaWFPYmplY3Q7XG4gICAgICAgIGNvbnN0IHNlbmRpbmdSdHBQYXJhbWV0ZXJzID0gdXRpbHMuY2xvbmUodGhpcy5fc2VuZGluZ1J0cFBhcmFtZXRlcnNCeUtpbmRbdHJhY2sua2luZF0pO1xuICAgICAgICBzZW5kaW5nUnRwUGFyYW1ldGVycy5jb2RlY3MgPVxuICAgICAgICAgICAgb3J0Yy5yZWR1Y2VDb2RlY3Moc2VuZGluZ1J0cFBhcmFtZXRlcnMuY29kZWNzKTtcbiAgICAgICAgY29uc3Qgc2VuZGluZ1JlbW90ZVJ0cFBhcmFtZXRlcnMgPSB1dGlscy5jbG9uZSh0aGlzLl9zZW5kaW5nUmVtb3RlUnRwUGFyYW1ldGVyc0J5S2luZFt0cmFjay5raW5kXSk7XG4gICAgICAgIHNlbmRpbmdSZW1vdGVSdHBQYXJhbWV0ZXJzLmNvZGVjcyA9XG4gICAgICAgICAgICBvcnRjLnJlZHVjZUNvZGVjcyhzZW5kaW5nUmVtb3RlUnRwUGFyYW1ldGVycy5jb2RlY3MpO1xuICAgICAgICBpZiAoIXRoaXMuX3RyYW5zcG9ydFJlYWR5KVxuICAgICAgICAgICAgYXdhaXQgdGhpcy5fc2V0dXBUcmFuc3BvcnQoeyBsb2NhbER0bHNSb2xlOiAnc2VydmVyJywgbG9jYWxTZHBPYmplY3QgfSk7XG4gICAgICAgIGlmICh0cmFjay5raW5kID09PSAndmlkZW8nICYmIGVuY29kaW5ncyAmJiBlbmNvZGluZ3MubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdzZW5kKCkgfCBlbmFibGluZyBzaW11bGNhc3QnKTtcbiAgICAgICAgICAgIGxvY2FsU2RwT2JqZWN0ID0gc2RwVHJhbnNmb3JtLnBhcnNlKG9mZmVyLnNkcCk7XG4gICAgICAgICAgICBvZmZlck1lZGlhT2JqZWN0ID0gbG9jYWxTZHBPYmplY3QubWVkaWEuZmluZCgobSkgPT4gbS50eXBlID09PSAndmlkZW8nKTtcbiAgICAgICAgICAgIHNkcFBsYW5CVXRpbHMuYWRkTGVnYWN5U2ltdWxjYXN0KHtcbiAgICAgICAgICAgICAgICBvZmZlck1lZGlhT2JqZWN0LFxuICAgICAgICAgICAgICAgIHRyYWNrLFxuICAgICAgICAgICAgICAgIG51bVN0cmVhbXM6IGVuY29kaW5ncy5sZW5ndGhcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgb2ZmZXIgPSB7IHR5cGU6ICdvZmZlcicsIHNkcDogc2RwVHJhbnNmb3JtLndyaXRlKGxvY2FsU2RwT2JqZWN0KSB9O1xuICAgICAgICB9XG4gICAgICAgIGxvZ2dlci5kZWJ1Zygnc2VuZCgpIHwgY2FsbGluZyBwYy5zZXRMb2NhbERlc2NyaXB0aW9uKCkgW29mZmVyOiVvXScsIG9mZmVyKTtcbiAgICAgICAgYXdhaXQgdGhpcy5fcGMuc2V0TG9jYWxEZXNjcmlwdGlvbihvZmZlcik7XG4gICAgICAgIGxvY2FsU2RwT2JqZWN0ID0gc2RwVHJhbnNmb3JtLnBhcnNlKHRoaXMuX3BjLmxvY2FsRGVzY3JpcHRpb24uc2RwKTtcbiAgICAgICAgb2ZmZXJNZWRpYU9iamVjdCA9IGxvY2FsU2RwT2JqZWN0Lm1lZGlhXG4gICAgICAgICAgICAuZmluZCgobSkgPT4gbS50eXBlID09PSB0cmFjay5raW5kKTtcbiAgICAgICAgLy8gU2V0IFJUQ1AgQ05BTUUuXG4gICAgICAgIHNlbmRpbmdSdHBQYXJhbWV0ZXJzLnJ0Y3AuY25hbWUgPVxuICAgICAgICAgICAgc2RwQ29tbW9uVXRpbHMuZ2V0Q25hbWUoeyBvZmZlck1lZGlhT2JqZWN0IH0pO1xuICAgICAgICAvLyBTZXQgUlRQIGVuY29kaW5ncy5cbiAgICAgICAgc2VuZGluZ1J0cFBhcmFtZXRlcnMuZW5jb2RpbmdzID1cbiAgICAgICAgICAgIHNkcFBsYW5CVXRpbHMuZ2V0UnRwRW5jb2RpbmdzKHsgb2ZmZXJNZWRpYU9iamVjdCwgdHJhY2sgfSk7XG4gICAgICAgIC8vIENvbXBsZXRlIGVuY29kaW5ncyB3aXRoIGdpdmVuIHZhbHVlcy5cbiAgICAgICAgaWYgKGVuY29kaW5ncykge1xuICAgICAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgc2VuZGluZ1J0cFBhcmFtZXRlcnMuZW5jb2RpbmdzLmxlbmd0aDsgKytpZHgpIHtcbiAgICAgICAgICAgICAgICBpZiAoZW5jb2RpbmdzW2lkeF0pXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oc2VuZGluZ1J0cFBhcmFtZXRlcnMuZW5jb2RpbmdzW2lkeF0sIGVuY29kaW5nc1tpZHhdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBJZiBWUDggYW5kIHRoZXJlIGlzIGVmZmVjdGl2ZSBzaW11bGNhc3QsIGFkZCBzY2FsYWJpbGl0eU1vZGUgdG8gZWFjaFxuICAgICAgICAvLyBlbmNvZGluZy5cbiAgICAgICAgaWYgKHNlbmRpbmdSdHBQYXJhbWV0ZXJzLmVuY29kaW5ncy5sZW5ndGggPiAxICYmXG4gICAgICAgICAgICBzZW5kaW5nUnRwUGFyYW1ldGVycy5jb2RlY3NbMF0ubWltZVR5cGUudG9Mb3dlckNhc2UoKSA9PT0gJ3ZpZGVvL3ZwOCcpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgZW5jb2Rpbmcgb2Ygc2VuZGluZ1J0cFBhcmFtZXRlcnMuZW5jb2RpbmdzKSB7XG4gICAgICAgICAgICAgICAgZW5jb2Rpbmcuc2NhbGFiaWxpdHlNb2RlID0gJ1MxVDMnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3JlbW90ZVNkcC5zZW5kKHtcbiAgICAgICAgICAgIG9mZmVyTWVkaWFPYmplY3QsXG4gICAgICAgICAgICBvZmZlclJ0cFBhcmFtZXRlcnM6IHNlbmRpbmdSdHBQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgYW5zd2VyUnRwUGFyYW1ldGVyczogc2VuZGluZ1JlbW90ZVJ0cFBhcmFtZXRlcnMsXG4gICAgICAgICAgICBjb2RlY09wdGlvbnNcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGFuc3dlciA9IHsgdHlwZTogJ2Fuc3dlcicsIHNkcDogdGhpcy5fcmVtb3RlU2RwLmdldFNkcCgpIH07XG4gICAgICAgIGxvZ2dlci5kZWJ1Zygnc2VuZCgpIHwgY2FsbGluZyBwYy5zZXRSZW1vdGVEZXNjcmlwdGlvbigpIFthbnN3ZXI6JW9dJywgYW5zd2VyKTtcbiAgICAgICAgYXdhaXQgdGhpcy5fcGMuc2V0UmVtb3RlRGVzY3JpcHRpb24oYW5zd2VyKTtcbiAgICAgICAgY29uc3QgbG9jYWxJZCA9IFN0cmluZyh0aGlzLl9uZXh0U2VuZExvY2FsSWQpO1xuICAgICAgICB0aGlzLl9uZXh0U2VuZExvY2FsSWQrKztcbiAgICAgICAgY29uc3QgcnRwU2VuZGVyID0gdGhpcy5fcGMuZ2V0U2VuZGVycygpXG4gICAgICAgICAgICAuZmluZCgocykgPT4gcy50cmFjayA9PT0gdHJhY2spO1xuICAgICAgICAvLyBJbnNlcnQgaW50byB0aGUgbWFwLlxuICAgICAgICB0aGlzLl9tYXBTZW5kTG9jYWxJZFJ0cFNlbmRlci5zZXQobG9jYWxJZCwgcnRwU2VuZGVyKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxvY2FsSWQ6IGxvY2FsSWQsXG4gICAgICAgICAgICBydHBQYXJhbWV0ZXJzOiBzZW5kaW5nUnRwUGFyYW1ldGVycyxcbiAgICAgICAgICAgIHJ0cFNlbmRlclxuICAgICAgICB9O1xuICAgIH1cbiAgICBhc3luYyBzdG9wU2VuZGluZyhsb2NhbElkKSB7XG4gICAgICAgIHRoaXMuX2Fzc2VydFNlbmREaXJlY3Rpb24oKTtcbiAgICAgICAgY29uc3QgcnRwU2VuZGVyID0gdGhpcy5fbWFwU2VuZExvY2FsSWRSdHBTZW5kZXIuZ2V0KGxvY2FsSWQpO1xuICAgICAgICBpZiAoIXJ0cFNlbmRlcilcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYXNzb2NpYXRlZCBSVENSdHBTZW5kZXIgbm90IGZvdW5kJyk7XG4gICAgICAgIGlmIChydHBTZW5kZXIudHJhY2spXG4gICAgICAgICAgICB0aGlzLl9zZW5kU3RyZWFtLnJlbW92ZVRyYWNrKHJ0cFNlbmRlci50cmFjayk7XG4gICAgICAgIHRoaXMuX21hcFNlbmRMb2NhbElkUnRwU2VuZGVyLmRlbGV0ZShsb2NhbElkKTtcbiAgICAgICAgY29uc3Qgb2ZmZXIgPSBhd2FpdCB0aGlzLl9wYy5jcmVhdGVPZmZlcigpO1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3N0b3BTZW5kaW5nKCkgfCBjYWxsaW5nIHBjLnNldExvY2FsRGVzY3JpcHRpb24oKSBbb2ZmZXI6JW9dJywgb2ZmZXIpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5fcGMuc2V0TG9jYWxEZXNjcmlwdGlvbihvZmZlcik7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAvLyBOT1RFOiBJZiB0aGVyZSBhcmUgbm8gc2VuZGluZyB0cmFja3MsIHNldExvY2FsRGVzY3JpcHRpb24oKSB3aWxsIGZhaWwgd2l0aFxuICAgICAgICAgICAgLy8gXCJGYWlsZWQgdG8gY3JlYXRlIGNoYW5uZWxzXCIuIElmIHNvLCBpZ25vcmUgaXQuXG4gICAgICAgICAgICBpZiAodGhpcy5fc2VuZFN0cmVhbS5nZXRUcmFja3MoKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIud2Fybignc3RvcFNlbmRpbmcoKSB8IGlnbm9yaW5nIGV4cGVjdGVkIGVycm9yIGR1ZSBubyBzZW5kaW5nIHRyYWNrczogJXMnLCBlcnJvci50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fcGMuc2lnbmFsaW5nU3RhdGUgPT09ICdzdGFibGUnKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCBhbnN3ZXIgPSB7IHR5cGU6ICdhbnN3ZXInLCBzZHA6IHRoaXMuX3JlbW90ZVNkcC5nZXRTZHAoKSB9O1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3N0b3BTZW5kaW5nKCkgfCBjYWxsaW5nIHBjLnNldFJlbW90ZURlc2NyaXB0aW9uKCkgW2Fuc3dlcjolb10nLCBhbnN3ZXIpO1xuICAgICAgICBhd2FpdCB0aGlzLl9wYy5zZXRSZW1vdGVEZXNjcmlwdGlvbihhbnN3ZXIpO1xuICAgIH1cbiAgICBhc3luYyByZXBsYWNlVHJhY2sobG9jYWxJZCwgdHJhY2spIHtcbiAgICAgICAgdGhpcy5fYXNzZXJ0U2VuZERpcmVjdGlvbigpO1xuICAgICAgICBpZiAodHJhY2spIHtcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZygncmVwbGFjZVRyYWNrKCkgW2xvY2FsSWQ6JXMsIHRyYWNrLmlkOiVzXScsIGxvY2FsSWQsIHRyYWNrLmlkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZygncmVwbGFjZVRyYWNrKCkgW2xvY2FsSWQ6JXMsIG5vIHRyYWNrXScsIGxvY2FsSWQpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJ0cFNlbmRlciA9IHRoaXMuX21hcFNlbmRMb2NhbElkUnRwU2VuZGVyLmdldChsb2NhbElkKTtcbiAgICAgICAgaWYgKCFydHBTZW5kZXIpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Fzc29jaWF0ZWQgUlRDUnRwU2VuZGVyIG5vdCBmb3VuZCcpO1xuICAgICAgICBjb25zdCBvbGRUcmFjayA9IHJ0cFNlbmRlci50cmFjaztcbiAgICAgICAgYXdhaXQgcnRwU2VuZGVyLnJlcGxhY2VUcmFjayh0cmFjayk7XG4gICAgICAgIC8vIFJlbW92ZSB0aGUgb2xkIHRyYWNrIGZyb20gdGhlIGxvY2FsIHN0cmVhbS5cbiAgICAgICAgaWYgKG9sZFRyYWNrKVxuICAgICAgICAgICAgdGhpcy5fc2VuZFN0cmVhbS5yZW1vdmVUcmFjayhvbGRUcmFjayk7XG4gICAgICAgIC8vIEFkZCB0aGUgbmV3IHRyYWNrIHRvIHRoZSBsb2NhbCBzdHJlYW0uXG4gICAgICAgIGlmICh0cmFjaylcbiAgICAgICAgICAgIHRoaXMuX3NlbmRTdHJlYW0uYWRkVHJhY2sodHJhY2spO1xuICAgIH1cbiAgICBhc3luYyBzZXRNYXhTcGF0aWFsTGF5ZXIobG9jYWxJZCwgc3BhdGlhbExheWVyKSB7XG4gICAgICAgIHRoaXMuX2Fzc2VydFNlbmREaXJlY3Rpb24oKTtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdzZXRNYXhTcGF0aWFsTGF5ZXIoKSBbbG9jYWxJZDolcywgc3BhdGlhbExheWVyOiVzXScsIGxvY2FsSWQsIHNwYXRpYWxMYXllcik7XG4gICAgICAgIGNvbnN0IHJ0cFNlbmRlciA9IHRoaXMuX21hcFNlbmRMb2NhbElkUnRwU2VuZGVyLmdldChsb2NhbElkKTtcbiAgICAgICAgaWYgKCFydHBTZW5kZXIpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Fzc29jaWF0ZWQgUlRDUnRwU2VuZGVyIG5vdCBmb3VuZCcpO1xuICAgICAgICBjb25zdCBwYXJhbWV0ZXJzID0gcnRwU2VuZGVyLmdldFBhcmFtZXRlcnMoKTtcbiAgICAgICAgcGFyYW1ldGVycy5lbmNvZGluZ3MuZm9yRWFjaCgoZW5jb2RpbmcsIGlkeCkgPT4ge1xuICAgICAgICAgICAgaWYgKGlkeCA8PSBzcGF0aWFsTGF5ZXIpXG4gICAgICAgICAgICAgICAgZW5jb2RpbmcuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBlbmNvZGluZy5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGF3YWl0IHJ0cFNlbmRlci5zZXRQYXJhbWV0ZXJzKHBhcmFtZXRlcnMpO1xuICAgIH1cbiAgICBhc3luYyBzZXRSdHBFbmNvZGluZ1BhcmFtZXRlcnMobG9jYWxJZCwgcGFyYW1zKSB7XG4gICAgICAgIHRoaXMuX2Fzc2VydFNlbmREaXJlY3Rpb24oKTtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdzZXRSdHBFbmNvZGluZ1BhcmFtZXRlcnMoKSBbbG9jYWxJZDolcywgcGFyYW1zOiVvXScsIGxvY2FsSWQsIHBhcmFtcyk7XG4gICAgICAgIGNvbnN0IHJ0cFNlbmRlciA9IHRoaXMuX21hcFNlbmRMb2NhbElkUnRwU2VuZGVyLmdldChsb2NhbElkKTtcbiAgICAgICAgaWYgKCFydHBTZW5kZXIpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Fzc29jaWF0ZWQgUlRDUnRwU2VuZGVyIG5vdCBmb3VuZCcpO1xuICAgICAgICBjb25zdCBwYXJhbWV0ZXJzID0gcnRwU2VuZGVyLmdldFBhcmFtZXRlcnMoKTtcbiAgICAgICAgcGFyYW1ldGVycy5lbmNvZGluZ3MuZm9yRWFjaCgoZW5jb2RpbmcsIGlkeCkgPT4ge1xuICAgICAgICAgICAgcGFyYW1ldGVycy5lbmNvZGluZ3NbaWR4XSA9IHsgLi4uZW5jb2RpbmcsIC4uLnBhcmFtcyB9O1xuICAgICAgICB9KTtcbiAgICAgICAgYXdhaXQgcnRwU2VuZGVyLnNldFBhcmFtZXRlcnMocGFyYW1ldGVycyk7XG4gICAgfVxuICAgIGFzeW5jIGdldFNlbmRlclN0YXRzKGxvY2FsSWQpIHtcbiAgICAgICAgdGhpcy5fYXNzZXJ0U2VuZERpcmVjdGlvbigpO1xuICAgICAgICBjb25zdCBydHBTZW5kZXIgPSB0aGlzLl9tYXBTZW5kTG9jYWxJZFJ0cFNlbmRlci5nZXQobG9jYWxJZCk7XG4gICAgICAgIGlmICghcnRwU2VuZGVyKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdhc3NvY2lhdGVkIFJUQ1J0cFNlbmRlciBub3QgZm91bmQnKTtcbiAgICAgICAgcmV0dXJuIHJ0cFNlbmRlci5nZXRTdGF0cygpO1xuICAgIH1cbiAgICBhc3luYyBzZW5kRGF0YUNoYW5uZWwoeyBvcmRlcmVkLCBtYXhQYWNrZXRMaWZlVGltZSwgbWF4UmV0cmFuc21pdHMsIGxhYmVsLCBwcm90b2NvbCwgcHJpb3JpdHkgfSkge1xuICAgICAgICB0aGlzLl9hc3NlcnRTZW5kRGlyZWN0aW9uKCk7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICBuZWdvdGlhdGVkOiB0cnVlLFxuICAgICAgICAgICAgaWQ6IHRoaXMuX25leHRTZW5kU2N0cFN0cmVhbUlkLFxuICAgICAgICAgICAgb3JkZXJlZCxcbiAgICAgICAgICAgIG1heFBhY2tldExpZmVUaW1lLFxuICAgICAgICAgICAgbWF4UmV0cmFuc21pdHMsXG4gICAgICAgICAgICBwcm90b2NvbCxcbiAgICAgICAgICAgIHByaW9yaXR5XG4gICAgICAgIH07XG4gICAgICAgIGxvZ2dlci5kZWJ1Zygnc2VuZERhdGFDaGFubmVsKCkgW29wdGlvbnM6JW9dJywgb3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IGRhdGFDaGFubmVsID0gdGhpcy5fcGMuY3JlYXRlRGF0YUNoYW5uZWwobGFiZWwsIG9wdGlvbnMpO1xuICAgICAgICAvLyBJbmNyZWFzZSBuZXh0IGlkLlxuICAgICAgICB0aGlzLl9uZXh0U2VuZFNjdHBTdHJlYW1JZCA9XG4gICAgICAgICAgICArK3RoaXMuX25leHRTZW5kU2N0cFN0cmVhbUlkICUgU0NUUF9OVU1fU1RSRUFNUy5NSVM7XG4gICAgICAgIC8vIElmIHRoaXMgaXMgdGhlIGZpcnN0IERhdGFDaGFubmVsIHdlIG5lZWQgdG8gY3JlYXRlIHRoZSBTRFAgYW5zd2VyIHdpdGhcbiAgICAgICAgLy8gbT1hcHBsaWNhdGlvbiBzZWN0aW9uLlxuICAgICAgICBpZiAoIXRoaXMuX2hhc0RhdGFDaGFubmVsTWVkaWFTZWN0aW9uKSB7XG4gICAgICAgICAgICBjb25zdCBvZmZlciA9IGF3YWl0IHRoaXMuX3BjLmNyZWF0ZU9mZmVyKCk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFNkcE9iamVjdCA9IHNkcFRyYW5zZm9ybS5wYXJzZShvZmZlci5zZHApO1xuICAgICAgICAgICAgY29uc3Qgb2ZmZXJNZWRpYU9iamVjdCA9IGxvY2FsU2RwT2JqZWN0Lm1lZGlhXG4gICAgICAgICAgICAgICAgLmZpbmQoKG0pID0+IG0udHlwZSA9PT0gJ2FwcGxpY2F0aW9uJyk7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX3RyYW5zcG9ydFJlYWR5KVxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuX3NldHVwVHJhbnNwb3J0KHsgbG9jYWxEdGxzUm9sZTogJ3NlcnZlcicsIGxvY2FsU2RwT2JqZWN0IH0pO1xuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdzZW5kRGF0YUNoYW5uZWwoKSB8IGNhbGxpbmcgcGMuc2V0TG9jYWxEZXNjcmlwdGlvbigpIFtvZmZlcjolb10nLCBvZmZlcik7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLl9wYy5zZXRMb2NhbERlc2NyaXB0aW9uKG9mZmVyKTtcbiAgICAgICAgICAgIHRoaXMuX3JlbW90ZVNkcC5zZW5kU2N0cEFzc29jaWF0aW9uKHsgb2ZmZXJNZWRpYU9iamVjdCB9KTtcbiAgICAgICAgICAgIGNvbnN0IGFuc3dlciA9IHsgdHlwZTogJ2Fuc3dlcicsIHNkcDogdGhpcy5fcmVtb3RlU2RwLmdldFNkcCgpIH07XG4gICAgICAgICAgICBsb2dnZXIuZGVidWcoJ3NlbmREYXRhQ2hhbm5lbCgpIHwgY2FsbGluZyBwYy5zZXRSZW1vdGVEZXNjcmlwdGlvbigpIFthbnN3ZXI6JW9dJywgYW5zd2VyKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX3BjLnNldFJlbW90ZURlc2NyaXB0aW9uKGFuc3dlcik7XG4gICAgICAgICAgICB0aGlzLl9oYXNEYXRhQ2hhbm5lbE1lZGlhU2VjdGlvbiA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2N0cFN0cmVhbVBhcmFtZXRlcnMgPSB7XG4gICAgICAgICAgICBzdHJlYW1JZDogb3B0aW9ucy5pZCxcbiAgICAgICAgICAgIG9yZGVyZWQ6IG9wdGlvbnMub3JkZXJlZCxcbiAgICAgICAgICAgIG1heFBhY2tldExpZmVUaW1lOiBvcHRpb25zLm1heFBhY2tldExpZmVUaW1lLFxuICAgICAgICAgICAgbWF4UmV0cmFuc21pdHM6IG9wdGlvbnMubWF4UmV0cmFuc21pdHNcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHsgZGF0YUNoYW5uZWwsIHNjdHBTdHJlYW1QYXJhbWV0ZXJzIH07XG4gICAgfVxuICAgIGFzeW5jIHJlY2VpdmUoeyB0cmFja0lkLCBraW5kLCBydHBQYXJhbWV0ZXJzIH0pIHtcbiAgICAgICAgdGhpcy5fYXNzZXJ0UmVjdkRpcmVjdGlvbigpO1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3JlY2VpdmUoKSBbdHJhY2tJZDolcywga2luZDolc10nLCB0cmFja0lkLCBraW5kKTtcbiAgICAgICAgY29uc3QgbG9jYWxJZCA9IHRyYWNrSWQ7XG4gICAgICAgIGNvbnN0IG1pZCA9IGtpbmQ7XG4gICAgICAgIHRoaXMuX3JlbW90ZVNkcC5yZWNlaXZlKHtcbiAgICAgICAgICAgIG1pZCxcbiAgICAgICAgICAgIGtpbmQsXG4gICAgICAgICAgICBvZmZlclJ0cFBhcmFtZXRlcnM6IHJ0cFBhcmFtZXRlcnMsXG4gICAgICAgICAgICBzdHJlYW1JZDogcnRwUGFyYW1ldGVycy5ydGNwLmNuYW1lLFxuICAgICAgICAgICAgdHJhY2tJZFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3Qgb2ZmZXIgPSB7IHR5cGU6ICdvZmZlcicsIHNkcDogdGhpcy5fcmVtb3RlU2RwLmdldFNkcCgpIH07XG4gICAgICAgIGxvZ2dlci5kZWJ1ZygncmVjZWl2ZSgpIHwgY2FsbGluZyBwYy5zZXRSZW1vdGVEZXNjcmlwdGlvbigpIFtvZmZlcjolb10nLCBvZmZlcik7XG4gICAgICAgIGF3YWl0IHRoaXMuX3BjLnNldFJlbW90ZURlc2NyaXB0aW9uKG9mZmVyKTtcbiAgICAgICAgbGV0IGFuc3dlciA9IGF3YWl0IHRoaXMuX3BjLmNyZWF0ZUFuc3dlcigpO1xuICAgICAgICBjb25zdCBsb2NhbFNkcE9iamVjdCA9IHNkcFRyYW5zZm9ybS5wYXJzZShhbnN3ZXIuc2RwKTtcbiAgICAgICAgY29uc3QgYW5zd2VyTWVkaWFPYmplY3QgPSBsb2NhbFNkcE9iamVjdC5tZWRpYVxuICAgICAgICAgICAgLmZpbmQoKG0pID0+IFN0cmluZyhtLm1pZCkgPT09IG1pZCk7XG4gICAgICAgIC8vIE1heSBuZWVkIHRvIG1vZGlmeSBjb2RlYyBwYXJhbWV0ZXJzIGluIHRoZSBhbnN3ZXIgYmFzZWQgb24gY29kZWNcbiAgICAgICAgLy8gcGFyYW1ldGVycyBpbiB0aGUgb2ZmZXIuXG4gICAgICAgIHNkcENvbW1vblV0aWxzLmFwcGx5Q29kZWNQYXJhbWV0ZXJzKHtcbiAgICAgICAgICAgIG9mZmVyUnRwUGFyYW1ldGVyczogcnRwUGFyYW1ldGVycyxcbiAgICAgICAgICAgIGFuc3dlck1lZGlhT2JqZWN0XG4gICAgICAgIH0pO1xuICAgICAgICBhbnN3ZXIgPSB7IHR5cGU6ICdhbnN3ZXInLCBzZHA6IHNkcFRyYW5zZm9ybS53cml0ZShsb2NhbFNkcE9iamVjdCkgfTtcbiAgICAgICAgaWYgKCF0aGlzLl90cmFuc3BvcnRSZWFkeSlcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX3NldHVwVHJhbnNwb3J0KHsgbG9jYWxEdGxzUm9sZTogJ2NsaWVudCcsIGxvY2FsU2RwT2JqZWN0IH0pO1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3JlY2VpdmUoKSB8IGNhbGxpbmcgcGMuc2V0TG9jYWxEZXNjcmlwdGlvbigpIFthbnN3ZXI6JW9dJywgYW5zd2VyKTtcbiAgICAgICAgYXdhaXQgdGhpcy5fcGMuc2V0TG9jYWxEZXNjcmlwdGlvbihhbnN3ZXIpO1xuICAgICAgICBjb25zdCBydHBSZWNlaXZlciA9IHRoaXMuX3BjLmdldFJlY2VpdmVycygpXG4gICAgICAgICAgICAuZmluZCgocikgPT4gci50cmFjayAmJiByLnRyYWNrLmlkID09PSBsb2NhbElkKTtcbiAgICAgICAgaWYgKCFydHBSZWNlaXZlcilcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbmV3IFJUQ1J0cFJlY2VpdmVyIG5vdCcpO1xuICAgICAgICAvLyBJbnNlcnQgaW50byB0aGUgbWFwLlxuICAgICAgICB0aGlzLl9tYXBSZWN2TG9jYWxJZEluZm8uc2V0KGxvY2FsSWQsIHsgbWlkLCBydHBQYXJhbWV0ZXJzLCBydHBSZWNlaXZlciB9KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxvY2FsSWQsXG4gICAgICAgICAgICB0cmFjazogcnRwUmVjZWl2ZXIudHJhY2ssXG4gICAgICAgICAgICBydHBSZWNlaXZlclxuICAgICAgICB9O1xuICAgIH1cbiAgICBhc3luYyBzdG9wUmVjZWl2aW5nKGxvY2FsSWQpIHtcbiAgICAgICAgdGhpcy5fYXNzZXJ0UmVjdkRpcmVjdGlvbigpO1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3N0b3BSZWNlaXZpbmcoKSBbbG9jYWxJZDolc10nLCBsb2NhbElkKTtcbiAgICAgICAgY29uc3QgeyBtaWQsIHJ0cFBhcmFtZXRlcnMgfSA9IHRoaXMuX21hcFJlY3ZMb2NhbElkSW5mby5nZXQobG9jYWxJZCkgfHwge307XG4gICAgICAgIC8vIFJlbW92ZSBmcm9tIHRoZSBtYXAuXG4gICAgICAgIHRoaXMuX21hcFJlY3ZMb2NhbElkSW5mby5kZWxldGUobG9jYWxJZCk7XG4gICAgICAgIHRoaXMuX3JlbW90ZVNkcC5wbGFuQlN0b3BSZWNlaXZpbmcoeyBtaWQ6IG1pZCwgb2ZmZXJSdHBQYXJhbWV0ZXJzOiBydHBQYXJhbWV0ZXJzIH0pO1xuICAgICAgICBjb25zdCBvZmZlciA9IHsgdHlwZTogJ29mZmVyJywgc2RwOiB0aGlzLl9yZW1vdGVTZHAuZ2V0U2RwKCkgfTtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdzdG9wUmVjZWl2aW5nKCkgfCBjYWxsaW5nIHBjLnNldFJlbW90ZURlc2NyaXB0aW9uKCkgW29mZmVyOiVvXScsIG9mZmVyKTtcbiAgICAgICAgYXdhaXQgdGhpcy5fcGMuc2V0UmVtb3RlRGVzY3JpcHRpb24ob2ZmZXIpO1xuICAgICAgICBjb25zdCBhbnN3ZXIgPSBhd2FpdCB0aGlzLl9wYy5jcmVhdGVBbnN3ZXIoKTtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdzdG9wUmVjZWl2aW5nKCkgfCBjYWxsaW5nIHBjLnNldExvY2FsRGVzY3JpcHRpb24oKSBbYW5zd2VyOiVvXScsIGFuc3dlcik7XG4gICAgICAgIGF3YWl0IHRoaXMuX3BjLnNldExvY2FsRGVzY3JpcHRpb24oYW5zd2VyKTtcbiAgICB9XG4gICAgYXN5bmMgZ2V0UmVjZWl2ZXJTdGF0cyhsb2NhbElkKSB7XG4gICAgICAgIHRoaXMuX2Fzc2VydFJlY3ZEaXJlY3Rpb24oKTtcbiAgICAgICAgY29uc3QgeyBydHBSZWNlaXZlciB9ID0gdGhpcy5fbWFwUmVjdkxvY2FsSWRJbmZvLmdldChsb2NhbElkKSB8fCB7fTtcbiAgICAgICAgaWYgKCFydHBSZWNlaXZlcilcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYXNzb2NpYXRlZCBSVENSdHBSZWNlaXZlciBub3QgZm91bmQnKTtcbiAgICAgICAgcmV0dXJuIHJ0cFJlY2VpdmVyLmdldFN0YXRzKCk7XG4gICAgfVxuICAgIGFzeW5jIHJlY2VpdmVEYXRhQ2hhbm5lbCh7IHNjdHBTdHJlYW1QYXJhbWV0ZXJzLCBsYWJlbCwgcHJvdG9jb2wgfSkge1xuICAgICAgICB0aGlzLl9hc3NlcnRSZWN2RGlyZWN0aW9uKCk7XG4gICAgICAgIGNvbnN0IHsgc3RyZWFtSWQsIG9yZGVyZWQsIG1heFBhY2tldExpZmVUaW1lLCBtYXhSZXRyYW5zbWl0cyB9ID0gc2N0cFN0cmVhbVBhcmFtZXRlcnM7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICBuZWdvdGlhdGVkOiB0cnVlLFxuICAgICAgICAgICAgaWQ6IHN0cmVhbUlkLFxuICAgICAgICAgICAgb3JkZXJlZCxcbiAgICAgICAgICAgIG1heFBhY2tldExpZmVUaW1lLFxuICAgICAgICAgICAgbWF4UmV0cmFuc21pdHMsXG4gICAgICAgICAgICBwcm90b2NvbFxuICAgICAgICB9O1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3JlY2VpdmVEYXRhQ2hhbm5lbCgpIFtvcHRpb25zOiVvXScsIG9wdGlvbnMpO1xuICAgICAgICBjb25zdCBkYXRhQ2hhbm5lbCA9IHRoaXMuX3BjLmNyZWF0ZURhdGFDaGFubmVsKGxhYmVsLCBvcHRpb25zKTtcbiAgICAgICAgLy8gSWYgdGhpcyBpcyB0aGUgZmlyc3QgRGF0YUNoYW5uZWwgd2UgbmVlZCB0byBjcmVhdGUgdGhlIFNEUCBvZmZlciB3aXRoXG4gICAgICAgIC8vIG09YXBwbGljYXRpb24gc2VjdGlvbi5cbiAgICAgICAgaWYgKCF0aGlzLl9oYXNEYXRhQ2hhbm5lbE1lZGlhU2VjdGlvbikge1xuICAgICAgICAgICAgdGhpcy5fcmVtb3RlU2RwLnJlY2VpdmVTY3RwQXNzb2NpYXRpb24oeyBvbGREYXRhQ2hhbm5lbFNwZWM6IHRydWUgfSk7XG4gICAgICAgICAgICBjb25zdCBvZmZlciA9IHsgdHlwZTogJ29mZmVyJywgc2RwOiB0aGlzLl9yZW1vdGVTZHAuZ2V0U2RwKCkgfTtcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZygncmVjZWl2ZURhdGFDaGFubmVsKCkgfCBjYWxsaW5nIHBjLnNldFJlbW90ZURlc2NyaXB0aW9uKCkgW29mZmVyOiVvXScsIG9mZmVyKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX3BjLnNldFJlbW90ZURlc2NyaXB0aW9uKG9mZmVyKTtcbiAgICAgICAgICAgIGNvbnN0IGFuc3dlciA9IGF3YWl0IHRoaXMuX3BjLmNyZWF0ZUFuc3dlcigpO1xuICAgICAgICAgICAgaWYgKCF0aGlzLl90cmFuc3BvcnRSZWFkeSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsU2RwT2JqZWN0ID0gc2RwVHJhbnNmb3JtLnBhcnNlKGFuc3dlci5zZHApO1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuX3NldHVwVHJhbnNwb3J0KHsgbG9jYWxEdGxzUm9sZTogJ2NsaWVudCcsIGxvY2FsU2RwT2JqZWN0IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdyZWNlaXZlRGF0YUNoYW5uZWwoKSB8IGNhbGxpbmcgcGMuc2V0UmVtb3RlRGVzY3JpcHRpb24oKSBbYW5zd2VyOiVvXScsIGFuc3dlcik7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLl9wYy5zZXRMb2NhbERlc2NyaXB0aW9uKGFuc3dlcik7XG4gICAgICAgICAgICB0aGlzLl9oYXNEYXRhQ2hhbm5lbE1lZGlhU2VjdGlvbiA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgZGF0YUNoYW5uZWwgfTtcbiAgICB9XG4gICAgYXN5bmMgX3NldHVwVHJhbnNwb3J0KHsgbG9jYWxEdGxzUm9sZSwgbG9jYWxTZHBPYmplY3QgfSkge1xuICAgICAgICBpZiAoIWxvY2FsU2RwT2JqZWN0KVxuICAgICAgICAgICAgbG9jYWxTZHBPYmplY3QgPSBzZHBUcmFuc2Zvcm0ucGFyc2UodGhpcy5fcGMubG9jYWxEZXNjcmlwdGlvbi5zZHApO1xuICAgICAgICAvLyBHZXQgb3VyIGxvY2FsIERUTFMgcGFyYW1ldGVycy5cbiAgICAgICAgY29uc3QgZHRsc1BhcmFtZXRlcnMgPSBzZHBDb21tb25VdGlscy5leHRyYWN0RHRsc1BhcmFtZXRlcnMoeyBzZHBPYmplY3Q6IGxvY2FsU2RwT2JqZWN0IH0pO1xuICAgICAgICAvLyBTZXQgb3VyIERUTFMgcm9sZS5cbiAgICAgICAgZHRsc1BhcmFtZXRlcnMucm9sZSA9IGxvY2FsRHRsc1JvbGU7XG4gICAgICAgIC8vIFVwZGF0ZSB0aGUgcmVtb3RlIERUTFMgcm9sZSBpbiB0aGUgU0RQLlxuICAgICAgICB0aGlzLl9yZW1vdGVTZHAudXBkYXRlRHRsc1JvbGUobG9jYWxEdGxzUm9sZSA9PT0gJ2NsaWVudCcgPyAnc2VydmVyJyA6ICdjbGllbnQnKTtcbiAgICAgICAgLy8gTmVlZCB0byB0ZWxsIHRoZSByZW1vdGUgdHJhbnNwb3J0IGFib3V0IG91ciBwYXJhbWV0ZXJzLlxuICAgICAgICBhd2FpdCB0aGlzLnNhZmVFbWl0QXNQcm9taXNlKCdAY29ubmVjdCcsIHsgZHRsc1BhcmFtZXRlcnMgfSk7XG4gICAgICAgIHRoaXMuX3RyYW5zcG9ydFJlYWR5ID0gdHJ1ZTtcbiAgICB9XG4gICAgX2Fzc2VydFNlbmREaXJlY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLl9kaXJlY3Rpb24gIT09ICdzZW5kJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdtZXRob2QgY2FuIGp1c3QgYmUgY2FsbGVkIGZvciBoYW5kbGVycyB3aXRoIFwic2VuZFwiIGRpcmVjdGlvbicpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9hc3NlcnRSZWN2RGlyZWN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5fZGlyZWN0aW9uICE9PSAncmVjdicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbWV0aG9kIGNhbiBqdXN0IGJlIGNhbGxlZCBmb3IgaGFuZGxlcnMgd2l0aCBcInJlY3ZcIiBkaXJlY3Rpb24nKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuU2FmYXJpMTEgPSBTYWZhcmkxMTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdXRpbHMgPSByZXF1aXJlKFwiLi4vLi4vdXRpbHNcIik7XG4vKipcbiAqIE5vcm1hbGl6ZSBPUlRDIGJhc2VkIEVkZ2UncyBSVENSdHBSZWNlaXZlci5nZXRDYXBhYmlsaXRpZXMoKSB0byBwcm9kdWNlIGEgZnVsbFxuICogY29tcGxpYW50IE9SVEMgUlRDUnRwQ2FwYWJpbGl0aWVzLlxuICovXG5mdW5jdGlvbiBnZXRDYXBhYmlsaXRpZXMoKSB7XG4gICAgY29uc3QgbmF0aXZlQ2FwcyA9IFJUQ1J0cFJlY2VpdmVyLmdldENhcGFiaWxpdGllcygpO1xuICAgIGNvbnN0IGNhcHMgPSB1dGlscy5jbG9uZShuYXRpdmVDYXBzKTtcbiAgICBmb3IgKGNvbnN0IGNvZGVjIG9mIGNhcHMuY29kZWNzKSB7XG4gICAgICAgIC8vIFJlbmFtZSBudW1DaGFubmVscyB0byBjaGFubmVscy5cbiAgICAgICAgY29kZWMuY2hhbm5lbHMgPSBjb2RlYy5udW1DaGFubmVscztcbiAgICAgICAgZGVsZXRlIGNvZGVjLm51bUNoYW5uZWxzO1xuICAgICAgICAvLyBBZGQgbWltZVR5cGUuXG4gICAgICAgIGNvZGVjLm1pbWVUeXBlID0gY29kZWMubWltZVR5cGUgfHwgYCR7Y29kZWMua2luZH0vJHtjb2RlYy5uYW1lfWA7XG4gICAgICAgIC8vIE5PVEU6IEVkZ2Ugc2V0cyBzb21lIG51bWVyaWMgcGFyYW1ldGVycyBhcyBzdHJpbmcgcmF0aGVyIHRoYW4gbnVtYmVyLiBGaXggdGhlbS5cbiAgICAgICAgaWYgKGNvZGVjLnBhcmFtZXRlcnMpIHtcbiAgICAgICAgICAgIGNvbnN0IHBhcmFtZXRlcnMgPSBjb2RlYy5wYXJhbWV0ZXJzO1xuICAgICAgICAgICAgaWYgKHBhcmFtZXRlcnMuYXB0KVxuICAgICAgICAgICAgICAgIHBhcmFtZXRlcnMuYXB0ID0gTnVtYmVyKHBhcmFtZXRlcnMuYXB0KTtcbiAgICAgICAgICAgIGlmIChwYXJhbWV0ZXJzWydwYWNrZXRpemF0aW9uLW1vZGUnXSlcbiAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzWydwYWNrZXRpemF0aW9uLW1vZGUnXSA9IE51bWJlcihwYXJhbWV0ZXJzWydwYWNrZXRpemF0aW9uLW1vZGUnXSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRGVsZXRlIGVtdHkgcGFyYW1ldGVyIFN0cmluZyBpbiBydGNwRmVlZGJhY2suXG4gICAgICAgIGZvciAoY29uc3QgZmVlZGJhY2sgb2YgY29kZWMucnRjcEZlZWRiYWNrIHx8IFtdKSB7XG4gICAgICAgICAgICBpZiAoIWZlZWRiYWNrLnBhcmFtZXRlcilcbiAgICAgICAgICAgICAgICBmZWVkYmFjay5wYXJhbWV0ZXIgPSAnJztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY2Fwcztcbn1cbmV4cG9ydHMuZ2V0Q2FwYWJpbGl0aWVzID0gZ2V0Q2FwYWJpbGl0aWVzO1xuLyoqXG4gKiBHZW5lcmF0ZSBSVENSdHBQYXJhbWV0ZXJzIGFzIE9SVEMgYmFzZWQgRWRnZSBsaWtlcy5cbiAqL1xuZnVuY3Rpb24gbWFuZ2xlUnRwUGFyYW1ldGVycyhydHBQYXJhbWV0ZXJzKSB7XG4gICAgY29uc3QgcGFyYW1zID0gdXRpbHMuY2xvbmUocnRwUGFyYW1ldGVycyk7XG4gICAgLy8gUmVuYW1lIG1pZCB0byBtdXhJZC5cbiAgICBpZiAocGFyYW1zLm1pZCkge1xuICAgICAgICBwYXJhbXMubXV4SWQgPSBwYXJhbXMubWlkO1xuICAgICAgICBkZWxldGUgcGFyYW1zLm1pZDtcbiAgICB9XG4gICAgZm9yIChjb25zdCBjb2RlYyBvZiBwYXJhbXMuY29kZWNzKSB7XG4gICAgICAgIC8vIFJlbmFtZSBjaGFubmVscyB0byBudW1DaGFubmVscy5cbiAgICAgICAgaWYgKGNvZGVjLmNoYW5uZWxzKSB7XG4gICAgICAgICAgICBjb2RlYy5udW1DaGFubmVscyA9IGNvZGVjLmNoYW5uZWxzO1xuICAgICAgICAgICAgZGVsZXRlIGNvZGVjLmNoYW5uZWxzO1xuICAgICAgICB9XG4gICAgICAgIC8vIEFkZCBjb2RlYy5uYW1lIChyZXF1cmllZCBieSBFZGdlKS5cbiAgICAgICAgaWYgKGNvZGVjLm1pbWVUeXBlICYmICFjb2RlYy5uYW1lKVxuICAgICAgICAgICAgY29kZWMubmFtZSA9IGNvZGVjLm1pbWVUeXBlLnNwbGl0KCcvJylbMV07XG4gICAgICAgIC8vIFJlbW92ZSBtaW1lVHlwZS5cbiAgICAgICAgZGVsZXRlIGNvZGVjLm1pbWVUeXBlO1xuICAgIH1cbiAgICByZXR1cm4gcGFyYW1zO1xufVxuZXhwb3J0cy5tYW5nbGVSdHBQYXJhbWV0ZXJzID0gbWFuZ2xlUnRwUGFyYW1ldGVycztcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgTG9nZ2VyXzEgPSByZXF1aXJlKFwiLi4vTG9nZ2VyXCIpO1xuY29uc3QgZXJyb3JzXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JzXCIpO1xuY29uc3QgdXRpbHMgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG5jb25zdCBvcnRjID0gcmVxdWlyZShcIi4uL29ydGNcIik7XG5jb25zdCBlZGdlVXRpbHMgPSByZXF1aXJlKFwiLi9vcnRjL2VkZ2VVdGlsc1wiKTtcbmNvbnN0IEhhbmRsZXJJbnRlcmZhY2VfMSA9IHJlcXVpcmUoXCIuL0hhbmRsZXJJbnRlcmZhY2VcIik7XG5jb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyXzEuTG9nZ2VyKCdFZGdlMTEnKTtcbmNsYXNzIEVkZ2UxMSBleHRlbmRzIEhhbmRsZXJJbnRlcmZhY2VfMS5IYW5kbGVySW50ZXJmYWNlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgLy8gTWFwIG9mIFJUQ1J0cFNlbmRlcnMgaW5kZXhlZCBieSBpZC5cbiAgICAgICAgdGhpcy5fcnRwU2VuZGVycyA9IG5ldyBNYXAoKTtcbiAgICAgICAgLy8gTWFwIG9mIFJUQ1J0cFJlY2VpdmVycyBpbmRleGVkIGJ5IGlkLlxuICAgICAgICB0aGlzLl9ydHBSZWNlaXZlcnMgPSBuZXcgTWFwKCk7XG4gICAgICAgIC8vIE5leHQgbG9jYWxJZCBmb3Igc2VuZGluZyB0cmFja3MuXG4gICAgICAgIHRoaXMuX25leHRTZW5kTG9jYWxJZCA9IDA7XG4gICAgICAgIC8vIEdvdCB0cmFuc3BvcnQgbG9jYWwgYW5kIHJlbW90ZSBwYXJhbWV0ZXJzLlxuICAgICAgICB0aGlzLl90cmFuc3BvcnRSZWFkeSA9IGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZmFjdG9yeSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBzdGF0aWMgY3JlYXRlRmFjdG9yeSgpIHtcbiAgICAgICAgcmV0dXJuICgpID0+IG5ldyBFZGdlMTEoKTtcbiAgICB9XG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnRWRnZTExJztcbiAgICB9XG4gICAgY2xvc2UoKSB7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZygnY2xvc2UoKScpO1xuICAgICAgICAvLyBDbG9zZSB0aGUgSUNFIGdhdGhlcmVyLlxuICAgICAgICAvLyBOT1RFOiBOb3QgeWV0IGltcGxlbWVudGVkIGJ5IEVkZ2UuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLl9pY2VHYXRoZXJlci5jbG9zZSgpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikgeyB9XG4gICAgICAgIC8vIENsb3NlIHRoZSBJQ0UgdHJhbnNwb3J0LlxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5faWNlVHJhbnNwb3J0LnN0b3AoKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHsgfVxuICAgICAgICAvLyBDbG9zZSB0aGUgRFRMUyB0cmFuc3BvcnQuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLl9kdGxzVHJhbnNwb3J0LnN0b3AoKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHsgfVxuICAgICAgICAvLyBDbG9zZSBSVENSdHBTZW5kZXJzLlxuICAgICAgICBmb3IgKGNvbnN0IHJ0cFNlbmRlciBvZiB0aGlzLl9ydHBTZW5kZXJzLnZhbHVlcygpKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJ0cFNlbmRlci5zdG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHsgfVxuICAgICAgICB9XG4gICAgICAgIC8vIENsb3NlIFJUQ1J0cFJlY2VpdmVycy5cbiAgICAgICAgZm9yIChjb25zdCBydHBSZWNlaXZlciBvZiB0aGlzLl9ydHBSZWNlaXZlcnMudmFsdWVzKCkpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcnRwUmVjZWl2ZXIuc3RvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7IH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBnZXROYXRpdmVSdHBDYXBhYmlsaXRpZXMoKSB7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZygnZ2V0TmF0aXZlUnRwQ2FwYWJpbGl0aWVzKCknKTtcbiAgICAgICAgcmV0dXJuIGVkZ2VVdGlscy5nZXRDYXBhYmlsaXRpZXMoKTtcbiAgICB9XG4gICAgYXN5bmMgZ2V0TmF0aXZlU2N0cENhcGFiaWxpdGllcygpIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdnZXROYXRpdmVTY3RwQ2FwYWJpbGl0aWVzKCknKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG51bVN0cmVhbXM6IHsgT1M6IDAsIE1JUzogMCB9XG4gICAgICAgIH07XG4gICAgfVxuICAgIHJ1bih7IGRpcmVjdGlvbiwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbiAgICBpY2VQYXJhbWV0ZXJzLCBpY2VDYW5kaWRhdGVzLCBkdGxzUGFyYW1ldGVycywgc2N0cFBhcmFtZXRlcnMsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgaWNlU2VydmVycywgaWNlVHJhbnNwb3J0UG9saWN5LCBhZGRpdGlvbmFsU2V0dGluZ3MsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgcHJvcHJpZXRhcnlDb25zdHJhaW50cywgLy8gZXNsaW50LWRpc2FibGUtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbiAgICBleHRlbmRlZFJ0cENhcGFiaWxpdGllcyB9KSB7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZygncnVuKCknKTtcbiAgICAgICAgdGhpcy5fc2VuZGluZ1J0cFBhcmFtZXRlcnNCeUtpbmQgPVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGF1ZGlvOiBvcnRjLmdldFNlbmRpbmdSdHBQYXJhbWV0ZXJzKCdhdWRpbycsIGV4dGVuZGVkUnRwQ2FwYWJpbGl0aWVzKSxcbiAgICAgICAgICAgICAgICB2aWRlbzogb3J0Yy5nZXRTZW5kaW5nUnRwUGFyYW1ldGVycygndmlkZW8nLCBleHRlbmRlZFJ0cENhcGFiaWxpdGllcylcbiAgICAgICAgICAgIH07XG4gICAgICAgIHRoaXMuX3JlbW90ZUljZVBhcmFtZXRlcnMgPSBpY2VQYXJhbWV0ZXJzO1xuICAgICAgICB0aGlzLl9yZW1vdGVJY2VDYW5kaWRhdGVzID0gaWNlQ2FuZGlkYXRlcztcbiAgICAgICAgdGhpcy5fcmVtb3RlRHRsc1BhcmFtZXRlcnMgPSBkdGxzUGFyYW1ldGVycztcbiAgICAgICAgdGhpcy5fY25hbWUgPSBgQ05BTUUtJHt1dGlscy5nZW5lcmF0ZVJhbmRvbU51bWJlcigpfWA7XG4gICAgICAgIHRoaXMuX3NldEljZUdhdGhlcmVyKHsgaWNlU2VydmVycywgaWNlVHJhbnNwb3J0UG9saWN5IH0pO1xuICAgICAgICB0aGlzLl9zZXRJY2VUcmFuc3BvcnQoKTtcbiAgICAgICAgdGhpcy5fc2V0RHRsc1RyYW5zcG9ydCgpO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgYXN5bmMgdXBkYXRlSWNlU2VydmVycyhpY2VTZXJ2ZXJzKSB7XG4gICAgICAgIC8vIE5PVEU6IEVkZ2UgMTEgZG9lcyBub3QgaW1wbGVtZW50IGljZUdhdGhlcmVyLmdhdGVyKCkuXG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5VbnN1cHBvcnRlZEVycm9yKCdub3Qgc3VwcG9ydGVkJyk7XG4gICAgfVxuICAgIGFzeW5jIHJlc3RhcnRJY2UoaWNlUGFyYW1ldGVycykge1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3Jlc3RhcnRJY2UoKScpO1xuICAgICAgICB0aGlzLl9yZW1vdGVJY2VQYXJhbWV0ZXJzID0gaWNlUGFyYW1ldGVycztcbiAgICAgICAgaWYgKCF0aGlzLl90cmFuc3BvcnRSZWFkeSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdyZXN0YXJ0SWNlKCkgfCBjYWxsaW5nIGljZVRyYW5zcG9ydC5zdGFydCgpJyk7XG4gICAgICAgIHRoaXMuX2ljZVRyYW5zcG9ydC5zdGFydCh0aGlzLl9pY2VHYXRoZXJlciwgaWNlUGFyYW1ldGVycywgJ2NvbnRyb2xsaW5nJyk7XG4gICAgICAgIGZvciAoY29uc3QgY2FuZGlkYXRlIG9mIHRoaXMuX3JlbW90ZUljZUNhbmRpZGF0ZXMpIHtcbiAgICAgICAgICAgIHRoaXMuX2ljZVRyYW5zcG9ydC5hZGRSZW1vdGVDYW5kaWRhdGUoY2FuZGlkYXRlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9pY2VUcmFuc3BvcnQuYWRkUmVtb3RlQ2FuZGlkYXRlKHt9KTtcbiAgICB9XG4gICAgYXN5bmMgZ2V0VHJhbnNwb3J0U3RhdHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pY2VUcmFuc3BvcnQuZ2V0U3RhdHMoKTtcbiAgICB9XG4gICAgYXN5bmMgc2VuZChcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgeyB0cmFjaywgZW5jb2RpbmdzLCBjb2RlY09wdGlvbnMsIGNvZGVjIH0pIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdzZW5kKCkgW2tpbmQ6JXMsIHRyYWNrLmlkOiVzXScsIHRyYWNrLmtpbmQsIHRyYWNrLmlkKTtcbiAgICAgICAgaWYgKCF0aGlzLl90cmFuc3BvcnRSZWFkeSlcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX3NldHVwVHJhbnNwb3J0KHsgbG9jYWxEdGxzUm9sZTogJ3NlcnZlcicgfSk7XG4gICAgICAgIGxvZ2dlci5kZWJ1Zygnc2VuZCgpIHwgY2FsbGluZyBuZXcgUlRDUnRwU2VuZGVyKCknKTtcbiAgICAgICAgY29uc3QgcnRwU2VuZGVyID0gbmV3IFJUQ1J0cFNlbmRlcih0cmFjaywgdGhpcy5fZHRsc1RyYW5zcG9ydCk7XG4gICAgICAgIGNvbnN0IHJ0cFBhcmFtZXRlcnMgPSB1dGlscy5jbG9uZSh0aGlzLl9zZW5kaW5nUnRwUGFyYW1ldGVyc0J5S2luZFt0cmFjay5raW5kXSk7XG4gICAgICAgIHJ0cFBhcmFtZXRlcnMuY29kZWNzID0gb3J0Yy5yZWR1Y2VDb2RlY3MocnRwUGFyYW1ldGVycy5jb2RlY3MsIGNvZGVjKTtcbiAgICAgICAgY29uc3QgdXNlUnR4ID0gcnRwUGFyYW1ldGVycy5jb2RlY3NcbiAgICAgICAgICAgIC5zb21lKChfY29kZWMpID0+IC8uK1xcL3J0eCQvaS50ZXN0KF9jb2RlYy5taW1lVHlwZSkpO1xuICAgICAgICBpZiAoIWVuY29kaW5ncylcbiAgICAgICAgICAgIGVuY29kaW5ncyA9IFt7fV07XG4gICAgICAgIGZvciAoY29uc3QgZW5jb2Rpbmcgb2YgZW5jb2RpbmdzKSB7XG4gICAgICAgICAgICBlbmNvZGluZy5zc3JjID0gdXRpbHMuZ2VuZXJhdGVSYW5kb21OdW1iZXIoKTtcbiAgICAgICAgICAgIGlmICh1c2VSdHgpXG4gICAgICAgICAgICAgICAgZW5jb2RpbmcucnR4ID0geyBzc3JjOiB1dGlscy5nZW5lcmF0ZVJhbmRvbU51bWJlcigpIH07XG4gICAgICAgIH1cbiAgICAgICAgcnRwUGFyYW1ldGVycy5lbmNvZGluZ3MgPSBlbmNvZGluZ3M7XG4gICAgICAgIC8vIEZpbGwgUlRDUnRwUGFyYW1ldGVycy5ydGNwLlxuICAgICAgICBydHBQYXJhbWV0ZXJzLnJ0Y3AgPVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNuYW1lOiB0aGlzLl9jbmFtZSxcbiAgICAgICAgICAgICAgICByZWR1Y2VkU2l6ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBtdXg6IHRydWVcbiAgICAgICAgICAgIH07XG4gICAgICAgIC8vIE5PVEU6IENvbnZlcnQgb3VyIHN0YW5kYXJkIFJUQ1J0cFBhcmFtZXRlcnMgaW50byB0aG9zZSB0aGF0IEVkZ2VcbiAgICAgICAgLy8gZXhwZWN0cy5cbiAgICAgICAgY29uc3QgZWRnZVJ0cFBhcmFtZXRlcnMgPSBlZGdlVXRpbHMubWFuZ2xlUnRwUGFyYW1ldGVycyhydHBQYXJhbWV0ZXJzKTtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdzZW5kKCkgfCBjYWxsaW5nIHJ0cFNlbmRlci5zZW5kKCkgW3BhcmFtczolb10nLCBlZGdlUnRwUGFyYW1ldGVycyk7XG4gICAgICAgIGF3YWl0IHJ0cFNlbmRlci5zZW5kKGVkZ2VSdHBQYXJhbWV0ZXJzKTtcbiAgICAgICAgY29uc3QgbG9jYWxJZCA9IFN0cmluZyh0aGlzLl9uZXh0U2VuZExvY2FsSWQpO1xuICAgICAgICB0aGlzLl9uZXh0U2VuZExvY2FsSWQrKztcbiAgICAgICAgLy8gU3RvcmUgaXQuXG4gICAgICAgIHRoaXMuX3J0cFNlbmRlcnMuc2V0KGxvY2FsSWQsIHJ0cFNlbmRlcik7XG4gICAgICAgIHJldHVybiB7IGxvY2FsSWQsIHJ0cFBhcmFtZXRlcnMsIHJ0cFNlbmRlciB9O1xuICAgIH1cbiAgICBhc3luYyBzdG9wU2VuZGluZyhsb2NhbElkKSB7XG4gICAgICAgIGxvZ2dlci5kZWJ1Zygnc3RvcFNlbmRpbmcoKSBbbG9jYWxJZDolc10nLCBsb2NhbElkKTtcbiAgICAgICAgY29uc3QgcnRwU2VuZGVyID0gdGhpcy5fcnRwU2VuZGVycy5nZXQobG9jYWxJZCk7XG4gICAgICAgIGlmICghcnRwU2VuZGVyKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSVENSdHBTZW5kZXIgbm90IGZvdW5kJyk7XG4gICAgICAgIHRoaXMuX3J0cFNlbmRlcnMuZGVsZXRlKGxvY2FsSWQpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdzdG9wU2VuZGluZygpIHwgY2FsbGluZyBydHBTZW5kZXIuc3RvcCgpJyk7XG4gICAgICAgICAgICBydHBTZW5kZXIuc3RvcCgpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgbG9nZ2VyLndhcm4oJ3N0b3BTZW5kaW5nKCkgfCBydHBTZW5kZXIuc3RvcCgpIGZhaWxlZDolbycsIGVycm9yKTtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIHJlcGxhY2VUcmFjayhsb2NhbElkLCB0cmFjaykge1xuICAgICAgICBpZiAodHJhY2spIHtcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZygncmVwbGFjZVRyYWNrKCkgW2xvY2FsSWQ6JXMsIHRyYWNrLmlkOiVzXScsIGxvY2FsSWQsIHRyYWNrLmlkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZygncmVwbGFjZVRyYWNrKCkgW2xvY2FsSWQ6JXMsIG5vIHRyYWNrXScsIGxvY2FsSWQpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJ0cFNlbmRlciA9IHRoaXMuX3J0cFNlbmRlcnMuZ2V0KGxvY2FsSWQpO1xuICAgICAgICBpZiAoIXJ0cFNlbmRlcilcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUlRDUnRwU2VuZGVyIG5vdCBmb3VuZCcpO1xuICAgICAgICBydHBTZW5kZXIuc2V0VHJhY2sodHJhY2spO1xuICAgIH1cbiAgICBhc3luYyBzZXRNYXhTcGF0aWFsTGF5ZXIobG9jYWxJZCwgc3BhdGlhbExheWVyKSB7XG4gICAgICAgIGxvZ2dlci5kZWJ1Zygnc2V0TWF4U3BhdGlhbExheWVyKCkgW2xvY2FsSWQ6JXMsIHNwYXRpYWxMYXllcjolc10nLCBsb2NhbElkLCBzcGF0aWFsTGF5ZXIpO1xuICAgICAgICBjb25zdCBydHBTZW5kZXIgPSB0aGlzLl9ydHBTZW5kZXJzLmdldChsb2NhbElkKTtcbiAgICAgICAgaWYgKCFydHBTZW5kZXIpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JUQ1J0cFNlbmRlciBub3QgZm91bmQnKTtcbiAgICAgICAgY29uc3QgcGFyYW1ldGVycyA9IHJ0cFNlbmRlci5nZXRQYXJhbWV0ZXJzKCk7XG4gICAgICAgIHBhcmFtZXRlcnMuZW5jb2RpbmdzXG4gICAgICAgICAgICAuZm9yRWFjaCgoZW5jb2RpbmcsIGlkeCkgPT4ge1xuICAgICAgICAgICAgaWYgKGlkeCA8PSBzcGF0aWFsTGF5ZXIpXG4gICAgICAgICAgICAgICAgZW5jb2RpbmcuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBlbmNvZGluZy5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGF3YWl0IHJ0cFNlbmRlci5zZXRQYXJhbWV0ZXJzKHBhcmFtZXRlcnMpO1xuICAgIH1cbiAgICBhc3luYyBzZXRSdHBFbmNvZGluZ1BhcmFtZXRlcnMobG9jYWxJZCwgcGFyYW1zKSB7XG4gICAgICAgIGxvZ2dlci5kZWJ1Zygnc2V0UnRwRW5jb2RpbmdQYXJhbWV0ZXJzKCkgW2xvY2FsSWQ6JXMsIHBhcmFtczolb10nLCBsb2NhbElkLCBwYXJhbXMpO1xuICAgICAgICBjb25zdCBydHBTZW5kZXIgPSB0aGlzLl9ydHBTZW5kZXJzLmdldChsb2NhbElkKTtcbiAgICAgICAgaWYgKCFydHBTZW5kZXIpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JUQ1J0cFNlbmRlciBub3QgZm91bmQnKTtcbiAgICAgICAgY29uc3QgcGFyYW1ldGVycyA9IHJ0cFNlbmRlci5nZXRQYXJhbWV0ZXJzKCk7XG4gICAgICAgIHBhcmFtZXRlcnMuZW5jb2RpbmdzLmZvckVhY2goKGVuY29kaW5nLCBpZHgpID0+IHtcbiAgICAgICAgICAgIHBhcmFtZXRlcnMuZW5jb2RpbmdzW2lkeF0gPSB7IC4uLmVuY29kaW5nLCAuLi5wYXJhbXMgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIGF3YWl0IHJ0cFNlbmRlci5zZXRQYXJhbWV0ZXJzKHBhcmFtZXRlcnMpO1xuICAgIH1cbiAgICBhc3luYyBnZXRTZW5kZXJTdGF0cyhsb2NhbElkKSB7XG4gICAgICAgIGNvbnN0IHJ0cFNlbmRlciA9IHRoaXMuX3J0cFNlbmRlcnMuZ2V0KGxvY2FsSWQpO1xuICAgICAgICBpZiAoIXJ0cFNlbmRlcilcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUlRDUnRwU2VuZGVyIG5vdCBmb3VuZCcpO1xuICAgICAgICByZXR1cm4gcnRwU2VuZGVyLmdldFN0YXRzKCk7XG4gICAgfVxuICAgIGFzeW5jIHNlbmREYXRhQ2hhbm5lbChcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgb3B0aW9ucykge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuVW5zdXBwb3J0ZWRFcnJvcignbm90IGltcGxlbWVudGVkJyk7XG4gICAgfVxuICAgIGFzeW5jIHJlY2VpdmUoeyB0cmFja0lkLCBraW5kLCBydHBQYXJhbWV0ZXJzIH0pIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdyZWNlaXZlKCkgW3RyYWNrSWQ6JXMsIGtpbmQ6JXNdJywgdHJhY2tJZCwga2luZCk7XG4gICAgICAgIGlmICghdGhpcy5fdHJhbnNwb3J0UmVhZHkpXG4gICAgICAgICAgICBhd2FpdCB0aGlzLl9zZXR1cFRyYW5zcG9ydCh7IGxvY2FsRHRsc1JvbGU6ICdzZXJ2ZXInIH0pO1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3JlY2VpdmUoKSB8IGNhbGxpbmcgbmV3IFJUQ1J0cFJlY2VpdmVyKCknKTtcbiAgICAgICAgY29uc3QgcnRwUmVjZWl2ZXIgPSBuZXcgUlRDUnRwUmVjZWl2ZXIodGhpcy5fZHRsc1RyYW5zcG9ydCwga2luZCk7XG4gICAgICAgIHJ0cFJlY2VpdmVyLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IoJ3J0cFJlY2VpdmVyIFwiZXJyb3JcIiBldmVudCBbZXZlbnQ6JW9dJywgZXZlbnQpO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gTk9URTogQ29udmVydCBvdXIgc3RhbmRhcmQgUlRDUnRwUGFyYW1ldGVycyBpbnRvIHRob3NlIHRoYXQgRWRnZVxuICAgICAgICAvLyBleHBlY3RzLlxuICAgICAgICBjb25zdCBlZGdlUnRwUGFyYW1ldGVycyA9IGVkZ2VVdGlscy5tYW5nbGVSdHBQYXJhbWV0ZXJzKHJ0cFBhcmFtZXRlcnMpO1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3JlY2VpdmUoKSB8IGNhbGxpbmcgcnRwUmVjZWl2ZXIucmVjZWl2ZSgpIFtwYXJhbXM6JW9dJywgZWRnZVJ0cFBhcmFtZXRlcnMpO1xuICAgICAgICBhd2FpdCBydHBSZWNlaXZlci5yZWNlaXZlKGVkZ2VSdHBQYXJhbWV0ZXJzKTtcbiAgICAgICAgY29uc3QgbG9jYWxJZCA9IHRyYWNrSWQ7XG4gICAgICAgIC8vIFN0b3JlIGl0LlxuICAgICAgICB0aGlzLl9ydHBSZWNlaXZlcnMuc2V0KGxvY2FsSWQsIHJ0cFJlY2VpdmVyKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxvY2FsSWQsXG4gICAgICAgICAgICB0cmFjazogcnRwUmVjZWl2ZXIudHJhY2ssXG4gICAgICAgICAgICBydHBSZWNlaXZlclxuICAgICAgICB9O1xuICAgIH1cbiAgICBhc3luYyBzdG9wUmVjZWl2aW5nKGxvY2FsSWQpIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdzdG9wUmVjZWl2aW5nKCkgW2xvY2FsSWQ6JXNdJywgbG9jYWxJZCk7XG4gICAgICAgIGNvbnN0IHJ0cFJlY2VpdmVyID0gdGhpcy5fcnRwUmVjZWl2ZXJzLmdldChsb2NhbElkKTtcbiAgICAgICAgaWYgKCFydHBSZWNlaXZlcilcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUlRDUnRwUmVjZWl2ZXIgbm90IGZvdW5kJyk7XG4gICAgICAgIHRoaXMuX3J0cFJlY2VpdmVycy5kZWxldGUobG9jYWxJZCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsb2dnZXIuZGVidWcoJ3N0b3BSZWNlaXZpbmcoKSB8IGNhbGxpbmcgcnRwUmVjZWl2ZXIuc3RvcCgpJyk7XG4gICAgICAgICAgICBydHBSZWNlaXZlci5zdG9wKCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBsb2dnZXIud2Fybignc3RvcFJlY2VpdmluZygpIHwgcnRwUmVjZWl2ZXIuc3RvcCgpIGZhaWxlZDolbycsIGVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBnZXRSZWNlaXZlclN0YXRzKGxvY2FsSWQpIHtcbiAgICAgICAgY29uc3QgcnRwUmVjZWl2ZXIgPSB0aGlzLl9ydHBSZWNlaXZlcnMuZ2V0KGxvY2FsSWQpO1xuICAgICAgICBpZiAoIXJ0cFJlY2VpdmVyKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSVENSdHBSZWNlaXZlciBub3QgZm91bmQnKTtcbiAgICAgICAgcmV0dXJuIHJ0cFJlY2VpdmVyLmdldFN0YXRzKCk7XG4gICAgfVxuICAgIGFzeW5jIHJlY2VpdmVEYXRhQ2hhbm5lbChcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgb3B0aW9ucykge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuVW5zdXBwb3J0ZWRFcnJvcignbm90IGltcGxlbWVudGVkJyk7XG4gICAgfVxuICAgIF9zZXRJY2VHYXRoZXJlcih7IGljZVNlcnZlcnMsIGljZVRyYW5zcG9ydFBvbGljeSB9KSB7XG4gICAgICAgIGNvbnN0IGljZUdhdGhlcmVyID0gbmV3IFJUQ0ljZUdhdGhlcmVyKHtcbiAgICAgICAgICAgIGljZVNlcnZlcnM6IGljZVNlcnZlcnMgfHwgW10sXG4gICAgICAgICAgICBnYXRoZXJQb2xpY3k6IGljZVRyYW5zcG9ydFBvbGljeSB8fCAnYWxsJ1xuICAgICAgICB9KTtcbiAgICAgICAgaWNlR2F0aGVyZXIuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcignaWNlR2F0aGVyZXIgXCJlcnJvclwiIGV2ZW50IFtldmVudDolb10nLCBldmVudCk7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBOT1RFOiBOb3QgeWV0IGltcGxlbWVudGVkIGJ5IEVkZ2UsIHdoaWNoIHN0YXJ0cyBnYXRoZXJpbmcgYXV0b21hdGljYWxseS5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGljZUdhdGhlcmVyLmdhdGhlcigpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdfc2V0SWNlR2F0aGVyZXIoKSB8IGljZUdhdGhlcmVyLmdhdGhlcigpIGZhaWxlZDogJXMnLCBlcnJvci50b1N0cmluZygpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9pY2VHYXRoZXJlciA9IGljZUdhdGhlcmVyO1xuICAgIH1cbiAgICBfc2V0SWNlVHJhbnNwb3J0KCkge1xuICAgICAgICBjb25zdCBpY2VUcmFuc3BvcnQgPSBuZXcgUlRDSWNlVHJhbnNwb3J0KHRoaXMuX2ljZUdhdGhlcmVyKTtcbiAgICAgICAgLy8gTk9URTogTm90IHlldCBpbXBsZW1lbnRlZCBieSBFZGdlLlxuICAgICAgICBpY2VUcmFuc3BvcnQuYWRkRXZlbnRMaXN0ZW5lcignc3RhdGVjaGFuZ2UnLCAoKSA9PiB7XG4gICAgICAgICAgICBzd2l0Y2ggKGljZVRyYW5zcG9ydC5zdGF0ZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2NoZWNraW5nJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdAY29ubmVjdGlvbnN0YXRlY2hhbmdlJywgJ2Nvbm5lY3RpbmcnKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnY29ubmVjdGVkJzpcbiAgICAgICAgICAgICAgICBjYXNlICdjb21wbGV0ZWQnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ0Bjb25uZWN0aW9uc3RhdGVjaGFuZ2UnLCAnY29ubmVjdGVkJyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2ZhaWxlZCc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnQGNvbm5lY3Rpb25zdGF0ZWNoYW5nZScsICdmYWlsZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnZGlzY29ubmVjdGVkJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdAY29ubmVjdGlvbnN0YXRlY2hhbmdlJywgJ2Rpc2Nvbm5lY3RlZCcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdjbG9zZWQnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ0Bjb25uZWN0aW9uc3RhdGVjaGFuZ2UnLCAnY2xvc2VkJyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gTk9URTogTm90IHN0YW5kYXJkLCBidXQgaW1wbGVtZW50ZWQgYnkgRWRnZS5cbiAgICAgICAgaWNlVHJhbnNwb3J0LmFkZEV2ZW50TGlzdGVuZXIoJ2ljZXN0YXRlY2hhbmdlJywgKCkgPT4ge1xuICAgICAgICAgICAgc3dpdGNoIChpY2VUcmFuc3BvcnQuc3RhdGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdjaGVja2luZyc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnQGNvbm5lY3Rpb25zdGF0ZWNoYW5nZScsICdjb25uZWN0aW5nJyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2Nvbm5lY3RlZCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnY29tcGxldGVkJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdAY29ubmVjdGlvbnN0YXRlY2hhbmdlJywgJ2Nvbm5lY3RlZCcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdmYWlsZWQnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ0Bjb25uZWN0aW9uc3RhdGVjaGFuZ2UnLCAnZmFpbGVkJyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2Rpc2Nvbm5lY3RlZCc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnQGNvbm5lY3Rpb25zdGF0ZWNoYW5nZScsICdkaXNjb25uZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnY2xvc2VkJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdAY29ubmVjdGlvbnN0YXRlY2hhbmdlJywgJ2Nsb3NlZCcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGljZVRyYW5zcG9ydC5hZGRFdmVudExpc3RlbmVyKCdjYW5kaWRhdGVwYWlyY2hhbmdlJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBsb2dnZXIuZGVidWcoJ2ljZVRyYW5zcG9ydCBcImNhbmRpZGF0ZXBhaXJjaGFuZ2VcIiBldmVudCBbcGFpcjolb10nLCBldmVudC5wYWlyKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX2ljZVRyYW5zcG9ydCA9IGljZVRyYW5zcG9ydDtcbiAgICB9XG4gICAgX3NldER0bHNUcmFuc3BvcnQoKSB7XG4gICAgICAgIGNvbnN0IGR0bHNUcmFuc3BvcnQgPSBuZXcgUlRDRHRsc1RyYW5zcG9ydCh0aGlzLl9pY2VUcmFuc3BvcnQpO1xuICAgICAgICAvLyBOT1RFOiBOb3QgeWV0IGltcGxlbWVudGVkIGJ5IEVkZ2UuXG4gICAgICAgIGR0bHNUcmFuc3BvcnQuYWRkRXZlbnRMaXN0ZW5lcignc3RhdGVjaGFuZ2UnLCAoKSA9PiB7XG4gICAgICAgICAgICBsb2dnZXIuZGVidWcoJ2R0bHNUcmFuc3BvcnQgXCJzdGF0ZWNoYW5nZVwiIGV2ZW50IFtzdGF0ZTolc10nLCBkdGxzVHJhbnNwb3J0LnN0YXRlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIE5PVEU6IE5vdCBzdGFuZGFyZCwgYnV0IGltcGxlbWVudGVkIGJ5IEVkZ2UuXG4gICAgICAgIGR0bHNUcmFuc3BvcnQuYWRkRXZlbnRMaXN0ZW5lcignZHRsc3N0YXRlY2hhbmdlJywgKCkgPT4ge1xuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdkdGxzVHJhbnNwb3J0IFwiZHRsc3N0YXRlY2hhbmdlXCIgZXZlbnQgW3N0YXRlOiVzXScsIGR0bHNUcmFuc3BvcnQuc3RhdGUpO1xuICAgICAgICAgICAgaWYgKGR0bHNUcmFuc3BvcnQuc3RhdGUgPT09ICdjbG9zZWQnKVxuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnQGNvbm5lY3Rpb25zdGF0ZWNoYW5nZScsICdjbG9zZWQnKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGR0bHNUcmFuc3BvcnQuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcignZHRsc1RyYW5zcG9ydCBcImVycm9yXCIgZXZlbnQgW2V2ZW50OiVvXScsIGV2ZW50KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX2R0bHNUcmFuc3BvcnQgPSBkdGxzVHJhbnNwb3J0O1xuICAgIH1cbiAgICBhc3luYyBfc2V0dXBUcmFuc3BvcnQoeyBsb2NhbER0bHNSb2xlIH0pIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdfc2V0dXBUcmFuc3BvcnQoKScpO1xuICAgICAgICAvLyBHZXQgb3VyIGxvY2FsIERUTFMgcGFyYW1ldGVycy5cbiAgICAgICAgY29uc3QgZHRsc1BhcmFtZXRlcnMgPSB0aGlzLl9kdGxzVHJhbnNwb3J0LmdldExvY2FsUGFyYW1ldGVycygpO1xuICAgICAgICBkdGxzUGFyYW1ldGVycy5yb2xlID0gbG9jYWxEdGxzUm9sZTtcbiAgICAgICAgLy8gTmVlZCB0byB0ZWxsIHRoZSByZW1vdGUgdHJhbnNwb3J0IGFib3V0IG91ciBwYXJhbWV0ZXJzLlxuICAgICAgICBhd2FpdCB0aGlzLnNhZmVFbWl0QXNQcm9taXNlKCdAY29ubmVjdCcsIHsgZHRsc1BhcmFtZXRlcnMgfSk7XG4gICAgICAgIC8vIFN0YXJ0IHRoZSBSVENJY2VUcmFuc3BvcnQuXG4gICAgICAgIHRoaXMuX2ljZVRyYW5zcG9ydC5zdGFydCh0aGlzLl9pY2VHYXRoZXJlciwgdGhpcy5fcmVtb3RlSWNlUGFyYW1ldGVycywgJ2NvbnRyb2xsaW5nJyk7XG4gICAgICAgIC8vIEFkZCByZW1vdGUgSUNFIGNhbmRpZGF0ZXMuXG4gICAgICAgIGZvciAoY29uc3QgY2FuZGlkYXRlIG9mIHRoaXMuX3JlbW90ZUljZUNhbmRpZGF0ZXMpIHtcbiAgICAgICAgICAgIHRoaXMuX2ljZVRyYW5zcG9ydC5hZGRSZW1vdGVDYW5kaWRhdGUoY2FuZGlkYXRlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBBbHNvIHNpZ25hbCBhICdjb21wbGV0ZScgY2FuZGlkYXRlIGFzIHBlciBzcGVjLlxuICAgICAgICAvLyBOT1RFOiBJdCBzaG91bGQgYmUge2NvbXBsZXRlOiB0cnVlfSBidXQgRWRnZSBwcmVmZXJzIHt9LlxuICAgICAgICAvLyBOT1RFOiBJZiB3ZSBkb24ndCBzaWduYWwgZW5kIG9mIGNhbmRpZGF0ZXMsIHRoZSBFZGdlIFJUQ0ljZVRyYW5zcG9ydFxuICAgICAgICAvLyB3b24ndCBlbnRlciB0aGUgJ2NvbXBsZXRlZCcgc3RhdGUuXG4gICAgICAgIHRoaXMuX2ljZVRyYW5zcG9ydC5hZGRSZW1vdGVDYW5kaWRhdGUoe30pO1xuICAgICAgICAvLyBOT1RFOiBFZGdlIGRvZXMgbm90IGxpa2UgU0hBIGxlc3MgdGhhbiAyNTYuXG4gICAgICAgIHRoaXMuX3JlbW90ZUR0bHNQYXJhbWV0ZXJzLmZpbmdlcnByaW50cyA9IHRoaXMuX3JlbW90ZUR0bHNQYXJhbWV0ZXJzLmZpbmdlcnByaW50c1xuICAgICAgICAgICAgLmZpbHRlcigoZmluZ2VycHJpbnQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAoZmluZ2VycHJpbnQuYWxnb3JpdGhtID09PSAnc2hhLTI1NicgfHxcbiAgICAgICAgICAgICAgICBmaW5nZXJwcmludC5hbGdvcml0aG0gPT09ICdzaGEtMzg0JyB8fFxuICAgICAgICAgICAgICAgIGZpbmdlcnByaW50LmFsZ29yaXRobSA9PT0gJ3NoYS01MTInKTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIFN0YXJ0IHRoZSBSVENEdGxzVHJhbnNwb3J0LlxuICAgICAgICB0aGlzLl9kdGxzVHJhbnNwb3J0LnN0YXJ0KHRoaXMuX3JlbW90ZUR0bHNQYXJhbWV0ZXJzKTtcbiAgICAgICAgdGhpcy5fdHJhbnNwb3J0UmVhZHkgPSB0cnVlO1xuICAgIH1cbn1cbmV4cG9ydHMuRWRnZTExID0gRWRnZTExO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBzZHBUcmFuc2Zvcm0gPSByZXF1aXJlKFwic2RwLXRyYW5zZm9ybVwiKTtcbmNvbnN0IExvZ2dlcl8xID0gcmVxdWlyZShcIi4uL0xvZ2dlclwiKTtcbmNvbnN0IGVycm9yc18xID0gcmVxdWlyZShcIi4uL2Vycm9yc1wiKTtcbmNvbnN0IHV0aWxzID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xuY29uc3Qgb3J0YyA9IHJlcXVpcmUoXCIuLi9vcnRjXCIpO1xuY29uc3Qgc2RwQ29tbW9uVXRpbHMgPSByZXF1aXJlKFwiLi9zZHAvY29tbW9uVXRpbHNcIik7XG5jb25zdCBzZHBQbGFuQlV0aWxzID0gcmVxdWlyZShcIi4vc2RwL3BsYW5CVXRpbHNcIik7XG5jb25zdCBIYW5kbGVySW50ZXJmYWNlXzEgPSByZXF1aXJlKFwiLi9IYW5kbGVySW50ZXJmYWNlXCIpO1xuY29uc3QgUmVtb3RlU2RwXzEgPSByZXF1aXJlKFwiLi9zZHAvUmVtb3RlU2RwXCIpO1xuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcl8xLkxvZ2dlcignUmVhY3ROYXRpdmUnKTtcbmNvbnN0IFNDVFBfTlVNX1NUUkVBTVMgPSB7IE9TOiAxMDI0LCBNSVM6IDEwMjQgfTtcbmNsYXNzIFJlYWN0TmF0aXZlIGV4dGVuZHMgSGFuZGxlckludGVyZmFjZV8xLkhhbmRsZXJJbnRlcmZhY2Uge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICAvLyBMb2NhbCBzdHJlYW0gZm9yIHNlbmRpbmcuXG4gICAgICAgIHRoaXMuX3NlbmRTdHJlYW0gPSBuZXcgTWVkaWFTdHJlYW0oKTtcbiAgICAgICAgLy8gTWFwIG9mIHNlbmRpbmcgTWVkaWFTdHJlYW1UcmFja3MgaW5kZXhlZCBieSBsb2NhbElkLlxuICAgICAgICB0aGlzLl9tYXBTZW5kTG9jYWxJZFRyYWNrID0gbmV3IE1hcCgpO1xuICAgICAgICAvLyBOZXh0IHNlbmRpbmcgbG9jYWxJZC5cbiAgICAgICAgdGhpcy5fbmV4dFNlbmRMb2NhbElkID0gMDtcbiAgICAgICAgLy8gTWFwIG9mIE1JRCwgUlRQIHBhcmFtZXRlcnMgYW5kIFJUQ1J0cFJlY2VpdmVyIGluZGV4ZWQgYnkgbG9jYWwgaWQuXG4gICAgICAgIC8vIFZhbHVlIGlzIGFuIE9iamVjdCB3aXRoIG1pZCwgcnRwUGFyYW1ldGVycyBhbmQgcnRwUmVjZWl2ZXIuXG4gICAgICAgIHRoaXMuX21hcFJlY3ZMb2NhbElkSW5mbyA9IG5ldyBNYXAoKTtcbiAgICAgICAgLy8gV2hldGhlciBhIERhdGFDaGFubmVsIG09YXBwbGljYXRpb24gc2VjdGlvbiBoYXMgYmVlbiBjcmVhdGVkLlxuICAgICAgICB0aGlzLl9oYXNEYXRhQ2hhbm5lbE1lZGlhU2VjdGlvbiA9IGZhbHNlO1xuICAgICAgICAvLyBTZW5kaW5nIERhdGFDaGFubmVsIGlkIHZhbHVlIGNvdW50ZXIuIEluY3JlbWVudGVkIGZvciBlYWNoIG5ldyBEYXRhQ2hhbm5lbC5cbiAgICAgICAgdGhpcy5fbmV4dFNlbmRTY3RwU3RyZWFtSWQgPSAwO1xuICAgICAgICAvLyBHb3QgdHJhbnNwb3J0IGxvY2FsIGFuZCByZW1vdGUgcGFyYW1ldGVycy5cbiAgICAgICAgdGhpcy5fdHJhbnNwb3J0UmVhZHkgPSBmYWxzZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZhY3RvcnkgZnVuY3Rpb24uXG4gICAgICovXG4gICAgc3RhdGljIGNyZWF0ZUZhY3RvcnkoKSB7XG4gICAgICAgIHJldHVybiAoKSA9PiBuZXcgUmVhY3ROYXRpdmUoKTtcbiAgICB9XG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnUmVhY3ROYXRpdmUnO1xuICAgIH1cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdjbG9zZSgpJyk7XG4gICAgICAgIC8vIENsb3NlIFJUQ1BlZXJDb25uZWN0aW9uLlxuICAgICAgICBpZiAodGhpcy5fcGMpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcGMuY2xvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikgeyB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgZ2V0TmF0aXZlUnRwQ2FwYWJpbGl0aWVzKCkge1xuICAgICAgICBsb2dnZXIuZGVidWcoJ2dldE5hdGl2ZVJ0cENhcGFiaWxpdGllcygpJyk7XG4gICAgICAgIGNvbnN0IHBjID0gbmV3IFJUQ1BlZXJDb25uZWN0aW9uKHtcbiAgICAgICAgICAgIGljZVNlcnZlcnM6IFtdLFxuICAgICAgICAgICAgaWNlVHJhbnNwb3J0UG9saWN5OiAnYWxsJyxcbiAgICAgICAgICAgIGJ1bmRsZVBvbGljeTogJ21heC1idW5kbGUnLFxuICAgICAgICAgICAgcnRjcE11eFBvbGljeTogJ3JlcXVpcmUnLFxuICAgICAgICAgICAgc2RwU2VtYW50aWNzOiAncGxhbi1iJ1xuICAgICAgICB9KTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IG9mZmVyID0gYXdhaXQgcGMuY3JlYXRlT2ZmZXIoe1xuICAgICAgICAgICAgICAgIG9mZmVyVG9SZWNlaXZlQXVkaW86IHRydWUsXG4gICAgICAgICAgICAgICAgb2ZmZXJUb1JlY2VpdmVWaWRlbzogdHJ1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHBjLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHsgfVxuICAgICAgICAgICAgY29uc3Qgc2RwT2JqZWN0ID0gc2RwVHJhbnNmb3JtLnBhcnNlKG9mZmVyLnNkcCk7XG4gICAgICAgICAgICBjb25zdCBuYXRpdmVSdHBDYXBhYmlsaXRpZXMgPSBzZHBDb21tb25VdGlscy5leHRyYWN0UnRwQ2FwYWJpbGl0aWVzKHsgc2RwT2JqZWN0IH0pO1xuICAgICAgICAgICAgcmV0dXJuIG5hdGl2ZVJ0cENhcGFiaWxpdGllcztcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcGMuY2xvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcjIpIHsgfVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgZ2V0TmF0aXZlU2N0cENhcGFiaWxpdGllcygpIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdnZXROYXRpdmVTY3RwQ2FwYWJpbGl0aWVzKCknKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG51bVN0cmVhbXM6IFNDVFBfTlVNX1NUUkVBTVNcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcnVuKHsgZGlyZWN0aW9uLCBpY2VQYXJhbWV0ZXJzLCBpY2VDYW5kaWRhdGVzLCBkdGxzUGFyYW1ldGVycywgc2N0cFBhcmFtZXRlcnMsIGljZVNlcnZlcnMsIGljZVRyYW5zcG9ydFBvbGljeSwgYWRkaXRpb25hbFNldHRpbmdzLCBwcm9wcmlldGFyeUNvbnN0cmFpbnRzLCBleHRlbmRlZFJ0cENhcGFiaWxpdGllcyB9KSB7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZygncnVuKCknKTtcbiAgICAgICAgdGhpcy5fZGlyZWN0aW9uID0gZGlyZWN0aW9uO1xuICAgICAgICB0aGlzLl9yZW1vdGVTZHAgPSBuZXcgUmVtb3RlU2RwXzEuUmVtb3RlU2RwKHtcbiAgICAgICAgICAgIGljZVBhcmFtZXRlcnMsXG4gICAgICAgICAgICBpY2VDYW5kaWRhdGVzLFxuICAgICAgICAgICAgZHRsc1BhcmFtZXRlcnMsXG4gICAgICAgICAgICBzY3RwUGFyYW1ldGVycyxcbiAgICAgICAgICAgIHBsYW5COiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9zZW5kaW5nUnRwUGFyYW1ldGVyc0J5S2luZCA9XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYXVkaW86IG9ydGMuZ2V0U2VuZGluZ1J0cFBhcmFtZXRlcnMoJ2F1ZGlvJywgZXh0ZW5kZWRSdHBDYXBhYmlsaXRpZXMpLFxuICAgICAgICAgICAgICAgIHZpZGVvOiBvcnRjLmdldFNlbmRpbmdSdHBQYXJhbWV0ZXJzKCd2aWRlbycsIGV4dGVuZGVkUnRwQ2FwYWJpbGl0aWVzKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fc2VuZGluZ1JlbW90ZVJ0cFBhcmFtZXRlcnNCeUtpbmQgPVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGF1ZGlvOiBvcnRjLmdldFNlbmRpbmdSZW1vdGVSdHBQYXJhbWV0ZXJzKCdhdWRpbycsIGV4dGVuZGVkUnRwQ2FwYWJpbGl0aWVzKSxcbiAgICAgICAgICAgICAgICB2aWRlbzogb3J0Yy5nZXRTZW5kaW5nUmVtb3RlUnRwUGFyYW1ldGVycygndmlkZW8nLCBleHRlbmRlZFJ0cENhcGFiaWxpdGllcylcbiAgICAgICAgICAgIH07XG4gICAgICAgIHRoaXMuX3BjID0gbmV3IFJUQ1BlZXJDb25uZWN0aW9uKHtcbiAgICAgICAgICAgIGljZVNlcnZlcnM6IGljZVNlcnZlcnMgfHwgW10sXG4gICAgICAgICAgICBpY2VUcmFuc3BvcnRQb2xpY3k6IGljZVRyYW5zcG9ydFBvbGljeSB8fCAnYWxsJyxcbiAgICAgICAgICAgIGJ1bmRsZVBvbGljeTogJ21heC1idW5kbGUnLFxuICAgICAgICAgICAgcnRjcE11eFBvbGljeTogJ3JlcXVpcmUnLFxuICAgICAgICAgICAgc2RwU2VtYW50aWNzOiAncGxhbi1iJyxcbiAgICAgICAgICAgIC4uLmFkZGl0aW9uYWxTZXR0aW5nc1xuICAgICAgICB9LCBwcm9wcmlldGFyeUNvbnN0cmFpbnRzKTtcbiAgICAgICAgLy8gSGFuZGxlIFJUQ1BlZXJDb25uZWN0aW9uIGNvbm5lY3Rpb24gc3RhdHVzLlxuICAgICAgICB0aGlzLl9wYy5hZGRFdmVudExpc3RlbmVyKCdpY2Vjb25uZWN0aW9uc3RhdGVjaGFuZ2UnLCAoKSA9PiB7XG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMuX3BjLmljZUNvbm5lY3Rpb25TdGF0ZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2NoZWNraW5nJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdAY29ubmVjdGlvbnN0YXRlY2hhbmdlJywgJ2Nvbm5lY3RpbmcnKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnY29ubmVjdGVkJzpcbiAgICAgICAgICAgICAgICBjYXNlICdjb21wbGV0ZWQnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ0Bjb25uZWN0aW9uc3RhdGVjaGFuZ2UnLCAnY29ubmVjdGVkJyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2ZhaWxlZCc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnQGNvbm5lY3Rpb25zdGF0ZWNoYW5nZScsICdmYWlsZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnZGlzY29ubmVjdGVkJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdAY29ubmVjdGlvbnN0YXRlY2hhbmdlJywgJ2Rpc2Nvbm5lY3RlZCcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdjbG9zZWQnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ0Bjb25uZWN0aW9uc3RhdGVjaGFuZ2UnLCAnY2xvc2VkJyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgYXN5bmMgdXBkYXRlSWNlU2VydmVycyhpY2VTZXJ2ZXJzKSB7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZygndXBkYXRlSWNlU2VydmVycygpJyk7XG4gICAgICAgIGNvbnN0IGNvbmZpZ3VyYXRpb24gPSB0aGlzLl9wYy5nZXRDb25maWd1cmF0aW9uKCk7XG4gICAgICAgIGNvbmZpZ3VyYXRpb24uaWNlU2VydmVycyA9IGljZVNlcnZlcnM7XG4gICAgICAgIHRoaXMuX3BjLnNldENvbmZpZ3VyYXRpb24oY29uZmlndXJhdGlvbik7XG4gICAgfVxuICAgIGFzeW5jIHJlc3RhcnRJY2UoaWNlUGFyYW1ldGVycykge1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3Jlc3RhcnRJY2UoKScpO1xuICAgICAgICAvLyBQcm92aWRlIHRoZSByZW1vdGUgU0RQIGhhbmRsZXIgd2l0aCBuZXcgcmVtb3RlIElDRSBwYXJhbWV0ZXJzLlxuICAgICAgICB0aGlzLl9yZW1vdGVTZHAudXBkYXRlSWNlUGFyYW1ldGVycyhpY2VQYXJhbWV0ZXJzKTtcbiAgICAgICAgaWYgKCF0aGlzLl90cmFuc3BvcnRSZWFkeSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaWYgKHRoaXMuX2RpcmVjdGlvbiA9PT0gJ3NlbmQnKSB7XG4gICAgICAgICAgICBjb25zdCBvZmZlciA9IGF3YWl0IHRoaXMuX3BjLmNyZWF0ZU9mZmVyKHsgaWNlUmVzdGFydDogdHJ1ZSB9KTtcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZygncmVzdGFydEljZSgpIHwgY2FsbGluZyBwYy5zZXRMb2NhbERlc2NyaXB0aW9uKCkgW29mZmVyOiVvXScsIG9mZmVyKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX3BjLnNldExvY2FsRGVzY3JpcHRpb24ob2ZmZXIpO1xuICAgICAgICAgICAgY29uc3QgYW5zd2VyID0geyB0eXBlOiAnYW5zd2VyJywgc2RwOiB0aGlzLl9yZW1vdGVTZHAuZ2V0U2RwKCkgfTtcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZygncmVzdGFydEljZSgpIHwgY2FsbGluZyBwYy5zZXRSZW1vdGVEZXNjcmlwdGlvbigpIFthbnN3ZXI6JW9dJywgYW5zd2VyKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX3BjLnNldFJlbW90ZURlc2NyaXB0aW9uKGFuc3dlcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBvZmZlciA9IHsgdHlwZTogJ29mZmVyJywgc2RwOiB0aGlzLl9yZW1vdGVTZHAuZ2V0U2RwKCkgfTtcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZygncmVzdGFydEljZSgpIHwgY2FsbGluZyBwYy5zZXRSZW1vdGVEZXNjcmlwdGlvbigpIFtvZmZlcjolb10nLCBvZmZlcik7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLl9wYy5zZXRSZW1vdGVEZXNjcmlwdGlvbihvZmZlcik7XG4gICAgICAgICAgICBjb25zdCBhbnN3ZXIgPSBhd2FpdCB0aGlzLl9wYy5jcmVhdGVBbnN3ZXIoKTtcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZygncmVzdGFydEljZSgpIHwgY2FsbGluZyBwYy5zZXRMb2NhbERlc2NyaXB0aW9uKCkgW2Fuc3dlcjolb10nLCBhbnN3ZXIpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5fcGMuc2V0TG9jYWxEZXNjcmlwdGlvbihhbnN3ZXIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIGdldFRyYW5zcG9ydFN0YXRzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGMuZ2V0U3RhdHMoKTtcbiAgICB9XG4gICAgYXN5bmMgc2VuZCh7IHRyYWNrLCBlbmNvZGluZ3MsIGNvZGVjT3B0aW9ucywgY29kZWMgfSkge1xuICAgICAgICB0aGlzLl9hc3NlcnRTZW5kRGlyZWN0aW9uKCk7XG4gICAgICAgIGxvZ2dlci5kZWJ1Zygnc2VuZCgpIFtraW5kOiVzLCB0cmFjay5pZDolc10nLCB0cmFjay5raW5kLCB0cmFjay5pZCk7XG4gICAgICAgIGlmIChjb2RlYykge1xuICAgICAgICAgICAgbG9nZ2VyLndhcm4oJ3NlbmQoKSB8IGNvZGVjIHNlbGVjdGlvbiBpcyBub3QgYXZhaWxhYmxlIGluICVzIGhhbmRsZXInLCB0aGlzLm5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3NlbmRTdHJlYW0uYWRkVHJhY2sodHJhY2spO1xuICAgICAgICB0aGlzLl9wYy5hZGRTdHJlYW0odGhpcy5fc2VuZFN0cmVhbSk7XG4gICAgICAgIGxldCBvZmZlciA9IGF3YWl0IHRoaXMuX3BjLmNyZWF0ZU9mZmVyKCk7XG4gICAgICAgIGxldCBsb2NhbFNkcE9iamVjdCA9IHNkcFRyYW5zZm9ybS5wYXJzZShvZmZlci5zZHApO1xuICAgICAgICBsZXQgb2ZmZXJNZWRpYU9iamVjdDtcbiAgICAgICAgY29uc3Qgc2VuZGluZ1J0cFBhcmFtZXRlcnMgPSB1dGlscy5jbG9uZSh0aGlzLl9zZW5kaW5nUnRwUGFyYW1ldGVyc0J5S2luZFt0cmFjay5raW5kXSk7XG4gICAgICAgIHNlbmRpbmdSdHBQYXJhbWV0ZXJzLmNvZGVjcyA9XG4gICAgICAgICAgICBvcnRjLnJlZHVjZUNvZGVjcyhzZW5kaW5nUnRwUGFyYW1ldGVycy5jb2RlY3MpO1xuICAgICAgICBjb25zdCBzZW5kaW5nUmVtb3RlUnRwUGFyYW1ldGVycyA9IHV0aWxzLmNsb25lKHRoaXMuX3NlbmRpbmdSZW1vdGVSdHBQYXJhbWV0ZXJzQnlLaW5kW3RyYWNrLmtpbmRdKTtcbiAgICAgICAgc2VuZGluZ1JlbW90ZVJ0cFBhcmFtZXRlcnMuY29kZWNzID1cbiAgICAgICAgICAgIG9ydGMucmVkdWNlQ29kZWNzKHNlbmRpbmdSZW1vdGVSdHBQYXJhbWV0ZXJzLmNvZGVjcyk7XG4gICAgICAgIGlmICghdGhpcy5fdHJhbnNwb3J0UmVhZHkpXG4gICAgICAgICAgICBhd2FpdCB0aGlzLl9zZXR1cFRyYW5zcG9ydCh7IGxvY2FsRHRsc1JvbGU6ICdzZXJ2ZXInLCBsb2NhbFNkcE9iamVjdCB9KTtcbiAgICAgICAgaWYgKHRyYWNrLmtpbmQgPT09ICd2aWRlbycgJiYgZW5jb2RpbmdzICYmIGVuY29kaW5ncy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICBsb2dnZXIuZGVidWcoJ3NlbmQoKSB8IGVuYWJsaW5nIHNpbXVsY2FzdCcpO1xuICAgICAgICAgICAgbG9jYWxTZHBPYmplY3QgPSBzZHBUcmFuc2Zvcm0ucGFyc2Uob2ZmZXIuc2RwKTtcbiAgICAgICAgICAgIG9mZmVyTWVkaWFPYmplY3QgPSBsb2NhbFNkcE9iamVjdC5tZWRpYVxuICAgICAgICAgICAgICAgIC5maW5kKChtKSA9PiBtLnR5cGUgPT09ICd2aWRlbycpO1xuICAgICAgICAgICAgc2RwUGxhbkJVdGlscy5hZGRMZWdhY3lTaW11bGNhc3Qoe1xuICAgICAgICAgICAgICAgIG9mZmVyTWVkaWFPYmplY3QsXG4gICAgICAgICAgICAgICAgdHJhY2ssXG4gICAgICAgICAgICAgICAgbnVtU3RyZWFtczogZW5jb2RpbmdzLmxlbmd0aFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBvZmZlciA9IHsgdHlwZTogJ29mZmVyJywgc2RwOiBzZHBUcmFuc2Zvcm0ud3JpdGUobG9jYWxTZHBPYmplY3QpIH07XG4gICAgICAgIH1cbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdzZW5kKCkgfCBjYWxsaW5nIHBjLnNldExvY2FsRGVzY3JpcHRpb24oKSBbb2ZmZXI6JW9dJywgb2ZmZXIpO1xuICAgICAgICBhd2FpdCB0aGlzLl9wYy5zZXRMb2NhbERlc2NyaXB0aW9uKG9mZmVyKTtcbiAgICAgICAgbG9jYWxTZHBPYmplY3QgPSBzZHBUcmFuc2Zvcm0ucGFyc2UodGhpcy5fcGMubG9jYWxEZXNjcmlwdGlvbi5zZHApO1xuICAgICAgICBvZmZlck1lZGlhT2JqZWN0ID0gbG9jYWxTZHBPYmplY3QubWVkaWFcbiAgICAgICAgICAgIC5maW5kKChtKSA9PiBtLnR5cGUgPT09IHRyYWNrLmtpbmQpO1xuICAgICAgICAvLyBTZXQgUlRDUCBDTkFNRS5cbiAgICAgICAgc2VuZGluZ1J0cFBhcmFtZXRlcnMucnRjcC5jbmFtZSA9XG4gICAgICAgICAgICBzZHBDb21tb25VdGlscy5nZXRDbmFtZSh7IG9mZmVyTWVkaWFPYmplY3QgfSk7XG4gICAgICAgIC8vIFNldCBSVFAgZW5jb2RpbmdzLlxuICAgICAgICBzZW5kaW5nUnRwUGFyYW1ldGVycy5lbmNvZGluZ3MgPVxuICAgICAgICAgICAgc2RwUGxhbkJVdGlscy5nZXRSdHBFbmNvZGluZ3MoeyBvZmZlck1lZGlhT2JqZWN0LCB0cmFjayB9KTtcbiAgICAgICAgLy8gQ29tcGxldGUgZW5jb2RpbmdzIHdpdGggZ2l2ZW4gdmFsdWVzLlxuICAgICAgICBpZiAoZW5jb2RpbmdzKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCBzZW5kaW5nUnRwUGFyYW1ldGVycy5lbmNvZGluZ3MubGVuZ3RoOyArK2lkeCkge1xuICAgICAgICAgICAgICAgIGlmIChlbmNvZGluZ3NbaWR4XSlcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihzZW5kaW5nUnRwUGFyYW1ldGVycy5lbmNvZGluZ3NbaWR4XSwgZW5jb2RpbmdzW2lkeF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIElmIFZQOCBvciBIMjY0IGFuZCB0aGVyZSBpcyBlZmZlY3RpdmUgc2ltdWxjYXN0LCBhZGQgc2NhbGFiaWxpdHlNb2RlIHRvXG4gICAgICAgIC8vIGVhY2ggZW5jb2RpbmcuXG4gICAgICAgIGlmIChzZW5kaW5nUnRwUGFyYW1ldGVycy5lbmNvZGluZ3MubGVuZ3RoID4gMSAmJlxuICAgICAgICAgICAgKHNlbmRpbmdSdHBQYXJhbWV0ZXJzLmNvZGVjc1swXS5taW1lVHlwZS50b0xvd2VyQ2FzZSgpID09PSAndmlkZW8vdnA4JyB8fFxuICAgICAgICAgICAgICAgIHNlbmRpbmdSdHBQYXJhbWV0ZXJzLmNvZGVjc1swXS5taW1lVHlwZS50b0xvd2VyQ2FzZSgpID09PSAndmlkZW8vaDI2NCcpKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGVuY29kaW5nIG9mIHNlbmRpbmdSdHBQYXJhbWV0ZXJzLmVuY29kaW5ncykge1xuICAgICAgICAgICAgICAgIGVuY29kaW5nLnNjYWxhYmlsaXR5TW9kZSA9ICdTMVQzJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9yZW1vdGVTZHAuc2VuZCh7XG4gICAgICAgICAgICBvZmZlck1lZGlhT2JqZWN0LFxuICAgICAgICAgICAgb2ZmZXJSdHBQYXJhbWV0ZXJzOiBzZW5kaW5nUnRwUGFyYW1ldGVycyxcbiAgICAgICAgICAgIGFuc3dlclJ0cFBhcmFtZXRlcnM6IHNlbmRpbmdSZW1vdGVSdHBQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgY29kZWNPcHRpb25zXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBhbnN3ZXIgPSB7IHR5cGU6ICdhbnN3ZXInLCBzZHA6IHRoaXMuX3JlbW90ZVNkcC5nZXRTZHAoKSB9O1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3NlbmQoKSB8IGNhbGxpbmcgcGMuc2V0UmVtb3RlRGVzY3JpcHRpb24oKSBbYW5zd2VyOiVvXScsIGFuc3dlcik7XG4gICAgICAgIGF3YWl0IHRoaXMuX3BjLnNldFJlbW90ZURlc2NyaXB0aW9uKGFuc3dlcik7XG4gICAgICAgIGNvbnN0IGxvY2FsSWQgPSBTdHJpbmcodGhpcy5fbmV4dFNlbmRMb2NhbElkKTtcbiAgICAgICAgdGhpcy5fbmV4dFNlbmRMb2NhbElkKys7XG4gICAgICAgIC8vIEluc2VydCBpbnRvIHRoZSBtYXAuXG4gICAgICAgIHRoaXMuX21hcFNlbmRMb2NhbElkVHJhY2suc2V0KGxvY2FsSWQsIHRyYWNrKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxvY2FsSWQ6IGxvY2FsSWQsXG4gICAgICAgICAgICBydHBQYXJhbWV0ZXJzOiBzZW5kaW5nUnRwUGFyYW1ldGVyc1xuICAgICAgICB9O1xuICAgIH1cbiAgICBhc3luYyBzdG9wU2VuZGluZyhsb2NhbElkKSB7XG4gICAgICAgIHRoaXMuX2Fzc2VydFNlbmREaXJlY3Rpb24oKTtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdzdG9wU2VuZGluZygpIFtsb2NhbElkOiVzXScsIGxvY2FsSWQpO1xuICAgICAgICBjb25zdCB0cmFjayA9IHRoaXMuX21hcFNlbmRMb2NhbElkVHJhY2suZ2V0KGxvY2FsSWQpO1xuICAgICAgICBpZiAoIXRyYWNrKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd0cmFjayBub3QgZm91bmQnKTtcbiAgICAgICAgdGhpcy5fbWFwU2VuZExvY2FsSWRUcmFjay5kZWxldGUobG9jYWxJZCk7XG4gICAgICAgIHRoaXMuX3NlbmRTdHJlYW0ucmVtb3ZlVHJhY2sodHJhY2spO1xuICAgICAgICB0aGlzLl9wYy5hZGRTdHJlYW0odGhpcy5fc2VuZFN0cmVhbSk7XG4gICAgICAgIGNvbnN0IG9mZmVyID0gYXdhaXQgdGhpcy5fcGMuY3JlYXRlT2ZmZXIoKTtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdzdG9wU2VuZGluZygpIHwgY2FsbGluZyBwYy5zZXRMb2NhbERlc2NyaXB0aW9uKCkgW29mZmVyOiVvXScsIG9mZmVyKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX3BjLnNldExvY2FsRGVzY3JpcHRpb24ob2ZmZXIpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgLy8gTk9URTogSWYgdGhlcmUgYXJlIG5vIHNlbmRpbmcgdHJhY2tzLCBzZXRMb2NhbERlc2NyaXB0aW9uKCkgd2lsbCBmYWlsIHdpdGhcbiAgICAgICAgICAgIC8vIFwiRmFpbGVkIHRvIGNyZWF0ZSBjaGFubmVsc1wiLiBJZiBzbywgaWdub3JlIGl0LlxuICAgICAgICAgICAgaWYgKHRoaXMuX3NlbmRTdHJlYW0uZ2V0VHJhY2tzKCkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLndhcm4oJ3N0b3BTZW5kaW5nKCkgfCBpZ25vcmluZyBleHBlY3RlZCBlcnJvciBkdWUgbm8gc2VuZGluZyB0cmFja3M6ICVzJywgZXJyb3IudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3BjLnNpZ25hbGluZ1N0YXRlID09PSAnc3RhYmxlJylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgYW5zd2VyID0geyB0eXBlOiAnYW5zd2VyJywgc2RwOiB0aGlzLl9yZW1vdGVTZHAuZ2V0U2RwKCkgfTtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdzdG9wU2VuZGluZygpIHwgY2FsbGluZyBwYy5zZXRSZW1vdGVEZXNjcmlwdGlvbigpIFthbnN3ZXI6JW9dJywgYW5zd2VyKTtcbiAgICAgICAgYXdhaXQgdGhpcy5fcGMuc2V0UmVtb3RlRGVzY3JpcHRpb24oYW5zd2VyKTtcbiAgICB9XG4gICAgYXN5bmMgcmVwbGFjZVRyYWNrKFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbiAgICBsb2NhbElkLCB0cmFjaykge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuVW5zdXBwb3J0ZWRFcnJvcignbm90IGltcGxlbWVudGVkJyk7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbiAgICBhc3luYyBzZXRNYXhTcGF0aWFsTGF5ZXIobG9jYWxJZCwgc3BhdGlhbExheWVyKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5VbnN1cHBvcnRlZEVycm9yKCdub3QgaW1wbGVtZW50ZWQnKTtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuICAgIGFzeW5jIHNldFJ0cEVuY29kaW5nUGFyYW1ldGVycyhsb2NhbElkLCBwYXJhbXMpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLlVuc3VwcG9ydGVkRXJyb3IoJ25vdCBpbXBsZW1lbnRlZCcpO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgYXN5bmMgZ2V0U2VuZGVyU3RhdHMobG9jYWxJZCkge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuVW5zdXBwb3J0ZWRFcnJvcignbm90IGltcGxlbWVudGVkJyk7XG4gICAgfVxuICAgIGFzeW5jIHNlbmREYXRhQ2hhbm5lbCh7IG9yZGVyZWQsIG1heFBhY2tldExpZmVUaW1lLCBtYXhSZXRyYW5zbWl0cywgbGFiZWwsIHByb3RvY29sLCBwcmlvcml0eSB9KSB7XG4gICAgICAgIHRoaXMuX2Fzc2VydFNlbmREaXJlY3Rpb24oKTtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIG5lZ290aWF0ZWQ6IHRydWUsXG4gICAgICAgICAgICBpZDogdGhpcy5fbmV4dFNlbmRTY3RwU3RyZWFtSWQsXG4gICAgICAgICAgICBvcmRlcmVkLFxuICAgICAgICAgICAgbWF4UGFja2V0TGlmZVRpbWUsXG4gICAgICAgICAgICBtYXhSZXRyYW5zbWl0VGltZTogbWF4UGFja2V0TGlmZVRpbWUsXG4gICAgICAgICAgICBtYXhSZXRyYW5zbWl0cyxcbiAgICAgICAgICAgIHByb3RvY29sLFxuICAgICAgICAgICAgcHJpb3JpdHlcbiAgICAgICAgfTtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdzZW5kRGF0YUNoYW5uZWwoKSBbb3B0aW9uczolb10nLCBvcHRpb25zKTtcbiAgICAgICAgY29uc3QgZGF0YUNoYW5uZWwgPSB0aGlzLl9wYy5jcmVhdGVEYXRhQ2hhbm5lbChsYWJlbCwgb3B0aW9ucyk7XG4gICAgICAgIC8vIEluY3JlYXNlIG5leHQgaWQuXG4gICAgICAgIHRoaXMuX25leHRTZW5kU2N0cFN0cmVhbUlkID1cbiAgICAgICAgICAgICsrdGhpcy5fbmV4dFNlbmRTY3RwU3RyZWFtSWQgJSBTQ1RQX05VTV9TVFJFQU1TLk1JUztcbiAgICAgICAgLy8gSWYgdGhpcyBpcyB0aGUgZmlyc3QgRGF0YUNoYW5uZWwgd2UgbmVlZCB0byBjcmVhdGUgdGhlIFNEUCBhbnN3ZXIgd2l0aFxuICAgICAgICAvLyBtPWFwcGxpY2F0aW9uIHNlY3Rpb24uXG4gICAgICAgIGlmICghdGhpcy5faGFzRGF0YUNoYW5uZWxNZWRpYVNlY3Rpb24pIHtcbiAgICAgICAgICAgIGNvbnN0IG9mZmVyID0gYXdhaXQgdGhpcy5fcGMuY3JlYXRlT2ZmZXIoKTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsU2RwT2JqZWN0ID0gc2RwVHJhbnNmb3JtLnBhcnNlKG9mZmVyLnNkcCk7XG4gICAgICAgICAgICBjb25zdCBvZmZlck1lZGlhT2JqZWN0ID0gbG9jYWxTZHBPYmplY3QubWVkaWFcbiAgICAgICAgICAgICAgICAuZmluZCgobSkgPT4gbS50eXBlID09PSAnYXBwbGljYXRpb24nKTtcbiAgICAgICAgICAgIGlmICghdGhpcy5fdHJhbnNwb3J0UmVhZHkpXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5fc2V0dXBUcmFuc3BvcnQoeyBsb2NhbER0bHNSb2xlOiAnc2VydmVyJywgbG9jYWxTZHBPYmplY3QgfSk7XG4gICAgICAgICAgICBsb2dnZXIuZGVidWcoJ3NlbmREYXRhQ2hhbm5lbCgpIHwgY2FsbGluZyBwYy5zZXRMb2NhbERlc2NyaXB0aW9uKCkgW29mZmVyOiVvXScsIG9mZmVyKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX3BjLnNldExvY2FsRGVzY3JpcHRpb24ob2ZmZXIpO1xuICAgICAgICAgICAgdGhpcy5fcmVtb3RlU2RwLnNlbmRTY3RwQXNzb2NpYXRpb24oeyBvZmZlck1lZGlhT2JqZWN0IH0pO1xuICAgICAgICAgICAgY29uc3QgYW5zd2VyID0geyB0eXBlOiAnYW5zd2VyJywgc2RwOiB0aGlzLl9yZW1vdGVTZHAuZ2V0U2RwKCkgfTtcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1Zygnc2VuZERhdGFDaGFubmVsKCkgfCBjYWxsaW5nIHBjLnNldFJlbW90ZURlc2NyaXB0aW9uKCkgW2Fuc3dlcjolb10nLCBhbnN3ZXIpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5fcGMuc2V0UmVtb3RlRGVzY3JpcHRpb24oYW5zd2VyKTtcbiAgICAgICAgICAgIHRoaXMuX2hhc0RhdGFDaGFubmVsTWVkaWFTZWN0aW9uID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzY3RwU3RyZWFtUGFyYW1ldGVycyA9IHtcbiAgICAgICAgICAgIHN0cmVhbUlkOiBvcHRpb25zLmlkLFxuICAgICAgICAgICAgb3JkZXJlZDogb3B0aW9ucy5vcmRlcmVkLFxuICAgICAgICAgICAgbWF4UGFja2V0TGlmZVRpbWU6IG9wdGlvbnMubWF4UGFja2V0TGlmZVRpbWUsXG4gICAgICAgICAgICBtYXhSZXRyYW5zbWl0czogb3B0aW9ucy5tYXhSZXRyYW5zbWl0c1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4geyBkYXRhQ2hhbm5lbCwgc2N0cFN0cmVhbVBhcmFtZXRlcnMgfTtcbiAgICB9XG4gICAgYXN5bmMgcmVjZWl2ZSh7IHRyYWNrSWQsIGtpbmQsIHJ0cFBhcmFtZXRlcnMgfSkge1xuICAgICAgICB0aGlzLl9hc3NlcnRSZWN2RGlyZWN0aW9uKCk7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZygncmVjZWl2ZSgpIFt0cmFja0lkOiVzLCBraW5kOiVzXScsIHRyYWNrSWQsIGtpbmQpO1xuICAgICAgICBjb25zdCBsb2NhbElkID0gdHJhY2tJZDtcbiAgICAgICAgY29uc3QgbWlkID0ga2luZDtcbiAgICAgICAgbGV0IHN0cmVhbUlkID0gcnRwUGFyYW1ldGVycy5ydGNwLmNuYW1lO1xuICAgICAgICAvLyBOT1RFOiBJbiBSZWFjdC1OYXRpdmUgd2UgY2Fubm90IHJldXNlIHRoZSBzYW1lIHJlbW90ZSBNZWRpYVN0cmVhbSBmb3IgbmV3XG4gICAgICAgIC8vIHJlbW90ZSB0cmFja3MuIFRoaXMgaXMgYmVjYXVzZSByZWFjdC1uYXRpdmUtd2VicnRjIGRvZXMgbm90IHJlYWN0IG9uIG5ld1xuICAgICAgICAvLyB0cmFja3MgZ2VuZXJhdGVkIHdpdGhpbiBhbHJlYWR5IGV4aXN0aW5nIHN0cmVhbXMsIHNvIGZvcmNlIHRoZSBzdHJlYW1JZFxuICAgICAgICAvLyB0byBiZSBkaWZmZXJlbnQuXG4gICAgICAgIGxvZ2dlci5kZWJ1ZygncmVjZWl2ZSgpIHwgZm9yY2luZyBhIHJhbmRvbSByZW1vdGUgc3RyZWFtSWQgdG8gYXZvaWQgd2VsbCBrbm93biBidWcgaW4gcmVhY3QtbmF0aXZlLXdlYnJ0YycpO1xuICAgICAgICBzdHJlYW1JZCArPSBgLWhhY2stJHt1dGlscy5nZW5lcmF0ZVJhbmRvbU51bWJlcigpfWA7XG4gICAgICAgIHRoaXMuX3JlbW90ZVNkcC5yZWNlaXZlKHtcbiAgICAgICAgICAgIG1pZCxcbiAgICAgICAgICAgIGtpbmQsXG4gICAgICAgICAgICBvZmZlclJ0cFBhcmFtZXRlcnM6IHJ0cFBhcmFtZXRlcnMsXG4gICAgICAgICAgICBzdHJlYW1JZCxcbiAgICAgICAgICAgIHRyYWNrSWRcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IG9mZmVyID0geyB0eXBlOiAnb2ZmZXInLCBzZHA6IHRoaXMuX3JlbW90ZVNkcC5nZXRTZHAoKSB9O1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3JlY2VpdmUoKSB8IGNhbGxpbmcgcGMuc2V0UmVtb3RlRGVzY3JpcHRpb24oKSBbb2ZmZXI6JW9dJywgb2ZmZXIpO1xuICAgICAgICBhd2FpdCB0aGlzLl9wYy5zZXRSZW1vdGVEZXNjcmlwdGlvbihvZmZlcik7XG4gICAgICAgIGxldCBhbnN3ZXIgPSBhd2FpdCB0aGlzLl9wYy5jcmVhdGVBbnN3ZXIoKTtcbiAgICAgICAgY29uc3QgbG9jYWxTZHBPYmplY3QgPSBzZHBUcmFuc2Zvcm0ucGFyc2UoYW5zd2VyLnNkcCk7XG4gICAgICAgIGNvbnN0IGFuc3dlck1lZGlhT2JqZWN0ID0gbG9jYWxTZHBPYmplY3QubWVkaWFcbiAgICAgICAgICAgIC5maW5kKChtKSA9PiBTdHJpbmcobS5taWQpID09PSBtaWQpO1xuICAgICAgICAvLyBNYXkgbmVlZCB0byBtb2RpZnkgY29kZWMgcGFyYW1ldGVycyBpbiB0aGUgYW5zd2VyIGJhc2VkIG9uIGNvZGVjXG4gICAgICAgIC8vIHBhcmFtZXRlcnMgaW4gdGhlIG9mZmVyLlxuICAgICAgICBzZHBDb21tb25VdGlscy5hcHBseUNvZGVjUGFyYW1ldGVycyh7XG4gICAgICAgICAgICBvZmZlclJ0cFBhcmFtZXRlcnM6IHJ0cFBhcmFtZXRlcnMsXG4gICAgICAgICAgICBhbnN3ZXJNZWRpYU9iamVjdFxuICAgICAgICB9KTtcbiAgICAgICAgYW5zd2VyID0geyB0eXBlOiAnYW5zd2VyJywgc2RwOiBzZHBUcmFuc2Zvcm0ud3JpdGUobG9jYWxTZHBPYmplY3QpIH07XG4gICAgICAgIGlmICghdGhpcy5fdHJhbnNwb3J0UmVhZHkpXG4gICAgICAgICAgICBhd2FpdCB0aGlzLl9zZXR1cFRyYW5zcG9ydCh7IGxvY2FsRHRsc1JvbGU6ICdjbGllbnQnLCBsb2NhbFNkcE9iamVjdCB9KTtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdyZWNlaXZlKCkgfCBjYWxsaW5nIHBjLnNldExvY2FsRGVzY3JpcHRpb24oKSBbYW5zd2VyOiVvXScsIGFuc3dlcik7XG4gICAgICAgIGF3YWl0IHRoaXMuX3BjLnNldExvY2FsRGVzY3JpcHRpb24oYW5zd2VyKTtcbiAgICAgICAgY29uc3Qgc3RyZWFtID0gdGhpcy5fcGMuZ2V0UmVtb3RlU3RyZWFtcygpXG4gICAgICAgICAgICAuZmluZCgocykgPT4gcy5pZCA9PT0gc3RyZWFtSWQpO1xuICAgICAgICBjb25zdCB0cmFjayA9IHN0cmVhbS5nZXRUcmFja0J5SWQobG9jYWxJZCk7XG4gICAgICAgIGlmICghdHJhY2spXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3JlbW90ZSB0cmFjayBub3QgZm91bmQnKTtcbiAgICAgICAgLy8gSW5zZXJ0IGludG8gdGhlIG1hcC5cbiAgICAgICAgdGhpcy5fbWFwUmVjdkxvY2FsSWRJbmZvLnNldChsb2NhbElkLCB7IG1pZCwgcnRwUGFyYW1ldGVycyB9KTtcbiAgICAgICAgcmV0dXJuIHsgbG9jYWxJZCwgdHJhY2sgfTtcbiAgICB9XG4gICAgYXN5bmMgc3RvcFJlY2VpdmluZyhsb2NhbElkKSB7XG4gICAgICAgIHRoaXMuX2Fzc2VydFJlY3ZEaXJlY3Rpb24oKTtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdzdG9wUmVjZWl2aW5nKCkgW2xvY2FsSWQ6JXNdJywgbG9jYWxJZCk7XG4gICAgICAgIGNvbnN0IHsgbWlkLCBydHBQYXJhbWV0ZXJzIH0gPSB0aGlzLl9tYXBSZWN2TG9jYWxJZEluZm8uZ2V0KGxvY2FsSWQpIHx8IHt9O1xuICAgICAgICAvLyBSZW1vdmUgZnJvbSB0aGUgbWFwLlxuICAgICAgICB0aGlzLl9tYXBSZWN2TG9jYWxJZEluZm8uZGVsZXRlKGxvY2FsSWQpO1xuICAgICAgICB0aGlzLl9yZW1vdGVTZHAucGxhbkJTdG9wUmVjZWl2aW5nKHsgbWlkOiBtaWQsIG9mZmVyUnRwUGFyYW1ldGVyczogcnRwUGFyYW1ldGVycyB9KTtcbiAgICAgICAgY29uc3Qgb2ZmZXIgPSB7IHR5cGU6ICdvZmZlcicsIHNkcDogdGhpcy5fcmVtb3RlU2RwLmdldFNkcCgpIH07XG4gICAgICAgIGxvZ2dlci5kZWJ1Zygnc3RvcFJlY2VpdmluZygpIHwgY2FsbGluZyBwYy5zZXRSZW1vdGVEZXNjcmlwdGlvbigpIFtvZmZlcjolb10nLCBvZmZlcik7XG4gICAgICAgIGF3YWl0IHRoaXMuX3BjLnNldFJlbW90ZURlc2NyaXB0aW9uKG9mZmVyKTtcbiAgICAgICAgY29uc3QgYW5zd2VyID0gYXdhaXQgdGhpcy5fcGMuY3JlYXRlQW5zd2VyKCk7XG4gICAgICAgIGxvZ2dlci5kZWJ1Zygnc3RvcFJlY2VpdmluZygpIHwgY2FsbGluZyBwYy5zZXRMb2NhbERlc2NyaXB0aW9uKCkgW2Fuc3dlcjolb10nLCBhbnN3ZXIpO1xuICAgICAgICBhd2FpdCB0aGlzLl9wYy5zZXRMb2NhbERlc2NyaXB0aW9uKGFuc3dlcik7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbiAgICBhc3luYyBnZXRSZWNlaXZlclN0YXRzKGxvY2FsSWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLlVuc3VwcG9ydGVkRXJyb3IoJ25vdCBpbXBsZW1lbnRlZCcpO1xuICAgIH1cbiAgICBhc3luYyByZWNlaXZlRGF0YUNoYW5uZWwoeyBzY3RwU3RyZWFtUGFyYW1ldGVycywgbGFiZWwsIHByb3RvY29sIH0pIHtcbiAgICAgICAgdGhpcy5fYXNzZXJ0UmVjdkRpcmVjdGlvbigpO1xuICAgICAgICBjb25zdCB7IHN0cmVhbUlkLCBvcmRlcmVkLCBtYXhQYWNrZXRMaWZlVGltZSwgbWF4UmV0cmFuc21pdHMgfSA9IHNjdHBTdHJlYW1QYXJhbWV0ZXJzO1xuICAgICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAgICAgbmVnb3RpYXRlZDogdHJ1ZSxcbiAgICAgICAgICAgIGlkOiBzdHJlYW1JZCxcbiAgICAgICAgICAgIG9yZGVyZWQsXG4gICAgICAgICAgICBtYXhQYWNrZXRMaWZlVGltZSxcbiAgICAgICAgICAgIG1heFJldHJhbnNtaXRUaW1lOiBtYXhQYWNrZXRMaWZlVGltZSxcbiAgICAgICAgICAgIG1heFJldHJhbnNtaXRzLFxuICAgICAgICAgICAgcHJvdG9jb2xcbiAgICAgICAgfTtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdyZWNlaXZlRGF0YUNoYW5uZWwoKSBbb3B0aW9uczolb10nLCBvcHRpb25zKTtcbiAgICAgICAgY29uc3QgZGF0YUNoYW5uZWwgPSB0aGlzLl9wYy5jcmVhdGVEYXRhQ2hhbm5lbChsYWJlbCwgb3B0aW9ucyk7XG4gICAgICAgIC8vIElmIHRoaXMgaXMgdGhlIGZpcnN0IERhdGFDaGFubmVsIHdlIG5lZWQgdG8gY3JlYXRlIHRoZSBTRFAgb2ZmZXIgd2l0aFxuICAgICAgICAvLyBtPWFwcGxpY2F0aW9uIHNlY3Rpb24uXG4gICAgICAgIGlmICghdGhpcy5faGFzRGF0YUNoYW5uZWxNZWRpYVNlY3Rpb24pIHtcbiAgICAgICAgICAgIHRoaXMuX3JlbW90ZVNkcC5yZWNlaXZlU2N0cEFzc29jaWF0aW9uKHsgb2xkRGF0YUNoYW5uZWxTcGVjOiB0cnVlIH0pO1xuICAgICAgICAgICAgY29uc3Qgb2ZmZXIgPSB7IHR5cGU6ICdvZmZlcicsIHNkcDogdGhpcy5fcmVtb3RlU2RwLmdldFNkcCgpIH07XG4gICAgICAgICAgICBsb2dnZXIuZGVidWcoJ3JlY2VpdmVEYXRhQ2hhbm5lbCgpIHwgY2FsbGluZyBwYy5zZXRSZW1vdGVEZXNjcmlwdGlvbigpIFtvZmZlcjolb10nLCBvZmZlcik7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLl9wYy5zZXRSZW1vdGVEZXNjcmlwdGlvbihvZmZlcik7XG4gICAgICAgICAgICBjb25zdCBhbnN3ZXIgPSBhd2FpdCB0aGlzLl9wYy5jcmVhdGVBbnN3ZXIoKTtcbiAgICAgICAgICAgIGlmICghdGhpcy5fdHJhbnNwb3J0UmVhZHkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2NhbFNkcE9iamVjdCA9IHNkcFRyYW5zZm9ybS5wYXJzZShhbnN3ZXIuc2RwKTtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLl9zZXR1cFRyYW5zcG9ydCh7IGxvY2FsRHRsc1JvbGU6ICdjbGllbnQnLCBsb2NhbFNkcE9iamVjdCB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZygncmVjZWl2ZURhdGFDaGFubmVsKCkgfCBjYWxsaW5nIHBjLnNldFJlbW90ZURlc2NyaXB0aW9uKCkgW2Fuc3dlcjolb10nLCBhbnN3ZXIpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5fcGMuc2V0TG9jYWxEZXNjcmlwdGlvbihhbnN3ZXIpO1xuICAgICAgICAgICAgdGhpcy5faGFzRGF0YUNoYW5uZWxNZWRpYVNlY3Rpb24gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGRhdGFDaGFubmVsIH07XG4gICAgfVxuICAgIGFzeW5jIF9zZXR1cFRyYW5zcG9ydCh7IGxvY2FsRHRsc1JvbGUsIGxvY2FsU2RwT2JqZWN0IH0pIHtcbiAgICAgICAgaWYgKCFsb2NhbFNkcE9iamVjdClcbiAgICAgICAgICAgIGxvY2FsU2RwT2JqZWN0ID0gc2RwVHJhbnNmb3JtLnBhcnNlKHRoaXMuX3BjLmxvY2FsRGVzY3JpcHRpb24uc2RwKTtcbiAgICAgICAgLy8gR2V0IG91ciBsb2NhbCBEVExTIHBhcmFtZXRlcnMuXG4gICAgICAgIGNvbnN0IGR0bHNQYXJhbWV0ZXJzID0gc2RwQ29tbW9uVXRpbHMuZXh0cmFjdER0bHNQYXJhbWV0ZXJzKHsgc2RwT2JqZWN0OiBsb2NhbFNkcE9iamVjdCB9KTtcbiAgICAgICAgLy8gU2V0IG91ciBEVExTIHJvbGUuXG4gICAgICAgIGR0bHNQYXJhbWV0ZXJzLnJvbGUgPSBsb2NhbER0bHNSb2xlO1xuICAgICAgICAvLyBVcGRhdGUgdGhlIHJlbW90ZSBEVExTIHJvbGUgaW4gdGhlIFNEUC5cbiAgICAgICAgdGhpcy5fcmVtb3RlU2RwLnVwZGF0ZUR0bHNSb2xlKGxvY2FsRHRsc1JvbGUgPT09ICdjbGllbnQnID8gJ3NlcnZlcicgOiAnY2xpZW50Jyk7XG4gICAgICAgIC8vIE5lZWQgdG8gdGVsbCB0aGUgcmVtb3RlIHRyYW5zcG9ydCBhYm91dCBvdXIgcGFyYW1ldGVycy5cbiAgICAgICAgYXdhaXQgdGhpcy5zYWZlRW1pdEFzUHJvbWlzZSgnQGNvbm5lY3QnLCB7IGR0bHNQYXJhbWV0ZXJzIH0pO1xuICAgICAgICB0aGlzLl90cmFuc3BvcnRSZWFkeSA9IHRydWU7XG4gICAgfVxuICAgIF9hc3NlcnRTZW5kRGlyZWN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5fZGlyZWN0aW9uICE9PSAnc2VuZCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbWV0aG9kIGNhbiBqdXN0IGJlIGNhbGxlZCBmb3IgaGFuZGxlcnMgd2l0aCBcInNlbmRcIiBkaXJlY3Rpb24nKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfYXNzZXJ0UmVjdkRpcmVjdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuX2RpcmVjdGlvbiAhPT0gJ3JlY3YnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ21ldGhvZCBjYW4ganVzdCBiZSBjYWxsZWQgZm9yIGhhbmRsZXJzIHdpdGggXCJyZWN2XCIgZGlyZWN0aW9uJyk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLlJlYWN0TmF0aXZlID0gUmVhY3ROYXRpdmU7XG4iLCJcInVzZSBzdHJpY3RcIjtcbi8qIGdsb2JhbCBSVENSdHBUcmFuc2NlaXZlciAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgYm93c2VyID0gcmVxdWlyZShcImJvd3NlclwiKTtcbmNvbnN0IExvZ2dlcl8xID0gcmVxdWlyZShcIi4vTG9nZ2VyXCIpO1xuY29uc3QgZXJyb3JzXzEgPSByZXF1aXJlKFwiLi9lcnJvcnNcIik7XG5jb25zdCBvcnRjID0gcmVxdWlyZShcIi4vb3J0Y1wiKTtcbmNvbnN0IFRyYW5zcG9ydF8xID0gcmVxdWlyZShcIi4vVHJhbnNwb3J0XCIpO1xuY29uc3QgQ2hyb21lNzRfMSA9IHJlcXVpcmUoXCIuL2hhbmRsZXJzL0Nocm9tZTc0XCIpO1xuY29uc3QgQ2hyb21lNzBfMSA9IHJlcXVpcmUoXCIuL2hhbmRsZXJzL0Nocm9tZTcwXCIpO1xuY29uc3QgQ2hyb21lNjdfMSA9IHJlcXVpcmUoXCIuL2hhbmRsZXJzL0Nocm9tZTY3XCIpO1xuY29uc3QgQ2hyb21lNTVfMSA9IHJlcXVpcmUoXCIuL2hhbmRsZXJzL0Nocm9tZTU1XCIpO1xuY29uc3QgRmlyZWZveDYwXzEgPSByZXF1aXJlKFwiLi9oYW5kbGVycy9GaXJlZm94NjBcIik7XG5jb25zdCBTYWZhcmkxMl8xID0gcmVxdWlyZShcIi4vaGFuZGxlcnMvU2FmYXJpMTJcIik7XG5jb25zdCBTYWZhcmkxMV8xID0gcmVxdWlyZShcIi4vaGFuZGxlcnMvU2FmYXJpMTFcIik7XG5jb25zdCBFZGdlMTFfMSA9IHJlcXVpcmUoXCIuL2hhbmRsZXJzL0VkZ2UxMVwiKTtcbmNvbnN0IFJlYWN0TmF0aXZlXzEgPSByZXF1aXJlKFwiLi9oYW5kbGVycy9SZWFjdE5hdGl2ZVwiKTtcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXJfMS5Mb2dnZXIoJ0RldmljZScpO1xuZnVuY3Rpb24gZGV0ZWN0RGV2aWNlKCkge1xuICAgIC8vIFJlYWN0LU5hdGl2ZS5cbiAgICAvLyBOT1RFOiByZWFjdC1uYXRpdmUtd2VicnRjID49IDEuNzUuMCBpcyByZXF1aXJlZC5cbiAgICBpZiAodHlwZW9mIG5hdmlnYXRvciA9PT0gJ29iamVjdCcgJiYgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdSZWFjdE5hdGl2ZScpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBSVENQZWVyQ29ubmVjdGlvbiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKCd0aGlzLl9kZXRlY3REZXZpY2UoKSB8IHVuc3VwcG9ydGVkIFJlYWN0TmF0aXZlIHdpdGhvdXQgUlRDUGVlckNvbm5lY3Rpb24nKTtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgbG9nZ2VyLmRlYnVnKCd0aGlzLl9kZXRlY3REZXZpY2UoKSB8IFJlYWN0TmF0aXZlIGhhbmRsZXIgY2hvc2VuJyk7XG4gICAgICAgIHJldHVybiAnUmVhY3ROYXRpdmUnO1xuICAgIH1cbiAgICAvLyBCcm93c2VyLlxuICAgIGVsc2UgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgPT09ICdvYmplY3QnICYmIHR5cGVvZiBuYXZpZ2F0b3IudXNlckFnZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICBjb25zdCB1YSA9IG5hdmlnYXRvci51c2VyQWdlbnQ7XG4gICAgICAgIGNvbnN0IGJyb3dzZXIgPSBib3dzZXIuZ2V0UGFyc2VyKHVhKTtcbiAgICAgICAgY29uc3QgZW5naW5lID0gYnJvd3Nlci5nZXRFbmdpbmUoKTtcbiAgICAgICAgLy8gQ2hyb21lIGFuZCBDaHJvbWl1bS5cbiAgICAgICAgaWYgKGJyb3dzZXIuc2F0aXNmaWVzKHsgY2hyb21lOiAnPj03NCcsIGNocm9taXVtOiAnPj03NCcgfSkpIHtcbiAgICAgICAgICAgIHJldHVybiAnQ2hyb21lNzQnO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGJyb3dzZXIuc2F0aXNmaWVzKHsgY2hyb21lOiAnPj03MCcsIGNocm9taXVtOiAnPj03MCcgfSkpIHtcbiAgICAgICAgICAgIHJldHVybiAnQ2hyb21lNzAnO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGJyb3dzZXIuc2F0aXNmaWVzKHsgY2hyb21lOiAnPj02NycsIGNocm9taXVtOiAnPj02NycgfSkpIHtcbiAgICAgICAgICAgIHJldHVybiAnQ2hyb21lNjcnO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGJyb3dzZXIuc2F0aXNmaWVzKHsgY2hyb21lOiAnPj01NScsIGNocm9taXVtOiAnPj01NScgfSkpIHtcbiAgICAgICAgICAgIHJldHVybiAnQ2hyb21lNTUnO1xuICAgICAgICB9XG4gICAgICAgIC8vIEZpcmVmb3guXG4gICAgICAgIGVsc2UgaWYgKGJyb3dzZXIuc2F0aXNmaWVzKHsgZmlyZWZveDogJz49NjAnIH0pKSB7XG4gICAgICAgICAgICByZXR1cm4gJ0ZpcmVmb3g2MCc7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2FmYXJpIHdpdGggVW5pZmllZC1QbGFuIHN1cHBvcnQgZW5hYmxlZC5cbiAgICAgICAgZWxzZSBpZiAoYnJvd3Nlci5zYXRpc2ZpZXMoeyBzYWZhcmk6ICc+PTEyLjAnIH0pICYmXG4gICAgICAgICAgICB0eXBlb2YgUlRDUnRwVHJhbnNjZWl2ZXIgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICBSVENSdHBUcmFuc2NlaXZlci5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkoJ2N1cnJlbnREaXJlY3Rpb24nKSkge1xuICAgICAgICAgICAgcmV0dXJuICdTYWZhcmkxMic7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2FmYXJpIHdpdGggUGxhYi1CIHN1cHBvcnQuXG4gICAgICAgIGVsc2UgaWYgKGJyb3dzZXIuc2F0aXNmaWVzKHsgc2FmYXJpOiAnPj0xMScgfSkpIHtcbiAgICAgICAgICAgIHJldHVybiAnU2FmYXJpMTEnO1xuICAgICAgICB9XG4gICAgICAgIC8vIE9sZCBFZGdlIHdpdGggT1JUQyBzdXBwb3J0LlxuICAgICAgICBlbHNlIGlmIChicm93c2VyLnNhdGlzZmllcyh7ICdtaWNyb3NvZnQgZWRnZSc6ICc+PTExJyB9KSAmJlxuICAgICAgICAgICAgYnJvd3Nlci5zYXRpc2ZpZXMoeyAnbWljcm9zb2Z0IGVkZ2UnOiAnPD0xOCcgfSkpIHtcbiAgICAgICAgICAgIHJldHVybiAnRWRnZTExJztcbiAgICAgICAgfVxuICAgICAgICAvLyBCZXN0IGVmZm9ydCBmb3IgQ2hyb21pdW0gYmFzZWQgYnJvd3NlcnMuXG4gICAgICAgIGVsc2UgaWYgKGVuZ2luZS5uYW1lICYmIGVuZ2luZS5uYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdibGluaycpIHtcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gdWEubWF0Y2goLyg/Oig/OkNocm9tZXxDaHJvbWl1bSkpWyAvXShcXHcrKS9pKTtcbiAgICAgICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHZlcnNpb24gPSBOdW1iZXIobWF0Y2hbMV0pO1xuICAgICAgICAgICAgICAgIGlmICh2ZXJzaW9uID49IDc0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnQ2hyb21lNzQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh2ZXJzaW9uID49IDcwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnQ2hyb21lNzAnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh2ZXJzaW9uID49IDY3KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnQ2hyb21lNjcnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdDaHJvbWU1NSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdDaHJvbWU3NCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gVW5zdXBwb3J0ZWQgYnJvd3Nlci5cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsb2dnZXIud2FybigndGhpcy5fZGV0ZWN0RGV2aWNlKCkgfCBicm93c2VyIG5vdCBzdXBwb3J0ZWQgW25hbWU6JXMsIHZlcnNpb246JXNdJywgYnJvd3Nlci5nZXRCcm93c2VyTmFtZSgpLCBicm93c2VyLmdldEJyb3dzZXJWZXJzaW9uKCkpO1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBVbmtub3duIGRldmljZS5cbiAgICBlbHNlIHtcbiAgICAgICAgbG9nZ2VyLndhcm4oJ3RoaXMuX2RldGVjdERldmljZSgpIHwgdW5rbm93biBkZXZpY2UnKTtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG59XG5leHBvcnRzLmRldGVjdERldmljZSA9IGRldGVjdERldmljZTtcbmNsYXNzIERldmljZSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IERldmljZSB0byBjb25uZWN0IHRvIG1lZGlhc291cCBzZXJ2ZXIuXG4gICAgICpcbiAgICAgKiBAdGhyb3dzIHtVbnN1cHBvcnRlZEVycm9yfSBpZiBkZXZpY2UgaXMgbm90IHN1cHBvcnRlZC5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih7IGhhbmRsZXJOYW1lLCBoYW5kbGVyRmFjdG9yeSwgSGFuZGxlciB9ID0ge30pIHtcbiAgICAgICAgLy8gTG9hZGVkIGZsYWcuXG4gICAgICAgIHRoaXMuX2xvYWRlZCA9IGZhbHNlO1xuICAgICAgICBsb2dnZXIuZGVidWcoJ2NvbnN0cnVjdG9yKCknKTtcbiAgICAgICAgLy8gSGFuZGxlIGRlcHJlY2F0ZWQgb3B0aW9uLlxuICAgICAgICBpZiAoSGFuZGxlcikge1xuICAgICAgICAgICAgbG9nZ2VyLndhcm4oJ2NvbnN0cnVjdG9yKCkgfCBIYW5kbGVyIG9wdGlvbiBpcyBERVBSRUNBVEVELCB1c2UgaGFuZGxlck5hbWUgb3IgaGFuZGxlckZhY3RvcnkgaW5zdGVhZCcpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBIYW5kbGVyID09PSAnc3RyaW5nJylcbiAgICAgICAgICAgICAgICBoYW5kbGVyTmFtZSA9IEhhbmRsZXI7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbm9uIHN0cmluZyBIYW5kbGVyIG9wdGlvbiBubyBsb25nZXIgc3VwcG9ydGVkLCB1c2UgaGFuZGxlckZhY3RvcnkgaW5zdGVhZCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoYW5kbGVyTmFtZSAmJiBoYW5kbGVyRmFjdG9yeSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignanVzdCBvbmUgb2YgaGFuZGxlck5hbWUgb3IgaGFuZGxlckludGVyZmFjZSBjYW4gYmUgZ2l2ZW4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFuZGxlckZhY3RvcnkpIHtcbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZXJGYWN0b3J5ID0gaGFuZGxlckZhY3Rvcnk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoaGFuZGxlck5hbWUpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIuZGVidWcoJ2NvbnN0cnVjdG9yKCkgfCBoYW5kbGVyIGdpdmVuOiAlcycsIGhhbmRsZXJOYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGhhbmRsZXJOYW1lID0gZGV0ZWN0RGV2aWNlKCk7XG4gICAgICAgICAgICAgICAgaWYgKGhhbmRsZXJOYW1lKVxuICAgICAgICAgICAgICAgICAgICBsb2dnZXIuZGVidWcoJ2NvbnN0cnVjdG9yKCkgfCBkZXRlY3RlZCBoYW5kbGVyOiAlcycsIGhhbmRsZXJOYW1lKTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5VbnN1cHBvcnRlZEVycm9yKCdkZXZpY2Ugbm90IHN1cHBvcnRlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3dpdGNoIChoYW5kbGVyTmFtZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ0Nocm9tZTc0JzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faGFuZGxlckZhY3RvcnkgPSBDaHJvbWU3NF8xLkNocm9tZTc0LmNyZWF0ZUZhY3RvcnkoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnQ2hyb21lNzAnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9oYW5kbGVyRmFjdG9yeSA9IENocm9tZTcwXzEuQ2hyb21lNzAuY3JlYXRlRmFjdG9yeSgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdDaHJvbWU2Nyc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZXJGYWN0b3J5ID0gQ2hyb21lNjdfMS5DaHJvbWU2Ny5jcmVhdGVGYWN0b3J5KCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ0Nocm9tZTU1JzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faGFuZGxlckZhY3RvcnkgPSBDaHJvbWU1NV8xLkNocm9tZTU1LmNyZWF0ZUZhY3RvcnkoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnRmlyZWZveDYwJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faGFuZGxlckZhY3RvcnkgPSBGaXJlZm94NjBfMS5GaXJlZm94NjAuY3JlYXRlRmFjdG9yeSgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdTYWZhcmkxMic6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZXJGYWN0b3J5ID0gU2FmYXJpMTJfMS5TYWZhcmkxMi5jcmVhdGVGYWN0b3J5KCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ1NhZmFyaTExJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faGFuZGxlckZhY3RvcnkgPSBTYWZhcmkxMV8xLlNhZmFyaTExLmNyZWF0ZUZhY3RvcnkoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnRWRnZTExJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faGFuZGxlckZhY3RvcnkgPSBFZGdlMTFfMS5FZGdlMTEuY3JlYXRlRmFjdG9yeSgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdSZWFjdE5hdGl2ZSc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZXJGYWN0b3J5ID0gUmVhY3ROYXRpdmVfMS5SZWFjdE5hdGl2ZS5jcmVhdGVGYWN0b3J5KCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYHVua25vd24gaGFuZGxlck5hbWUgXCIke2hhbmRsZXJOYW1lfVwiYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ3JlYXRlIGEgdGVtcG9yYWwgaGFuZGxlciB0byBnZXQgaXRzIG5hbWUuXG4gICAgICAgIGNvbnN0IGhhbmRsZXIgPSB0aGlzLl9oYW5kbGVyRmFjdG9yeSgpO1xuICAgICAgICB0aGlzLl9oYW5kbGVyTmFtZSA9IGhhbmRsZXIubmFtZTtcbiAgICAgICAgaGFuZGxlci5jbG9zZSgpO1xuICAgICAgICB0aGlzLl9leHRlbmRlZFJ0cENhcGFiaWxpdGllcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fcmVjdlJ0cENhcGFiaWxpdGllcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fY2FuUHJvZHVjZUJ5S2luZCA9XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYXVkaW86IGZhbHNlLFxuICAgICAgICAgICAgICAgIHZpZGVvOiBmYWxzZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fc2N0cENhcGFiaWxpdGllcyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIFJUQyBoYW5kbGVyIG5hbWUuXG4gICAgICovXG4gICAgZ2V0IGhhbmRsZXJOYW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faGFuZGxlck5hbWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhlIERldmljZSBpcyBsb2FkZWQuXG4gICAgICovXG4gICAgZ2V0IGxvYWRlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xvYWRlZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUlRQIGNhcGFiaWxpdGllcyBvZiB0aGUgRGV2aWNlIGZvciByZWNlaXZpbmcgbWVkaWEuXG4gICAgICpcbiAgICAgKiBAdGhyb3dzIHtJbnZhbGlkU3RhdGVFcnJvcn0gaWYgbm90IGxvYWRlZC5cbiAgICAgKi9cbiAgICBnZXQgcnRwQ2FwYWJpbGl0aWVzKCkge1xuICAgICAgICBpZiAoIXRoaXMuX2xvYWRlZClcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5JbnZhbGlkU3RhdGVFcnJvcignbm90IGxvYWRlZCcpO1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVjdlJ0cENhcGFiaWxpdGllcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU0NUUCBjYXBhYmlsaXRpZXMgb2YgdGhlIERldmljZS5cbiAgICAgKlxuICAgICAqIEB0aHJvd3Mge0ludmFsaWRTdGF0ZUVycm9yfSBpZiBub3QgbG9hZGVkLlxuICAgICAqL1xuICAgIGdldCBzY3RwQ2FwYWJpbGl0aWVzKCkge1xuICAgICAgICBpZiAoIXRoaXMuX2xvYWRlZClcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5JbnZhbGlkU3RhdGVFcnJvcignbm90IGxvYWRlZCcpO1xuICAgICAgICByZXR1cm4gdGhpcy5fc2N0cENhcGFiaWxpdGllcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZSB0aGUgRGV2aWNlLlxuICAgICAqL1xuICAgIGFzeW5jIGxvYWQoeyByb3V0ZXJSdHBDYXBhYmlsaXRpZXMgfSkge1xuICAgICAgICBsb2dnZXIuZGVidWcoJ2xvYWQoKSBbcm91dGVyUnRwQ2FwYWJpbGl0aWVzOiVvXScsIHJvdXRlclJ0cENhcGFiaWxpdGllcyk7XG4gICAgICAgIC8vIFRlbXBvcmFsIGhhbmRsZXIgdG8gZ2V0IGl0cyBjYXBhYmlsaXRpZXMuXG4gICAgICAgIGxldCBoYW5kbGVyO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2xvYWRlZClcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuSW52YWxpZFN0YXRlRXJyb3IoJ2FscmVhZHkgbG9hZGVkJyk7XG4gICAgICAgICAgICAvLyBUaGlzIG1heSB0aHJvdy5cbiAgICAgICAgICAgIG9ydGMudmFsaWRhdGVSdHBDYXBhYmlsaXRpZXMocm91dGVyUnRwQ2FwYWJpbGl0aWVzKTtcbiAgICAgICAgICAgIGhhbmRsZXIgPSB0aGlzLl9oYW5kbGVyRmFjdG9yeSgpO1xuICAgICAgICAgICAgY29uc3QgbmF0aXZlUnRwQ2FwYWJpbGl0aWVzID0gYXdhaXQgaGFuZGxlci5nZXROYXRpdmVSdHBDYXBhYmlsaXRpZXMoKTtcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZygnbG9hZCgpIHwgZ290IG5hdGl2ZSBSVFAgY2FwYWJpbGl0aWVzOiVvJywgbmF0aXZlUnRwQ2FwYWJpbGl0aWVzKTtcbiAgICAgICAgICAgIC8vIFRoaXMgbWF5IHRocm93LlxuICAgICAgICAgICAgb3J0Yy52YWxpZGF0ZVJ0cENhcGFiaWxpdGllcyhuYXRpdmVSdHBDYXBhYmlsaXRpZXMpO1xuICAgICAgICAgICAgLy8gR2V0IGV4dGVuZGVkIFJUUCBjYXBhYmlsaXRpZXMuXG4gICAgICAgICAgICB0aGlzLl9leHRlbmRlZFJ0cENhcGFiaWxpdGllcyA9IG9ydGMuZ2V0RXh0ZW5kZWRSdHBDYXBhYmlsaXRpZXMobmF0aXZlUnRwQ2FwYWJpbGl0aWVzLCByb3V0ZXJSdHBDYXBhYmlsaXRpZXMpO1xuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdsb2FkKCkgfCBnb3QgZXh0ZW5kZWQgUlRQIGNhcGFiaWxpdGllczolbycsIHRoaXMuX2V4dGVuZGVkUnRwQ2FwYWJpbGl0aWVzKTtcbiAgICAgICAgICAgIC8vIENoZWNrIHdoZXRoZXIgd2UgY2FuIHByb2R1Y2UgYXVkaW8vdmlkZW8uXG4gICAgICAgICAgICB0aGlzLl9jYW5Qcm9kdWNlQnlLaW5kLmF1ZGlvID1cbiAgICAgICAgICAgICAgICBvcnRjLmNhblNlbmQoJ2F1ZGlvJywgdGhpcy5fZXh0ZW5kZWRSdHBDYXBhYmlsaXRpZXMpO1xuICAgICAgICAgICAgdGhpcy5fY2FuUHJvZHVjZUJ5S2luZC52aWRlbyA9XG4gICAgICAgICAgICAgICAgb3J0Yy5jYW5TZW5kKCd2aWRlbycsIHRoaXMuX2V4dGVuZGVkUnRwQ2FwYWJpbGl0aWVzKTtcbiAgICAgICAgICAgIC8vIEdlbmVyYXRlIG91ciByZWNlaXZpbmcgUlRQIGNhcGFiaWxpdGllcyBmb3IgcmVjZWl2aW5nIG1lZGlhLlxuICAgICAgICAgICAgdGhpcy5fcmVjdlJ0cENhcGFiaWxpdGllcyA9XG4gICAgICAgICAgICAgICAgb3J0Yy5nZXRSZWN2UnRwQ2FwYWJpbGl0aWVzKHRoaXMuX2V4dGVuZGVkUnRwQ2FwYWJpbGl0aWVzKTtcbiAgICAgICAgICAgIC8vIFRoaXMgbWF5IHRocm93LlxuICAgICAgICAgICAgb3J0Yy52YWxpZGF0ZVJ0cENhcGFiaWxpdGllcyh0aGlzLl9yZWN2UnRwQ2FwYWJpbGl0aWVzKTtcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZygnbG9hZCgpIHwgZ290IHJlY2VpdmluZyBSVFAgY2FwYWJpbGl0aWVzOiVvJywgdGhpcy5fcmVjdlJ0cENhcGFiaWxpdGllcyk7XG4gICAgICAgICAgICAvLyBHZW5lcmF0ZSBvdXIgU0NUUCBjYXBhYmlsaXRpZXMuXG4gICAgICAgICAgICB0aGlzLl9zY3RwQ2FwYWJpbGl0aWVzID0gYXdhaXQgaGFuZGxlci5nZXROYXRpdmVTY3RwQ2FwYWJpbGl0aWVzKCk7XG4gICAgICAgICAgICBsb2dnZXIuZGVidWcoJ2xvYWQoKSB8IGdvdCBuYXRpdmUgU0NUUCBjYXBhYmlsaXRpZXM6JW8nLCB0aGlzLl9zY3RwQ2FwYWJpbGl0aWVzKTtcbiAgICAgICAgICAgIC8vIFRoaXMgbWF5IHRocm93LlxuICAgICAgICAgICAgb3J0Yy52YWxpZGF0ZVNjdHBDYXBhYmlsaXRpZXModGhpcy5fc2N0cENhcGFiaWxpdGllcyk7XG4gICAgICAgICAgICBsb2dnZXIuZGVidWcoJ2xvYWQoKSBzdWNjZWVkZWQnKTtcbiAgICAgICAgICAgIHRoaXMuX2xvYWRlZCA9IHRydWU7XG4gICAgICAgICAgICBoYW5kbGVyLmNsb3NlKCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoaGFuZGxlcilcbiAgICAgICAgICAgICAgICBoYW5kbGVyLmNsb3NlKCk7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHdlIGNhbiBwcm9kdWNlIGF1ZGlvL3ZpZGVvLlxuICAgICAqXG4gICAgICogQHRocm93cyB7SW52YWxpZFN0YXRlRXJyb3J9IGlmIG5vdCBsb2FkZWQuXG4gICAgICogQHRocm93cyB7VHlwZUVycm9yfSBpZiB3cm9uZyBhcmd1bWVudHMuXG4gICAgICovXG4gICAgY2FuUHJvZHVjZShraW5kKSB7XG4gICAgICAgIGlmICghdGhpcy5fbG9hZGVkKVxuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLkludmFsaWRTdGF0ZUVycm9yKCdub3QgbG9hZGVkJyk7XG4gICAgICAgIGVsc2UgaWYgKGtpbmQgIT09ICdhdWRpbycgJiYga2luZCAhPT0gJ3ZpZGVvJylcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYGludmFsaWQga2luZCBcIiR7a2luZH1cImApO1xuICAgICAgICByZXR1cm4gdGhpcy5fY2FuUHJvZHVjZUJ5S2luZFtraW5kXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIFRyYW5zcG9ydCBmb3Igc2VuZGluZyBtZWRpYS5cbiAgICAgKlxuICAgICAqIEB0aHJvd3Mge0ludmFsaWRTdGF0ZUVycm9yfSBpZiBub3QgbG9hZGVkLlxuICAgICAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gaWYgd3JvbmcgYXJndW1lbnRzLlxuICAgICAqL1xuICAgIGNyZWF0ZVNlbmRUcmFuc3BvcnQoeyBpZCwgaWNlUGFyYW1ldGVycywgaWNlQ2FuZGlkYXRlcywgZHRsc1BhcmFtZXRlcnMsIHNjdHBQYXJhbWV0ZXJzLCBpY2VTZXJ2ZXJzLCBpY2VUcmFuc3BvcnRQb2xpY3ksIGFkZGl0aW9uYWxTZXR0aW5ncywgcHJvcHJpZXRhcnlDb25zdHJhaW50cywgYXBwRGF0YSA9IHt9IH0pIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdjcmVhdGVTZW5kVHJhbnNwb3J0KCknKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NyZWF0ZVRyYW5zcG9ydCh7XG4gICAgICAgICAgICBkaXJlY3Rpb246ICdzZW5kJyxcbiAgICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICAgIGljZVBhcmFtZXRlcnM6IGljZVBhcmFtZXRlcnMsXG4gICAgICAgICAgICBpY2VDYW5kaWRhdGVzOiBpY2VDYW5kaWRhdGVzLFxuICAgICAgICAgICAgZHRsc1BhcmFtZXRlcnM6IGR0bHNQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgc2N0cFBhcmFtZXRlcnM6IHNjdHBQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgaWNlU2VydmVyczogaWNlU2VydmVycyxcbiAgICAgICAgICAgIGljZVRyYW5zcG9ydFBvbGljeTogaWNlVHJhbnNwb3J0UG9saWN5LFxuICAgICAgICAgICAgYWRkaXRpb25hbFNldHRpbmdzOiBhZGRpdGlvbmFsU2V0dGluZ3MsXG4gICAgICAgICAgICBwcm9wcmlldGFyeUNvbnN0cmFpbnRzOiBwcm9wcmlldGFyeUNvbnN0cmFpbnRzLFxuICAgICAgICAgICAgYXBwRGF0YTogYXBwRGF0YVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIFRyYW5zcG9ydCBmb3IgcmVjZWl2aW5nIG1lZGlhLlxuICAgICAqXG4gICAgICogQHRocm93cyB7SW52YWxpZFN0YXRlRXJyb3J9IGlmIG5vdCBsb2FkZWQuXG4gICAgICogQHRocm93cyB7VHlwZUVycm9yfSBpZiB3cm9uZyBhcmd1bWVudHMuXG4gICAgICovXG4gICAgY3JlYXRlUmVjdlRyYW5zcG9ydCh7IGlkLCBpY2VQYXJhbWV0ZXJzLCBpY2VDYW5kaWRhdGVzLCBkdGxzUGFyYW1ldGVycywgc2N0cFBhcmFtZXRlcnMsIGljZVNlcnZlcnMsIGljZVRyYW5zcG9ydFBvbGljeSwgYWRkaXRpb25hbFNldHRpbmdzLCBwcm9wcmlldGFyeUNvbnN0cmFpbnRzLCBhcHBEYXRhID0ge30gfSkge1xuICAgICAgICBsb2dnZXIuZGVidWcoJ2NyZWF0ZVJlY3ZUcmFuc3BvcnQoKScpO1xuICAgICAgICByZXR1cm4gdGhpcy5fY3JlYXRlVHJhbnNwb3J0KHtcbiAgICAgICAgICAgIGRpcmVjdGlvbjogJ3JlY3YnLFxuICAgICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgICAgaWNlUGFyYW1ldGVyczogaWNlUGFyYW1ldGVycyxcbiAgICAgICAgICAgIGljZUNhbmRpZGF0ZXM6IGljZUNhbmRpZGF0ZXMsXG4gICAgICAgICAgICBkdGxzUGFyYW1ldGVyczogZHRsc1BhcmFtZXRlcnMsXG4gICAgICAgICAgICBzY3RwUGFyYW1ldGVyczogc2N0cFBhcmFtZXRlcnMsXG4gICAgICAgICAgICBpY2VTZXJ2ZXJzOiBpY2VTZXJ2ZXJzLFxuICAgICAgICAgICAgaWNlVHJhbnNwb3J0UG9saWN5OiBpY2VUcmFuc3BvcnRQb2xpY3ksXG4gICAgICAgICAgICBhZGRpdGlvbmFsU2V0dGluZ3M6IGFkZGl0aW9uYWxTZXR0aW5ncyxcbiAgICAgICAgICAgIHByb3ByaWV0YXJ5Q29uc3RyYWludHM6IHByb3ByaWV0YXJ5Q29uc3RyYWludHMsXG4gICAgICAgICAgICBhcHBEYXRhOiBhcHBEYXRhXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfY3JlYXRlVHJhbnNwb3J0KHsgZGlyZWN0aW9uLCBpZCwgaWNlUGFyYW1ldGVycywgaWNlQ2FuZGlkYXRlcywgZHRsc1BhcmFtZXRlcnMsIHNjdHBQYXJhbWV0ZXJzLCBpY2VTZXJ2ZXJzLCBpY2VUcmFuc3BvcnRQb2xpY3ksIGFkZGl0aW9uYWxTZXR0aW5ncywgcHJvcHJpZXRhcnlDb25zdHJhaW50cywgYXBwRGF0YSA9IHt9IH0pIHtcbiAgICAgICAgaWYgKCF0aGlzLl9sb2FkZWQpXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuSW52YWxpZFN0YXRlRXJyb3IoJ25vdCBsb2FkZWQnKTtcbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGlkICE9PSAnc3RyaW5nJylcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ21pc3NpbmcgaWQnKTtcbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGljZVBhcmFtZXRlcnMgIT09ICdvYmplY3QnKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbWlzc2luZyBpY2VQYXJhbWV0ZXJzJyk7XG4gICAgICAgIGVsc2UgaWYgKCFBcnJheS5pc0FycmF5KGljZUNhbmRpZGF0ZXMpKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbWlzc2luZyBpY2VDYW5kaWRhdGVzJyk7XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkdGxzUGFyYW1ldGVycyAhPT0gJ29iamVjdCcpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdtaXNzaW5nIGR0bHNQYXJhbWV0ZXJzJyk7XG4gICAgICAgIGVsc2UgaWYgKHNjdHBQYXJhbWV0ZXJzICYmIHR5cGVvZiBzY3RwUGFyYW1ldGVycyAhPT0gJ29iamVjdCcpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd3cm9uZyBzY3RwUGFyYW1ldGVycycpO1xuICAgICAgICBlbHNlIGlmIChhcHBEYXRhICYmIHR5cGVvZiBhcHBEYXRhICE9PSAnb2JqZWN0JylcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2lmIGdpdmVuLCBhcHBEYXRhIG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gICAgICAgIC8vIENyZWF0ZSBhIG5ldyBUcmFuc3BvcnQuXG4gICAgICAgIGNvbnN0IHRyYW5zcG9ydCA9IG5ldyBUcmFuc3BvcnRfMS5UcmFuc3BvcnQoe1xuICAgICAgICAgICAgZGlyZWN0aW9uLFxuICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICBpY2VQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgaWNlQ2FuZGlkYXRlcyxcbiAgICAgICAgICAgIGR0bHNQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgc2N0cFBhcmFtZXRlcnMsXG4gICAgICAgICAgICBpY2VTZXJ2ZXJzLFxuICAgICAgICAgICAgaWNlVHJhbnNwb3J0UG9saWN5LFxuICAgICAgICAgICAgYWRkaXRpb25hbFNldHRpbmdzLFxuICAgICAgICAgICAgcHJvcHJpZXRhcnlDb25zdHJhaW50cyxcbiAgICAgICAgICAgIGFwcERhdGEsXG4gICAgICAgICAgICBoYW5kbGVyRmFjdG9yeTogdGhpcy5faGFuZGxlckZhY3RvcnksXG4gICAgICAgICAgICBleHRlbmRlZFJ0cENhcGFiaWxpdGllczogdGhpcy5fZXh0ZW5kZWRSdHBDYXBhYmlsaXRpZXMsXG4gICAgICAgICAgICBjYW5Qcm9kdWNlQnlLaW5kOiB0aGlzLl9jYW5Qcm9kdWNlQnlLaW5kXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdHJhbnNwb3J0O1xuICAgIH1cbn1cbmV4cG9ydHMuRGV2aWNlID0gRGV2aWNlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xufVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnQocmVxdWlyZShcIi4vRGV2aWNlXCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL1RyYW5zcG9ydFwiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9Qcm9kdWNlclwiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9Db25zdW1lclwiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9EYXRhUHJvZHVjZXJcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vRGF0YUNvbnN1bWVyXCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL2hhbmRsZXJzL0hhbmRsZXJJbnRlcmZhY2VcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vZXJyb3JzXCIpKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgRGV2aWNlXzEgPSByZXF1aXJlKFwiLi9EZXZpY2VcIik7XG5leHBvcnRzLkRldmljZSA9IERldmljZV8xLkRldmljZTtcbmV4cG9ydHMuZGV0ZWN0RGV2aWNlID0gRGV2aWNlXzEuZGV0ZWN0RGV2aWNlO1xuY29uc3QgdHlwZXMgPSByZXF1aXJlKFwiLi90eXBlc1wiKTtcbmV4cG9ydHMudHlwZXMgPSB0eXBlcztcbi8qKlxuICogRXhwb3NlIG1lZGlhc291cC1jbGllbnQgdmVyc2lvbi5cbiAqL1xuZXhwb3J0cy52ZXJzaW9uID0gJzMuNi4xMic7XG4vKipcbiAqIEV4cG9zZSBwYXJzZVNjYWxhYmlsaXR5TW9kZSgpIGZ1bmN0aW9uLlxuICovXG52YXIgc2NhbGFiaWxpdHlNb2Rlc18xID0gcmVxdWlyZShcIi4vc2NhbGFiaWxpdHlNb2Rlc1wiKTtcbmV4cG9ydHMucGFyc2VTY2FsYWJpbGl0eU1vZGUgPSBzY2FsYWJpbGl0eU1vZGVzXzEucGFyc2U7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNBcmd1bWVudHModmFsdWUpIHtcblx0dmFyIHN0ciA9IHRvU3RyLmNhbGwodmFsdWUpO1xuXHR2YXIgaXNBcmdzID0gc3RyID09PSAnW29iamVjdCBBcmd1bWVudHNdJztcblx0aWYgKCFpc0FyZ3MpIHtcblx0XHRpc0FyZ3MgPSBzdHIgIT09ICdbb2JqZWN0IEFycmF5XScgJiZcblx0XHRcdHZhbHVlICE9PSBudWxsICYmXG5cdFx0XHR0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmXG5cdFx0XHR0eXBlb2YgdmFsdWUubGVuZ3RoID09PSAnbnVtYmVyJyAmJlxuXHRcdFx0dmFsdWUubGVuZ3RoID49IDAgJiZcblx0XHRcdHRvU3RyLmNhbGwodmFsdWUuY2FsbGVlKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcblx0fVxuXHRyZXR1cm4gaXNBcmdzO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGtleXNTaGltO1xuaWYgKCFPYmplY3Qua2V5cykge1xuXHQvLyBtb2RpZmllZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbVxuXHR2YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblx0dmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblx0dmFyIGlzQXJncyA9IHJlcXVpcmUoJy4vaXNBcmd1bWVudHMnKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBnbG9iYWwtcmVxdWlyZVxuXHR2YXIgaXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblx0dmFyIGhhc0RvbnRFbnVtQnVnID0gIWlzRW51bWVyYWJsZS5jYWxsKHsgdG9TdHJpbmc6IG51bGwgfSwgJ3RvU3RyaW5nJyk7XG5cdHZhciBoYXNQcm90b0VudW1CdWcgPSBpc0VudW1lcmFibGUuY2FsbChmdW5jdGlvbiAoKSB7fSwgJ3Byb3RvdHlwZScpO1xuXHR2YXIgZG9udEVudW1zID0gW1xuXHRcdCd0b1N0cmluZycsXG5cdFx0J3RvTG9jYWxlU3RyaW5nJyxcblx0XHQndmFsdWVPZicsXG5cdFx0J2hhc093blByb3BlcnR5Jyxcblx0XHQnaXNQcm90b3R5cGVPZicsXG5cdFx0J3Byb3BlcnR5SXNFbnVtZXJhYmxlJyxcblx0XHQnY29uc3RydWN0b3InXG5cdF07XG5cdHZhciBlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZSA9IGZ1bmN0aW9uIChvKSB7XG5cdFx0dmFyIGN0b3IgPSBvLmNvbnN0cnVjdG9yO1xuXHRcdHJldHVybiBjdG9yICYmIGN0b3IucHJvdG90eXBlID09PSBvO1xuXHR9O1xuXHR2YXIgZXhjbHVkZWRLZXlzID0ge1xuXHRcdCRhcHBsaWNhdGlvbkNhY2hlOiB0cnVlLFxuXHRcdCRjb25zb2xlOiB0cnVlLFxuXHRcdCRleHRlcm5hbDogdHJ1ZSxcblx0XHQkZnJhbWU6IHRydWUsXG5cdFx0JGZyYW1lRWxlbWVudDogdHJ1ZSxcblx0XHQkZnJhbWVzOiB0cnVlLFxuXHRcdCRpbm5lckhlaWdodDogdHJ1ZSxcblx0XHQkaW5uZXJXaWR0aDogdHJ1ZSxcblx0XHQkb25tb3pmdWxsc2NyZWVuY2hhbmdlOiB0cnVlLFxuXHRcdCRvbm1vemZ1bGxzY3JlZW5lcnJvcjogdHJ1ZSxcblx0XHQkb3V0ZXJIZWlnaHQ6IHRydWUsXG5cdFx0JG91dGVyV2lkdGg6IHRydWUsXG5cdFx0JHBhZ2VYT2Zmc2V0OiB0cnVlLFxuXHRcdCRwYWdlWU9mZnNldDogdHJ1ZSxcblx0XHQkcGFyZW50OiB0cnVlLFxuXHRcdCRzY3JvbGxMZWZ0OiB0cnVlLFxuXHRcdCRzY3JvbGxUb3A6IHRydWUsXG5cdFx0JHNjcm9sbFg6IHRydWUsXG5cdFx0JHNjcm9sbFk6IHRydWUsXG5cdFx0JHNlbGY6IHRydWUsXG5cdFx0JHdlYmtpdEluZGV4ZWREQjogdHJ1ZSxcblx0XHQkd2Via2l0U3RvcmFnZUluZm86IHRydWUsXG5cdFx0JHdpbmRvdzogdHJ1ZVxuXHR9O1xuXHR2YXIgaGFzQXV0b21hdGlvbkVxdWFsaXR5QnVnID0gKGZ1bmN0aW9uICgpIHtcblx0XHQvKiBnbG9iYWwgd2luZG93ICovXG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7IHJldHVybiBmYWxzZTsgfVxuXHRcdGZvciAodmFyIGsgaW4gd2luZG93KSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRpZiAoIWV4Y2x1ZGVkS2V5c1snJCcgKyBrXSAmJiBoYXMuY2FsbCh3aW5kb3csIGspICYmIHdpbmRvd1trXSAhPT0gbnVsbCAmJiB0eXBlb2Ygd2luZG93W2tdID09PSAnb2JqZWN0Jykge1xuXHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZSh3aW5kb3dba10pO1xuXHRcdFx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9KCkpO1xuXHR2YXIgZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGVJZk5vdEJ1Z2d5ID0gZnVuY3Rpb24gKG8pIHtcblx0XHQvKiBnbG9iYWwgd2luZG93ICovXG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnIHx8ICFoYXNBdXRvbWF0aW9uRXF1YWxpdHlCdWcpIHtcblx0XHRcdHJldHVybiBlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZShvKTtcblx0XHR9XG5cdFx0dHJ5IHtcblx0XHRcdHJldHVybiBlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZShvKTtcblx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9O1xuXG5cdGtleXNTaGltID0gZnVuY3Rpb24ga2V5cyhvYmplY3QpIHtcblx0XHR2YXIgaXNPYmplY3QgPSBvYmplY3QgIT09IG51bGwgJiYgdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCc7XG5cdFx0dmFyIGlzRnVuY3Rpb24gPSB0b1N0ci5jYWxsKG9iamVjdCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG5cdFx0dmFyIGlzQXJndW1lbnRzID0gaXNBcmdzKG9iamVjdCk7XG5cdFx0dmFyIGlzU3RyaW5nID0gaXNPYmplY3QgJiYgdG9TdHIuY2FsbChvYmplY3QpID09PSAnW29iamVjdCBTdHJpbmddJztcblx0XHR2YXIgdGhlS2V5cyA9IFtdO1xuXG5cdFx0aWYgKCFpc09iamVjdCAmJiAhaXNGdW5jdGlvbiAmJiAhaXNBcmd1bWVudHMpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5rZXlzIGNhbGxlZCBvbiBhIG5vbi1vYmplY3QnKTtcblx0XHR9XG5cblx0XHR2YXIgc2tpcFByb3RvID0gaGFzUHJvdG9FbnVtQnVnICYmIGlzRnVuY3Rpb247XG5cdFx0aWYgKGlzU3RyaW5nICYmIG9iamVjdC5sZW5ndGggPiAwICYmICFoYXMuY2FsbChvYmplY3QsIDApKSB7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG9iamVjdC5sZW5ndGg7ICsraSkge1xuXHRcdFx0XHR0aGVLZXlzLnB1c2goU3RyaW5nKGkpKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoaXNBcmd1bWVudHMgJiYgb2JqZWN0Lmxlbmd0aCA+IDApIHtcblx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgb2JqZWN0Lmxlbmd0aDsgKytqKSB7XG5cdFx0XHRcdHRoZUtleXMucHVzaChTdHJpbmcoaikpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKHZhciBuYW1lIGluIG9iamVjdCkge1xuXHRcdFx0XHRpZiAoIShza2lwUHJvdG8gJiYgbmFtZSA9PT0gJ3Byb3RvdHlwZScpICYmIGhhcy5jYWxsKG9iamVjdCwgbmFtZSkpIHtcblx0XHRcdFx0XHR0aGVLZXlzLnB1c2goU3RyaW5nKG5hbWUpKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChoYXNEb250RW51bUJ1Zykge1xuXHRcdFx0dmFyIHNraXBDb25zdHJ1Y3RvciA9IGVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlSWZOb3RCdWdneShvYmplY3QpO1xuXG5cdFx0XHRmb3IgKHZhciBrID0gMDsgayA8IGRvbnRFbnVtcy5sZW5ndGg7ICsraykge1xuXHRcdFx0XHRpZiAoIShza2lwQ29uc3RydWN0b3IgJiYgZG9udEVudW1zW2tdID09PSAnY29uc3RydWN0b3InKSAmJiBoYXMuY2FsbChvYmplY3QsIGRvbnRFbnVtc1trXSkpIHtcblx0XHRcdFx0XHR0aGVLZXlzLnB1c2goZG9udEVudW1zW2tdKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gdGhlS2V5cztcblx0fTtcbn1cbm1vZHVsZS5leHBvcnRzID0ga2V5c1NoaW07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbnZhciBpc0FyZ3MgPSByZXF1aXJlKCcuL2lzQXJndW1lbnRzJyk7XG5cbnZhciBvcmlnS2V5cyA9IE9iamVjdC5rZXlzO1xudmFyIGtleXNTaGltID0gb3JpZ0tleXMgPyBmdW5jdGlvbiBrZXlzKG8pIHsgcmV0dXJuIG9yaWdLZXlzKG8pOyB9IDogcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xuXG52YXIgb3JpZ2luYWxLZXlzID0gT2JqZWN0LmtleXM7XG5cbmtleXNTaGltLnNoaW0gPSBmdW5jdGlvbiBzaGltT2JqZWN0S2V5cygpIHtcblx0aWYgKE9iamVjdC5rZXlzKSB7XG5cdFx0dmFyIGtleXNXb3Jrc1dpdGhBcmd1bWVudHMgPSAoZnVuY3Rpb24gKCkge1xuXHRcdFx0Ly8gU2FmYXJpIDUuMCBidWdcblx0XHRcdHZhciBhcmdzID0gT2JqZWN0LmtleXMoYXJndW1lbnRzKTtcblx0XHRcdHJldHVybiBhcmdzICYmIGFyZ3MubGVuZ3RoID09PSBhcmd1bWVudHMubGVuZ3RoO1xuXHRcdH0oMSwgMikpO1xuXHRcdGlmICgha2V5c1dvcmtzV2l0aEFyZ3VtZW50cykge1xuXHRcdFx0T2JqZWN0LmtleXMgPSBmdW5jdGlvbiBrZXlzKG9iamVjdCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGZ1bmMtbmFtZS1tYXRjaGluZ1xuXHRcdFx0XHRpZiAoaXNBcmdzKG9iamVjdCkpIHtcblx0XHRcdFx0XHRyZXR1cm4gb3JpZ2luYWxLZXlzKHNsaWNlLmNhbGwob2JqZWN0KSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIG9yaWdpbmFsS2V5cyhvYmplY3QpO1xuXHRcdFx0fTtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0T2JqZWN0LmtleXMgPSBrZXlzU2hpbTtcblx0fVxuXHRyZXR1cm4gT2JqZWN0LmtleXMgfHwga2V5c1NoaW07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGtleXNTaGltO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzVG9TdHJpbmdUYWcgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBTeW1ib2wudG9TdHJpbmdUYWcgPT09ICdzeW1ib2wnO1xudmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxudmFyIGlzU3RhbmRhcmRBcmd1bWVudHMgPSBmdW5jdGlvbiBpc0FyZ3VtZW50cyh2YWx1ZSkge1xuXHRpZiAoaGFzVG9TdHJpbmdUYWcgJiYgdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiBTeW1ib2wudG9TdHJpbmdUYWcgaW4gdmFsdWUpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0cmV0dXJuIHRvU3RyLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBBcmd1bWVudHNdJztcbn07XG5cbnZhciBpc0xlZ2FjeUFyZ3VtZW50cyA9IGZ1bmN0aW9uIGlzQXJndW1lbnRzKHZhbHVlKSB7XG5cdGlmIChpc1N0YW5kYXJkQXJndW1lbnRzKHZhbHVlKSkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cdHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJlxuXHRcdHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiZcblx0XHR0eXBlb2YgdmFsdWUubGVuZ3RoID09PSAnbnVtYmVyJyAmJlxuXHRcdHZhbHVlLmxlbmd0aCA+PSAwICYmXG5cdFx0dG9TdHIuY2FsbCh2YWx1ZSkgIT09ICdbb2JqZWN0IEFycmF5XScgJiZcblx0XHR0b1N0ci5jYWxsKHZhbHVlLmNhbGxlZSkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59O1xuXG52YXIgc3VwcG9ydHNTdGFuZGFyZEFyZ3VtZW50cyA9IChmdW5jdGlvbiAoKSB7XG5cdHJldHVybiBpc1N0YW5kYXJkQXJndW1lbnRzKGFyZ3VtZW50cyk7XG59KCkpO1xuXG5pc1N0YW5kYXJkQXJndW1lbnRzLmlzTGVnYWN5QXJndW1lbnRzID0gaXNMZWdhY3lBcmd1bWVudHM7IC8vIGZvciB0ZXN0c1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN1cHBvcnRzU3RhbmRhcmRBcmd1bWVudHMgPyBpc1N0YW5kYXJkQXJndW1lbnRzIDogaXNMZWdhY3lBcmd1bWVudHM7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBrZXlzID0gcmVxdWlyZSgnb2JqZWN0LWtleXMnKTtcbnZhciBoYXNTeW1ib2xzID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sKCdmb28nKSA9PT0gJ3N5bWJvbCc7XG5cbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgY29uY2F0ID0gQXJyYXkucHJvdG90eXBlLmNvbmNhdDtcbnZhciBvcmlnRGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbnZhciBpc0Z1bmN0aW9uID0gZnVuY3Rpb24gKGZuKSB7XG5cdHJldHVybiB0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicgJiYgdG9TdHIuY2FsbChmbikgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59O1xuXG52YXIgYXJlUHJvcGVydHlEZXNjcmlwdG9yc1N1cHBvcnRlZCA9IGZ1bmN0aW9uICgpIHtcblx0dmFyIG9iaiA9IHt9O1xuXHR0cnkge1xuXHRcdG9yaWdEZWZpbmVQcm9wZXJ0eShvYmosICd4JywgeyBlbnVtZXJhYmxlOiBmYWxzZSwgdmFsdWU6IG9iaiB9KTtcblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMsIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG5cdFx0Zm9yICh2YXIgXyBpbiBvYmopIHsgLy8ganNjczppZ25vcmUgZGlzYWxsb3dVbnVzZWRWYXJpYWJsZXNcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIG9iai54ID09PSBvYmo7XG5cdH0gY2F0Y2ggKGUpIHsgLyogdGhpcyBpcyBJRSA4LiAqL1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufTtcbnZhciBzdXBwb3J0c0Rlc2NyaXB0b3JzID0gb3JpZ0RlZmluZVByb3BlcnR5ICYmIGFyZVByb3BlcnR5RGVzY3JpcHRvcnNTdXBwb3J0ZWQoKTtcblxudmFyIGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZSwgdmFsdWUsIHByZWRpY2F0ZSkge1xuXHRpZiAobmFtZSBpbiBvYmplY3QgJiYgKCFpc0Z1bmN0aW9uKHByZWRpY2F0ZSkgfHwgIXByZWRpY2F0ZSgpKSkge1xuXHRcdHJldHVybjtcblx0fVxuXHRpZiAoc3VwcG9ydHNEZXNjcmlwdG9ycykge1xuXHRcdG9yaWdEZWZpbmVQcm9wZXJ0eShvYmplY3QsIG5hbWUsIHtcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0d3JpdGFibGU6IHRydWVcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHRvYmplY3RbbmFtZV0gPSB2YWx1ZTtcblx0fVxufTtcblxudmFyIGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiAob2JqZWN0LCBtYXApIHtcblx0dmFyIHByZWRpY2F0ZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHt9O1xuXHR2YXIgcHJvcHMgPSBrZXlzKG1hcCk7XG5cdGlmIChoYXNTeW1ib2xzKSB7XG5cdFx0cHJvcHMgPSBjb25jYXQuY2FsbChwcm9wcywgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhtYXApKTtcblx0fVxuXHRmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSArPSAxKSB7XG5cdFx0ZGVmaW5lUHJvcGVydHkob2JqZWN0LCBwcm9wc1tpXSwgbWFwW3Byb3BzW2ldXSwgcHJlZGljYXRlc1twcm9wc1tpXV0pO1xuXHR9XG59O1xuXG5kZWZpbmVQcm9wZXJ0aWVzLnN1cHBvcnRzRGVzY3JpcHRvcnMgPSAhIXN1cHBvcnRzRGVzY3JpcHRvcnM7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmaW5lUHJvcGVydGllcztcbiIsIid1c2Ugc3RyaWN0JztcblxuLyogZXNsaW50IG5vLWludmFsaWQtdGhpczogMSAqL1xuXG52YXIgRVJST1JfTUVTU0FHRSA9ICdGdW5jdGlvbi5wcm90b3R5cGUuYmluZCBjYWxsZWQgb24gaW5jb21wYXRpYmxlICc7XG52YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGZ1bmNUeXBlID0gJ1tvYmplY3QgRnVuY3Rpb25dJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBiaW5kKHRoYXQpIHtcbiAgICB2YXIgdGFyZ2V0ID0gdGhpcztcbiAgICBpZiAodHlwZW9mIHRhcmdldCAhPT0gJ2Z1bmN0aW9uJyB8fCB0b1N0ci5jYWxsKHRhcmdldCkgIT09IGZ1bmNUeXBlKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRVJST1JfTUVTU0FHRSArIHRhcmdldCk7XG4gICAgfVxuICAgIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuXG4gICAgdmFyIGJvdW5kO1xuICAgIHZhciBiaW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzIGluc3RhbmNlb2YgYm91bmQpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB0YXJnZXQuYXBwbHkoXG4gICAgICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgICAgICBhcmdzLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cykpXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKE9iamVjdChyZXN1bHQpID09PSByZXN1bHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0LmFwcGx5KFxuICAgICAgICAgICAgICAgIHRoYXQsXG4gICAgICAgICAgICAgICAgYXJncy5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMpKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgYm91bmRMZW5ndGggPSBNYXRoLm1heCgwLCB0YXJnZXQubGVuZ3RoIC0gYXJncy5sZW5ndGgpO1xuICAgIHZhciBib3VuZEFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvdW5kTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYm91bmRBcmdzLnB1c2goJyQnICsgaSk7XG4gICAgfVxuXG4gICAgYm91bmQgPSBGdW5jdGlvbignYmluZGVyJywgJ3JldHVybiBmdW5jdGlvbiAoJyArIGJvdW5kQXJncy5qb2luKCcsJykgKyAnKXsgcmV0dXJuIGJpbmRlci5hcHBseSh0aGlzLGFyZ3VtZW50cyk7IH0nKShiaW5kZXIpO1xuXG4gICAgaWYgKHRhcmdldC5wcm90b3R5cGUpIHtcbiAgICAgICAgdmFyIEVtcHR5ID0gZnVuY3Rpb24gRW1wdHkoKSB7fTtcbiAgICAgICAgRW1wdHkucHJvdG90eXBlID0gdGFyZ2V0LnByb3RvdHlwZTtcbiAgICAgICAgYm91bmQucHJvdG90eXBlID0gbmV3IEVtcHR5KCk7XG4gICAgICAgIEVtcHR5LnByb3RvdHlwZSA9IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJvdW5kO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kIHx8IGltcGxlbWVudGF0aW9uO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiBlc2xpbnQgY29tcGxleGl0eTogWzIsIDE4XSwgbWF4LXN0YXRlbWVudHM6IFsyLCAzM10gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaGFzU3ltYm9scygpIHtcblx0aWYgKHR5cGVvZiBTeW1ib2wgIT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgIT09ICdmdW5jdGlvbicpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICh0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAnc3ltYm9sJykgeyByZXR1cm4gdHJ1ZTsgfVxuXG5cdHZhciBvYmogPSB7fTtcblx0dmFyIHN5bSA9IFN5bWJvbCgndGVzdCcpO1xuXHR2YXIgc3ltT2JqID0gT2JqZWN0KHN5bSk7XG5cdGlmICh0eXBlb2Ygc3ltID09PSAnc3RyaW5nJykgeyByZXR1cm4gZmFsc2U7IH1cblxuXHRpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHN5bSkgIT09ICdbb2JqZWN0IFN5bWJvbF0nKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHN5bU9iaikgIT09ICdbb2JqZWN0IFN5bWJvbF0nKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdC8vIHRlbXAgZGlzYWJsZWQgcGVyIGh0dHBzOi8vZ2l0aHViLmNvbS9samhhcmIvb2JqZWN0LmFzc2lnbi9pc3N1ZXMvMTdcblx0Ly8gaWYgKHN5bSBpbnN0YW5jZW9mIFN5bWJvbCkgeyByZXR1cm4gZmFsc2U7IH1cblx0Ly8gdGVtcCBkaXNhYmxlZCBwZXIgaHR0cHM6Ly9naXRodWIuY29tL1dlYlJlZmxlY3Rpb24vZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzL2lzc3Vlcy80XG5cdC8vIGlmICghKHN5bU9iaiBpbnN0YW5jZW9mIFN5bWJvbCkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0Ly8gaWYgKHR5cGVvZiBTeW1ib2wucHJvdG90eXBlLnRvU3RyaW5nICE9PSAnZnVuY3Rpb24nKSB7IHJldHVybiBmYWxzZTsgfVxuXHQvLyBpZiAoU3RyaW5nKHN5bSkgIT09IFN5bWJvbC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChzeW0pKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdHZhciBzeW1WYWwgPSA0Mjtcblx0b2JqW3N5bV0gPSBzeW1WYWw7XG5cdGZvciAoc3ltIGluIG9iaikgeyByZXR1cm4gZmFsc2U7IH0gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuXHRpZiAodHlwZW9mIE9iamVjdC5rZXlzID09PSAnZnVuY3Rpb24nICYmIE9iamVjdC5rZXlzKG9iaikubGVuZ3RoICE9PSAwKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgPT09ICdmdW5jdGlvbicgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKS5sZW5ndGggIT09IDApIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0dmFyIHN5bXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iaik7XG5cdGlmIChzeW1zLmxlbmd0aCAhPT0gMSB8fCBzeW1zWzBdICE9PSBzeW0pIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0aWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwob2JqLCBzeW0pKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHZhciBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIHN5bSk7XG5cdFx0aWYgKGRlc2NyaXB0b3IudmFsdWUgIT09IHN5bVZhbCB8fCBkZXNjcmlwdG9yLmVudW1lcmFibGUgIT09IHRydWUpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdH1cblxuXHRyZXR1cm4gdHJ1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBvcmlnU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciBoYXNTeW1ib2xTaGFtID0gcmVxdWlyZSgnLi9zaGFtcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGhhc05hdGl2ZVN5bWJvbHMoKSB7XG5cdGlmICh0eXBlb2Ygb3JpZ1N5bWJvbCAhPT0gJ2Z1bmN0aW9uJykgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKHR5cGVvZiBTeW1ib2wgIT09ICdmdW5jdGlvbicpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICh0eXBlb2Ygb3JpZ1N5bWJvbCgnZm9vJykgIT09ICdzeW1ib2wnKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAodHlwZW9mIFN5bWJvbCgnYmFyJykgIT09ICdzeW1ib2wnKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdHJldHVybiBoYXNTeW1ib2xTaGFtKCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiBnbG9iYWxzXG5cdEF0b21pY3MsXG5cdFNoYXJlZEFycmF5QnVmZmVyLFxuKi9cblxudmFyIHVuZGVmaW5lZDtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbnZhciAkZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5pZiAoJGdPUEQpIHtcblx0dHJ5IHtcblx0XHQkZ09QRCh7fSwgJycpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0JGdPUEQgPSBudWxsOyAvLyB0aGlzIGlzIElFIDgsIHdoaWNoIGhhcyBhIGJyb2tlbiBnT1BEXG5cdH1cbn1cblxudmFyIHRocm93VHlwZUVycm9yID0gZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgJFR5cGVFcnJvcigpOyB9O1xudmFyIFRocm93VHlwZUVycm9yID0gJGdPUERcblx0PyAoZnVuY3Rpb24gKCkge1xuXHRcdHRyeSB7XG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zLCBuby1jYWxsZXIsIG5vLXJlc3RyaWN0ZWQtcHJvcGVydGllc1xuXHRcdFx0YXJndW1lbnRzLmNhbGxlZTsgLy8gSUUgOCBkb2VzIG5vdCB0aHJvdyBoZXJlXG5cdFx0XHRyZXR1cm4gdGhyb3dUeXBlRXJyb3I7XG5cdFx0fSBjYXRjaCAoY2FsbGVlVGhyb3dzKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHQvLyBJRSA4IHRocm93cyBvbiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGFyZ3VtZW50cywgJycpXG5cdFx0XHRcdHJldHVybiAkZ09QRChhcmd1bWVudHMsICdjYWxsZWUnKS5nZXQ7XG5cdFx0XHR9IGNhdGNoIChnT1BEdGhyb3dzKSB7XG5cdFx0XHRcdHJldHVybiB0aHJvd1R5cGVFcnJvcjtcblx0XHRcdH1cblx0XHR9XG5cdH0oKSlcblx0OiB0aHJvd1R5cGVFcnJvcjtcblxudmFyIGhhc1N5bWJvbHMgPSByZXF1aXJlKCdoYXMtc3ltYm9scycpKCk7XG5cbnZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiAoeCkgeyByZXR1cm4geC5fX3Byb3RvX187IH07IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcHJvdG9cblxudmFyIGdlbmVyYXRvcjsgLy8gPSBmdW5jdGlvbiAqICgpIHt9O1xudmFyIGdlbmVyYXRvckZ1bmN0aW9uID0gZ2VuZXJhdG9yID8gZ2V0UHJvdG8oZ2VuZXJhdG9yKSA6IHVuZGVmaW5lZDtcbnZhciBhc3luY0ZuOyAvLyBhc3luYyBmdW5jdGlvbigpIHt9O1xudmFyIGFzeW5jRnVuY3Rpb24gPSBhc3luY0ZuID8gYXN5bmNGbi5jb25zdHJ1Y3RvciA6IHVuZGVmaW5lZDtcbnZhciBhc3luY0dlbjsgLy8gYXN5bmMgZnVuY3Rpb24gKiAoKSB7fTtcbnZhciBhc3luY0dlbkZ1bmN0aW9uID0gYXN5bmNHZW4gPyBnZXRQcm90byhhc3luY0dlbikgOiB1bmRlZmluZWQ7XG52YXIgYXN5bmNHZW5JdGVyYXRvciA9IGFzeW5jR2VuID8gYXN5bmNHZW4oKSA6IHVuZGVmaW5lZDtcblxudmFyIFR5cGVkQXJyYXkgPSB0eXBlb2YgVWludDhBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBnZXRQcm90byhVaW50OEFycmF5KTtcblxudmFyIElOVFJJTlNJQ1MgPSB7XG5cdCclQXJyYXklJzogQXJyYXksXG5cdCclQXJyYXlCdWZmZXIlJzogdHlwZW9mIEFycmF5QnVmZmVyID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEFycmF5QnVmZmVyLFxuXHQnJUFycmF5QnVmZmVyUHJvdG90eXBlJSc6IHR5cGVvZiBBcnJheUJ1ZmZlciA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBBcnJheUJ1ZmZlci5wcm90b3R5cGUsXG5cdCclQXJyYXlJdGVyYXRvclByb3RvdHlwZSUnOiBoYXNTeW1ib2xzID8gZ2V0UHJvdG8oW11bU3ltYm9sLml0ZXJhdG9yXSgpKSA6IHVuZGVmaW5lZCxcblx0JyVBcnJheVByb3RvdHlwZSUnOiBBcnJheS5wcm90b3R5cGUsXG5cdCclQXJyYXlQcm90b19lbnRyaWVzJSc6IEFycmF5LnByb3RvdHlwZS5lbnRyaWVzLFxuXHQnJUFycmF5UHJvdG9fZm9yRWFjaCUnOiBBcnJheS5wcm90b3R5cGUuZm9yRWFjaCxcblx0JyVBcnJheVByb3RvX2tleXMlJzogQXJyYXkucHJvdG90eXBlLmtleXMsXG5cdCclQXJyYXlQcm90b192YWx1ZXMlJzogQXJyYXkucHJvdG90eXBlLnZhbHVlcyxcblx0JyVBc3luY0Zyb21TeW5jSXRlcmF0b3JQcm90b3R5cGUlJzogdW5kZWZpbmVkLFxuXHQnJUFzeW5jRnVuY3Rpb24lJzogYXN5bmNGdW5jdGlvbixcblx0JyVBc3luY0Z1bmN0aW9uUHJvdG90eXBlJSc6IGFzeW5jRnVuY3Rpb24gPyBhc3luY0Z1bmN0aW9uLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcblx0JyVBc3luY0dlbmVyYXRvciUnOiBhc3luY0dlbiA/IGdldFByb3RvKGFzeW5jR2VuSXRlcmF0b3IpIDogdW5kZWZpbmVkLFxuXHQnJUFzeW5jR2VuZXJhdG9yRnVuY3Rpb24lJzogYXN5bmNHZW5GdW5jdGlvbixcblx0JyVBc3luY0dlbmVyYXRvclByb3RvdHlwZSUnOiBhc3luY0dlbkZ1bmN0aW9uID8gYXN5bmNHZW5GdW5jdGlvbi5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG5cdCclQXN5bmNJdGVyYXRvclByb3RvdHlwZSUnOiBhc3luY0dlbkl0ZXJhdG9yICYmIGhhc1N5bWJvbHMgJiYgU3ltYm9sLmFzeW5jSXRlcmF0b3IgPyBhc3luY0dlbkl0ZXJhdG9yW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIDogdW5kZWZpbmVkLFxuXHQnJUF0b21pY3MlJzogdHlwZW9mIEF0b21pY3MgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogQXRvbWljcyxcblx0JyVCb29sZWFuJSc6IEJvb2xlYW4sXG5cdCclQm9vbGVhblByb3RvdHlwZSUnOiBCb29sZWFuLnByb3RvdHlwZSxcblx0JyVEYXRhVmlldyUnOiB0eXBlb2YgRGF0YVZpZXcgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogRGF0YVZpZXcsXG5cdCclRGF0YVZpZXdQcm90b3R5cGUlJzogdHlwZW9mIERhdGFWaWV3ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IERhdGFWaWV3LnByb3RvdHlwZSxcblx0JyVEYXRlJSc6IERhdGUsXG5cdCclRGF0ZVByb3RvdHlwZSUnOiBEYXRlLnByb3RvdHlwZSxcblx0JyVkZWNvZGVVUkklJzogZGVjb2RlVVJJLFxuXHQnJWRlY29kZVVSSUNvbXBvbmVudCUnOiBkZWNvZGVVUklDb21wb25lbnQsXG5cdCclZW5jb2RlVVJJJSc6IGVuY29kZVVSSSxcblx0JyVlbmNvZGVVUklDb21wb25lbnQlJzogZW5jb2RlVVJJQ29tcG9uZW50LFxuXHQnJUVycm9yJSc6IEVycm9yLFxuXHQnJUVycm9yUHJvdG90eXBlJSc6IEVycm9yLnByb3RvdHlwZSxcblx0JyVldmFsJSc6IGV2YWwsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZXZhbFxuXHQnJUV2YWxFcnJvciUnOiBFdmFsRXJyb3IsXG5cdCclRXZhbEVycm9yUHJvdG90eXBlJSc6IEV2YWxFcnJvci5wcm90b3R5cGUsXG5cdCclRmxvYXQzMkFycmF5JSc6IHR5cGVvZiBGbG9hdDMyQXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogRmxvYXQzMkFycmF5LFxuXHQnJUZsb2F0MzJBcnJheVByb3RvdHlwZSUnOiB0eXBlb2YgRmxvYXQzMkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEZsb2F0MzJBcnJheS5wcm90b3R5cGUsXG5cdCclRmxvYXQ2NEFycmF5JSc6IHR5cGVvZiBGbG9hdDY0QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogRmxvYXQ2NEFycmF5LFxuXHQnJUZsb2F0NjRBcnJheVByb3RvdHlwZSUnOiB0eXBlb2YgRmxvYXQ2NEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEZsb2F0NjRBcnJheS5wcm90b3R5cGUsXG5cdCclRnVuY3Rpb24lJzogRnVuY3Rpb24sXG5cdCclRnVuY3Rpb25Qcm90b3R5cGUlJzogRnVuY3Rpb24ucHJvdG90eXBlLFxuXHQnJUdlbmVyYXRvciUnOiBnZW5lcmF0b3IgPyBnZXRQcm90byhnZW5lcmF0b3IoKSkgOiB1bmRlZmluZWQsXG5cdCclR2VuZXJhdG9yRnVuY3Rpb24lJzogZ2VuZXJhdG9yRnVuY3Rpb24sXG5cdCclR2VuZXJhdG9yUHJvdG90eXBlJSc6IGdlbmVyYXRvckZ1bmN0aW9uID8gZ2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuXHQnJUludDhBcnJheSUnOiB0eXBlb2YgSW50OEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEludDhBcnJheSxcblx0JyVJbnQ4QXJyYXlQcm90b3R5cGUlJzogdHlwZW9mIEludDhBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBJbnQ4QXJyYXkucHJvdG90eXBlLFxuXHQnJUludDE2QXJyYXklJzogdHlwZW9mIEludDE2QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogSW50MTZBcnJheSxcblx0JyVJbnQxNkFycmF5UHJvdG90eXBlJSc6IHR5cGVvZiBJbnQxNkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEludDhBcnJheS5wcm90b3R5cGUsXG5cdCclSW50MzJBcnJheSUnOiB0eXBlb2YgSW50MzJBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBJbnQzMkFycmF5LFxuXHQnJUludDMyQXJyYXlQcm90b3R5cGUlJzogdHlwZW9mIEludDMyQXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogSW50MzJBcnJheS5wcm90b3R5cGUsXG5cdCclaXNGaW5pdGUlJzogaXNGaW5pdGUsXG5cdCclaXNOYU4lJzogaXNOYU4sXG5cdCclSXRlcmF0b3JQcm90b3R5cGUlJzogaGFzU3ltYm9scyA/IGdldFByb3RvKGdldFByb3RvKFtdW1N5bWJvbC5pdGVyYXRvcl0oKSkpIDogdW5kZWZpbmVkLFxuXHQnJUpTT04lJzogdHlwZW9mIEpTT04gPT09ICdvYmplY3QnID8gSlNPTiA6IHVuZGVmaW5lZCxcblx0JyVKU09OUGFyc2UlJzogdHlwZW9mIEpTT04gPT09ICdvYmplY3QnID8gSlNPTi5wYXJzZSA6IHVuZGVmaW5lZCxcblx0JyVNYXAlJzogdHlwZW9mIE1hcCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBNYXAsXG5cdCclTWFwSXRlcmF0b3JQcm90b3R5cGUlJzogdHlwZW9mIE1hcCA9PT0gJ3VuZGVmaW5lZCcgfHwgIWhhc1N5bWJvbHMgPyB1bmRlZmluZWQgOiBnZXRQcm90byhuZXcgTWFwKClbU3ltYm9sLml0ZXJhdG9yXSgpKSxcblx0JyVNYXBQcm90b3R5cGUlJzogdHlwZW9mIE1hcCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBNYXAucHJvdG90eXBlLFxuXHQnJU1hdGglJzogTWF0aCxcblx0JyVOdW1iZXIlJzogTnVtYmVyLFxuXHQnJU51bWJlclByb3RvdHlwZSUnOiBOdW1iZXIucHJvdG90eXBlLFxuXHQnJU9iamVjdCUnOiBPYmplY3QsXG5cdCclT2JqZWN0UHJvdG90eXBlJSc6IE9iamVjdC5wcm90b3R5cGUsXG5cdCclT2JqUHJvdG9fdG9TdHJpbmclJzogT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyxcblx0JyVPYmpQcm90b192YWx1ZU9mJSc6IE9iamVjdC5wcm90b3R5cGUudmFsdWVPZixcblx0JyVwYXJzZUZsb2F0JSc6IHBhcnNlRmxvYXQsXG5cdCclcGFyc2VJbnQlJzogcGFyc2VJbnQsXG5cdCclUHJvbWlzZSUnOiB0eXBlb2YgUHJvbWlzZSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBQcm9taXNlLFxuXHQnJVByb21pc2VQcm90b3R5cGUlJzogdHlwZW9mIFByb21pc2UgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogUHJvbWlzZS5wcm90b3R5cGUsXG5cdCclUHJvbWlzZVByb3RvX3RoZW4lJzogdHlwZW9mIFByb21pc2UgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogUHJvbWlzZS5wcm90b3R5cGUudGhlbixcblx0JyVQcm9taXNlX2FsbCUnOiB0eXBlb2YgUHJvbWlzZSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBQcm9taXNlLmFsbCxcblx0JyVQcm9taXNlX3JlamVjdCUnOiB0eXBlb2YgUHJvbWlzZSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBQcm9taXNlLnJlamVjdCxcblx0JyVQcm9taXNlX3Jlc29sdmUlJzogdHlwZW9mIFByb21pc2UgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogUHJvbWlzZS5yZXNvbHZlLFxuXHQnJVByb3h5JSc6IHR5cGVvZiBQcm94eSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBQcm94eSxcblx0JyVSYW5nZUVycm9yJSc6IFJhbmdlRXJyb3IsXG5cdCclUmFuZ2VFcnJvclByb3RvdHlwZSUnOiBSYW5nZUVycm9yLnByb3RvdHlwZSxcblx0JyVSZWZlcmVuY2VFcnJvciUnOiBSZWZlcmVuY2VFcnJvcixcblx0JyVSZWZlcmVuY2VFcnJvclByb3RvdHlwZSUnOiBSZWZlcmVuY2VFcnJvci5wcm90b3R5cGUsXG5cdCclUmVmbGVjdCUnOiB0eXBlb2YgUmVmbGVjdCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBSZWZsZWN0LFxuXHQnJVJlZ0V4cCUnOiBSZWdFeHAsXG5cdCclUmVnRXhwUHJvdG90eXBlJSc6IFJlZ0V4cC5wcm90b3R5cGUsXG5cdCclU2V0JSc6IHR5cGVvZiBTZXQgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogU2V0LFxuXHQnJVNldEl0ZXJhdG9yUHJvdG90eXBlJSc6IHR5cGVvZiBTZXQgPT09ICd1bmRlZmluZWQnIHx8ICFoYXNTeW1ib2xzID8gdW5kZWZpbmVkIDogZ2V0UHJvdG8obmV3IFNldCgpW1N5bWJvbC5pdGVyYXRvcl0oKSksXG5cdCclU2V0UHJvdG90eXBlJSc6IHR5cGVvZiBTZXQgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogU2V0LnByb3RvdHlwZSxcblx0JyVTaGFyZWRBcnJheUJ1ZmZlciUnOiB0eXBlb2YgU2hhcmVkQXJyYXlCdWZmZXIgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogU2hhcmVkQXJyYXlCdWZmZXIsXG5cdCclU2hhcmVkQXJyYXlCdWZmZXJQcm90b3R5cGUlJzogdHlwZW9mIFNoYXJlZEFycmF5QnVmZmVyID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFNoYXJlZEFycmF5QnVmZmVyLnByb3RvdHlwZSxcblx0JyVTdHJpbmclJzogU3RyaW5nLFxuXHQnJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJSc6IGhhc1N5bWJvbHMgPyBnZXRQcm90bygnJ1tTeW1ib2wuaXRlcmF0b3JdKCkpIDogdW5kZWZpbmVkLFxuXHQnJVN0cmluZ1Byb3RvdHlwZSUnOiBTdHJpbmcucHJvdG90eXBlLFxuXHQnJVN5bWJvbCUnOiBoYXNTeW1ib2xzID8gU3ltYm9sIDogdW5kZWZpbmVkLFxuXHQnJVN5bWJvbFByb3RvdHlwZSUnOiBoYXNTeW1ib2xzID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcblx0JyVTeW50YXhFcnJvciUnOiBTeW50YXhFcnJvcixcblx0JyVTeW50YXhFcnJvclByb3RvdHlwZSUnOiBTeW50YXhFcnJvci5wcm90b3R5cGUsXG5cdCclVGhyb3dUeXBlRXJyb3IlJzogVGhyb3dUeXBlRXJyb3IsXG5cdCclVHlwZWRBcnJheSUnOiBUeXBlZEFycmF5LFxuXHQnJVR5cGVkQXJyYXlQcm90b3R5cGUlJzogVHlwZWRBcnJheSA/IFR5cGVkQXJyYXkucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuXHQnJVR5cGVFcnJvciUnOiAkVHlwZUVycm9yLFxuXHQnJVR5cGVFcnJvclByb3RvdHlwZSUnOiAkVHlwZUVycm9yLnByb3RvdHlwZSxcblx0JyVVaW50OEFycmF5JSc6IHR5cGVvZiBVaW50OEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFVpbnQ4QXJyYXksXG5cdCclVWludDhBcnJheVByb3RvdHlwZSUnOiB0eXBlb2YgVWludDhBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBVaW50OEFycmF5LnByb3RvdHlwZSxcblx0JyVVaW50OENsYW1wZWRBcnJheSUnOiB0eXBlb2YgVWludDhDbGFtcGVkQXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogVWludDhDbGFtcGVkQXJyYXksXG5cdCclVWludDhDbGFtcGVkQXJyYXlQcm90b3R5cGUlJzogdHlwZW9mIFVpbnQ4Q2xhbXBlZEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFVpbnQ4Q2xhbXBlZEFycmF5LnByb3RvdHlwZSxcblx0JyVVaW50MTZBcnJheSUnOiB0eXBlb2YgVWludDE2QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogVWludDE2QXJyYXksXG5cdCclVWludDE2QXJyYXlQcm90b3R5cGUlJzogdHlwZW9mIFVpbnQxNkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFVpbnQxNkFycmF5LnByb3RvdHlwZSxcblx0JyVVaW50MzJBcnJheSUnOiB0eXBlb2YgVWludDMyQXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogVWludDMyQXJyYXksXG5cdCclVWludDMyQXJyYXlQcm90b3R5cGUlJzogdHlwZW9mIFVpbnQzMkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFVpbnQzMkFycmF5LnByb3RvdHlwZSxcblx0JyVVUklFcnJvciUnOiBVUklFcnJvcixcblx0JyVVUklFcnJvclByb3RvdHlwZSUnOiBVUklFcnJvci5wcm90b3R5cGUsXG5cdCclV2Vha01hcCUnOiB0eXBlb2YgV2Vha01hcCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBXZWFrTWFwLFxuXHQnJVdlYWtNYXBQcm90b3R5cGUlJzogdHlwZW9mIFdlYWtNYXAgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogV2Vha01hcC5wcm90b3R5cGUsXG5cdCclV2Vha1NldCUnOiB0eXBlb2YgV2Vha1NldCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBXZWFrU2V0LFxuXHQnJVdlYWtTZXRQcm90b3R5cGUlJzogdHlwZW9mIFdlYWtTZXQgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogV2Vha1NldC5wcm90b3R5cGVcbn07XG5cbnZhciBiaW5kID0gcmVxdWlyZSgnZnVuY3Rpb24tYmluZCcpO1xudmFyICRyZXBsYWNlID0gYmluZC5jYWxsKEZ1bmN0aW9uLmNhbGwsIFN0cmluZy5wcm90b3R5cGUucmVwbGFjZSk7XG5cbi8qIGFkYXB0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vbG9kYXNoL2xvZGFzaC9ibG9iLzQuMTcuMTUvZGlzdC9sb2Rhc2guanMjTDY3MzUtTDY3NDQgKi9cbnZhciByZVByb3BOYW1lID0gL1teJS5bXFxdXSt8XFxbKD86KC0/XFxkKyg/OlxcLlxcZCspPyl8KFtcIiddKSgoPzooPyFcXDIpW15cXFxcXXxcXFxcLikqPylcXDIpXFxdfCg/PSg/OlxcLnxcXFtcXF0pKD86XFwufFxcW1xcXXwlJCkpL2c7XG52YXIgcmVFc2NhcGVDaGFyID0gL1xcXFwoXFxcXCk/L2c7IC8qKiBVc2VkIHRvIG1hdGNoIGJhY2tzbGFzaGVzIGluIHByb3BlcnR5IHBhdGhzLiAqL1xudmFyIHN0cmluZ1RvUGF0aCA9IGZ1bmN0aW9uIHN0cmluZ1RvUGF0aChzdHJpbmcpIHtcblx0dmFyIHJlc3VsdCA9IFtdO1xuXHQkcmVwbGFjZShzdHJpbmcsIHJlUHJvcE5hbWUsIGZ1bmN0aW9uIChtYXRjaCwgbnVtYmVyLCBxdW90ZSwgc3ViU3RyaW5nKSB7XG5cdFx0cmVzdWx0W3Jlc3VsdC5sZW5ndGhdID0gcXVvdGUgPyAkcmVwbGFjZShzdWJTdHJpbmcsIHJlRXNjYXBlQ2hhciwgJyQxJykgOiAobnVtYmVyIHx8IG1hdGNoKTtcblx0fSk7XG5cdHJldHVybiByZXN1bHQ7XG59O1xuLyogZW5kIGFkYXB0YXRpb24gKi9cblxudmFyIGdldEJhc2VJbnRyaW5zaWMgPSBmdW5jdGlvbiBnZXRCYXNlSW50cmluc2ljKG5hbWUsIGFsbG93TWlzc2luZykge1xuXHRpZiAoIShuYW1lIGluIElOVFJJTlNJQ1MpKSB7XG5cdFx0dGhyb3cgbmV3IFN5bnRheEVycm9yKCdpbnRyaW5zaWMgJyArIG5hbWUgKyAnIGRvZXMgbm90IGV4aXN0IScpO1xuXHR9XG5cblx0Ly8gaXN0YW5idWwgaWdub3JlIGlmIC8vIGhvcGVmdWxseSB0aGlzIGlzIGltcG9zc2libGUgdG8gdGVzdCA6LSlcblx0aWYgKHR5cGVvZiBJTlRSSU5TSUNTW25hbWVdID09PSAndW5kZWZpbmVkJyAmJiAhYWxsb3dNaXNzaW5nKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2ludHJpbnNpYyAnICsgbmFtZSArICcgZXhpc3RzLCBidXQgaXMgbm90IGF2YWlsYWJsZS4gUGxlYXNlIGZpbGUgYW4gaXNzdWUhJyk7XG5cdH1cblxuXHRyZXR1cm4gSU5UUklOU0lDU1tuYW1lXTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gR2V0SW50cmluc2ljKG5hbWUsIGFsbG93TWlzc2luZykge1xuXHRpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnIHx8IG5hbWUubGVuZ3RoID09PSAwKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignaW50cmluc2ljIG5hbWUgbXVzdCBiZSBhIG5vbi1lbXB0eSBzdHJpbmcnKTtcblx0fVxuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIGFsbG93TWlzc2luZyAhPT0gJ2Jvb2xlYW4nKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignXCJhbGxvd01pc3NpbmdcIiBhcmd1bWVudCBtdXN0IGJlIGEgYm9vbGVhbicpO1xuXHR9XG5cblx0dmFyIHBhcnRzID0gc3RyaW5nVG9QYXRoKG5hbWUpO1xuXG5cdHZhciB2YWx1ZSA9IGdldEJhc2VJbnRyaW5zaWMoJyUnICsgKHBhcnRzLmxlbmd0aCA+IDAgPyBwYXJ0c1swXSA6ICcnKSArICclJywgYWxsb3dNaXNzaW5nKTtcblx0Zm9yICh2YXIgaSA9IDE7IGkgPCBwYXJ0cy5sZW5ndGg7IGkgKz0gMSkge1xuXHRcdGlmICh2YWx1ZSAhPSBudWxsKSB7XG5cdFx0XHRpZiAoJGdPUEQgJiYgKGkgKyAxKSA+PSBwYXJ0cy5sZW5ndGgpIHtcblx0XHRcdFx0dmFyIGRlc2MgPSAkZ09QRCh2YWx1ZSwgcGFydHNbaV0pO1xuXHRcdFx0XHRpZiAoIWFsbG93TWlzc2luZyAmJiAhKHBhcnRzW2ldIGluIHZhbHVlKSkge1xuXHRcdFx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdiYXNlIGludHJpbnNpYyBmb3IgJyArIG5hbWUgKyAnIGV4aXN0cywgYnV0IHRoZSBwcm9wZXJ0eSBpcyBub3QgYXZhaWxhYmxlLicpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHZhbHVlID0gZGVzYyA/IChkZXNjLmdldCB8fCBkZXNjLnZhbHVlKSA6IHZhbHVlW3BhcnRzW2ldXTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhbHVlID0gdmFsdWVbcGFydHNbaV1dO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRyZXR1cm4gdmFsdWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYmluZCA9IHJlcXVpcmUoJ2Z1bmN0aW9uLWJpbmQnKTtcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4uL0dldEludHJpbnNpYycpO1xuXG52YXIgJGFwcGx5ID0gR2V0SW50cmluc2ljKCclRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5JScpO1xudmFyICRjYWxsID0gR2V0SW50cmluc2ljKCclRnVuY3Rpb24ucHJvdG90eXBlLmNhbGwlJyk7XG52YXIgJHJlZmxlY3RBcHBseSA9IEdldEludHJpbnNpYygnJVJlZmxlY3QuYXBwbHklJywgdHJ1ZSkgfHwgYmluZC5jYWxsKCRjYWxsLCAkYXBwbHkpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNhbGxCaW5kKCkge1xuXHRyZXR1cm4gJHJlZmxlY3RBcHBseShiaW5kLCAkY2FsbCwgYXJndW1lbnRzKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzLmFwcGx5ID0gZnVuY3Rpb24gYXBwbHlCaW5kKCkge1xuXHRyZXR1cm4gJHJlZmxlY3RBcHBseShiaW5kLCAkYXBwbHksIGFyZ3VtZW50cyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgbnVtYmVySXNOYU4gPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0cmV0dXJuIHZhbHVlICE9PSB2YWx1ZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXMoYSwgYikge1xuXHRpZiAoYSA9PT0gMCAmJiBiID09PSAwKSB7XG5cdFx0cmV0dXJuIDEgLyBhID09PSAxIC8gYjtcblx0fVxuXHRpZiAoYSA9PT0gYikge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cdGlmIChudW1iZXJJc05hTihhKSAmJiBudW1iZXJJc05hTihiKSkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cdHJldHVybiBmYWxzZTtcbn07XG5cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldFBvbHlmaWxsKCkge1xuXHRyZXR1cm4gdHlwZW9mIE9iamVjdC5pcyA9PT0gJ2Z1bmN0aW9uJyA/IE9iamVjdC5pcyA6IGltcGxlbWVudGF0aW9uO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGdldFBvbHlmaWxsID0gcmVxdWlyZSgnLi9wb2x5ZmlsbCcpO1xudmFyIGRlZmluZSA9IHJlcXVpcmUoJ2RlZmluZS1wcm9wZXJ0aWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2hpbU9iamVjdElzKCkge1xuXHR2YXIgcG9seWZpbGwgPSBnZXRQb2x5ZmlsbCgpO1xuXHRkZWZpbmUoT2JqZWN0LCB7IGlzOiBwb2x5ZmlsbCB9LCB7XG5cdFx0aXM6IGZ1bmN0aW9uIHRlc3RPYmplY3RJcygpIHtcblx0XHRcdHJldHVybiBPYmplY3QuaXMgIT09IHBvbHlmaWxsO1xuXHRcdH1cblx0fSk7XG5cdHJldHVybiBwb2x5ZmlsbDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBkZWZpbmUgPSByZXF1aXJlKCdkZWZpbmUtcHJvcGVydGllcycpO1xudmFyIGNhbGxCaW5kID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvaGVscGVycy9jYWxsQmluZCcpO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG52YXIgZ2V0UG9seWZpbGwgPSByZXF1aXJlKCcuL3BvbHlmaWxsJyk7XG52YXIgc2hpbSA9IHJlcXVpcmUoJy4vc2hpbScpO1xuXG52YXIgcG9seWZpbGwgPSBjYWxsQmluZChnZXRQb2x5ZmlsbCgpLCBPYmplY3QpO1xuXG5kZWZpbmUocG9seWZpbGwsIHtcblx0Z2V0UG9seWZpbGw6IGdldFBvbHlmaWxsLFxuXHRpbXBsZW1lbnRhdGlvbjogaW1wbGVtZW50YXRpb24sXG5cdHNoaW06IHNoaW1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBvbHlmaWxsO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzU3ltYm9scyA9IHJlcXVpcmUoJ2hhcy1zeW1ib2xzJykoKTtcbnZhciBoYXNUb1N0cmluZ1RhZyA9IGhhc1N5bWJvbHMgJiYgdHlwZW9mIFN5bWJvbC50b1N0cmluZ1RhZyA9PT0gJ3N5bWJvbCc7XG52YXIgaGFzT3duUHJvcGVydHk7XG52YXIgcmVnZXhFeGVjO1xudmFyIGlzUmVnZXhNYXJrZXI7XG52YXIgYmFkU3RyaW5naWZpZXI7XG5cbmlmIChoYXNUb1N0cmluZ1RhZykge1xuXHRoYXNPd25Qcm9wZXJ0eSA9IEZ1bmN0aW9uLmNhbGwuYmluZChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5KTtcblx0cmVnZXhFeGVjID0gRnVuY3Rpb24uY2FsbC5iaW5kKFJlZ0V4cC5wcm90b3R5cGUuZXhlYyk7XG5cdGlzUmVnZXhNYXJrZXIgPSB7fTtcblxuXHR2YXIgdGhyb3dSZWdleE1hcmtlciA9IGZ1bmN0aW9uICgpIHtcblx0XHR0aHJvdyBpc1JlZ2V4TWFya2VyO1xuXHR9O1xuXHRiYWRTdHJpbmdpZmllciA9IHtcblx0XHR0b1N0cmluZzogdGhyb3dSZWdleE1hcmtlcixcblx0XHR2YWx1ZU9mOiB0aHJvd1JlZ2V4TWFya2VyXG5cdH07XG5cblx0aWYgKHR5cGVvZiBTeW1ib2wudG9QcmltaXRpdmUgPT09ICdzeW1ib2wnKSB7XG5cdFx0YmFkU3RyaW5naWZpZXJbU3ltYm9sLnRvUHJpbWl0aXZlXSA9IHRocm93UmVnZXhNYXJrZXI7XG5cdH1cbn1cblxudmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciBnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciByZWdleENsYXNzID0gJ1tvYmplY3QgUmVnRXhwXSc7XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzVG9TdHJpbmdUYWdcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG5cdD8gZnVuY3Rpb24gaXNSZWdleCh2YWx1ZSkge1xuXHRcdGlmICghdmFsdWUgfHwgdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHZhciBkZXNjcmlwdG9yID0gZ09QRCh2YWx1ZSwgJ2xhc3RJbmRleCcpO1xuXHRcdHZhciBoYXNMYXN0SW5kZXhEYXRhUHJvcGVydHkgPSBkZXNjcmlwdG9yICYmIGhhc093blByb3BlcnR5KGRlc2NyaXB0b3IsICd2YWx1ZScpO1xuXHRcdGlmICghaGFzTGFzdEluZGV4RGF0YVByb3BlcnR5KSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0dHJ5IHtcblx0XHRcdHJlZ2V4RXhlYyh2YWx1ZSwgYmFkU3RyaW5naWZpZXIpO1xuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdHJldHVybiBlID09PSBpc1JlZ2V4TWFya2VyO1xuXHRcdH1cblx0fVxuXHQ6IGZ1bmN0aW9uIGlzUmVnZXgodmFsdWUpIHtcblx0XHQvLyBJbiBvbGRlciBicm93c2VycywgdHlwZW9mIHJlZ2V4IGluY29ycmVjdGx5IHJldHVybnMgJ2Z1bmN0aW9uJ1xuXHRcdGlmICghdmFsdWUgfHwgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbHVlICE9PSAnZnVuY3Rpb24nKSkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0b1N0ci5jYWxsKHZhbHVlKSA9PT0gcmVnZXhDbGFzcztcblx0fTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyICRPYmplY3QgPSBPYmplY3Q7XG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmbGFncygpIHtcblx0aWYgKHRoaXMgIT0gbnVsbCAmJiB0aGlzICE9PSAkT2JqZWN0KHRoaXMpKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ1JlZ0V4cC5wcm90b3R5cGUuZmxhZ3MgZ2V0dGVyIGNhbGxlZCBvbiBub24tb2JqZWN0Jyk7XG5cdH1cblx0dmFyIHJlc3VsdCA9ICcnO1xuXHRpZiAodGhpcy5nbG9iYWwpIHtcblx0XHRyZXN1bHQgKz0gJ2cnO1xuXHR9XG5cdGlmICh0aGlzLmlnbm9yZUNhc2UpIHtcblx0XHRyZXN1bHQgKz0gJ2knO1xuXHR9XG5cdGlmICh0aGlzLm11bHRpbGluZSkge1xuXHRcdHJlc3VsdCArPSAnbSc7XG5cdH1cblx0aWYgKHRoaXMuZG90QWxsKSB7XG5cdFx0cmVzdWx0ICs9ICdzJztcblx0fVxuXHRpZiAodGhpcy51bmljb2RlKSB7XG5cdFx0cmVzdWx0ICs9ICd1Jztcblx0fVxuXHRpZiAodGhpcy5zdGlja3kpIHtcblx0XHRyZXN1bHQgKz0gJ3knO1xuXHR9XG5cdHJldHVybiByZXN1bHQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG5cbnZhciBzdXBwb3J0c0Rlc2NyaXB0b3JzID0gcmVxdWlyZSgnZGVmaW5lLXByb3BlcnRpZXMnKS5zdXBwb3J0c0Rlc2NyaXB0b3JzO1xudmFyICRnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldFBvbHlmaWxsKCkge1xuXHRpZiAoIXN1cHBvcnRzRGVzY3JpcHRvcnMpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignUmVnRXhwLnByb3RvdHlwZS5mbGFncyByZXF1aXJlcyBhIHRydWUgRVM1IGVudmlyb25tZW50IHRoYXQgc3VwcG9ydHMgcHJvcGVydHkgZGVzY3JpcHRvcnMnKTtcblx0fVxuXHRpZiAoKC9hL21pZykuZmxhZ3MgPT09ICdnaW0nKSB7XG5cdFx0dmFyIGRlc2NyaXB0b3IgPSAkZ09QRChSZWdFeHAucHJvdG90eXBlLCAnZmxhZ3MnKTtcblx0XHRpZiAoZGVzY3JpcHRvciAmJiB0eXBlb2YgZGVzY3JpcHRvci5nZXQgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mICgvYS8pLmRvdEFsbCA9PT0gJ2Jvb2xlYW4nKSB7XG5cdFx0XHRyZXR1cm4gZGVzY3JpcHRvci5nZXQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBpbXBsZW1lbnRhdGlvbjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBzdXBwb3J0c0Rlc2NyaXB0b3JzID0gcmVxdWlyZSgnZGVmaW5lLXByb3BlcnRpZXMnKS5zdXBwb3J0c0Rlc2NyaXB0b3JzO1xudmFyIGdldFBvbHlmaWxsID0gcmVxdWlyZSgnLi9wb2x5ZmlsbCcpO1xudmFyIGdPUEQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIFR5cGVFcnIgPSBUeXBlRXJyb3I7XG52YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgcmVnZXggPSAvYS87XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2hpbUZsYWdzKCkge1xuXHRpZiAoIXN1cHBvcnRzRGVzY3JpcHRvcnMgfHwgIWdldFByb3RvKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnIoJ1JlZ0V4cC5wcm90b3R5cGUuZmxhZ3MgcmVxdWlyZXMgYSB0cnVlIEVTNSBlbnZpcm9ubWVudCB0aGF0IHN1cHBvcnRzIHByb3BlcnR5IGRlc2NyaXB0b3JzJyk7XG5cdH1cblx0dmFyIHBvbHlmaWxsID0gZ2V0UG9seWZpbGwoKTtcblx0dmFyIHByb3RvID0gZ2V0UHJvdG8ocmVnZXgpO1xuXHR2YXIgZGVzY3JpcHRvciA9IGdPUEQocHJvdG8sICdmbGFncycpO1xuXHRpZiAoIWRlc2NyaXB0b3IgfHwgZGVzY3JpcHRvci5nZXQgIT09IHBvbHlmaWxsKSB7XG5cdFx0ZGVmaW5lUHJvcGVydHkocHJvdG8sICdmbGFncycsIHtcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0Z2V0OiBwb2x5ZmlsbFxuXHRcdH0pO1xuXHR9XG5cdHJldHVybiBwb2x5ZmlsbDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBkZWZpbmUgPSByZXF1aXJlKCdkZWZpbmUtcHJvcGVydGllcycpO1xudmFyIGNhbGxCaW5kID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvaGVscGVycy9jYWxsQmluZCcpO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG52YXIgZ2V0UG9seWZpbGwgPSByZXF1aXJlKCcuL3BvbHlmaWxsJyk7XG52YXIgc2hpbSA9IHJlcXVpcmUoJy4vc2hpbScpO1xuXG52YXIgZmxhZ3NCb3VuZCA9IGNhbGxCaW5kKGltcGxlbWVudGF0aW9uKTtcblxuZGVmaW5lKGZsYWdzQm91bmQsIHtcblx0Z2V0UG9seWZpbGw6IGdldFBvbHlmaWxsLFxuXHRpbXBsZW1lbnRhdGlvbjogaW1wbGVtZW50YXRpb24sXG5cdHNoaW06IHNoaW1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZsYWdzQm91bmQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBnZXREYXkgPSBEYXRlLnByb3RvdHlwZS5nZXREYXk7XG52YXIgdHJ5RGF0ZU9iamVjdCA9IGZ1bmN0aW9uIHRyeURhdGVHZXREYXlDYWxsKHZhbHVlKSB7XG5cdHRyeSB7XG5cdFx0Z2V0RGF5LmNhbGwodmFsdWUpO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59O1xuXG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGRhdGVDbGFzcyA9ICdbb2JqZWN0IERhdGVdJztcbnZhciBoYXNUb1N0cmluZ1RhZyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbC50b1N0cmluZ1RhZyA9PT0gJ3N5bWJvbCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNEYXRlT2JqZWN0KHZhbHVlKSB7XG5cdGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnIHx8IHZhbHVlID09PSBudWxsKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdHJldHVybiBoYXNUb1N0cmluZ1RhZyA/IHRyeURhdGVPYmplY3QodmFsdWUpIDogdG9TdHIuY2FsbCh2YWx1ZSkgPT09IGRhdGVDbGFzcztcbn07XG4iLCJ2YXIgb2JqZWN0S2V5cyA9IHJlcXVpcmUoJ29iamVjdC1rZXlzJyk7XG52YXIgaXNBcmd1bWVudHMgPSByZXF1aXJlKCdpcy1hcmd1bWVudHMnKTtcbnZhciBpcyA9IHJlcXVpcmUoJ29iamVjdC1pcycpO1xudmFyIGlzUmVnZXggPSByZXF1aXJlKCdpcy1yZWdleCcpO1xudmFyIGZsYWdzID0gcmVxdWlyZSgncmVnZXhwLnByb3RvdHlwZS5mbGFncycpO1xudmFyIGlzRGF0ZSA9IHJlcXVpcmUoJ2lzLWRhdGUtb2JqZWN0Jyk7XG5cbnZhciBnZXRUaW1lID0gRGF0ZS5wcm90b3R5cGUuZ2V0VGltZTtcblxuZnVuY3Rpb24gZGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG9wdGlvbnMpIHtcbiAgdmFyIG9wdHMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIC8vIDcuMS4gQWxsIGlkZW50aWNhbCB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGFzIGRldGVybWluZWQgYnkgPT09LlxuICBpZiAob3B0cy5zdHJpY3QgPyBpcyhhY3R1YWwsIGV4cGVjdGVkKSA6IGFjdHVhbCA9PT0gZXhwZWN0ZWQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIDcuMy4gT3RoZXIgcGFpcnMgdGhhdCBkbyBub3QgYm90aCBwYXNzIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0JywgZXF1aXZhbGVuY2UgaXMgZGV0ZXJtaW5lZCBieSA9PS5cbiAgaWYgKCFhY3R1YWwgfHwgIWV4cGVjdGVkIHx8ICh0eXBlb2YgYWN0dWFsICE9PSAnb2JqZWN0JyAmJiB0eXBlb2YgZXhwZWN0ZWQgIT09ICdvYmplY3QnKSkge1xuICAgIHJldHVybiBvcHRzLnN0cmljdCA/IGlzKGFjdHVhbCwgZXhwZWN0ZWQpIDogYWN0dWFsID09IGV4cGVjdGVkO1xuICB9XG5cbiAgLypcbiAgICogNy40LiBGb3IgYWxsIG90aGVyIE9iamVjdCBwYWlycywgaW5jbHVkaW5nIEFycmF5IG9iamVjdHMsIGVxdWl2YWxlbmNlIGlzXG4gICAqIGRldGVybWluZWQgYnkgaGF2aW5nIHRoZSBzYW1lIG51bWJlciBvZiBvd25lZCBwcm9wZXJ0aWVzIChhcyB2ZXJpZmllZFxuICAgKiB3aXRoIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCksIHRoZSBzYW1lIHNldCBvZiBrZXlzXG4gICAqIChhbHRob3VnaCBub3QgbmVjZXNzYXJpbHkgdGhlIHNhbWUgb3JkZXIpLCBlcXVpdmFsZW50IHZhbHVlcyBmb3IgZXZlcnlcbiAgICogY29ycmVzcG9uZGluZyBrZXksIGFuZCBhbiBpZGVudGljYWwgJ3Byb3RvdHlwZScgcHJvcGVydHkuIE5vdGU6IHRoaXNcbiAgICogYWNjb3VudHMgZm9yIGJvdGggbmFtZWQgYW5kIGluZGV4ZWQgcHJvcGVydGllcyBvbiBBcnJheXMuXG4gICAqL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlLWJlZm9yZS1kZWZpbmVcbiAgcmV0dXJuIG9iakVxdWl2KGFjdHVhbCwgZXhwZWN0ZWQsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZE9yTnVsbCh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gaXNCdWZmZXIoeCkge1xuICBpZiAoIXggfHwgdHlwZW9mIHggIT09ICdvYmplY3QnIHx8IHR5cGVvZiB4Lmxlbmd0aCAhPT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKHR5cGVvZiB4LmNvcHkgIT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIHguc2xpY2UgIT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKHgubGVuZ3RoID4gMCAmJiB0eXBlb2YgeFswXSAhPT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIG9iakVxdWl2KGEsIGIsIG9wdHMpIHtcbiAgLyogZXNsaW50IG1heC1zdGF0ZW1lbnRzOiBbMiwgNTBdICovXG4gIHZhciBpLCBrZXk7XG4gIGlmICh0eXBlb2YgYSAhPT0gdHlwZW9mIGIpIHsgcmV0dXJuIGZhbHNlOyB9XG4gIGlmIChpc1VuZGVmaW5lZE9yTnVsbChhKSB8fCBpc1VuZGVmaW5lZE9yTnVsbChiKSkgeyByZXR1cm4gZmFsc2U7IH1cblxuICAvLyBhbiBpZGVudGljYWwgJ3Byb3RvdHlwZScgcHJvcGVydHkuXG4gIGlmIChhLnByb3RvdHlwZSAhPT0gYi5wcm90b3R5cGUpIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgaWYgKGlzQXJndW1lbnRzKGEpICE9PSBpc0FyZ3VtZW50cyhiKSkgeyByZXR1cm4gZmFsc2U7IH1cblxuICB2YXIgYUlzUmVnZXggPSBpc1JlZ2V4KGEpO1xuICB2YXIgYklzUmVnZXggPSBpc1JlZ2V4KGIpO1xuICBpZiAoYUlzUmVnZXggIT09IGJJc1JlZ2V4KSB7IHJldHVybiBmYWxzZTsgfVxuICBpZiAoYUlzUmVnZXggfHwgYklzUmVnZXgpIHtcbiAgICByZXR1cm4gYS5zb3VyY2UgPT09IGIuc291cmNlICYmIGZsYWdzKGEpID09PSBmbGFncyhiKTtcbiAgfVxuXG4gIGlmIChpc0RhdGUoYSkgJiYgaXNEYXRlKGIpKSB7XG4gICAgcmV0dXJuIGdldFRpbWUuY2FsbChhKSA9PT0gZ2V0VGltZS5jYWxsKGIpO1xuICB9XG5cbiAgdmFyIGFJc0J1ZmZlciA9IGlzQnVmZmVyKGEpO1xuICB2YXIgYklzQnVmZmVyID0gaXNCdWZmZXIoYik7XG4gIGlmIChhSXNCdWZmZXIgIT09IGJJc0J1ZmZlcikgeyByZXR1cm4gZmFsc2U7IH1cbiAgaWYgKGFJc0J1ZmZlciB8fCBiSXNCdWZmZXIpIHsgLy8gJiYgd291bGQgd29yayB0b28sIGJlY2F1c2UgYm90aCBhcmUgdHJ1ZSBvciBib3RoIGZhbHNlIGhlcmVcbiAgICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSB7IHJldHVybiBmYWxzZTsgfVxuICAgIGZvciAoaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoYVtpXSAhPT0gYltpXSkgeyByZXR1cm4gZmFsc2U7IH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodHlwZW9mIGEgIT09IHR5cGVvZiBiKSB7IHJldHVybiBmYWxzZTsgfVxuXG4gIHRyeSB7XG4gICAgdmFyIGthID0gb2JqZWN0S2V5cyhhKTtcbiAgICB2YXIga2IgPSBvYmplY3RLZXlzKGIpO1xuICB9IGNhdGNoIChlKSB7IC8vIGhhcHBlbnMgd2hlbiBvbmUgaXMgYSBzdHJpbmcgbGl0ZXJhbCBhbmQgdGhlIG90aGVyIGlzbid0XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIGhhdmluZyB0aGUgc2FtZSBudW1iZXIgb2Ygb3duZWQgcHJvcGVydGllcyAoa2V5cyBpbmNvcnBvcmF0ZXMgaGFzT3duUHJvcGVydHkpXG4gIGlmIChrYS5sZW5ndGggIT09IGtiLmxlbmd0aCkgeyByZXR1cm4gZmFsc2U7IH1cblxuICAvLyB0aGUgc2FtZSBzZXQgb2Yga2V5cyAoYWx0aG91Z2ggbm90IG5lY2Vzc2FyaWx5IHRoZSBzYW1lIG9yZGVyKSxcbiAga2Euc29ydCgpO1xuICBrYi5zb3J0KCk7XG4gIC8vIH5+fmNoZWFwIGtleSB0ZXN0XG4gIGZvciAoaSA9IGthLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgaWYgKGthW2ldICE9IGtiW2ldKSB7IHJldHVybiBmYWxzZTsgfVxuICB9XG4gIC8vIGVxdWl2YWxlbnQgdmFsdWVzIGZvciBldmVyeSBjb3JyZXNwb25kaW5nIGtleSwgYW5kIH5+fnBvc3NpYmx5IGV4cGVuc2l2ZSBkZWVwIHRlc3RcbiAgZm9yIChpID0ga2EubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBrZXkgPSBrYVtpXTtcbiAgICBpZiAoIWRlZXBFcXVhbChhW2tleV0sIGJba2V5XSwgb3B0cykpIHsgcmV0dXJuIGZhbHNlOyB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkZWVwRXF1YWw7XG4iLCJjb25zdCB7ZGVza3RvcENhcHR1cmVyfSA9IHJlcXVpcmUoJ2VsZWN0cm9uJylcblxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0U2NyZWVuTWVkaWFzKCkge1xuICAgIGxldCBzdHJlYW0gPSBudWxsXG4gICAgYXdhaXQgZGVza3RvcENhcHR1cmVyLmdldFNvdXJjZXMoe3R5cGVzOiBbJ3dpbmRvdycsICdzY3JlZW4nXX0pLnRoZW4oYXN5bmMgc291cmNlcyA9PiB7XG4gICAgICAgIGZvciAoY29uc3Qgc291cmNlIG9mIHNvdXJjZXMpIHtcbiAgICAgICAgICAgIGlmIChzb3VyY2UubmFtZSA9PT0gJ0VudGlyZSBTY3JlZW4nKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgc3RyZWFtID0gYXdhaXQgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEoe1xuICAgICAgICAgICAgICAgICAgICAgICAgYXVkaW86IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmlkZW86IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYW5kYXRvcnk6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hyb21lTWVkaWFTb3VyY2U6ICdkZXNrdG9wJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hyb21lTWVkaWFTb3VyY2VJZDogc291cmNlLmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5XaWR0aDogMTI4MCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4V2lkdGg6IDEyODAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbkhlaWdodDogNzIwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhIZWlnaHQ6IDcyMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSlcbiAgICByZXR1cm4gc3RyZWFtXG59IiwiLy8gaW1wb3J0ICogYXMgY29uZmlnIGZyb20gJy4vY29uZmlnJztcbmltcG9ydCAqIGFzIG1lZGlhc291cCBmcm9tICdtZWRpYXNvdXAtY2xpZW50JztcbmltcG9ydCBkZWVwRXF1YWwgZnJvbSAnZGVlcC1lcXVhbCc7XG5pbXBvcnQge2dldFNjcmVlbk1lZGlhc30gZnJvbSAnLi4vcmVuZGVyZXInXG5cbmNvbnN0ICQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yLmJpbmQoZG9jdW1lbnQpO1xuY29uc3QgJCQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsLmJpbmQoZG9jdW1lbnQpO1xuXG4vL1xuLy8gZXhwb3J0IGFsbCB0aGUgcmVmZXJlbmNlcyB3ZSB1c2UgaW50ZXJuYWxseSB0byBtYW5hZ2UgY2FsbCBzdGF0ZSxcbi8vIHRvIG1ha2UgaXQgZWFzeSB0byB0aW5rZXIgZnJvbSB0aGUganMgY29uc29sZS4gZm9yIGV4YW1wbGU6XG4vL1xuLy8gICBgQ2xpZW50LmNhbVZpZGVvUHJvZHVjZXIucGF1c2VkYFxuLy8g6ZqP5py655Sf5oiQ5LiA5LiqcGVlcmlkXG5leHBvcnQgY29uc3QgbXlQZWVySWQgPSB1dWlkdjQoKTtcbi8vIOWFqOWxgOWPmOmHj1xuZXhwb3J0IGxldCBkZXZpY2UsXG4gICAgam9pbmVkLFxuICAgIGxvY2FsQ2FtLFxuICAgIGxvY2FsU2NyZWVuLFxuICAgIHJlY3ZUcmFuc3BvcnQsXG4gICAgc2VuZFRyYW5zcG9ydCxcbiAgICBjYW1WaWRlb1Byb2R1Y2VyLFxuICAgIGNhbUF1ZGlvUHJvZHVjZXIsXG4gICAgc2NyZWVuVmlkZW9Qcm9kdWNlcixcbiAgICBzY3JlZW5BdWRpb1Byb2R1Y2VyLFxuICAgIGN1cnJlbnRBY3RpdmVTcGVha2VyID0ge30sXG4gICAgbGFzdFBvbGxTeW5jRGF0YSA9IHt9LFxuICAgIGNvbnN1bWVycyA9IFtdLFxuICAgIHBvbGxpbmdJbnRlcnZhbDtcblxuLy9cbi8vIGVudHJ5IHBvaW50IC0tIGNhbGxlZCBieSBkb2N1bWVudC5ib2R5Lm9ubG9hZFxuLy9cbi8vIOmhtemdouWKoOi9veWujOaIkOWQjuWIneWni+WMluWHveaVsFxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4oKSB7XG4gICAgY29uc29sZS5sb2coYHN0YXJ0aW5nIHVwIC4uLiBteSBwZWVySWQgaXMgJHtteVBlZXJJZH1gKTtcbiAgICB0cnkge1xuICAgICAgICAvLyDmo4Dmn6XmtY/op4jlmajmmK/lkKbmlK/mjIHop4bpopHpgJror51cbiAgICAgICAgZGV2aWNlID0gbmV3IG1lZGlhc291cC5EZXZpY2UoKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChlLm5hbWUgPT09ICdVbnN1cHBvcnRlZEVycm9yJykge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignYnJvd3NlciBub3Qgc3VwcG9ydGVkIGZvciB2aWRlbyBjYWxscycpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIHVzZSBzZW5kQmVhY29uIHRvIHRlbGwgdGhlIHNlcnZlciB3ZSdyZSBkaXNjb25uZWN0aW5nIHdoZW5cbiAgICAvLyB0aGUgcGFnZSB1bmxvYWRzXG4gICAgLy8g5b2T5YWz6Zet6aG16Z2i55qE5pe25YCZ6LCD55So56a75byA5oi/6Ze05oyH5LukXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3VubG9hZCcsICgpID0+IHNpZygnbGVhdmUnLCB7fSwgdHJ1ZSkpO1xufVxuXG4vL1xuLy8gbWVldGluZyBjb250cm9sIGFjdGlvbnNcbi8vXG4vLyDliqDlhaXmiL/pl7RcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBqb2luUm9vbSgpIHtcbiAgICBpZiAoam9pbmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zb2xlLmxvZygnam9pbiByb29tJyk7XG4gICAgJCgnI2pvaW4tY29udHJvbCcpLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG5cbiAgICB0cnkge1xuICAgICAgICAvLyBzaWduYWwgdGhhdCB3ZSdyZSBhIG5ldyBwZWVyIGFuZCBpbml0aWFsaXplIG91clxuICAgICAgICAvLyBtZWRpYXNvdXAtY2xpZW50IGRldmljZSwgaWYgdGhpcyBpcyBvdXIgZmlyc3QgdGltZSBjb25uZWN0aW5nXG4gICAgICAgIC8vIOiwg+eUqOWKoOWFpeaMh+S7pO+8jOiOt+WPlnJ0Y+aUr+aMgeeahOiDveWKm1xuICAgICAgICBsZXQge3JvdXRlclJ0cENhcGFiaWxpdGllc30gPSBhd2FpdCBzaWcoJ2pvaW4tYXMtbmV3LXBlZXInKTtcbiAgICAgICAgLy8g55So5pyN5Yqh56uv5pSv5oyB55qE6IO95Yqb5Yqg6L296K6+5aSH5a+56LGhXG4gICAgICAgIGlmICghZGV2aWNlLmxvYWRlZCkge1xuICAgICAgICAgICAgYXdhaXQgZGV2aWNlLmxvYWQoe3JvdXRlclJ0cENhcGFiaWxpdGllc30pO1xuICAgICAgICB9XG4gICAgICAgIGpvaW5lZCA9IHRydWU7XG4gICAgICAgICQoJyNsZWF2ZS1yb29tJykuc3R5bGUuZGlzcGxheSA9ICdpbml0aWFsJztcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBzdXBlci1zaW1wbGUgc2lnbmFsaW5nOiBsZXQncyBwb2xsIGF0IDEtc2Vjb25kIGludGVydmFsc1xuICAgIC8vIOavj+enkuWPkemAgea1j+iniOWZqOWQjOatpeaMh+S7pCAg5L+d5oyB5Zyo57q/54q25oCBXG4gICAgcG9sbGluZ0ludGVydmFsID0gc2V0SW50ZXJ2YWwoYXN5bmMgKCkgPT4ge1xuICAgICAgICBsZXQge2Vycm9yfSA9IGF3YWl0IHBvbGxBbmRVcGRhdGUoKTtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKHBvbGxpbmdJbnRlcnZhbCk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgICAgIH1cbiAgICB9LCAxMDAwKTtcbn1cblxuLy8g6aG16Z2i54K55Ye75LiK5Lyg5pGE5YOP5aS06KeG6aKR5rWBXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2VuZENhbWVyYVN0cmVhbXMoKSB7XG4gICAgY29uc29sZS5sb2coJ3NlbmQgY2FtZXJhIHN0cmVhbXMnKTtcbiAgICAkKCcjc2VuZC1jYW1lcmEnKS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuXG4gICAgLy8gbWFrZSBzdXJlIHdlJ3ZlIGpvaW5lZCB0aGUgcm9vbSBhbmQgc3RhcnRlZCBvdXIgY2FtZXJhLiB0aGVzZVxuICAgIC8vIGZ1bmN0aW9ucyBkb24ndCBkbyBhbnl0aGluZyBpZiB0aGV5J3ZlIGFscmVhZHkgYmVlbiBjYWxsZWQgdGhpc1xuICAgIC8vIHNlc3Npb25cbiAgICAvLyDliY3mj5DmmK/lt7Lnu4/liqDlhaXmiL/pl7Qg5bm2IOW8gOWQr+S6huaRhOWDj+WktFxuICAgIGF3YWl0IGpvaW5Sb29tKCk7XG4gICAgYXdhaXQgc3RhcnRDYW1lcmEoKTtcblxuICAgIC8vIGNyZWF0ZSBhIHRyYW5zcG9ydCBmb3Igb3V0Z29pbmcgbWVkaWEsIGlmIHdlIGRvbid0IGFscmVhZHkgaGF2ZSBvbmVcbiAgICAvLyDliJvlu7rkuIDkuKrkuIrooYznmoTkvKDovpPlr7nosaFcbiAgICBpZiAoIXNlbmRUcmFuc3BvcnQpIHtcbiAgICAgICAgc2VuZFRyYW5zcG9ydCA9IGF3YWl0IGNyZWF0ZVRyYW5zcG9ydCgnc2VuZCcpO1xuICAgIH1cblxuICAgIC8vIHN0YXJ0IHNlbmRpbmcgdmlkZW8uIHRoZSB0cmFuc3BvcnQgbG9naWMgd2lsbCBpbml0aWF0ZSBhXG4gICAgLy8gc2lnbmFsaW5nIGNvbnZlcnNhdGlvbiB3aXRoIHRoZSBzZXJ2ZXIgdG8gc2V0IHVwIGFuIG91dGJvdW5kIHJ0cFxuICAgIC8vIHN0cmVhbSBmb3IgdGhlIGNhbWVyYSB2aWRlbyB0cmFjay4gb3VyIGNyZWF0ZVRyYW5zcG9ydCgpIGZ1bmN0aW9uXG4gICAgLy8gaW5jbHVkZXMgbG9naWMgdG8gdGVsbCB0aGUgc2VydmVyIHRvIHN0YXJ0IHRoZSBzdHJlYW0gaW4gYSBwYXVzZWRcbiAgICAvLyBzdGF0ZSwgaWYgdGhlIGNoZWNrYm94IGluIG91ciBVSSBpcyB1bmNoZWNrZWQuIHNvIGFzIHNvb24gYXMgd2VcbiAgICAvLyBoYXZlIGEgY2xpZW50LXNpZGUgY2FtVmlkZW9Qcm9kdWNlciBvYmplY3QsIHdlIG5lZWQgdG8gc2V0IGl0IHRvXG4gICAgLy8gcGF1c2VkIGFzIGFwcHJvcHJpYXRlLCB0b28uXG4gICAgLy8g5byA5aeL5a+55o6l5pGE5YOP5aS06KeG6aKR5rWB5Yiw5LiK6KGM5Lyg6L6T5a+56LGhICDlubbojrflvpfkuIDkuKrkuIrooYznmoTnlJ/kuqfogIXmjqfliLblr7nosaFcbiAgICBjYW1WaWRlb1Byb2R1Y2VyID0gYXdhaXQgc2VuZFRyYW5zcG9ydC5wcm9kdWNlKHtcbiAgICAgICAgdHJhY2s6IGxvY2FsQ2FtLmdldFZpZGVvVHJhY2tzKClbMF0sXG4gICAgICAgIGVuY29kaW5nczogY2FtRW5jb2RpbmdzKCksXG4gICAgICAgIGFwcERhdGE6IHttZWRpYVRhZzogJ2NhbS12aWRlbyd9XG4gICAgfSk7XG4gICAgLy8g5aaC5p6c6aG16Z2i5LiK55qE5pGE5YOP5aS05pqC5YGc54q25oCBY2hlY2tib3jlhbPpl60gIOmCo+S5iOaaguWBnOS4iuS8oFxuICAgIGlmIChnZXRDYW1QYXVzZWRTdGF0ZSgpKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCBjYW1WaWRlb1Byb2R1Y2VyLnBhdXNlKCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBzYW1lIHRoaW5nIGZvciBhdWRpbywgYnV0IHdlIGNhbiB1c2Ugb3VyIGFscmVhZHktY3JlYXRlZFxuICAgIC8vIOW8gOWni+WvueaOpem6puWFi+mjjumfs+mikea1geWIsOS4iuihjOS8oOi+k+WvueixoSAg5bm26I635b6X5LiA5Liq5LiK6KGM55qE55Sf5Lqn6ICF5o6n5Yi25a+56LGhXG4gICAgY2FtQXVkaW9Qcm9kdWNlciA9IGF3YWl0IHNlbmRUcmFuc3BvcnQucHJvZHVjZSh7XG4gICAgICAgIHRyYWNrOiBsb2NhbENhbS5nZXRBdWRpb1RyYWNrcygpWzBdLFxuICAgICAgICBhcHBEYXRhOiB7bWVkaWFUYWc6ICdjYW0tYXVkaW8nfVxuICAgIH0pO1xuICAgIGlmIChnZXRNaWNQYXVzZWRTdGF0ZSgpKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjYW1BdWRpb1Byb2R1Y2VyLnBhdXNlKCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAkKCcjc3RvcC1zdHJlYW1zJykuc3R5bGUuZGlzcGxheSA9ICdpbml0aWFsJztcbiAgICBzaG93Q2FtZXJhSW5mbygpO1xufVxuXG4vLyDpobXpnaLngrnlh7vliIbkuqvlsY/luZXop4bpopHmtYFcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzdGFydFNjcmVlbnNoYXJlKCkge1xuICAgIGNvbnNvbGUubG9nKCdzdGFydCBzY3JlZW4gc2hhcmUnKTtcbiAgICAkKCcjc2hhcmUtc2NyZWVuJykuc3R5bGUuZGlzcGxheSA9ICdub25lJztcblxuICAgIC8vIG1ha2Ugc3VyZSB3ZSd2ZSBqb2luZWQgdGhlIHJvb20gYW5kIHRoYXQgd2UgaGF2ZSBhIHNlbmRpbmdcbiAgICAvLyB0cmFuc3BvcnRcbiAgICAvLyDliY3mj5DmmK/liqDlhaXmiL/pl7RcbiAgICBhd2FpdCBqb2luUm9vbSgpO1xuICAgIC8vIOWIm+W7uuS4iuihjOS8oOi+k+mAmumBk1xuICAgIGlmICghc2VuZFRyYW5zcG9ydCkge1xuICAgICAgICBzZW5kVHJhbnNwb3J0ID0gYXdhaXQgY3JlYXRlVHJhbnNwb3J0KCdzZW5kJyk7XG4gICAgfVxuXG4gICAgLy8gZ2V0IGEgc2NyZWVuIHNoYXJlIHRyYWNrXG4gICAgLy8g5LuO5rWP6KeI5Zmo55qE5bGP5bmV5o+S5Lu26I635Y+W5bGP5bmV6KeG6aKR5rWBXG4gICAgbG9jYWxTY3JlZW4gPSBhd2FpdCBnZXRTY3JlZW5NZWRpYXMoKTtcbiAgICBpZiAoIWxvY2FsU2NyZWVuKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdjYW5cXCd0IGdldCBzY3JlZW4gY2FwdHVyZSBtZWRpYSBmcm9tIGVsZWN0cm9uJylcbiAgICAgICAgcmV0dXJuXG4gICAgfVxuICAgIC8vIGNyZWF0ZSBhIHByb2R1Y2VyIGZvciB2aWRlb1xuICAgIC8vIOWvueaOpeS8oOi+k+inhumikea1gSAg5bm26I635b6X5LiA5Liq6KeG6aKR5rWB55Sf5Lqn6ICF5o6n5Yi25a+56LGhXG4gICAgc2NyZWVuVmlkZW9Qcm9kdWNlciA9IGF3YWl0IHNlbmRUcmFuc3BvcnQucHJvZHVjZSh7XG4gICAgICAgIHRyYWNrOiBsb2NhbFNjcmVlbi5nZXRWaWRlb1RyYWNrcygpWzBdLFxuICAgICAgICBlbmNvZGluZ3M6IHNjcmVlbnNoYXJlRW5jb2RpbmdzKCksXG4gICAgICAgIGFwcERhdGE6IHttZWRpYVRhZzogJ3NjcmVlbi12aWRlbyd9XG4gICAgfSk7XG5cbiAgICAvLyBjcmVhdGUgYSBwcm9kdWNlciBmb3IgYXVkaW8sIGlmIHdlIGhhdmUgaXRcbiAgICAvLyDlr7nmjqXkvKDovpPpn7PpopHmtYEgIOW5tuiOt+W+l+S4gOS4qumfs+mikea1geeUn+S6p+iAheaOp+WItuWvueixoVxuICAgIGlmIChsb2NhbFNjcmVlbi5nZXRBdWRpb1RyYWNrcygpLmxlbmd0aCkge1xuICAgICAgICBzY3JlZW5BdWRpb1Byb2R1Y2VyID0gYXdhaXQgc2VuZFRyYW5zcG9ydC5wcm9kdWNlKHtcbiAgICAgICAgICAgIHRyYWNrOiBsb2NhbFNjcmVlbi5nZXRBdWRpb1RyYWNrcygpWzBdLFxuICAgICAgICAgICAgYXBwRGF0YToge21lZGlhVGFnOiAnc2NyZWVuLWF1ZGlvJ31cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gaGFuZGxlciBmb3Igc2NyZWVuIHNoYXJlIHN0b3BwZWQgZXZlbnQgKHRyaWdnZXJlZCBieSB0aGVcbiAgICAvLyBicm93c2VyJ3MgYnVpbHQtaW4gc2NyZWVuIHNoYXJpbmcgdWkpXG4gICAgLy8g5b2T5LiK6KGM55Sf5Lqn6ICF57uT5p2f5LiK5Lyg6KeG6aKR5rWBXG4gICAgc2NyZWVuVmlkZW9Qcm9kdWNlci50cmFjay5vbmVuZGVkID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZygnc2NyZWVuIHNoYXJlIHN0b3BwZWQnKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIOaaguWBnOS4iuS8oFxuICAgICAgICAgICAgYXdhaXQgc2NyZWVuVmlkZW9Qcm9kdWNlci5wYXVzZSgpO1xuICAgICAgICAgICAgbGV0IHtlcnJvcn0gPSBhd2FpdCBzaWcoJ2Nsb3NlLXByb2R1Y2VyJyxcbiAgICAgICAgICAgICAgICB7cHJvZHVjZXJJZDogc2NyZWVuVmlkZW9Qcm9kdWNlci5pZH0pO1xuICAgICAgICAgICAgLy8g5YWz6Zet55Sf5Lqn6ICFXG4gICAgICAgICAgICBhd2FpdCBzY3JlZW5WaWRlb1Byb2R1Y2VyLmNsb3NlKCk7XG4gICAgICAgICAgICBzY3JlZW5WaWRlb1Byb2R1Y2VyID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIOWQjOaXtuWFs+mXremfs+mikea1geeahOeUn+S6p+iAhVxuICAgICAgICAgICAgaWYgKHNjcmVlbkF1ZGlvUHJvZHVjZXIpIHtcbiAgICAgICAgICAgICAgICBsZXQge2Vycm9yfSA9IGF3YWl0IHNpZygnY2xvc2UtcHJvZHVjZXInLFxuICAgICAgICAgICAgICAgICAgICB7cHJvZHVjZXJJZDogc2NyZWVuQXVkaW9Qcm9kdWNlci5pZH0pO1xuICAgICAgICAgICAgICAgIGF3YWl0IHNjcmVlbkF1ZGlvUHJvZHVjZXIuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICBzY3JlZW5BdWRpb1Byb2R1Y2VyID0gbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgICAgfVxuICAgICAgICAkKCcjbG9jYWwtc2NyZWVuLXBhdXNlLWN0cmwnKS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAkKCcjbG9jYWwtc2NyZWVuLWF1ZGlvLXBhdXNlLWN0cmwnKS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAkKCcjc2hhcmUtc2NyZWVuJykuc3R5bGUuZGlzcGxheSA9ICdpbml0aWFsJztcbiAgICB9XG5cbiAgICAkKCcjbG9jYWwtc2NyZWVuLXBhdXNlLWN0cmwnKS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICBpZiAoc2NyZWVuQXVkaW9Qcm9kdWNlcikge1xuICAgICAgICAkKCcjbG9jYWwtc2NyZWVuLWF1ZGlvLXBhdXNlLWN0cmwnKS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICB9XG59XG5cbi8vIOW8gOWQr+aRhOWDj+WktFxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHN0YXJ0Q2FtZXJhKCkge1xuICAgIGlmIChsb2NhbENhbSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKCdzdGFydCBjYW1lcmEnKTtcbiAgICB0cnkge1xuICAgICAgICBsb2NhbENhbSA9IGF3YWl0IG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKHtcbiAgICAgICAgICAgIHZpZGVvOiB0cnVlLFxuICAgICAgICAgICAgYXVkaW86IHRydWVcbiAgICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdzdGFydCBjYW1lcmEgZXJyb3InLCBlKTtcbiAgICB9XG59XG5cbi8vIHN3aXRjaCB0byBzZW5kaW5nIHZpZGVvIGZyb20gdGhlIFwibmV4dFwiIGNhbWVyYSBkZXZpY2UgaW4gb3VyIGRldmljZVxuLy8gbGlzdCAoaWYgd2UgaGF2ZSBtdWx0aXBsZSBjYW1lcmFzKVxuLy8g5aSa5Liq5pGE5YOP5aS055qE5pe25YCZ5YGa5YiH5o2i5pGE5YOP5aS055SoXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY3ljbGVDYW1lcmEoKSB7XG4gICAgaWYgKCEoY2FtVmlkZW9Qcm9kdWNlciAmJiBjYW1WaWRlb1Byb2R1Y2VyLnRyYWNrKSkge1xuICAgICAgICBjb25zb2xlLmxvZygnY2Fubm90IGN5Y2xlIGNhbWVyYSAtIG5vIGN1cnJlbnQgY2FtZXJhIHRyYWNrJyk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zb2xlLmxvZygnY3ljbGUgY2FtZXJhJyk7XG5cbiAgICAvLyBmaW5kIFwibmV4dFwiIGRldmljZSBpbiBkZXZpY2UgbGlzdFxuICAgIGxldCBkZXZpY2VJZCA9IGF3YWl0IGdldEN1cnJlbnREZXZpY2VJZCgpLFxuICAgICAgICBhbGxEZXZpY2VzID0gYXdhaXQgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5lbnVtZXJhdGVEZXZpY2VzKCksXG4gICAgICAgIHZpZERldmljZXMgPSBhbGxEZXZpY2VzLmZpbHRlcigoZCkgPT4gZC5raW5kID09PSAndmlkZW9pbnB1dCcpO1xuICAgIGlmICghdmlkRGV2aWNlcy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdjYW5ub3QgY3ljbGUgY2FtZXJhIC0gb25seSBvbmUgY2FtZXJhJyk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IGlkeCA9IHZpZERldmljZXMuZmluZEluZGV4KChkKSA9PiBkLmRldmljZUlkID09PSBkZXZpY2VJZCk7XG4gICAgaWYgKGlkeCA9PT0gKHZpZERldmljZXMubGVuZ3RoIC0gMSkpIHtcbiAgICAgICAgaWR4ID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgICBpZHggKz0gMTtcbiAgICB9XG5cbiAgICAvLyBnZXQgYSBuZXcgdmlkZW8gc3RyZWFtLiBtaWdodCBhcyB3ZWxsIGdldCBhIG5ldyBhdWRpbyBzdHJlYW0gdG9vLFxuICAgIC8vIGp1c3QgaW4gY2FzZSBicm93c2VycyB3YW50IHRvIGdyb3VwIGF1ZGlvL3ZpZGVvIHN0cmVhbXMgdG9nZXRoZXJcbiAgICAvLyBmcm9tIHRoZSBzYW1lIGRldmljZSB3aGVuIHBvc3NpYmxlICh0aG91Z2ggdGhleSBkb24ndCBzZWVtIHRvLFxuICAgIC8vIGN1cnJlbnRseSlcbiAgICBjb25zb2xlLmxvZygnZ2V0dGluZyBhIHZpZGVvIHN0cmVhbSBmcm9tIG5ldyBkZXZpY2UnLCB2aWREZXZpY2VzW2lkeF0ubGFiZWwpO1xuICAgIGxvY2FsQ2FtID0gYXdhaXQgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEoe1xuICAgICAgICB2aWRlbzoge2RldmljZUlkOiB7ZXhhY3Q6IHZpZERldmljZXNbaWR4XS5kZXZpY2VJZH19LFxuICAgICAgICBhdWRpbzogdHJ1ZVxuICAgIH0pO1xuXG4gICAgLy8gcmVwbGFjZSB0aGUgdHJhY2tzIHdlIGFyZSBzZW5kaW5nXG4gICAgYXdhaXQgY2FtVmlkZW9Qcm9kdWNlci5yZXBsYWNlVHJhY2soe3RyYWNrOiBsb2NhbENhbS5nZXRWaWRlb1RyYWNrcygpWzBdfSk7XG4gICAgYXdhaXQgY2FtQXVkaW9Qcm9kdWNlci5yZXBsYWNlVHJhY2soe3RyYWNrOiBsb2NhbENhbS5nZXRBdWRpb1RyYWNrcygpWzBdfSk7XG5cbiAgICAvLyB1cGRhdGUgdGhlIHVzZXIgaW50ZXJmYWNlXG4gICAgc2hvd0NhbWVyYUluZm8oKTtcbn1cblxuLy8g5YGc5q2i5LiK6KGM5rWBXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc3RvcFN0cmVhbXMoKSB7XG4gICAgaWYgKCEobG9jYWxDYW0gfHwgbG9jYWxTY3JlZW4pKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCFzZW5kVHJhbnNwb3J0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zb2xlLmxvZygnc3RvcCBzZW5kaW5nIG1lZGlhIHN0cmVhbXMnKTtcbiAgICAkKCcjc3RvcC1zdHJlYW1zJykuc3R5bGUuZGlzcGxheSA9ICdub25lJztcblxuICAgIC8vIOWFs+mXreS8oOi+k+mAmumBk+aMh+S7pFxuICAgIGxldCB7ZXJyb3J9ID0gYXdhaXQgc2lnKCdjbG9zZS10cmFuc3BvcnQnLFxuICAgICAgICB7dHJhbnNwb3J0SWQ6IHNlbmRUcmFuc3BvcnQuaWR9KTtcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgIH1cbiAgICAvLyBjbG9zaW5nIHRoZSBzZW5kVHJhbnNwb3J0IGNsb3NlcyBhbGwgYXNzb2NpYXRlZCBwcm9kdWNlcnMuIHdoZW5cbiAgICAvLyB0aGUgY2FtVmlkZW9Qcm9kdWNlciBhbmQgY2FtQXVkaW9Qcm9kdWNlciBhcmUgY2xvc2VkLFxuICAgIC8vIG1lZGlhc291cC1jbGllbnQgc3RvcHMgdGhlIGxvY2FsIGNhbSB0cmFja3MsIHNvIHdlIGRvbid0IG5lZWQgdG9cbiAgICAvLyBkbyBhbnl0aGluZyBleGNlcHQgc2V0IGFsbCBvdXIgbG9jYWwgdmFyaWFibGVzIHRvIG51bGwuXG4gICAgLy8g5YWz6Zet5pys5Zyw5Lyg6L6T6YCa6YGTXG4gICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgc2VuZFRyYW5zcG9ydC5jbG9zZSgpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICB9XG4gICAgLy8g5riF6Zmk5omA5pyJ5LiK6KGM55u45YWz5a+56LGhXG4gICAgc2VuZFRyYW5zcG9ydCA9IG51bGw7XG4gICAgY2FtVmlkZW9Qcm9kdWNlciA9IG51bGw7XG4gICAgY2FtQXVkaW9Qcm9kdWNlciA9IG51bGw7XG4gICAgc2NyZWVuVmlkZW9Qcm9kdWNlciA9IG51bGw7XG4gICAgc2NyZWVuQXVkaW9Qcm9kdWNlciA9IG51bGw7XG4gICAgbG9jYWxDYW0gPSBudWxsO1xuICAgIGxvY2FsU2NyZWVuID0gbnVsbDtcblxuICAgIC8vIHVwZGF0ZSByZWxldmFudCB1aSBlbGVtZW50c1xuICAgICQoJyNzZW5kLWNhbWVyYScpLnN0eWxlLmRpc3BsYXkgPSAnaW5pdGlhbCc7XG4gICAgJCgnI3NoYXJlLXNjcmVlbicpLnN0eWxlLmRpc3BsYXkgPSAnaW5pdGlhbCc7XG4gICAgJCgnI2xvY2FsLXNjcmVlbi1wYXVzZS1jdHJsJykuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAkKCcjbG9jYWwtc2NyZWVuLWF1ZGlvLXBhdXNlLWN0cmwnKS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIHNob3dDYW1lcmFJbmZvKCk7XG59XG5cbi8vIOmAgOWHuuaIv+mXtFxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGxlYXZlUm9vbSgpIHtcbiAgICBpZiAoIWpvaW5lZCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc29sZS5sb2coJ2xlYXZlIHJvb20nKTtcbiAgICAkKCcjbGVhdmUtcm9vbScpLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG5cbiAgICAvLyBzdG9wIHBvbGxpbmdcbiAgICBjbGVhckludGVydmFsKHBvbGxpbmdJbnRlcnZhbCk7XG5cbiAgICAvLyBjbG9zZSBldmVyeXRoaW5nIG9uIHRoZSBzZXJ2ZXItc2lkZSAodHJhbnNwb3J0cywgcHJvZHVjZXJzLCBjb25zdW1lcnMpXG4gICAgLy8g6YCA5Ye65oi/6Ze05oyH5LukXG4gICAgbGV0IHtlcnJvcn0gPSBhd2FpdCBzaWcoJ2xlYXZlJyk7XG4gICAgaWYgKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICB9XG5cbiAgICAvLyBjbG9zaW5nIHRoZSB0cmFuc3BvcnRzIGNsb3NlcyBhbGwgcHJvZHVjZXJzIGFuZCBjb25zdW1lcnMuIHdlXG4gICAgLy8gZG9uJ3QgbmVlZCB0byBkbyBhbnl0aGluZyBiZXlvbmQgY2xvc2luZyB0aGUgdHJhbnNwb3J0cywgZXhjZXB0XG4gICAgLy8gdG8gc2V0IGFsbCBvdXIgbG9jYWwgdmFyaWFibGVzIHRvIHRoZWlyIGluaXRpYWwgc3RhdGVzXG4gICAgLy8g5YWz6Zet5LiK6KGM5ZKM5LiL6KGM5Lyg6L6T6YCa6YGTXG4gICAgdHJ5IHtcbiAgICAgICAgcmVjdlRyYW5zcG9ydCAmJiBhd2FpdCByZWN2VHJhbnNwb3J0LmNsb3NlKCk7XG4gICAgICAgIHNlbmRUcmFuc3BvcnQgJiYgYXdhaXQgc2VuZFRyYW5zcG9ydC5jbG9zZSgpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICB9XG4gICAgLy8g6YeK5pS+5a+56LGhXG4gICAgcmVjdlRyYW5zcG9ydCA9IG51bGw7XG4gICAgc2VuZFRyYW5zcG9ydCA9IG51bGw7XG4gICAgY2FtVmlkZW9Qcm9kdWNlciA9IG51bGw7XG4gICAgY2FtQXVkaW9Qcm9kdWNlciA9IG51bGw7XG4gICAgc2NyZWVuVmlkZW9Qcm9kdWNlciA9IG51bGw7XG4gICAgc2NyZWVuQXVkaW9Qcm9kdWNlciA9IG51bGw7XG4gICAgbG9jYWxDYW0gPSBudWxsO1xuICAgIGxvY2FsU2NyZWVuID0gbnVsbDtcbiAgICBsYXN0UG9sbFN5bmNEYXRhID0ge307XG4gICAgY29uc3VtZXJzID0gW107XG4gICAgam9pbmVkID0gZmFsc2U7XG5cbiAgICAvLyBoYWNrdGFzdGljYWxseSByZXN0b3JlIHVpIHRvIGluaXRpYWwgc3RhdGVcbiAgICAkKCcjam9pbi1jb250cm9sJykuc3R5bGUuZGlzcGxheSA9ICdpbml0aWFsJztcbiAgICAkKCcjc2VuZC1jYW1lcmEnKS5zdHlsZS5kaXNwbGF5ID0gJ2luaXRpYWwnO1xuICAgICQoJyNzdG9wLXN0cmVhbXMnKS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICQoJyNyZW1vdGUtdmlkZW8nKS5pbm5lckhUTUwgPSAnJztcbiAgICAkKCcjc2hhcmUtc2NyZWVuJykuc3R5bGUuZGlzcGxheSA9ICdpbml0aWFsJztcbiAgICAkKCcjbG9jYWwtc2NyZWVuLXBhdXNlLWN0cmwnKS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICQoJyNsb2NhbC1zY3JlZW4tYXVkaW8tcGF1c2UtY3RybCcpLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgc2hvd0NhbWVyYUluZm8oKTtcbiAgICB1cGRhdGVDYW1WaWRlb1Byb2R1Y2VyU3RhdHNEaXNwbGF5KCk7XG4gICAgdXBkYXRlU2NyZWVuVmlkZW9Qcm9kdWNlclN0YXRzRGlzcGxheSgpO1xuICAgIHVwZGF0ZVBlZXJzRGlzcGxheSgpO1xufVxuXG4vLyDorqLpmIXmn5DkuKrnq68gICDmr5TlpoLmiL/pl7TkuK3lhbbku5bkurpcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzdWJzY3JpYmVUb1RyYWNrKHBlZXJJZCwgbWVkaWFUYWcpIHtcbiAgICBjb25zb2xlLmxvZygnc3Vic2NyaWJlIHRvIHRyYWNrJywgcGVlcklkLCBtZWRpYVRhZyk7XG5cbiAgICAvLyBjcmVhdGUgYSByZWNlaXZlIHRyYW5zcG9ydCBpZiB3ZSBkb24ndCBhbHJlYWR5IGhhdmUgb25lXG4gICAgLy8g5Yib5bu65LiA5Liq5LiL6KGM5Lyg6L6T6YCa6YGTXG4gICAgaWYgKCFyZWN2VHJhbnNwb3J0KSB7XG4gICAgICAgIHJlY3ZUcmFuc3BvcnQgPSBhd2FpdCBjcmVhdGVUcmFuc3BvcnQoJ3JlY3YnKTtcbiAgICB9XG5cbiAgICAvLyBpZiB3ZSBkbyBhbHJlYWR5IGhhdmUgYSBjb25zdW1lciwgd2Ugc2hvdWxkbid0IGhhdmUgY2FsbGVkIHRoaXNcbiAgICAvLyBtZXRob2RcbiAgICAvLyDliKTmlq3mmK/lkKblt7Lnu4/orqLpmIXkuobor6VwZWVyXG4gICAgbGV0IGNvbnN1bWVyID0gZmluZENvbnN1bWVyRm9yVHJhY2socGVlcklkLCBtZWRpYVRhZyk7XG4gICAgaWYgKGNvbnN1bWVyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdhbHJlYWR5IGhhdmUgY29uc3VtZXIgZm9yIHRyYWNrJywgcGVlcklkLCBtZWRpYVRhZylcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICA7XG5cbiAgICAvLyBhc2sgdGhlIHNlcnZlciB0byBjcmVhdGUgYSBzZXJ2ZXItc2lkZSBjb25zdW1lciBvYmplY3QgYW5kIHNlbmRcbiAgICAvLyB1cyBiYWNrIHRoZSBpbmZvIHdlIG5lZWQgdG8gY3JlYXRlIGEgY2xpZW50LXNpZGUgY29uc3VtZXJcbiAgICAvLyDlj5Hlh7rkuIvooYzmi4nlj5bmjIfku6Qg5bm26I635Y+W5Yiw5raI6LS56ICF55qE5raI6LS55Y+C5pWwXG4gICAgbGV0IGNvbnN1bWVyUGFyYW1ldGVycyA9IGF3YWl0IHNpZygncmVjdi10cmFjaycsIHtcbiAgICAgICAgbWVkaWFUYWcsXG4gICAgICAgIG1lZGlhUGVlcklkOiBwZWVySWQsXG4gICAgICAgIHJ0cENhcGFiaWxpdGllczogZGV2aWNlLnJ0cENhcGFiaWxpdGllc1xuICAgIH0pO1xuICAgIGNvbnNvbGUubG9nKCdjb25zdW1lciBwYXJhbWV0ZXJzJywgY29uc3VtZXJQYXJhbWV0ZXJzKTtcbiAgICAvLyDliJvlu7rmtojotLnogIXpgJrpgZNcbiAgICBjb25zdW1lciA9IGF3YWl0IHJlY3ZUcmFuc3BvcnQuY29uc3VtZSh7XG4gICAgICAgIC4uLmNvbnN1bWVyUGFyYW1ldGVycyxcbiAgICAgICAgYXBwRGF0YToge3BlZXJJZCwgbWVkaWFUYWd9XG4gICAgfSk7XG4gICAgY29uc29sZS5sb2coJ2NyZWF0ZWQgbmV3IGNvbnN1bWVyJywgY29uc3VtZXIuaWQpO1xuXG4gICAgLy8gdGhlIHNlcnZlci1zaWRlIGNvbnN1bWVyIHdpbGwgYmUgc3RhcnRlZCBpbiBwYXVzZWQgc3RhdGUuIHdhaXRcbiAgICAvLyB1bnRpbCB3ZSdyZSBjb25uZWN0ZWQsIHRoZW4gc2VuZCBhIHJlc3VtZSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXJcbiAgICAvLyB0byBnZXQgb3VyIGZpcnN0IGtleWZyYW1lIGFuZCBzdGFydCBkaXNwbGF5aW5nIHZpZGVvXG4gICAgLy8g6L2u6K6t562J5b6F5LiL6KGM6YCa6YGT6L+e6YCaXG4gICAgd2hpbGUgKHJlY3ZUcmFuc3BvcnQuY29ubmVjdGlvblN0YXRlICE9PSAnY29ubmVjdGVkJykge1xuICAgICAgICBjb25zb2xlLmxvZygnICB0cmFuc3BvcnQgY29ubnN0YXRlJywgcmVjdlRyYW5zcG9ydC5jb25uZWN0aW9uU3RhdGUpO1xuICAgICAgICBhd2FpdCBzbGVlcCgxMDApO1xuICAgIH1cbiAgICAvLyBva2F5LCB3ZSdyZSByZWFkeS4gbGV0J3MgYXNrIHRoZSBwZWVyIHRvIHNlbmQgdXMgbWVkaWFcbiAgICAvLyDpgJrnn6XnlJ/kuqfogIXmjqjpgIHnu5nmtojotLnogIXmlbDmja7mtYFcbiAgICBhd2FpdCByZXN1bWVDb25zdW1lcihjb25zdW1lcik7XG5cbiAgICAvLyBrZWVwIHRyYWNrIG9mIGFsbCBvdXIgY29uc3VtZXJzXG4gICAgLy8g5L+d5a2Y5raI6LS56ICF6YCa6YGTXG4gICAgY29uc3VtZXJzLnB1c2goY29uc3VtZXIpO1xuXG4gICAgLy8gdWkg5pu05paw55WM6Z2iXG4gICAgYXdhaXQgYWRkVmlkZW9BdWRpbyhjb25zdW1lcik7XG4gICAgdXBkYXRlUGVlcnNEaXNwbGF5KCk7XG59XG5cbi8vIOmhtemdouaTjeS9nCAtIOWPlua2iOiuoumYhVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVuc3Vic2NyaWJlRnJvbVRyYWNrKHBlZXJJZCwgbWVkaWFUYWcpIHtcbiAgICBsZXQgY29uc3VtZXIgPSBmaW5kQ29uc3VtZXJGb3JUcmFjayhwZWVySWQsIG1lZGlhVGFnKTtcbiAgICBpZiAoIWNvbnN1bWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zb2xlLmxvZygndW5zdWJzY3JpYmUgZnJvbSB0cmFjaycsIHBlZXJJZCwgbWVkaWFUYWcpO1xuICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IGNsb3NlQ29uc3VtZXIoY29uc3VtZXIpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICB9XG4gICAgLy8gZm9yY2UgdXBkYXRlIG9mIHVpXG4gICAgdXBkYXRlUGVlcnNEaXNwbGF5KCk7XG59XG5cbi8vIOaaguWBnOa2iOi0uVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHBhdXNlQ29uc3VtZXIoY29uc3VtZXIpIHtcbiAgICBpZiAoY29uc3VtZXIpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ3BhdXNlIGNvbnN1bWVyJywgY29uc3VtZXIuYXBwRGF0YS5wZWVySWQsIGNvbnN1bWVyLmFwcERhdGEubWVkaWFUYWcpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8g6YCa55+l5pyN5Yqh56uvXG4gICAgICAgICAgICBhd2FpdCBzaWcoJ3BhdXNlLWNvbnN1bWVyJywge2NvbnN1bWVySWQ6IGNvbnN1bWVyLmlkfSk7XG4gICAgICAgICAgICAvLyDnm7TmjqXmmoLlgZxcbiAgICAgICAgICAgIGF3YWl0IGNvbnN1bWVyLnBhdXNlKCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8vIOWUpOmGkua2iOi0uVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlc3VtZUNvbnN1bWVyKGNvbnN1bWVyKSB7XG4gICAgaWYgKGNvbnN1bWVyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdyZXN1bWUgY29uc3VtZXInLCBjb25zdW1lci5hcHBEYXRhLnBlZXJJZCwgY29uc3VtZXIuYXBwRGF0YS5tZWRpYVRhZyk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyDpgJrnn6XmnI3liqHnq69cbiAgICAgICAgICAgIGF3YWl0IHNpZygncmVzdW1lLWNvbnN1bWVyJywge2NvbnN1bWVySWQ6IGNvbnN1bWVyLmlkfSk7XG4gICAgICAgICAgICAvLyDnm7TmjqXllKTphpJcbiAgICAgICAgICAgIGF3YWl0IGNvbnN1bWVyLnJlc3VtZSgpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyDmmoLlgZznlJ/kuqfpgJrpgZNcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwYXVzZVByb2R1Y2VyKHByb2R1Y2VyKSB7XG4gICAgaWYgKHByb2R1Y2VyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdwYXVzZSBwcm9kdWNlcicsIHByb2R1Y2VyLmFwcERhdGEubWVkaWFUYWcpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgc2lnKCdwYXVzZS1wcm9kdWNlcicsIHtwcm9kdWNlcklkOiBwcm9kdWNlci5pZH0pO1xuICAgICAgICAgICAgYXdhaXQgcHJvZHVjZXIucGF1c2UoKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLy8g5ZSk6YaS55Sf5Lqn6YCa6YGTXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVzdW1lUHJvZHVjZXIocHJvZHVjZXIpIHtcbiAgICBpZiAocHJvZHVjZXIpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ3Jlc3VtZSBwcm9kdWNlcicsIHByb2R1Y2VyLmFwcERhdGEubWVkaWFUYWcpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgc2lnKCdyZXN1bWUtcHJvZHVjZXInLCB7cHJvZHVjZXJJZDogcHJvZHVjZXIuaWR9KTtcbiAgICAgICAgICAgIGF3YWl0IHByb2R1Y2VyLnJlc3VtZSgpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyDnrqHnkIbmtojotLnogIVcbmFzeW5jIGZ1bmN0aW9uIGNsb3NlQ29uc3VtZXIoY29uc3VtZXIpIHtcbiAgICBpZiAoIWNvbnN1bWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc29sZS5sb2coJ2Nsb3NpbmcgY29uc3VtZXInLCBjb25zdW1lci5hcHBEYXRhLnBlZXJJZCwgY29uc3VtZXIuYXBwRGF0YS5tZWRpYVRhZyk7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gdGVsbCB0aGUgc2VydmVyIHdlJ3JlIGNsb3NpbmcgdGhpcyBjb25zdW1lci4gKHRoZSBzZXJ2ZXItc2lkZVxuICAgICAgICAvLyBjb25zdW1lciBtYXkgaGF2ZSBiZWVuIGNsb3NlZCBhbHJlYWR5LCBidXQgdGhhdCdzIG9rYXkuKVxuICAgICAgICBhd2FpdCBzaWcoJ2Nsb3NlLWNvbnN1bWVyJywge2NvbnN1bWVySWQ6IGNvbnN1bWVyLmlkfSk7XG4gICAgICAgIGF3YWl0IGNvbnN1bWVyLmNsb3NlKCk7XG5cbiAgICAgICAgY29uc3VtZXJzID0gY29uc3VtZXJzLmZpbHRlcigoYykgPT4gYyAhPT0gY29uc3VtZXIpO1xuICAgICAgICAvLyDliKDpmaTor6XmtojotLnpgJrpgZPnmoTpobXpnaLlhYPntKBcbiAgICAgICAgcmVtb3ZlVmlkZW9BdWRpbyhjb25zdW1lcik7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgIH1cbn1cblxuLy8gdXRpbGl0eSBmdW5jdGlvbiB0byBjcmVhdGUgYSB0cmFuc3BvcnQgYW5kIGhvb2sgdXAgc2lnbmFsaW5nIGxvZ2ljXG4vLyBhcHByb3ByaWF0ZSB0byB0aGUgdHJhbnNwb3J0J3MgZGlyZWN0aW9uXG4vLyDliJvlu7rkvKDovpPlr7nosaHvvIjkuIrooYzjgIHkuIvooYzvvIlcbmFzeW5jIGZ1bmN0aW9uIGNyZWF0ZVRyYW5zcG9ydChkaXJlY3Rpb24pIHtcbiAgICBjb25zb2xlLmxvZyhgY3JlYXRlICR7ZGlyZWN0aW9ufSB0cmFuc3BvcnRgKTtcblxuICAgIC8vIGFzayB0aGUgc2VydmVyIHRvIGNyZWF0ZSBhIHNlcnZlci1zaWRlIHRyYW5zcG9ydCBvYmplY3QgYW5kIHNlbmRcbiAgICAvLyB1cyBiYWNrIHRoZSBpbmZvIHdlIG5lZWQgdG8gY3JlYXRlIGEgY2xpZW50LXNpZGUgdHJhbnNwb3J0XG4gICAgLy8g6YCa55+l5pyN5Yqh56uv5omn6KGM5Yib5bu65Lyg6L6T5a+56LGhICAg5bm26I635Y+W5Yiw5Yib5bu65Lyg6L6T6YCa6YGT5Y+C5pWwXG4gICAgbGV0IHRyYW5zcG9ydCxcbiAgICAgICAge3RyYW5zcG9ydE9wdGlvbnN9ID0gYXdhaXQgc2lnKCdjcmVhdGUtdHJhbnNwb3J0Jywge2RpcmVjdGlvbn0pO1xuICAgIGNvbnNvbGUubG9nKCd0cmFuc3BvcnQgb3B0aW9ucycsIHRyYW5zcG9ydE9wdGlvbnMpO1xuXG4gICAgaWYgKGRpcmVjdGlvbiA9PT0gJ3JlY3YnKSB7XG4gICAgICAgIC8vIOWIm+W7uuaOpeaUtuS8oOi+k+mAmumBk1xuICAgICAgICB0cmFuc3BvcnQgPSBhd2FpdCBkZXZpY2UuY3JlYXRlUmVjdlRyYW5zcG9ydCh0cmFuc3BvcnRPcHRpb25zKTtcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gJ3NlbmQnKSB7XG4gICAgICAgIC8vIOWIm+W7uuWPkemAgeS8oOi+k+mAmumBk1xuICAgICAgICB0cmFuc3BvcnQgPSBhd2FpdCBkZXZpY2UuY3JlYXRlU2VuZFRyYW5zcG9ydCh0cmFuc3BvcnRPcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGJhZCB0cmFuc3BvcnQgJ2RpcmVjdGlvbic6ICR7ZGlyZWN0aW9ufWApO1xuICAgIH1cblxuICAgIC8vIG1lZGlhc291cC1jbGllbnQgd2lsbCBlbWl0IGEgY29ubmVjdCBldmVudCB3aGVuIG1lZGlhIG5lZWRzIHRvXG4gICAgLy8gc3RhcnQgZmxvd2luZyBmb3IgdGhlIGZpcnN0IHRpbWUuIHNlbmQgZHRsc1BhcmFtZXRlcnMgdG8gdGhlXG4gICAgLy8gc2VydmVyLCB0aGVuIGNhbGwgY2FsbGJhY2soKSBvbiBzdWNjZXNzIG9yIGVycmJhY2soKSBvbiBmYWlsdXJlLlxuICAgIC8vIOW9k+S8oOi+k+mAmumBk+W3sue7j+W7uueri+Wlvei/nuaOpVxuICAgIHRyYW5zcG9ydC5vbignY29ubmVjdCcsIGFzeW5jICh7ZHRsc1BhcmFtZXRlcnN9LCBjYWxsYmFjaywgZXJyYmFjaykgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZygndHJhbnNwb3J0IGNvbm5lY3QgZXZlbnQnLCBkaXJlY3Rpb24pO1xuICAgICAgICAvLyDlkYror4nmnI3liqHnq6/ov57mjqXkvKDovpPpgJrpgZPvvIh1ZHDvvIlcbiAgICAgICAgbGV0IHtlcnJvcn0gPSBhd2FpdCBzaWcoJ2Nvbm5lY3QtdHJhbnNwb3J0Jywge1xuICAgICAgICAgICAgdHJhbnNwb3J0SWQ6IHRyYW5zcG9ydE9wdGlvbnMuaWQsXG4gICAgICAgICAgICBkdGxzUGFyYW1ldGVyc1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnZXJyb3IgY29ubmVjdGluZyB0cmFuc3BvcnQnLCBkaXJlY3Rpb24sIGVycm9yKTtcbiAgICAgICAgICAgIGVycmJhY2soKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjYWxsYmFjaygpO1xuICAgIH0pO1xuXG4gICAgaWYgKGRpcmVjdGlvbiA9PT0gJ3NlbmQnKSB7XG4gICAgICAgIC8vIHNlbmRpbmcgdHJhbnNwb3J0cyB3aWxsIGVtaXQgYSBwcm9kdWNlIGV2ZW50IHdoZW4gYSBuZXcgdHJhY2tcbiAgICAgICAgLy8gbmVlZHMgdG8gYmUgc2V0IHVwIHRvIHN0YXJ0IHNlbmRpbmcuIHRoZSBwcm9kdWNlcidzIGFwcERhdGEgaXNcbiAgICAgICAgLy8gcGFzc2VkIGFzIGEgcGFyYW1ldGVyXG4gICAgICAgIC8vIOWmguaenOaYr+S4iuihjO+8jCDnm5HlkKznlJ/kuqfkuovku7ZcbiAgICAgICAgdHJhbnNwb3J0Lm9uKCdwcm9kdWNlJywgYXN5bmMgKHtraW5kLCBydHBQYXJhbWV0ZXJzLCBhcHBEYXRhfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLCBlcnJiYWNrKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygndHJhbnNwb3J0IHByb2R1Y2UgZXZlbnQnLCBhcHBEYXRhLm1lZGlhVGFnKTtcbiAgICAgICAgICAgIC8vIHdlIG1heSB3YW50IHRvIHN0YXJ0IG91dCBwYXVzZWQgKGlmIHRoZSBjaGVja2JveGVzIGluIHRoZSB1aVxuICAgICAgICAgICAgLy8gYXJlbid0IGNoZWNrZWQsIGZvciBlYWNoIG1lZGlhIHR5cGUuIG5vdCB2ZXJ5IGNsZWFuIGNvZGUsIGhlcmVcbiAgICAgICAgICAgIC8vIGJ1dCwgeW91IGtub3csIHRoaXMgaXNuJ3QgYSByZWFsIGFwcGxpY2F0aW9uLilcbiAgICAgICAgICAgIC8vIOagueaNrueUqOaIt+mhtemdouaTjeS9nOWIpOaWreaYr+WQpumcgOimgeaaguWBnFxuICAgICAgICAgICAgbGV0IHBhdXNlZCA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGFwcERhdGEubWVkaWFUYWcgPT09ICdjYW0tdmlkZW8nKSB7XG4gICAgICAgICAgICAgICAgcGF1c2VkID0gZ2V0Q2FtUGF1c2VkU3RhdGUoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYXBwRGF0YS5tZWRpYVRhZyA9PT0gJ2NhbS1hdWRpbycpIHtcbiAgICAgICAgICAgICAgICBwYXVzZWQgPSBnZXRNaWNQYXVzZWRTdGF0ZSgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChhcHBEYXRhLm1lZGlhVGFnID09PSAnc2NyZWVuLXZpZGVvJykge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoc3RhcnRSZWNvcmQsIDEwMDApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB0ZWxsIHRoZSBzZXJ2ZXIgd2hhdCBpdCBuZWVkcyB0byBrbm93IGZyb20gdXMgaW4gb3JkZXIgdG8gc2V0XG4gICAgICAgICAgICAvLyB1cCBhIHNlcnZlci1zaWRlIHByb2R1Y2VyIG9iamVjdCwgYW5kIGdldCBiYWNrIGFcbiAgICAgICAgICAgIC8vIHByb2R1Y2VyLmlkLiBjYWxsIGNhbGxiYWNrKCkgb24gc3VjY2VzcyBvciBlcnJiYWNrKCkgb25cbiAgICAgICAgICAgIC8vIGZhaWx1cmUuXG4gICAgICAgICAgICAvLyDlkYror4nmnI3liqHnq6/lvIDlp4vkvKDovpMgIOW5tuiOt+W+l+S4gOS4queUn+S6p+iAhWlkXG4gICAgICAgICAgICBsZXQge2Vycm9yLCBpZH0gPSBhd2FpdCBzaWcoJ3NlbmQtdHJhY2snLCB7XG4gICAgICAgICAgICAgICAgdHJhbnNwb3J0SWQ6IHRyYW5zcG9ydE9wdGlvbnMuaWQsXG4gICAgICAgICAgICAgICAga2luZCxcbiAgICAgICAgICAgICAgICBydHBQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgIHBhdXNlZCxcbiAgICAgICAgICAgICAgICBhcHBEYXRhXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdlcnJvciBzZXR0aW5nIHVwIHNlcnZlci1zaWRlIHByb2R1Y2VyJywgZXJyb3IpO1xuICAgICAgICAgICAgICAgIGVycmJhY2soKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyDlkYror4nmnKzlnLDnmoTkvKDovpPpgJrpgZPosIHmmK/nlJ/kuqfogIVcbiAgICAgICAgICAgIGNhbGxiYWNrKHtpZH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBmb3IgdGhpcyBzaW1wbGUgZGVtbywgYW55IHRpbWUgYSB0cmFuc3BvcnQgdHJhbnNpdGlvbnMgdG8gY2xvc2VkLFxuICAgIC8vIGZhaWxlZCwgb3IgZGlzY29ubmVjdGVkLCBsZWF2ZSB0aGUgcm9vbSBhbmQgcmVzZXRcbiAgICAvLyDkvKDovpPpgJrpgZPnirbmgIHmlLnlj5jkuovku7ZcbiAgICB0cmFuc3BvcnQub24oJ2Nvbm5lY3Rpb25zdGF0ZWNoYW5nZScsIGFzeW5jIChzdGF0ZSkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhgdHJhbnNwb3J0ICR7dHJhbnNwb3J0LmlkfSBjb25uZWN0aW9uc3RhdGVjaGFuZ2UgJHtzdGF0ZX1gKTtcbiAgICAgICAgLy8gZm9yIHRoaXMgc2ltcGxlIHNhbXBsZSBjb2RlLCBhc3N1bWUgdGhhdCB0cmFuc3BvcnRzIGJlaW5nXG4gICAgICAgIC8vIGNsb3NlZCBpcyBhbiBlcnJvciAod2UgbmV2ZXIgY2xvc2UgdGhlc2UgdHJhbnNwb3J0cyBleGNlcHQgd2hlblxuICAgICAgICAvLyB3ZSBsZWF2ZSB0aGUgcm9vbSlcbiAgICAgICAgaWYgKHN0YXRlID09PSAnY2xvc2VkJyB8fCBzdGF0ZSA9PT0gJ2ZhaWxlZCcgfHwgc3RhdGUgPT09ICdkaXNjb25uZWN0ZWQnKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygndHJhbnNwb3J0IGNsb3NlZCAuLi4gbGVhdmluZyB0aGUgcm9vbSBhbmQgcmVzZXR0aW5nJyk7XG4gICAgICAgICAgICAvLyDlvZPov57mjqXlpLHotKXjgIHlhbPpl63jgIHmlq3lvIDml7Yg6YCA5Ye65oi/6Ze0XG4gICAgICAgICAgICBsZWF2ZVJvb20oKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRyYW5zcG9ydDtcbn1cblxuYXN5bmMgZnVuY3Rpb24gc3RhcnRSZWNvcmQoKSB7XG4gICAgbGV0IHtyZXN1bHR9ID0gYXdhaXQgc2lnKCdzdGFydC1yZWNvcmQnLCB7XG4gICAgICAgIHRyYW5zcG9ydElkOiBzZW5kVHJhbnNwb3J0LmlkLFxuICAgICAgICBhdWRpb1Byb2R1Y2VySWQ6IGNhbUF1ZGlvUHJvZHVjZXIuaWQsXG4gICAgICAgIHZpZGVvUHJvZHVjZXJJZDogc2NyZWVuVmlkZW9Qcm9kdWNlci5pZCxcbiAgICB9KTtcbiAgICBjb25zb2xlLmxvZygnc3RhcnQgcmVjb3JkIHNjcmVlbiBhbmQgYXVkaW8nKVxuICAgIGNvbnNvbGUubG9nKHJlc3VsdClcbn1cblxuLy9cbi8vIHBvbGxpbmcvdXBkYXRlIGxvZ2ljXG4vL1xuXG5hc3luYyBmdW5jdGlvbiBwb2xsQW5kVXBkYXRlKCkge1xuICAgIGxldCB7cGVlcnMsIGFjdGl2ZVNwZWFrZXIsIGVycm9yfSA9IGF3YWl0IHNpZygnc3luYycpO1xuICAgIGlmIChlcnJvcikge1xuICAgICAgICByZXR1cm4gKHtlcnJvcn0pO1xuICAgIH1cblxuICAgIC8vIGFsd2F5cyB1cGRhdGUgYmFuZHdpZHRoIHN0YXRzIGFuZCBhY3RpdmUgc3BlYWtlciBkaXNwbGF5XG4gICAgLy8g5ZCM5q2l6L+e5o6l54q25oCB55qE5ZCM5pe2IOiOt+WPluW9k+WJjeeahOWPkeiogOiAhSDvvIjmnI3liqHnq6/moLnmja7pn7Pph4/liKTmlq3lkI7ov5Tlm57nmoRwZWVy77yJXG4gICAgY3VycmVudEFjdGl2ZVNwZWFrZXIgPSBhY3RpdmVTcGVha2VyO1xuICAgIHVwZGF0ZUFjdGl2ZVNwZWFrZXIoKTtcbiAgICB1cGRhdGVDYW1WaWRlb1Byb2R1Y2VyU3RhdHNEaXNwbGF5KCk7XG4gICAgdXBkYXRlU2NyZWVuVmlkZW9Qcm9kdWNlclN0YXRzRGlzcGxheSgpO1xuICAgIHVwZGF0ZUNvbnN1bWVyc1N0YXRzRGlzcGxheSgpO1xuXG4gICAgLy8gZGVjaWRlIGlmIHdlIG5lZWQgdG8gdXBkYXRlIHRyYWNrcyBsaXN0IGFuZCB2aWRlby9hdWRpb1xuICAgIC8vIGVsZW1lbnRzLiBidWlsZCBsaXN0IG9mIHBlZXJzLCBzb3J0ZWQgYnkgam9pbiB0aW1lLCByZW1vdmluZyBsYXN0XG4gICAgLy8gc2VlbiB0aW1lIGFuZCBzdGF0cywgc28gd2UgY2FuIGVhc2lseSBkbyBhIGRlZXAtZXF1YWxzXG4gICAgLy8gY29tcGFyaXNvbi4gY29tcGFyZSB0aGlzIGxpc3Qgd2l0aCB0aGUgY2FjaGVkIGxpc3QgZnJvbSBsYXN0XG4gICAgLy8gcG9sbC5cbiAgICAvLyDlnKjnur/ov57mjqXliJfooahcbiAgICBsZXQgdGhpc1BlZXJzTGlzdCA9IHNvcnRQZWVycyhwZWVycyksXG4gICAgICAgIGxhc3RQZWVyc0xpc3QgPSBzb3J0UGVlcnMobGFzdFBvbGxTeW5jRGF0YSk7XG4gICAgaWYgKCFkZWVwRXF1YWwodGhpc1BlZXJzTGlzdCwgbGFzdFBlZXJzTGlzdCkpIHtcbiAgICAgICAgdXBkYXRlUGVlcnNEaXNwbGF5KHBlZXJzLCB0aGlzUGVlcnNMaXN0KTtcbiAgICB9XG5cbiAgICAvLyBpZiBhIHBlZXIgaGFzIGdvbmUgYXdheSwgd2UgbmVlZCB0byBjbG9zZSBhbGwgY29uc3VtZXJzIHdlIGhhdmVcbiAgICAvLyBmb3IgdGhhdCBwZWVyIGFuZCByZW1vdmUgdmlkZW8gYW5kIGF1ZGlvIGVsZW1lbnRzXG4gICAgLy8g5aaC5p6c5ZCM5q2l6L+H5p2l55qE5Zyo57q/5YiX6KGo5Lit5rKh5pyJ5LmL5YmN5pys5Zyw5Zyo57q/5YiX6KGo5Lit55qE6L+e5o6lICAg6K+05piO6K+l6L+e5o6l5bey57uP5pat5byAICDpgqPkuYjlhbPpl63lr7nor6Xov57mjqXnmoTmtojotLnogIUgICDlsLHmmK/kuI3nnIvku5bnmoTop4bpopHlkozpn7PpopFcbiAgICBmb3IgKGxldCBpZCBpbiBsYXN0UG9sbFN5bmNEYXRhKSB7XG4gICAgICAgIGlmICghcGVlcnNbaWRdKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgcGVlciAke2lkfSBoYXMgZXhpdGVkYCk7XG4gICAgICAgICAgICBjb25zdW1lcnMuZm9yRWFjaCgoY29uc3VtZXIpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoY29uc3VtZXIuYXBwRGF0YS5wZWVySWQgPT09IGlkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNsb3NlQ29uc3VtZXIoY29uc3VtZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gaWYgYSBwZWVyIGhhcyBzdG9wcGVkIHNlbmRpbmcgbWVkaWEgdGhhdCB3ZSBhcmUgY29uc3VtaW5nLCB3ZVxuICAgIC8vIG5lZWQgdG8gY2xvc2UgdGhlIGNvbnN1bWVyIGFuZCByZW1vdmUgdmlkZW8gYW5kIGF1ZGlvIGVsZW1lbnRzXG4gICAgLy8g5a+55pys5Zyw5q+P5Liq5raI6LS56ICF5qOA5p+l5piv5ZCm6L+Y5Zyo5o6o5rWBICDlkKbliJnlhbPpl63lr7nor6Xov57mjqXnmoTmtojotLnogIVcbiAgICBjb25zdW1lcnMuZm9yRWFjaCgoY29uc3VtZXIpID0+IHtcbiAgICAgICAgbGV0IHtwZWVySWQsIG1lZGlhVGFnfSA9IGNvbnN1bWVyLmFwcERhdGE7XG4gICAgICAgIGlmICghcGVlcnNbcGVlcklkXS5tZWRpYVttZWRpYVRhZ10pIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBwZWVyICR7cGVlcklkfSBoYXMgc3RvcHBlZCB0cmFuc21pdHRpbmcgJHttZWRpYVRhZ31gKTtcbiAgICAgICAgICAgIGNsb3NlQ29uc3VtZXIoY29uc3VtZXIpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyDlsIblkIzmraXmlbDmja7kv53lrZjliLDmnKzlnLBcbiAgICBsYXN0UG9sbFN5bmNEYXRhID0gcGVlcnM7XG4gICAgcmV0dXJuICh7fSk7IC8vIHJldHVybiBhbiBlbXB0eSBvYmplY3QgaWYgdGhlcmUgaXNuJ3QgYW4gZXJyb3Jcbn1cblxuZnVuY3Rpb24gc29ydFBlZXJzKHBlZXJzKSB7XG4gICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKHBlZXJzKVxuICAgICAgICAubWFwKChbaWQsIGluZm9dKSA9PiAoe2lkLCBqb2luVHM6IGluZm8uam9pblRzLCBtZWRpYTogey4uLmluZm8ubWVkaWF9fSkpXG4gICAgICAgIC5zb3J0KChhLCBiKSA9PiAoYS5qb2luVHMgPiBiLmpvaW5UcykgPyAxIDogKChiLmpvaW5UcyA+IGEuam9pblRzKSA/IC0xIDogMCkpO1xufVxuXG5mdW5jdGlvbiBmaW5kQ29uc3VtZXJGb3JUcmFjayhwZWVySWQsIG1lZGlhVGFnKSB7XG4gICAgcmV0dXJuIGNvbnN1bWVycy5maW5kKChjKSA9PiAoYy5hcHBEYXRhLnBlZXJJZCA9PT0gcGVlcklkICYmXG4gICAgICAgIGMuYXBwRGF0YS5tZWRpYVRhZyA9PT0gbWVkaWFUYWcpKTtcbn1cblxuLy9cbi8vIC0tIHVzZXIgaW50ZXJmYWNlIC0tXG4vL1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2FtUGF1c2VkU3RhdGUoKSB7XG4gICAgcmV0dXJuICEkKCcjbG9jYWwtY2FtLWNoZWNrYm94JykuY2hlY2tlZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE1pY1BhdXNlZFN0YXRlKCkge1xuICAgIHJldHVybiAhJCgnI2xvY2FsLW1pYy1jaGVja2JveCcpLmNoZWNrZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTY3JlZW5QYXVzZWRTdGF0ZSgpIHtcbiAgICByZXR1cm4gISQoJyNsb2NhbC1zY3JlZW4tY2hlY2tib3gnKS5jaGVja2VkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2NyZWVuQXVkaW9QYXVzZWRTdGF0ZSgpIHtcbiAgICByZXR1cm4gISQoJyNsb2NhbC1zY3JlZW4tYXVkaW8tY2hlY2tib3gnKS5jaGVja2VkO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY2hhbmdlQ2FtUGF1c2VkKCkge1xuICAgIGlmIChnZXRDYW1QYXVzZWRTdGF0ZSgpKSB7XG4gICAgICAgIHBhdXNlUHJvZHVjZXIoY2FtVmlkZW9Qcm9kdWNlcik7XG4gICAgICAgICQoJyNsb2NhbC1jYW0tbGFiZWwnKS5pbm5lckhUTUwgPSAnY2FtZXJhIChwYXVzZWQpJztcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bWVQcm9kdWNlcihjYW1WaWRlb1Byb2R1Y2VyKTtcbiAgICAgICAgJCgnI2xvY2FsLWNhbS1sYWJlbCcpLmlubmVySFRNTCA9ICdjYW1lcmEnO1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNoYW5nZU1pY1BhdXNlZCgpIHtcbiAgICBpZiAoZ2V0TWljUGF1c2VkU3RhdGUoKSkge1xuICAgICAgICBwYXVzZVByb2R1Y2VyKGNhbUF1ZGlvUHJvZHVjZXIpO1xuICAgICAgICAkKCcjbG9jYWwtbWljLWxhYmVsJykuaW5uZXJIVE1MID0gJ21pYyAocGF1c2VkKSc7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdW1lUHJvZHVjZXIoY2FtQXVkaW9Qcm9kdWNlcik7XG4gICAgICAgICQoJyNsb2NhbC1taWMtbGFiZWwnKS5pbm5lckhUTUwgPSAnbWljJztcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjaGFuZ2VTY3JlZW5QYXVzZWQoKSB7XG4gICAgaWYgKGdldFNjcmVlblBhdXNlZFN0YXRlKCkpIHtcbiAgICAgICAgcGF1c2VQcm9kdWNlcihzY3JlZW5WaWRlb1Byb2R1Y2VyKTtcbiAgICAgICAgJCgnI2xvY2FsLXNjcmVlbi1sYWJlbCcpLmlubmVySFRNTCA9ICdzY3JlZW4gKHBhdXNlZCknO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VtZVByb2R1Y2VyKHNjcmVlblZpZGVvUHJvZHVjZXIpO1xuICAgICAgICAkKCcjbG9jYWwtc2NyZWVuLWxhYmVsJykuaW5uZXJIVE1MID0gJ3NjcmVlbic7XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY2hhbmdlU2NyZWVuQXVkaW9QYXVzZWQoKSB7XG4gICAgaWYgKGdldFNjcmVlbkF1ZGlvUGF1c2VkU3RhdGUoKSkge1xuICAgICAgICBwYXVzZVByb2R1Y2VyKHNjcmVlbkF1ZGlvUHJvZHVjZXIpO1xuICAgICAgICAkKCcjbG9jYWwtc2NyZWVuLWF1ZGlvLWxhYmVsJykuaW5uZXJIVE1MID0gJ3NjcmVlbiAocGF1c2VkKSc7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdW1lUHJvZHVjZXIoc2NyZWVuQXVkaW9Qcm9kdWNlcik7XG4gICAgICAgICQoJyNsb2NhbC1zY3JlZW4tYXVkaW8tbGFiZWwnKS5pbm5lckhUTUwgPSAnc2NyZWVuJztcbiAgICB9XG59XG5cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZVBlZXJzRGlzcGxheShwZWVyc0luZm8gPSBsYXN0UG9sbFN5bmNEYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3J0ZWRQZWVycyA9IHNvcnRQZWVycyhwZWVyc0luZm8pKSB7XG4gICAgY29uc29sZS5sb2coJ3Jvb20gc3RhdGUgdXBkYXRlZCcsIHBlZXJzSW5mbyk7XG5cbiAgICAkKCcjYXZhaWxhYmxlLXRyYWNrcycpLmlubmVySFRNTCA9ICcnO1xuICAgIGlmIChjYW1WaWRlb1Byb2R1Y2VyKSB7XG4gICAgICAgICQoJyNhdmFpbGFibGUtdHJhY2tzJylcbiAgICAgICAgICAgIC5hcHBlbmRDaGlsZChtYWtlVHJhY2tDb250cm9sRWwoJ215JywgJ2NhbS12aWRlbycsXG4gICAgICAgICAgICAgICAgcGVlcnNJbmZvW215UGVlcklkXS5tZWRpYVsnY2FtLXZpZGVvJ10pKTtcbiAgICB9XG4gICAgaWYgKGNhbUF1ZGlvUHJvZHVjZXIpIHtcbiAgICAgICAgJCgnI2F2YWlsYWJsZS10cmFja3MnKVxuICAgICAgICAgICAgLmFwcGVuZENoaWxkKG1ha2VUcmFja0NvbnRyb2xFbCgnbXknLCAnY2FtLWF1ZGlvJyxcbiAgICAgICAgICAgICAgICBwZWVyc0luZm9bbXlQZWVySWRdLm1lZGlhWydjYW0tYXVkaW8nXSkpO1xuICAgIH1cbiAgICBpZiAoc2NyZWVuVmlkZW9Qcm9kdWNlcikge1xuICAgICAgICAkKCcjYXZhaWxhYmxlLXRyYWNrcycpXG4gICAgICAgICAgICAuYXBwZW5kQ2hpbGQobWFrZVRyYWNrQ29udHJvbEVsKCdteScsICdzY3JlZW4tdmlkZW8nLFxuICAgICAgICAgICAgICAgIHBlZXJzSW5mb1tteVBlZXJJZF0ubWVkaWFbJ3NjcmVlbi12aWRlbyddKSk7XG4gICAgfVxuICAgIGlmIChzY3JlZW5BdWRpb1Byb2R1Y2VyKSB7XG4gICAgICAgICQoJyNhdmFpbGFibGUtdHJhY2tzJylcbiAgICAgICAgICAgIC5hcHBlbmRDaGlsZChtYWtlVHJhY2tDb250cm9sRWwoJ215JywgJ3NjcmVlbi1hdWRpbycsXG4gICAgICAgICAgICAgICAgcGVlcnNJbmZvW215UGVlcklkXS5tZWRpYVsnc2NyZWVuLWF1ZGlvJ10pKTtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBwZWVyIG9mIHNvcnRlZFBlZXJzKSB7XG4gICAgICAgIGlmIChwZWVyLmlkID09PSBteVBlZXJJZCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgW21lZGlhVGFnLCBpbmZvXSBvZiBPYmplY3QuZW50cmllcyhwZWVyLm1lZGlhKSkge1xuICAgICAgICAgICAgJCgnI2F2YWlsYWJsZS10cmFja3MnKVxuICAgICAgICAgICAgICAgIC5hcHBlbmRDaGlsZChtYWtlVHJhY2tDb250cm9sRWwocGVlci5pZCwgbWVkaWFUYWcsIGluZm8pKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gbWFrZVRyYWNrQ29udHJvbEVsKHBlZXJOYW1lLCBtZWRpYVRhZywgbWVkaWFJbmZvKSB7XG4gICAgbGV0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLFxuICAgICAgICBwZWVySWQgPSAocGVlck5hbWUgPT09ICdteScgPyBteVBlZXJJZCA6IHBlZXJOYW1lKSxcbiAgICAgICAgY29uc3VtZXIgPSBmaW5kQ29uc3VtZXJGb3JUcmFjayhwZWVySWQsIG1lZGlhVGFnKTtcbiAgICBkaXYuY2xhc3NMaXN0ID0gYHRyYWNrLXN1YnNjcmliZSB0cmFjay1zdWJzY3JpYmUtJHtwZWVySWR9YDtcblxuICAgIGxldCBzdWIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICBpZiAoIWNvbnN1bWVyKSB7XG4gICAgICAgIHN1Yi5pbm5lckhUTUwgKz0gJ3N1YnNjcmliZSdcbiAgICAgICAgc3ViLm9uY2xpY2sgPSAoKSA9PiBzdWJzY3JpYmVUb1RyYWNrKHBlZXJJZCwgbWVkaWFUYWcpO1xuICAgICAgICBkaXYuYXBwZW5kQ2hpbGQoc3ViKTtcblxuICAgIH0gZWxzZSB7XG4gICAgICAgIHN1Yi5pbm5lckhUTUwgKz0gJ3Vuc3Vic2NyaWJlJ1xuICAgICAgICBzdWIub25jbGljayA9ICgpID0+IHVuc3Vic2NyaWJlRnJvbVRyYWNrKHBlZXJJZCwgbWVkaWFUYWcpO1xuICAgICAgICBkaXYuYXBwZW5kQ2hpbGQoc3ViKTtcbiAgICB9XG5cbiAgICBsZXQgdHJhY2tEZXNjcmlwdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICB0cmFja0Rlc2NyaXB0aW9uLmlubmVySFRNTCA9IGAke3BlZXJOYW1lfSAke21lZGlhVGFnfWBcbiAgICBkaXYuYXBwZW5kQ2hpbGQodHJhY2tEZXNjcmlwdGlvbik7XG5cbiAgICB0cnkge1xuICAgICAgICBpZiAobWVkaWFJbmZvKSB7XG4gICAgICAgICAgICBsZXQgcHJvZHVjZXJQYXVzZWQgPSBtZWRpYUluZm8ucGF1c2VkO1xuICAgICAgICAgICAgbGV0IHByb2RQYXVzZUluZm8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgICAgICBwcm9kUGF1c2VJbmZvLmlubmVySFRNTCA9IHByb2R1Y2VyUGF1c2VkID8gJ1twcm9kdWNlciBwYXVzZWRdJ1xuICAgICAgICAgICAgICAgIDogJ1twcm9kdWNlciBwbGF5aW5nXSc7XG4gICAgICAgICAgICBkaXYuYXBwZW5kQ2hpbGQocHJvZFBhdXNlSW5mbyk7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgfVxuXG4gICAgaWYgKGNvbnN1bWVyKSB7XG4gICAgICAgIGxldCBwYXVzZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKSxcbiAgICAgICAgICAgIGNoZWNrYm94ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKSxcbiAgICAgICAgICAgIGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcbiAgICAgICAgcGF1c2UuY2xhc3NMaXN0ID0gJ25vd3JhcCc7XG4gICAgICAgIGNoZWNrYm94LnR5cGUgPSAnY2hlY2tib3gnO1xuICAgICAgICBjaGVja2JveC5jaGVja2VkID0gIWNvbnN1bWVyLnBhdXNlZDtcbiAgICAgICAgY2hlY2tib3gub25jaGFuZ2UgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoY2hlY2tib3guY2hlY2tlZCkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHJlc3VtZUNvbnN1bWVyKGNvbnN1bWVyKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgcGF1c2VDb25zdW1lcihjb25zdW1lcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB1cGRhdGVQZWVyc0Rpc3BsYXkoKTtcbiAgICAgICAgfVxuICAgICAgICBsYWJlbC5pZCA9IGBjb25zdW1lci1zdGF0cy0ke2NvbnN1bWVyLmlkfWA7XG4gICAgICAgIGlmIChjb25zdW1lci5wYXVzZWQpIHtcbiAgICAgICAgICAgIGxhYmVsLmlubmVySFRNTCA9ICdbY29uc3VtZXIgcGF1c2VkXSdcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBzdGF0cyA9IGxhc3RQb2xsU3luY0RhdGFbbXlQZWVySWRdLnN0YXRzW2NvbnN1bWVyLmlkXSxcbiAgICAgICAgICAgICAgICBiaXRyYXRlID0gJy0nO1xuICAgICAgICAgICAgaWYgKHN0YXRzKSB7XG4gICAgICAgICAgICAgICAgYml0cmF0ZSA9IE1hdGguZmxvb3Ioc3RhdHMuYml0cmF0ZSAvIDEwMDAuMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsYWJlbC5pbm5lckhUTUwgPSBgW2NvbnN1bWVyIHBsYXlpbmcgJHtiaXRyYXRlfSBrYi9zXWA7XG4gICAgICAgIH1cbiAgICAgICAgcGF1c2UuYXBwZW5kQ2hpbGQoY2hlY2tib3gpO1xuICAgICAgICBwYXVzZS5hcHBlbmRDaGlsZChsYWJlbCk7XG4gICAgICAgIGRpdi5hcHBlbmRDaGlsZChwYXVzZSk7XG5cbiAgICAgICAgaWYgKGNvbnN1bWVyLmtpbmQgPT09ICd2aWRlbycpIHtcbiAgICAgICAgICAgIGxldCByZW1vdGVQcm9kdWNlckluZm8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgICAgICByZW1vdGVQcm9kdWNlckluZm8uY2xhc3NMaXN0ID0gJ25vd3JhcCB0cmFjay1jdHJsJztcbiAgICAgICAgICAgIHJlbW90ZVByb2R1Y2VySW5mby5pZCA9IGB0cmFjay1jdHJsLSR7Y29uc3VtZXIucHJvZHVjZXJJZH1gO1xuICAgICAgICAgICAgZGl2LmFwcGVuZENoaWxkKHJlbW90ZVByb2R1Y2VySW5mbyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGl2O1xufVxuXG5mdW5jdGlvbiBhZGRWaWRlb0F1ZGlvKGNvbnN1bWVyKSB7XG4gICAgaWYgKCEoY29uc3VtZXIgJiYgY29uc3VtZXIudHJhY2spKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChjb25zdW1lci5raW5kKTtcbiAgICAvLyBzZXQgc29tZSBhdHRyaWJ1dGVzIG9uIG91ciBhdWRpbyBhbmQgdmlkZW8gZWxlbWVudHMgdG8gbWFrZVxuICAgIC8vIG1vYmlsZSBTYWZhcmkgaGFwcHkuIG5vdGUgdGhhdCBmb3IgYXVkaW8gdG8gcGxheSB5b3UgbmVlZCB0byBiZVxuICAgIC8vIGNhcHR1cmluZyBmcm9tIHRoZSBtaWMvY2FtZXJhXG4gICAgaWYgKGNvbnN1bWVyLmtpbmQgPT09ICd2aWRlbycpIHtcbiAgICAgICAgZWwuc2V0QXR0cmlidXRlKCdwbGF5c2lubGluZScsIHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGVsLnNldEF0dHJpYnV0ZSgncGxheXNpbmxpbmUnLCB0cnVlKTtcbiAgICAgICAgZWwuc2V0QXR0cmlidXRlKCdhdXRvcGxheScsIHRydWUpO1xuICAgIH1cbiAgICAkKGAjcmVtb3RlLSR7Y29uc3VtZXIua2luZH1gKS5hcHBlbmRDaGlsZChlbCk7XG4gICAgZWwuc3JjT2JqZWN0ID0gbmV3IE1lZGlhU3RyZWFtKFtjb25zdW1lci50cmFjay5jbG9uZSgpXSk7XG4gICAgZWwuY29uc3VtZXIgPSBjb25zdW1lcjtcbiAgICAvLyBsZXQncyBcInlpZWxkXCIgYW5kIHJldHVybiBiZWZvcmUgcGxheWluZywgcmF0aGVyIHRoYW4gYXdhaXRpbmcgb25cbiAgICAvLyBwbGF5KCkgc3VjY2VlZGluZy4gcGxheSgpIHdpbGwgbm90IHN1Y2NlZWQgb24gYSBwcm9kdWNlci1wYXVzZWRcbiAgICAvLyB0cmFjayB1bnRpbCB0aGUgcHJvZHVjZXIgdW5wYXVzZXMuXG4gICAgZWwucGxheSgpXG4gICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKChlKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcbiAgICAgICAgfSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVZpZGVvQXVkaW8oY29uc3VtZXIpIHtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGNvbnN1bWVyLmtpbmQpLmZvckVhY2goKHYpID0+IHtcbiAgICAgICAgaWYgKHYuY29uc3VtZXIgPT09IGNvbnN1bWVyKSB7XG4gICAgICAgICAgICB2LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodik7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gc2hvd0NhbWVyYUluZm8oKSB7XG4gICAgbGV0IGRldmljZUlkID0gYXdhaXQgZ2V0Q3VycmVudERldmljZUlkKCksXG4gICAgICAgIGluZm9FbCA9ICQoJyNjYW1lcmEtaW5mbycpO1xuICAgIGlmICghZGV2aWNlSWQpIHtcbiAgICAgICAgaW5mb0VsLmlubmVySFRNTCA9ICcnO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBkZXZpY2VzID0gYXdhaXQgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5lbnVtZXJhdGVEZXZpY2VzKCksXG4gICAgICAgIGRldmljZUluZm8gPSBkZXZpY2VzLmZpbmQoKGQpID0+IGQuZGV2aWNlSWQgPT09IGRldmljZUlkKTtcbiAgICBpbmZvRWwuaW5uZXJIVE1MID0gYFxuICAgICAgJHtkZXZpY2VJbmZvLmxhYmVsfVxuICAgICAgPGJ1dHRvbiBvbmNsaWNrPVwiQ2xpZW50LmN5Y2xlQ2FtZXJhKClcIj5zd2l0Y2ggY2FtZXJhPC9idXR0b24+XG4gIGA7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRDdXJyZW50RGV2aWNlSWQoKSB7XG4gICAgaWYgKCFjYW1WaWRlb1Byb2R1Y2VyKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBsZXQgZGV2aWNlSWQgPSBjYW1WaWRlb1Byb2R1Y2VyLnRyYWNrLmdldFNldHRpbmdzKCkuZGV2aWNlSWQ7XG4gICAgaWYgKGRldmljZUlkKSB7XG4gICAgICAgIHJldHVybiBkZXZpY2VJZDtcbiAgICB9XG4gICAgLy8gRmlyZWZveCBkb2Vzbid0IGhhdmUgZGV2aWNlSWQgaW4gTWVkaWFUcmFja1NldHRpbmdzIG9iamVjdFxuICAgIGxldCB0cmFjayA9IGxvY2FsQ2FtICYmIGxvY2FsQ2FtLmdldFZpZGVvVHJhY2tzKClbMF07XG4gICAgaWYgKCF0cmFjaykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgbGV0IGRldmljZXMgPSBhd2FpdCBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmVudW1lcmF0ZURldmljZXMoKSxcbiAgICAgICAgZGV2aWNlSW5mbyA9IGRldmljZXMuZmluZCgoZCkgPT4gZC5sYWJlbC5zdGFydHNXaXRoKHRyYWNrLmxhYmVsKSk7XG4gICAgcmV0dXJuIGRldmljZUluZm8uZGV2aWNlSWQ7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUFjdGl2ZVNwZWFrZXIoKSB7XG4gICAgJCQoJy50cmFjay1zdWJzY3JpYmUnKS5mb3JFYWNoKChlbCkgPT4ge1xuICAgICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUtc3BlYWtlcicpO1xuICAgIH0pO1xuICAgIGlmIChjdXJyZW50QWN0aXZlU3BlYWtlci5wZWVySWQpIHtcbiAgICAgICAgJCQoYC50cmFjay1zdWJzY3JpYmUtJHtjdXJyZW50QWN0aXZlU3BlYWtlci5wZWVySWR9YCkuZm9yRWFjaCgoZWwpID0+IHtcbiAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZS1zcGVha2VyJyk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlQ2FtVmlkZW9Qcm9kdWNlclN0YXRzRGlzcGxheSgpIHtcbiAgICBsZXQgdHJhY2tzRWwgPSAkKCcjY2FtZXJhLXByb2R1Y2VyLXN0YXRzJyk7XG4gICAgdHJhY2tzRWwuaW5uZXJIVE1MID0gJyc7XG4gICAgaWYgKCFjYW1WaWRlb1Byb2R1Y2VyIHx8IGNhbVZpZGVvUHJvZHVjZXIucGF1c2VkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbWFrZVByb2R1Y2VyVHJhY2tTZWxlY3Rvcih7XG4gICAgICAgIGludGVybmFsVGFnOiAnbG9jYWwtY2FtLXRyYWNrcycsXG4gICAgICAgIGNvbnRhaW5lcjogdHJhY2tzRWwsXG4gICAgICAgIHBlZXJJZDogbXlQZWVySWQsXG4gICAgICAgIHByb2R1Y2VySWQ6IGNhbVZpZGVvUHJvZHVjZXIuaWQsXG4gICAgICAgIGN1cnJlbnRMYXllcjogY2FtVmlkZW9Qcm9kdWNlci5tYXhTcGF0aWFsTGF5ZXIsXG4gICAgICAgIGxheWVyU3dpdGNoRnVuYzogKGkpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdjbGllbnQgc2V0IGxheWVycyBmb3IgY2FtIHN0cmVhbScpO1xuICAgICAgICAgICAgY2FtVmlkZW9Qcm9kdWNlci5zZXRNYXhTcGF0aWFsTGF5ZXIoaSlcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVTY3JlZW5WaWRlb1Byb2R1Y2VyU3RhdHNEaXNwbGF5KCkge1xuICAgIGxldCB0cmFja3NFbCA9ICQoJyNzY3JlZW4tcHJvZHVjZXItc3RhdHMnKTtcbiAgICB0cmFja3NFbC5pbm5lckhUTUwgPSAnJztcbiAgICBpZiAoIXNjcmVlblZpZGVvUHJvZHVjZXIgfHwgc2NyZWVuVmlkZW9Qcm9kdWNlci5wYXVzZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBtYWtlUHJvZHVjZXJUcmFja1NlbGVjdG9yKHtcbiAgICAgICAgaW50ZXJuYWxUYWc6ICdsb2NhbC1zY3JlZW4tdHJhY2tzJyxcbiAgICAgICAgY29udGFpbmVyOiB0cmFja3NFbCxcbiAgICAgICAgcGVlcklkOiBteVBlZXJJZCxcbiAgICAgICAgcHJvZHVjZXJJZDogc2NyZWVuVmlkZW9Qcm9kdWNlci5pZCxcbiAgICAgICAgY3VycmVudExheWVyOiBzY3JlZW5WaWRlb1Byb2R1Y2VyLm1heFNwYXRpYWxMYXllcixcbiAgICAgICAgbGF5ZXJTd2l0Y2hGdW5jOiAoaSkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ2NsaWVudCBzZXQgbGF5ZXJzIGZvciBzY3JlZW4gc3RyZWFtJyk7XG4gICAgICAgICAgICBzY3JlZW5WaWRlb1Byb2R1Y2VyLnNldE1heFNwYXRpYWxMYXllcihpKVxuICAgICAgICB9XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNvbnN1bWVyc1N0YXRzRGlzcGxheSgpIHtcbiAgICB0cnkge1xuICAgICAgICBmb3IgKGxldCBjb25zdW1lciBvZiBjb25zdW1lcnMpIHtcbiAgICAgICAgICAgIGxldCBsYWJlbCA9ICQoYCNjb25zdW1lci1zdGF0cy0ke2NvbnN1bWVyLmlkfWApO1xuICAgICAgICAgICAgaWYgKGxhYmVsKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbnN1bWVyLnBhdXNlZCkge1xuICAgICAgICAgICAgICAgICAgICBsYWJlbC5pbm5lckhUTUwgPSAnKGNvbnN1bWVyIHBhdXNlZCknXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN0YXRzID0gbGFzdFBvbGxTeW5jRGF0YVtteVBlZXJJZF0uc3RhdHNbY29uc3VtZXIuaWRdLFxuICAgICAgICAgICAgICAgICAgICAgICAgYml0cmF0ZSA9ICctJztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiaXRyYXRlID0gTWF0aC5mbG9vcihzdGF0cy5iaXRyYXRlIC8gMTAwMC4wKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBsYWJlbC5pbm5lckhUTUwgPSBgW2NvbnN1bWVyIHBsYXlpbmcgJHtiaXRyYXRlfSBrYi9zXWA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgbWVkaWFJbmZvID0gbGFzdFBvbGxTeW5jRGF0YVtjb25zdW1lci5hcHBEYXRhLnBlZXJJZF0gJiZcbiAgICAgICAgICAgICAgICBsYXN0UG9sbFN5bmNEYXRhW2NvbnN1bWVyLmFwcERhdGEucGVlcklkXVxuICAgICAgICAgICAgICAgICAgICAubWVkaWFbY29uc3VtZXIuYXBwRGF0YS5tZWRpYVRhZ107XG4gICAgICAgICAgICBpZiAobWVkaWFJbmZvICYmICFtZWRpYUluZm8ucGF1c2VkKSB7XG4gICAgICAgICAgICAgICAgbGV0IHRyYWNrc0VsID0gJChgI3RyYWNrLWN0cmwtJHtjb25zdW1lci5wcm9kdWNlcklkfWApO1xuICAgICAgICAgICAgICAgIGlmICh0cmFja3NFbCAmJiBsYXN0UG9sbFN5bmNEYXRhW215UGVlcklkXVxuICAgICAgICAgICAgICAgICAgICAuY29uc3VtZXJMYXllcnNbY29uc3VtZXIuaWRdKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyYWNrc0VsLmlubmVySFRNTCA9ICcnO1xuICAgICAgICAgICAgICAgICAgICBsZXQgY3VycmVudExheWVyID0gbGFzdFBvbGxTeW5jRGF0YVtteVBlZXJJZF1cbiAgICAgICAgICAgICAgICAgICAgICAgIC5jb25zdW1lckxheWVyc1tjb25zdW1lci5pZF0uY3VycmVudExheWVyO1xuICAgICAgICAgICAgICAgICAgICBtYWtlUHJvZHVjZXJUcmFja1NlbGVjdG9yKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGludGVybmFsVGFnOiBjb25zdW1lci5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogdHJhY2tzRWwsXG4gICAgICAgICAgICAgICAgICAgICAgICBwZWVySWQ6IGNvbnN1bWVyLmFwcERhdGEucGVlcklkLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvZHVjZXJJZDogY29uc3VtZXIucHJvZHVjZXJJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRMYXllcjogY3VycmVudExheWVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJTd2l0Y2hGdW5jOiAoaSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdhc2sgc2VydmVyIHRvIHNldCBsYXllcnMnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWcoJ2NvbnN1bWVyLXNldC1sYXllcnMnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN1bWVySWQ6IGNvbnN1bWVyLmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGF0aWFsTGF5ZXI6IGlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLmxvZygnZXJyb3Igd2hpbGUgdXBkYXRpbmcgY29uc3VtZXJzIHN0YXRzIGRpc3BsYXknLCBlKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIG1ha2VQcm9kdWNlclRyYWNrU2VsZWN0b3Ioe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxUYWcsIGNvbnRhaW5lciwgcGVlcklkLCBwcm9kdWNlcklkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudExheWVyLCBsYXllclN3aXRjaEZ1bmNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkge1xuICAgIHRyeSB7XG4gICAgICAgIGxldCBwb2xsU3RhdHMgPSBsYXN0UG9sbFN5bmNEYXRhW3BlZXJJZF0gJiZcbiAgICAgICAgICAgIGxhc3RQb2xsU3luY0RhdGFbcGVlcklkXS5zdGF0c1twcm9kdWNlcklkXTtcbiAgICAgICAgaWYgKCFwb2xsU3RhdHMpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBzdGF0cyA9IFsuLi5BcnJheS5mcm9tKHBvbGxTdGF0cyldXG4gICAgICAgICAgICAuc29ydCgoYSwgYikgPT4gYS5yaWQgPiBiLnJpZCA/IDEgOiAoYS5yaWQgPCBiLnJpZCA/IC0xIDogMCkpO1xuICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgIGZvciAobGV0IHMgb2Ygc3RhdHMpIHtcbiAgICAgICAgICAgIGxldCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSxcbiAgICAgICAgICAgICAgICByYWRpbyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0JyksXG4gICAgICAgICAgICAgICAgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsYWJlbCcpLFxuICAgICAgICAgICAgICAgIHggPSBpO1xuICAgICAgICAgICAgcmFkaW8udHlwZSA9ICdyYWRpbyc7XG4gICAgICAgICAgICByYWRpby5uYW1lID0gYHJhZGlvLSR7aW50ZXJuYWxUYWd9LSR7cHJvZHVjZXJJZH1gO1xuICAgICAgICAgICAgcmFkaW8uY2hlY2tlZCA9IGN1cnJlbnRMYXllciA9PSB1bmRlZmluZWQgP1xuICAgICAgICAgICAgICAgIChpID09PSBzdGF0cy5sZW5ndGggLSAxKSA6XG4gICAgICAgICAgICAgICAgKGkgPT09IGN1cnJlbnRMYXllcik7XG4gICAgICAgICAgICByYWRpby5vbmNoYW5nZSA9ICgpID0+IGxheWVyU3dpdGNoRnVuYyh4KTtcbiAgICAgICAgICAgIGxldCBiaXRyYXRlID0gTWF0aC5mbG9vcihzLmJpdHJhdGUgLyAxMDAwKTtcbiAgICAgICAgICAgIGxhYmVsLmlubmVySFRNTCA9IGAke2JpdHJhdGV9IGtiL3NgO1xuICAgICAgICAgICAgZGl2LmFwcGVuZENoaWxkKHJhZGlvKTtcbiAgICAgICAgICAgIGRpdi5hcHBlbmRDaGlsZChsYWJlbCk7XG4gICAgICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZGl2KTtcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgICAgICBpZiAoaSkge1xuICAgICAgICAgICAgbGV0IHR4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgdHh0LmlubmVySFRNTCA9ICd0cmFja3MnO1xuICAgICAgICAgICAgY29udGFpbmVyLmluc2VydEJlZm9yZSh0eHQsIGNvbnRhaW5lci5maXJzdENoaWxkKTtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ2Vycm9yIHdoaWxlIHVwZGF0aW5nIHRyYWNrIHN0YXRzIGRpc3BsYXknLCBlKTtcbiAgICB9XG59XG5cbi8vXG4vLyBlbmNvZGluZ3MgZm9yIG91dGdvaW5nIHZpZGVvXG4vL1xuXG4vLyBqdXN0IHR3byByZXNvbHV0aW9ucywgZm9yIG5vdywgYXMgY2hyb21lIDc1IHNlZW1zIHRvIGlnbm9yZSBtb3JlXG4vLyB0aGFuIHR3byBlbmNvZGluZ3Ncbi8vXG5jb25zdCBDQU1fVklERU9fU0lNVUxDQVNUX0VOQ09ESU5HUyA9XG4gICAgW1xuICAgICAgICB7bWF4Qml0cmF0ZTogOTYwMDAsIHNjYWxlUmVzb2x1dGlvbkRvd25CeTogNH0sXG4gICAgICAgIHttYXhCaXRyYXRlOiA2ODAwMDAsIHNjYWxlUmVzb2x1dGlvbkRvd25CeTogMX0sXG4gICAgXTtcblxuZnVuY3Rpb24gY2FtRW5jb2RpbmdzKCkge1xuICAgIHJldHVybiBDQU1fVklERU9fU0lNVUxDQVNUX0VOQ09ESU5HUztcbn1cblxuLy8gaG93IGRvIHdlIGxpbWl0IGJhbmR3aWR0aCBmb3Igc2NyZWVuIHNoYXJlIHN0cmVhbXM/XG4vL1xuZnVuY3Rpb24gc2NyZWVuc2hhcmVFbmNvZGluZ3MoKSB7XG4gICAgbnVsbDtcbn1cblxuLy9cbi8vIG91ciBcInNpZ25hbGluZ1wiIGZ1bmN0aW9uIC0tIGp1c3QgYW4gaHR0cCBmZXRjaFxuLy9cblxuYXN5bmMgZnVuY3Rpb24gc2lnKGVuZHBvaW50LCBkYXRhLCBiZWFjb24pIHtcbiAgICB0cnkge1xuICAgICAgICBsZXQgaGVhZGVycyA9IHsnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nfSxcbiAgICAgICAgICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeSh7Li4uZGF0YSwgcGVlcklkOiBteVBlZXJJZH0pO1xuXG4gICAgICAgIGlmIChiZWFjb24pIHtcbiAgICAgICAgICAgIG5hdmlnYXRvci5zZW5kQmVhY29uKCdodHRwOi8vMTAuOC4yNDAuMTMzOjMwMDAvc2lnbmFsaW5nLycgKyBlbmRwb2ludCwgYm9keSk7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFxuICAgICAgICAgICAgJ2h0dHBzOi8vMTAuOC4yNDAuMTMzOjMwMDAvc2lnbmFsaW5nLycgKyBlbmRwb2ludCwge21ldGhvZDogJ1BPU1QnLCBib2R5LCBoZWFkZXJzfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgICAgcmV0dXJuIHtlcnJvcjogZX07XG4gICAgfVxufVxuXG4vL1xuLy8gc2ltcGxlIHV1aWQgaGVscGVyIGZ1bmN0aW9uXG4vL1xuXG5mdW5jdGlvbiB1dWlkdjQoKSB7XG4gICAgcmV0dXJuICgnMTExLTExMS0xMTExJykucmVwbGFjZSgvWzAxOF0vZywgKCkgPT5cbiAgICAgICAgKGNyeXB0by5nZXRSYW5kb21WYWx1ZXMobmV3IFVpbnQ4QXJyYXkoMSkpWzBdICYgMTUpLnRvU3RyaW5nKDE2KSk7XG59XG5cbi8vXG4vLyBwcm9taXNpZmllZCBzbGVlcFxuLy9cblxuYXN5bmMgZnVuY3Rpb24gc2xlZXAobXMpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHIpID0+IHNldFRpbWVvdXQoKCkgPT4gcigpLCBtcykpO1xufVxuIl0sIm5hbWVzIjpbInRoaXMiLCJyZXF1aXJlJCQwIiwiZGVidWdfMSIsInMiLCJtIiwiaCIsImQiLCJ3IiwieSIsInBhcnNlIiwiZm10TG9uZyIsImZtdFNob3J0IiwicGx1cmFsIiwic2V0dXAiLCJ1dGlsc18xIiwiaDI2NCIsImV2ZW50c18xIiwiZXJyb3JzXzEiLCJhd2FpdHF1ZXVlXzEiLCJncmFtbWFyIiwic2RwVHJhbnNmb3JtIiwic2RwQ29tbW9uVXRpbHMiLCJzY2FsYWJpbGl0eU1vZGVzXzEiLCJzZHBVbmlmaWVkUGxhblV0aWxzIiwic2RwUGxhbkJVdGlscyIsImJvd3NlciIsInJlcXVpcmUkJDEiLCJyZXF1aXJlJCQyIiwicmVxdWlyZSQkMyIsInJlcXVpcmUkJDQiLCJyZXF1aXJlJCQ1IiwicmVxdWlyZSQkNiIsInJlcXVpcmUkJDciLCJ0b1N0ciIsImtleXNTaGltIiwiaXNBcmdzIiwia2V5cyIsInNsaWNlIiwiaW1wbGVtZW50YXRpb24iLCJnbG9iYWwiLCJoYXNTeW1ib2xTaGFtIiwidW5kZWZpbmVkIiwiaGFzU3ltYm9scyIsImJpbmQiLCJwb2x5ZmlsbCIsImdldFBvbHlmaWxsIiwiZGVmaW5lIiwiaGFzVG9TdHJpbmdUYWciLCIkVHlwZUVycm9yIiwic3VwcG9ydHNEZXNjcmlwdG9ycyIsIiRnT1BEIiwiZ09QRCIsImRlZmluZVByb3BlcnR5IiwiZ2V0UHJvdG8iLCJzaGltIiwiaXMiLCJpc0FyZ3VtZW50cyIsImZsYWdzIiwiaXNEYXRlIiwiY3VycmVudEFjdGl2ZVNwZWFrZXIiLCJsYXN0UG9sbFN5bmNEYXRhIiwiY29uc3VtZXJzIiwiZGV2aWNlIiwibWVkaWFzb3VwLkRldmljZSIsImpvaW5lZCIsInBvbGxpbmdJbnRlcnZhbCIsInNlbmRUcmFuc3BvcnQiLCJjYW1WaWRlb1Byb2R1Y2VyIiwibG9jYWxDYW0iLCJjYW1BdWRpb1Byb2R1Y2VyIiwibG9jYWxTY3JlZW4iLCJzY3JlZW5WaWRlb1Byb2R1Y2VyIiwic2NyZWVuQXVkaW9Qcm9kdWNlciIsInJlY3ZUcmFuc3BvcnQiLCJkZWVwRXF1YWwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0NBQUEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBbUQsY0FBYyxDQUFDLENBQUMsR0FBOEcsQ0FBQyxDQUFDQSxjQUFJLEVBQUUsVUFBVSxDQUFDLE9BQU8sU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLE9BQU8sTUFBTSxFQUFFLE1BQU0sQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLE1BQU0sQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBYyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsbUJBQW1CLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLElBQUksSUFBSSxDQUFDLE9BQU0sSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLE9BQU0sSUFBSSxDQUFDLElBQUksUUFBUSxDQUFDLE9BQU0sTUFBTSxDQUFDLElBQUksUUFBUSxDQUFDLE9BQU0sSUFBSSxDQUFDLElBQUksUUFBUSxDQUFDLE9BQU0sTUFBTSxDQUFDLElBQUksUUFBUSxDQUFDLE9BQU0sT0FBTyxDQUFDLElBQUksUUFBUSxDQUFDLE9BQU0sR0FBRyxDQUFDLElBQUksUUFBUSxDQUFDLE9BQU0sR0FBRyxDQUFDLElBQUksUUFBUSxDQUFDLE9BQU0sS0FBSyxDQUFDLElBQUksU0FBUyxDQUFDLE9BQU0sSUFBSSxDQUFDLFFBQVEsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsbUJBQW1CLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsT0FBTSxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTSxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTSxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTSxXQUFXLENBQUMsS0FBSyxFQUFFLENBQUMsT0FBTSxVQUFVLENBQUMsS0FBSyxFQUFFLENBQUMsT0FBTSxZQUFZLENBQUMsS0FBSyxFQUFFLENBQUMsT0FBTSxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUMsT0FBTSxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUMsT0FBTSxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUMsT0FBTSxVQUFVLENBQUMsUUFBUSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxJQUFJLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE9BQU8sS0FBSyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMscUJBQXFCLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxRQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFjLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsT0FB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Q0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBYyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDLE1BQU0sSUFBSSxLQUFLLENBQUMsOEJBQThCLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxRQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFjLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQyxNQUFNLElBQUksS0FBSyxDQUFDLG9DQUFvQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLEdBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksWUFBWSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxJQUFJLEtBQUssQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLFdBQVcsRUFBRSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLENBQUMsT0FBTyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksWUFBWSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxJQUFJLEtBQUssQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxPQUFPLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksWUFBWSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxJQUFJLEtBQUssQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLFdBQVcsRUFBRSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxZQUFZLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLElBQUksS0FBSyxDQUFDLHNDQUFzQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLE9BQU8sSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLEdBQUcsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDLE9BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxRQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFjLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLDRCQUE0QixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLDBCQUEwQixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLGlDQUFpQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsMENBQTBDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLGdDQUFnQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLGdDQUFnQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsZ0NBQWdDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsaUNBQWlDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsK0JBQStCLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLHFDQUFxQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLHFDQUFxQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLG9DQUFvQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsa0NBQWtDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLG9DQUFvQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLDBDQUEwQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLGlEQUFpRCxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLGtDQUFrQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsOEJBQThCLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLG9DQUFvQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsOEJBQThCLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLDZCQUE2QixDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLHFCQUFxQixDQUFDLGNBQWMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsb0NBQW9DLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLHlDQUF5QyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMseUNBQXlDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsMEJBQTBCLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsbURBQW1ELENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLGlDQUFpQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsMENBQTBDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLDRCQUE0QixDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLHFCQUFxQixDQUFDLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLHdCQUF3QixDQUFDLGNBQWMsQ0FBQyxPQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsUUFBTyxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBYyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLHdDQUF3QyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLGdDQUFnQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsNkJBQTZCLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMscUJBQXFCLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsa0NBQWtDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxjQUFjLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsMEJBQTBCLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxPQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxPQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsa0NBQWtDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsUUFBTyxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBYyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLE9BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMseUJBQXlCLENBQUMsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLE9BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsT0FBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsT0FBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLE9BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLE9BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxPQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxlQUFlLENBQUMsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLE9BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsT0FBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU0sWUFBWSxHQUFHLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsT0FBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTSxNQUFNLEdBQUcsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxPQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTSxlQUFlLEdBQUcsQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxPQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU0sU0FBUyxHQUFHLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxPQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTSxTQUFTLEdBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxPQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTSxPQUFPLEdBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxPQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFNLFNBQVMsR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLE9BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFNLE9BQU8sR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLE9BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFNLGVBQWUsR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLE9BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFNLE1BQU0sR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLE9BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxRQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFjLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU0sZ0JBQWdCLEdBQUcsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FB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QyxHQUFHLEdBQUcsQ0FBQztDQUNwQyxHQUFHO0NBQ0gsRUFBRSxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUM7Q0FDbkIsQ0FBQztBQUNEO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7QUFDQTtDQUNBLFNBQVMsT0FBTyxDQUFDLEVBQUUsRUFBRTtDQUNyQixFQUFFLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7Q0FDM0IsRUFBRSxJQUFJLEtBQUssSUFBSSxDQUFDLEVBQUU7Q0FDbEIsSUFBSSxPQUFPLE1BQU0sQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztDQUN2QyxHQUFHO0NBQ0gsRUFBRSxJQUFJLEtBQUssSUFBSSxDQUFDLEVBQUU7Q0FDbEIsSUFBSSxPQUFPLE1BQU0sQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztDQUN4QyxHQUFHO0NBQ0gsRUFBRSxJQUFJLEtBQUssSUFBSSxDQUFDLEVBQUU7Q0FDbEIsSUFBSSxPQUFPLE1BQU0sQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQztDQUMxQyxHQUFHO0NBQ0gsRUFBRSxJQUFJLEtBQUssSUFBSSxDQUFDLEVBQUU7Q0FDbEIsSUFBSSxPQUFPLE1BQU0sQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQztDQUMxQyxHQUFHO0NBQ0gsRUFBRSxPQUFPLEVBQUUsR0FBRyxLQUFLLENBQUM7Q0FDcEIsQ0FBQztBQUNEO0NBQ0E7Q0FDQTtDQUNBO0FBQ0E7Q0FDQSxTQUFTLE1BQU0sQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUU7Q0FDcEMsRUFBRSxJQUFJLFFBQVEsR0FBRyxLQUFLLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQztDQUNsQyxFQUFFLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FB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LFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFD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Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLFNBQVM7Q0FDVixDQUFDLENBQUM7QUFDRjtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0FBQ0E7Q0FDQTtDQUNBLFNBQVMsU0FBUyxHQUFHO0NBQ3JCO0NBQ0E7Q0FDQTtDQUNBLENBQUMsSUFBSSxPQUFPLE1BQU0sS0FBSyxXQUFXLElBQUksTUFBTSxDQUFDLE9BQU8sS0FBSyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksS0FBSyxVQUFVLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRTtDQUN2SCxFQUFFLE9BQU8sSUFBSSxDQUFDO0NBQ2QsRUFBRTtBQUNGO0NBQ0E7Q0FDQSxDQUFDLElBQUksT0FBTyxTQUFTLEtBQUssV0FBVyxJQUFJLFNBQVMsQ0FBQyxTQUFTLElBQUksU0FBUyxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsRUFBRTtDQUNsSSxFQUFFLE9BQU8sS0FBSyxDQUFDO0NBQ2YsRUFBRTtBQUNGO0NBQ0E7Q0FDQTtDQUNBLENBQUMsT0FBTyxDQUFDLE9BQU8sUUFBUSxLQUFLLFdBQVcsSUFBSSxRQUFRLENBQUMsZUFBZSxJQUFJLFFBQVEsQ0FBQyxlQUFlLENBQUMsS0FBSyxJQUFJLFFBQVEsQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLGdCQUFnQjtDQUN6SjtDQUNBLEdBQUcsT0FBTyxNQUFNLEtBQUssV0FBVyxJQUFJLE1BQU0sQ0FBQyxPQUFPLEtBQUssTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEtBQUssTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0NBQ3JJO0NBQ0E7Q0FDQSxHQUFHLE9BQU8sU0FBUyxLQUFLLFdBQVcsSUFBSSxTQUFTLENBQUMsU0FBUyxJQUFJLFNBQVMsQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLElBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO0NBQ3pKO0NBQ0EsR0FBRyxPQUFPLFNBQVMsS0FBSyxXQUFXLElBQUksU0FBUyxDQUFDLFNBQVMsSUFBSSxTQUFTLENBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRSxDQUFDLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUM7Q0FDN0gsQ0FBQztBQUNEO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtBQUNBO0NBQ0EsU0FBUyxVQUFVLENBQUMsSUFBSSxFQUFFO0NBQzFCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLEdBQUcsRUFBRTtDQUN0QyxFQUFFLElBQUksQ0FBQyxTQUFTO0NBQ2hCLEdBQUcsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLEdBQUcsR0FBRyxDQUFDO0NBQ2hDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztDQUNULEdBQUcsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLEdBQUcsR0FBRyxDQUFDO0NBQ2hDLEVBQUUsR0FBRyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMzQztDQUNBLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7Q0FDdEIsRUFBRSxPQUFPO0NBQ1QsRUFBRTtBQUNGO0NBQ0EsQ0FBQyxNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztDQUNsQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztBQUN4QztDQUNBO0NBQ0E7Q0FDQTtDQUNBLENBQUMsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0NBQ2YsQ0FBQyxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7Q0FDZixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLEtBQUssSUFBSTtDQUN6QyxFQUFFLElBQUksS0FBSyxLQUFLLElBQUksRUFBRTtDQUN0QixHQUFHLE9BQU87Q0FDVixHQUFHO0NBQ0gsRUFBRSxLQUFLLEVBQUUsQ0FBQztDQUNWLEVBQUUsSUFBSSxLQUFLLEtBQUssSUFBSSxFQUFFO0NBQ3RCO0NBQ0E7Q0FDQSxHQUFHLEtBQUssR0FBRyxLQUFLLENBQUM7Q0FDakIsR0FBRztDQUNILEVBQUUsQ0FBQyxDQUFDO0FBQ0o7Q0FDQSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztDQUMxQixDQUFDO0FBQ0Q7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQSxTQUFTLEdBQUcsQ0FBQyxHQUFHLElBQUksRUFBRTtDQUN0QjtDQUNBO0NBQ0EsQ0FBQyxPQUFPLE9BQU8sT0FBTyxLQUFLLFFBQVE7Q0FDbkMsRUFBRSxPQUFPLENBQUMsR0FBRztDQUNiLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO0NBQ3ZCLENBQUM7QUFDRDtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLFNBQVMsSUFBSSxDQUFDLFVBQVUsRUFBRTtDQUMxQixDQUFDLElBQUk7Q0FDTCxFQUFFLElBQUksVUFBVSxFQUFFO0NBQ2xCLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0NBQ2hELEdBQUcsTUFBTTtDQUNULEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7Q0FDdkMsR0FBRztDQUNILEVBQUUsQ0FBQyxPQUFPLEtBQUssRUFBRTtDQUNqQjtDQUNBO0NBQ0EsRUFBRTtDQUNGLENBQUM7QUFDRDtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLFNBQVMsSUFBSSxHQUFHO0NBQ2hCLENBQUMsSUFBSSxDQUFDLENBQUM7Q0FDUCxDQUFDLElBQUk7Q0FDTCxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztDQUN2QyxFQUFFLENBQUMsT0FBTyxLQUFLLEVBQUU7Q0FDakI7Q0FDQTtDQUNBLEVBQUU7QUFDRjtDQUNBO0NBQ0EsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLE9BQU8sT0FBTyxLQUFLLFdBQVcsSUFBSSxLQUFLLElBQUksT0FBTyxFQUFFO0NBQy9ELEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDO0NBQ3hCLEVBQUU7QUFDRjtDQUNBLENBQUMsT0FBTyxDQUFDLENBQUM7Q0FDVixDQUFDO0FBQ0Q7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtBQUNBO0NBQ0EsU0FBUyxZQUFZLEdBQUc7Q0FDeEIsQ0FBQyxJQUFJO0NBQ0w7Q0FDQTtDQUNBLEVBQUUsT0FBTyxZQUFZLENBQUM7Q0FDdEIsRUFBRSxDQUFDLE9BQU8sS0FBSyxFQUFFO0NBQ2pCO0NBQ0E7Q0FDQSxFQUFFO0NBQ0YsQ0FBQztBQUNEO0NBQ0EsY0FBYyxHQUFHWixRQUFtQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzlDO0NBQ0EsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUM7QUFDcEM7Q0FDQTtDQUNBO0NBQ0E7QUFDQTtDQUNBLFVBQVUsQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDLEVBQUU7Q0FDNUIsQ0FBQyxJQUFJO0NBQ0wsRUFBRSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDM0IsRUFBRSxDQUFDLE9BQU8sS0FBSyxFQUFFO0NBQ2pCLEVBQUUsT0FBTyw4QkFBOEIsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDO0NBQ3hELEVBQUU7Q0FDRixDQUFDOzs7Ozs7Ozs7OztDQ3ZRRCxNQUFNLEtBQUssR0FBR0EsU0FBZ0IsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0FBQ3hEO0NBQ0E7Q0FDQSxLQUFLLENBQUMsR0FBRyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0NBQ3ZDO0FBQ0E7Q0FDQSxNQUFNLDBCQUEwQixHQUFHLENBQUMsQ0FBQztDQUNyQyxNQUFNLGVBQWUsR0FBRyxDQUFDLENBQUM7Q0FDMUIsTUFBTSxXQUFXLEdBQUcsQ0FBQyxDQUFDO0NBQ3RCLE1BQU0sc0JBQXNCLEdBQUcsQ0FBQyxDQUFDO0NBQ2pDLE1BQU0sV0FBVyxHQUFHLENBQUMsQ0FBQztBQUN0QjtDQUNBLGtDQUFrQyxHQUFHLDBCQUEwQixDQUFDO0NBQ2hFLHVCQUF1QixHQUFHLGVBQWUsQ0FBQztDQUMxQyxtQkFBbUIsR0FBRyxXQUFXLENBQUM7Q0FDbEMsOEJBQThCLEdBQUcsc0JBQXNCLENBQUM7Q0FDeEQsbUJBQW1CLEdBQUcsV0FBVyxDQUFDO0FBQ2xDO0NBQ0E7Q0FDQTtDQUNBLE1BQU0sUUFBUSxHQUFHLENBQUMsQ0FBQztDQUNuQixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUM7Q0FDbEIsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDO0NBQ3BCLE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQztDQUNwQixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUM7Q0FDcEIsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDO0NBQ2xCLE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQztDQUNwQixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUM7Q0FDcEIsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDO0NBQ2xCLE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQztDQUNwQixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUM7Q0FDcEIsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDO0NBQ2xCLE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQztDQUNwQixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUM7Q0FDcEIsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDO0NBQ2xCLE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQztDQUNwQixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUM7QUFDcEI7Q0FDQSxnQkFBZ0IsR0FBRyxRQUFRLENBQUM7Q0FDNUIsY0FBYyxHQUFHLE1BQU0sQ0FBQztDQUN4QixnQkFBZ0IsR0FBRyxRQUFRLENBQUM7Q0FDNUIsZ0JBQWdCLEdBQUcsUUFBUSxDQUFDO0NBQzVCLGdCQUFnQixHQUFHLFFBQVEsQ0FBQztDQUM1QixjQUFjLEdBQUcsTUFBTSxDQUFDO0NBQ3hCLGdCQUFnQixHQUFHLFFBQVEsQ0FBQztDQUM1QixnQkFBZ0IsR0FBRyxRQUFRLENBQUM7Q0FDNUIsY0FBYyxHQUFHLE1BQU0sQ0FBQztDQUN4QixnQkFBZ0IsR0FBRyxRQUFRLENBQUM7Q0FDNUIsZ0JBQWdCLEdBQUcsUUFBUSxDQUFDO0NBQzVCLGNBQWMsR0FBRyxNQUFNLENBQUM7Q0FDeEIsZ0JBQWdCLEdBQUcsUUFBUSxDQUFDO0NBQzVCLGdCQUFnQixHQUFHLFFBQVEsQ0FBQztDQUM1QixjQUFjLEdBQUcsTUFBTSxDQUFDO0NBQ3hCLGdCQUFnQixHQUFHLFFBQVEsQ0FBQztDQUM1QixnQkFBZ0IsR0FBRyxRQUFRLENBQUM7QUFDNUI7Q0FDQSxNQUFNLGNBQWM7Q0FDcEI7Q0FDQSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsS0FBSztDQUMzQixDQUFDO0NBQ0QsRUFBRSxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztDQUN6QixFQUFFLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0NBQ3JCLEVBQUU7Q0FDRixDQUFDO0FBQ0Q7Q0FDQSxzQkFBc0IsR0FBRyxjQUFjLENBQUM7QUFDeEM7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLE1BQU0scUJBQXFCO0NBQzNCLENBQUMsSUFBSSxjQUFjLENBQUMsMEJBQTBCLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDMUQ7Q0FDQTtDQUNBO0NBQ0EsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLENBQUM7QUFDaEM7Q0FDQTtDQUNBO0NBQ0EsTUFBTSxVQUFVO0NBQ2hCO0NBQ0EsQ0FBQyxXQUFXLENBQUMsR0FBRztDQUNoQixDQUFDO0NBQ0QsRUFBRSxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsY0FBYyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztDQUN6QyxFQUFFLElBQUksQ0FBQyxZQUFZLEdBQUcsY0FBYyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztDQUMvQyxFQUFFO0FBQ0Y7Q0FDQSxDQUFDLE9BQU8sQ0FBQyxLQUFLO0NBQ2QsQ0FBQztDQUNELEVBQUUsT0FBTyxJQUFJLENBQUMsWUFBWSxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDcEQsRUFBRTtDQUNGLENBQUM7QUFDRDtDQUNBO0NBQ0EsTUFBTSxjQUFjO0NBQ3BCO0NBQ0EsQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRSxPQUFPO0NBQzlDLENBQUM7Q0FDRCxFQUFFLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO0NBQ2pDLEVBQUUsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7Q0FDakMsRUFBRSxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztDQUN6QixFQUFFO0NBQ0YsQ0FBQztBQUNEO0NBQ0E7Q0FDQSxNQUFNLGVBQWU7Q0FDckI7Q0FDQSxDQUFDLElBQUksY0FBYyxDQUFDLElBQUksRUFBRSxJQUFJLFVBQVUsQ0FBQyxVQUFVLENBQUMsRUFBRSwwQkFBMEIsQ0FBQztDQUNqRixDQUFDLElBQUksY0FBYyxDQUFDLElBQUksRUFBRSxJQUFJLFVBQVUsQ0FBQyxVQUFVLENBQUMsRUFBRSwwQkFBMEIsQ0FBQztDQUNqRixDQUFDLElBQUksY0FBYyxDQUFDLElBQUksRUFBRSxJQUFJLFVBQVUsQ0FBQyxVQUFVLENBQUMsRUFBRSwwQkFBMEIsQ0FBQztDQUNqRixDQUFDLElBQUksY0FBYyxDQUFDLElBQUksRUFBRSxJQUFJLFVBQVUsQ0FBQyxVQUFVLENBQUMsRUFBRSxlQUFlLENBQUM7Q0FDdEUsQ0FBQyxJQUFJLGNBQWMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxVQUFVLENBQUMsVUFBVSxDQUFDLEVBQUUsZUFBZSxDQUFDO0NBQ3RFLENBQUMsSUFBSSxjQUFjLENBQUMsSUFBSSxFQUFFLElBQUksVUFBVSxDQUFDLFVBQVUsQ0FBQyxFQUFFLFdBQVcsQ0FBQztDQUNsRSxDQUFDLElBQUksY0FBYyxDQUFDLElBQUksRUFBRSxJQUFJLFVBQVUsQ0FBQyxVQUFVLENBQUMsRUFBRSxXQUFXLENBQUM7Q0FDbEUsQ0FBQyxJQUFJLGNBQWMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxVQUFVLENBQUMsVUFBVSxDQUFDLEVBQUUsc0JBQXNCLENBQUM7Q0FDN0UsQ0FBQyxDQUFDO0FBQ0Y7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQSwyQkFBMkIsR0FBRyxTQUFTLEdBQUc7Q0FDMUM7Q0FDQTtDQUNBLENBQUMsSUFBSSxPQUFPLEdBQUcsS0FBSyxRQUFRLElBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxDQUFDO0NBQ2hELEVBQUUsT0FBTyxJQUFJLENBQUM7QUFDZDtDQUNBLENBQUMsTUFBTSx3QkFBd0IsR0FBRyxRQUFRLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ3BEO0NBQ0EsQ0FBQyxJQUFJLHdCQUF3QixLQUFLLENBQUM7Q0FDbkMsRUFBRSxPQUFPLElBQUksQ0FBQztBQUNkO0NBQ0E7Q0FDQSxDQUFDLE1BQU0sU0FBUyxHQUFHLHdCQUF3QixHQUFHLElBQUksQ0FBQztDQUNuRCxDQUFDLE1BQU0sV0FBVyxHQUFHLENBQUMsd0JBQXdCLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQztDQUM1RCxDQUFDLE1BQU0sV0FBVyxHQUFHLENBQUMsd0JBQXdCLElBQUksRUFBRSxJQUFJLElBQUksQ0FBQztBQUM3RDtDQUNBO0NBQ0EsQ0FBQyxJQUFJLEtBQUssQ0FBQztBQUNYO0NBQ0EsQ0FBQyxRQUFRLFNBQVM7Q0FDbEI7Q0FDQSxFQUFFLEtBQUssUUFBUTtDQUNmLEVBQUU7Q0FDRixHQUFHLEtBQUssR0FBRyxDQUFDLFdBQVcsR0FBRyxrQkFBa0IsTUFBTSxDQUFDLEdBQUcsUUFBUSxHQUFHLFFBQVEsQ0FBQztDQUMxRSxHQUFHLE1BQU07Q0FDVCxHQUFHO0NBQ0gsRUFBRSxLQUFLLE1BQU0sQ0FBQztDQUNkLEVBQUUsS0FBSyxRQUFRLENBQUM7Q0FDaEIsRUFBRSxLQUFLLFFBQVEsQ0FBQztDQUNoQixFQUFFLEtBQUssTUFBTSxDQUFDO0NBQ2QsRUFBRSxLQUFLLFFBQVEsQ0FBQztDQUNoQixFQUFFLEtBQUssUUFBUSxDQUFDO0NBQ2hCLEVBQUUsS0FBSyxNQUFNLENBQUM7Q0FDZCxFQUFFLEtBQUssUUFBUSxDQUFDO0NBQ2hCLEVBQUUsS0FBSyxRQUFRLENBQUM7Q0FDaEIsRUFBRSxLQUFLLE1BQU0sQ0FBQztDQUNkLEVBQUUsS0FBSyxRQUFRLENBQUM7Q0FDaEIsRUFBRSxLQUFLLFFBQVEsQ0FBQztDQUNoQixFQUFFLEtBQUssTUFBTSxDQUFDO0NBQ2QsRUFBRSxLQUFLLFFBQVEsQ0FBQztDQUNoQixFQUFFLEtBQUssUUFBUTtDQUNmLEVBQUU7Q0FDRixHQUFHLEtBQUssR0FBRyxTQUFTLENBQUM7Q0FDckIsR0FBRyxNQUFNO0NBQ1QsR0FBRztDQUNIO0NBQ0EsRUFBRTtDQUNGLEVBQUU7Q0FDRixHQUFHLEtBQUssQ0FBQyxtREFBbUQsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUN6RTtDQUNBLEdBQUcsT0FBTyxJQUFJLENBQUM7Q0FDZixHQUFHO0NBQ0gsRUFBRTtBQUNGO0NBQ0E7Q0FDQSxDQUFDLEtBQUssTUFBTSxPQUFPLElBQUksZUFBZTtDQUN0QyxDQUFDO0NBQ0QsRUFBRTtDQUNGLEdBQUcsV0FBVyxLQUFLLE9BQU8sQ0FBQyxXQUFXO0NBQ3RDLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDO0NBQzNDO0NBQ0EsRUFBRTtDQUNGLEdBQUcsT0FBTyxJQUFJLGNBQWMsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO0NBQ3JELEdBQUc7Q0FDSCxFQUFFO0FBQ0Y7Q0FDQSxDQUFDLEtBQUssQ0FBQywwRUFBMEUsQ0FBQyxDQUFDO0FBQ25GO0NBQ0EsQ0FBQyxPQUFPLElBQUksQ0FBQztDQUNiLENBQUMsQ0FBQztBQUNGO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLDhCQUE4QixHQUFHLFNBQVMsZ0JBQWdCO0NBQzFEO0NBQ0E7Q0FDQSxDQUFDLElBQUksZ0JBQWdCLENBQUMsS0FBSyxJQUFJLFFBQVE7Q0FDdkMsQ0FBQztDQUNELEVBQUUsUUFBUSxnQkFBZ0IsQ0FBQyxPQUFPO0NBQ2xDO0NBQ0EsR0FBRyxLQUFLLDBCQUEwQjtDQUNsQyxHQUFHO0NBQ0gsSUFBSSxPQUFPLFFBQVEsQ0FBQztDQUNwQixJQUFJO0NBQ0osR0FBRyxLQUFLLGVBQWU7Q0FDdkIsR0FBRztDQUNILElBQUksT0FBTyxRQUFRLENBQUM7Q0FDcEIsSUFBSTtDQUNKLEdBQUcsS0FBSyxXQUFXO0NBQ25CLEdBQUc7Q0FDSCxJQUFJLE9BQU8sUUFBUSxDQUFDO0NBQ3BCLElBQUk7Q0FDSjtDQUNBLEdBQUc7Q0FDSCxHQUFHO0NBQ0gsSUFBSSxLQUFLO0NBQ1QsS0FBSyxvRUFBb0U7Q0FDekUsS0FBSyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUMvQjtDQUNBLElBQUksT0FBTyxJQUFJLENBQUM7Q0FDaEIsSUFBSTtDQUNKLEdBQUc7Q0FDSCxFQUFFO0FBQ0Y7Q0FDQSxDQUFDLElBQUksc0JBQXNCLENBQUM7QUFDNUI7Q0FDQSxDQUFDLFFBQVEsZ0JBQWdCLENBQUMsT0FBTztDQUNqQztDQUNBLEVBQUUsS0FBSywwQkFBMEI7Q0FDakMsRUFBRTtDQUNGLEdBQUcsc0JBQXNCLEdBQUcsTUFBTSxDQUFDO0NBQ25DLEdBQUcsTUFBTTtDQUNULEdBQUc7Q0FDSCxFQUFFLEtBQUssZUFBZTtDQUN0QixFQUFFO0NBQ0YsR0FBRyxzQkFBc0IsR0FBRyxNQUFNLENBQUM7Q0FDbkMsR0FBRyxNQUFNO0NBQ1QsR0FBRztDQUNILEVBQUUsS0FBSyxXQUFXO0NBQ2xCLEVBQUU7Q0FDRixHQUFHLHNCQUFzQixHQUFHLE1BQU0sQ0FBQztDQUNuQyxHQUFHLE1BQU07Q0FDVCxHQUFHO0NBQ0gsRUFBRSxLQUFLLHNCQUFzQjtDQUM3QixFQUFFO0NBQ0YsR0FBRyxzQkFBc0IsR0FBRyxNQUFNLENBQUM7Q0FDbkMsR0FBRyxNQUFNO0NBQ1QsR0FBRztDQUNILEVBQUUsS0FBSyxXQUFXO0NBQ2xCLEVBQUU7Q0FDRixHQUFHLHNCQUFzQixHQUFHLE1BQU0sQ0FBQztDQUNuQyxHQUFHLE1BQU07Q0FDVCxHQUFHO0NBQ0gsRUFBRTtDQUNGLEVBQUU7Q0FDRixHQUFHLEtBQUs7Q0FDUixJQUFJLG9EQUFvRDtDQUN4RCxJQUFJLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzlCO0NBQ0EsR0FBRyxPQUFPLElBQUksQ0FBQztDQUNmLEdBQUc7Q0FDSCxFQUFFO0FBQ0Y7Q0FDQSxDQUFDLElBQUksUUFBUSxHQUFHLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUN0RDtDQUNBLENBQUMsSUFBSSxRQUFRLENBQUMsTUFBTSxLQUFLLENBQUM7Q0FDMUIsRUFBRSxRQUFRLEdBQUcsQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztBQUM1QjtDQUNBLENBQUMsT0FBTyxDQUFDLEVBQUUsc0JBQXNCLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO0NBQy9DLENBQUMsQ0FBQztBQUNGO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQSw4QkFBOEIsR0FBRyxTQUFTLE1BQU0sR0FBRyxFQUFFO0NBQ3JEO0NBQ0EsQ0FBQyxNQUFNLGdCQUFnQixHQUFHLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBQ3JEO0NBQ0EsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCO0NBQ3pCLElBQUkscUJBQXFCO0NBQ3pCLElBQUksT0FBTyxDQUFDLG1CQUFtQixDQUFDLGdCQUFnQixDQUFDLENBQUM7Q0FDbEQsQ0FBQyxDQUFDO0FBQ0Y7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQSxxQkFBcUIsR0FBRyxTQUFTLE9BQU8sR0FBRyxFQUFFLEVBQUUsT0FBTyxHQUFHLEVBQUU7Q0FDM0Q7Q0FDQSxDQUFDLE1BQU0sa0JBQWtCLEdBQUcsT0FBTyxDQUFDLHNCQUFzQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0NBQ3BFLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxPQUFPLENBQUMsc0JBQXNCLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDcEU7Q0FDQTtDQUNBLENBQUMsT0FBTyxPQUFPO0NBQ2YsRUFBRSxrQkFBa0I7Q0FDcEIsRUFBRSxrQkFBa0I7Q0FDcEIsRUFBRSxrQkFBa0IsQ0FBQyxPQUFPLEtBQUssa0JBQWtCLENBQUMsT0FBTztDQUMzRCxFQUFFLENBQUM7Q0FDSCxDQUFDLENBQUM7QUFDRjtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQSx1Q0FBdUMsR0FBRztDQUMxQyxDQUFDLHNCQUFzQixHQUFHLEVBQUU7Q0FDNUIsQ0FBQyxxQkFBcUIsR0FBRyxFQUFFO0NBQzNCO0NBQ0E7Q0FDQTtDQUNBO0NBQ0EsQ0FBQztDQUNELEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxrQkFBa0IsQ0FBQztDQUM3QyxFQUFFLENBQUMscUJBQXFCLENBQUMsa0JBQWtCLENBQUM7Q0FDNUM7Q0FDQSxDQUFDO0NBQ0QsRUFBRSxLQUFLO0NBQ1AsR0FBRyxvRkFBb0YsQ0FBQyxDQUFDO0FBQ3pGO0NBQ0EsRUFBRSxPQUFPLElBQUksQ0FBQztDQUNkLEVBQUU7QUFDRjtDQUNBO0NBQ0EsQ0FBQyxNQUFNLHNCQUFzQjtDQUM3QixFQUFFLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0NBQ3pELENBQUMsTUFBTSx1QkFBdUI7Q0FDOUIsRUFBRSxPQUFPLENBQUMsc0JBQXNCLENBQUMscUJBQXFCLENBQUMsQ0FBQztBQUN4RDtDQUNBO0NBQ0EsQ0FBQyxJQUFJLENBQUMsc0JBQXNCO0NBQzVCLEVBQUUsTUFBTSxJQUFJLFNBQVMsQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO0FBQ3hEO0NBQ0EsQ0FBQyxJQUFJLENBQUMsdUJBQXVCO0NBQzdCLEVBQUUsTUFBTSxJQUFJLFNBQVMsQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDO0FBQ3pEO0NBQ0EsQ0FBQyxJQUFJLHNCQUFzQixDQUFDLE9BQU8sS0FBSyx1QkFBdUIsQ0FBQyxPQUFPO0NBQ3ZFLEVBQUUsTUFBTSxJQUFJLFNBQVMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0FBQy9DO0NBQ0E7Q0FDQSxDQUFDLE1BQU0sdUJBQXVCO0NBQzlCLEVBQUUsdUJBQXVCLENBQUMsc0JBQXNCLENBQUM7Q0FDakQsRUFBRSx1QkFBdUIsQ0FBQyxxQkFBcUIsQ0FBQztDQUNoRCxFQUFFLENBQUM7QUFDSDtDQUNBLENBQUMsTUFBTSxXQUFXLEdBQUcsc0JBQXNCLENBQUMsS0FBSyxDQUFDO0NBQ2xELENBQUMsTUFBTSxZQUFZLEdBQUcsdUJBQXVCLENBQUMsS0FBSyxDQUFDO0NBQ3BELENBQUMsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLFdBQVcsRUFBRSxZQUFZLENBQUMsQ0FBQztBQUN2RDtDQUNBO0NBQ0E7Q0FDQTtDQUNBLENBQUMsTUFBTSxZQUFZLEdBQUcsdUJBQXVCLEdBQUcsV0FBVyxHQUFHLFNBQVMsQ0FBQztBQUN4RTtDQUNBLENBQUMsS0FBSztDQUNOLEVBQUUsb0VBQW9FO0NBQ3RFLEVBQUUsc0JBQXNCLENBQUMsT0FBTyxFQUFFLFlBQVksQ0FBQyxDQUFDO0FBQ2hEO0NBQ0E7Q0FDQSxDQUFDLE9BQU8sT0FBTyxDQUFDLHNCQUFzQjtDQUN0QyxFQUFFLElBQUksY0FBYyxDQUFDLHNCQUFzQixDQUFDLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDO0NBQ3BFLENBQUMsQ0FBQztBQUNGO0NBQ0E7Q0FDQTtDQUNBO0NBQ0EsU0FBUyxjQUFjLENBQUMsQ0FBQyxFQUFFLEdBQUc7Q0FDOUI7Q0FDQSxDQUFDO0NBQ0QsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDdkUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDdkUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztDQUMvQyxHQUFHO0NBQ0gsQ0FBQztBQUNEO0NBQ0E7Q0FDQSxTQUFTLFdBQVcsQ0FBQyxDQUFDLEVBQUUsQ0FBQztDQUN6QjtDQUNBLENBQUMsSUFBSSxDQUFDLEtBQUssUUFBUTtDQUNuQixFQUFFLE9BQU8sQ0FBQyxLQUFLLE1BQU0sSUFBSSxDQUFDLEtBQUssUUFBUSxDQUFDO0FBQ3hDO0NBQ0EsQ0FBQyxJQUFJLENBQUMsS0FBSyxRQUFRO0NBQ25CLEVBQUUsT0FBTyxDQUFDLEtBQUssTUFBTSxDQUFDO0FBQ3RCO0NBQ0EsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDZCxDQUFDO0FBQ0Q7Q0FDQSxTQUFTLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQztDQUN0QjtDQUNBLENBQUMsT0FBTyxXQUFXLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDbEMsQ0FBQztBQUNEO0NBQ0EsU0FBUyx1QkFBdUIsQ0FBQyxNQUFNLEdBQUcsRUFBRTtDQUM1QztDQUNBLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxNQUFNLENBQUMseUJBQXlCLENBQUMsQ0FBQztBQUNuRTtDQUNBLENBQUM7Q0FDRCxFQUFFLHVCQUF1QixLQUFLLENBQUM7Q0FDL0IsRUFBRSx1QkFBdUIsS0FBSyxHQUFHO0NBQ2pDLEdBQUc7Q0FDSDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNwY0EsQ0FDQSxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztDQUM5RDtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLFNBQVMsS0FBSyxDQUFDLElBQUksRUFBRTtDQUNyQixJQUFJLElBQUksT0FBTyxJQUFJLEtBQUssUUFBUTtDQUNoQyxRQUFRLE9BQU8sRUFBRSxDQUFDO0NBQ2xCLElBQUksT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztDQUM1QyxDQUFDO0NBQ0QsYUFBYSxHQUFHLEtBQUssQ0FBQztDQUN0QjtDQUNBO0NBQ0E7Q0FDQSxTQUFTLG9CQUFvQixHQUFHO0NBQ2hDLElBQUksT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxRQUFRLENBQUMsQ0FBQztDQUNoRCxDQUFDO0NBQ0QsNEJBQTRCLEdBQUcsb0JBQW9COzs7Ozs7OztBQ3JCbkQsQ0FDQSxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUNoQjtBQUNYO0NBQ25DLE1BQU0sZ0JBQWdCLEdBQUcsVUFBVSxDQUFDO0NBQ3BDLE1BQU0saUJBQWlCLEdBQUcsSUFBSSxDQUFDO0NBQy9CLE1BQU0sK0JBQStCLEdBQUcsR0FBRyxDQUFDO0NBQzVDO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQSxTQUFTLHVCQUF1QixDQUFDLElBQUksRUFBRTtDQUN2QyxJQUFJLElBQUksT0FBTyxJQUFJLEtBQUssUUFBUTtDQUNoQyxRQUFRLE1BQU0sSUFBSSxTQUFTLENBQUMsdUJBQXVCLENBQUMsQ0FBQztDQUNyRDtDQUNBLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO0NBQ2xELFFBQVEsTUFBTSxJQUFJLFNBQVMsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO0NBQzNELFNBQVMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNO0NBQ3pCLFFBQVEsSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7Q0FDekIsSUFBSSxLQUFLLE1BQU0sS0FBSyxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7Q0FDckMsUUFBUSwwQkFBMEIsQ0FBQyxLQUFLLENBQUMsQ0FBQztDQUMxQyxLQUFLO0NBQ0w7Q0FDQSxJQUFJLElBQUksSUFBSSxDQUFDLGdCQUFnQixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7Q0FDdEUsUUFBUSxNQUFNLElBQUksU0FBUyxDQUFDLHVDQUF1QyxDQUFDLENBQUM7Q0FDckUsU0FBUyxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQjtDQUNuQyxRQUFRLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxFQUFFLENBQUM7Q0FDbkMsSUFBSSxLQUFLLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtDQUM3QyxRQUFRLDBCQUEwQixDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQ3hDLEtBQUs7Q0FDTCxDQUFDO0NBQ0QsK0JBQStCLEdBQUcsdUJBQXVCLENBQUM7Q0FDMUQ7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLFNBQVMsMEJBQTBCLENBQUMsS0FBSyxFQUFFO0NBQzNDLElBQUksTUFBTSxhQUFhLEdBQUcsSUFBSSxNQUFNLENBQUMscUJBQXFCLEVBQUUsR0FBRyxDQUFDLENBQUM7Q0FDakUsSUFBSSxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVE7Q0FDakMsUUFBUSxNQUFNLElBQUksU0FBUyxDQUFDLHdCQUF3QixDQUFDLENBQUM7Q0FDdEQ7Q0FDQSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxJQUFJLE9BQU8sS0FBSyxDQUFDLFFBQVEsS0FBSyxRQUFRO0NBQzdELFFBQVEsTUFBTSxJQUFJLFNBQVMsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0NBQ3RELElBQUksTUFBTSxhQUFhLEdBQUcsYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7Q0FDN0QsSUFBSSxJQUFJLENBQUMsYUFBYTtDQUN0QixRQUFRLE1BQU0sSUFBSSxTQUFTLENBQUMsd0JBQXdCLENBQUMsQ0FBQztDQUN0RDtDQUNBLElBQUksS0FBSyxDQUFDLElBQUksR0FBRyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7Q0FDaEQ7Q0FDQSxJQUFJLElBQUksS0FBSyxDQUFDLG9CQUFvQixJQUFJLE9BQU8sS0FBSyxDQUFDLG9CQUFvQixLQUFLLFFBQVE7Q0FDcEYsUUFBUSxNQUFNLElBQUksU0FBUyxDQUFDLG9DQUFvQyxDQUFDLENBQUM7Q0FDbEU7Q0FDQSxJQUFJLElBQUksT0FBTyxLQUFLLENBQUMsU0FBUyxLQUFLLFFBQVE7Q0FDM0MsUUFBUSxNQUFNLElBQUksU0FBUyxDQUFDLHlCQUF5QixDQUFDLENBQUM7Q0FDdkQ7Q0FDQSxJQUFJLElBQUksS0FBSyxDQUFDLElBQUksS0FBSyxPQUFPLEVBQUU7Q0FDaEMsUUFBUSxJQUFJLE9BQU8sS0FBSyxDQUFDLFFBQVEsS0FBSyxRQUFRO0NBQzlDLFlBQVksS0FBSyxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUM7Q0FDL0IsS0FBSztDQUNMLFNBQVM7Q0FDVCxRQUFRLE9BQU8sS0FBSyxDQUFDLFFBQVEsQ0FBQztDQUM5QixLQUFLO0NBQ0w7Q0FDQSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxJQUFJLE9BQU8sS0FBSyxDQUFDLFVBQVUsS0FBSyxRQUFRO0NBQ2pFLFFBQVEsS0FBSyxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUM7Q0FDOUIsSUFBSSxLQUFLLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxFQUFFO0NBQ3JELFFBQVEsSUFBSSxLQUFLLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUMxQyxRQUFRLElBQUksS0FBSyxLQUFLLFNBQVMsRUFBRTtDQUNqQyxZQUFZLEtBQUssQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0NBQ3ZDLFlBQVksS0FBSyxHQUFHLEVBQUUsQ0FBQztDQUN2QixTQUFTO0NBQ1QsUUFBUSxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7Q0FDcEUsWUFBWSxNQUFNLElBQUksU0FBUyxDQUFDLENBQUMsNkJBQTZCLEVBQUUsR0FBRyxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUN6RixTQUFTO0NBQ1Q7Q0FDQSxRQUFRLElBQUksR0FBRyxLQUFLLEtBQUssRUFBRTtDQUMzQixZQUFZLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUTtDQUN6QyxnQkFBZ0IsTUFBTSxJQUFJLFNBQVMsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO0NBQ25FLFNBQVM7Q0FDVCxLQUFLO0NBQ0w7Q0FDQSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDO0NBQ2pFLFFBQVEsS0FBSyxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUM7Q0FDaEMsSUFBSSxLQUFLLE1BQU0sRUFBRSxJQUFJLEtBQUssQ0FBQyxZQUFZLEVBQUU7Q0FDekMsUUFBUSxvQkFBb0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztDQUNqQyxLQUFLO0NBQ0wsQ0FBQztDQUNELGtDQUFrQyxHQUFHLDBCQUEwQixDQUFDO0NBQ2hFO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQSxTQUFTLG9CQUFvQixDQUFDLEVBQUUsRUFBRTtDQUNsQyxJQUFJLElBQUksT0FBTyxFQUFFLEtBQUssUUFBUTtDQUM5QixRQUFRLE1BQU0sSUFBSSxTQUFTLENBQUMscUJBQXFCLENBQUMsQ0FBQztDQUNuRDtDQUNBLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxLQUFLLFFBQVE7Q0FDL0MsUUFBUSxNQUFNLElBQUksU0FBUyxDQUFDLGlCQUFpQixDQUFDLENBQUM7Q0FDL0M7Q0FDQSxJQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxJQUFJLE9BQU8sRUFBRSxDQUFDLFNBQVMsS0FBSyxRQUFRO0NBQ3pELFFBQVEsRUFBRSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7Q0FDMUIsQ0FBQztDQUNELDRCQUE0QixHQUFHLG9CQUFvQixDQUFDO0NBQ3BEO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQSxTQUFTLDBCQUEwQixDQUFDLEdBQUcsRUFBRTtDQUN6QyxJQUFJLElBQUksT0FBTyxHQUFHLEtBQUssUUFBUTtDQUMvQixRQUFRLE1BQU0sSUFBSSxTQUFTLENBQUMsc0JBQXNCLENBQUMsQ0FBQztDQUNwRDtDQUNBLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksT0FBTyxHQUFHLENBQUMsSUFBSSxLQUFLLFFBQVE7Q0FDakQsUUFBUSxHQUFHLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztDQUN0QixJQUFJLElBQUksR0FBRyxDQUFDLElBQUksS0FBSyxFQUFFLElBQUksR0FBRyxDQUFDLElBQUksS0FBSyxPQUFPLElBQUksR0FBRyxDQUFDLElBQUksS0FBSyxPQUFPO0NBQ3ZFLFFBQVEsTUFBTSxJQUFJLFNBQVMsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0NBQ2hEO0NBQ0EsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxPQUFPLEdBQUcsQ0FBQyxHQUFHLEtBQUssUUFBUTtDQUMvQyxRQUFRLE1BQU0sSUFBSSxTQUFTLENBQUMsaUJBQWlCLENBQUMsQ0FBQztDQUMvQztDQUNBLElBQUksSUFBSSxPQUFPLEdBQUcsQ0FBQyxXQUFXLEtBQUssUUFBUTtDQUMzQyxRQUFRLE1BQU0sSUFBSSxTQUFTLENBQUMseUJBQXlCLENBQUMsQ0FBQztDQUN2RDtDQUNBLElBQUksSUFBSSxHQUFHLENBQUMsZ0JBQWdCLElBQUksT0FBTyxHQUFHLENBQUMsZ0JBQWdCLEtBQUssU0FBUztDQUN6RSxRQUFRLE1BQU0sSUFBSSxTQUFTLENBQUMsOEJBQThCLENBQUMsQ0FBQztDQUM1RCxTQUFTLElBQUksQ0FBQyxHQUFHLENBQUMsZ0JBQWdCO0NBQ2xDLFFBQVEsR0FBRyxDQUFDLGdCQUFnQixHQUFHLEtBQUssQ0FBQztDQUNyQztDQUNBLElBQUksSUFBSSxHQUFHLENBQUMsU0FBUyxJQUFJLE9BQU8sR0FBRyxDQUFDLFNBQVMsS0FBSyxRQUFRO0NBQzFELFFBQVEsTUFBTSxJQUFJLFNBQVMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0NBQ3JELFNBQVMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTO0NBQzNCLFFBQVEsR0FBRyxDQUFDLFNBQVMsR0FBRyxVQUFVLENBQUM7Q0FDbkMsQ0FBQztDQUNELGtDQUFrQyxHQUFHLDBCQUEwQixDQUFDO0NBQ2hFO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQSxTQUFTLHFCQUFxQixDQUFDLE1BQU0sRUFBRTtDQUN2QyxJQUFJLElBQUksT0FBTyxNQUFNLEtBQUssUUFBUTtDQUNsQyxRQUFRLE1BQU0sSUFBSSxTQUFTLENBQUMseUJBQXlCLENBQUMsQ0FBQztDQUN2RDtDQUNBLElBQUksSUFBSSxNQUFNLENBQUMsR0FBRyxJQUFJLE9BQU8sTUFBTSxDQUFDLEdBQUcsS0FBSyxRQUFRO0NBQ3BELFFBQVEsTUFBTSxJQUFJLFNBQVMsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO0NBQzFEO0NBQ0EsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO0NBQ3JDLFFBQVEsTUFBTSxJQUFJLFNBQVMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0NBQ3JELElBQUksS0FBSyxNQUFNLEtBQUssSUFBSSxNQUFNLENBQUMsTUFBTSxFQUFFO0NBQ3ZDLFFBQVEsMEJBQTBCLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDMUMsS0FBSztDQUNMO0NBQ0EsSUFBSSxJQUFJLE1BQU0sQ0FBQyxnQkFBZ0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDO0NBQzFFLFFBQVEsTUFBTSxJQUFJLFNBQVMsQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDO0NBQ3ZFLFNBQVMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0I7Q0FDckMsUUFBUSxNQUFNLENBQUMsZ0JBQWdCLEdBQUcsRUFBRSxDQUFDO0NBQ3JDLElBQUksS0FBSyxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsZ0JBQWdCLEVBQUU7Q0FDL0MsUUFBUSxvQ0FBb0MsQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUNsRCxLQUFLO0NBQ0w7Q0FDQSxJQUFJLElBQUksTUFBTSxDQUFDLFNBQVMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQztDQUM1RCxRQUFRLE1BQU0sSUFBSSxTQUFTLENBQUMsa0NBQWtDLENBQUMsQ0FBQztDQUNoRSxTQUFTLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUztDQUM5QixRQUFRLE1BQU0sQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO0NBQzlCLElBQUksS0FBSyxNQUFNLFFBQVEsSUFBSSxNQUFNLENBQUMsU0FBUyxFQUFFO0NBQzdDLFFBQVEsNkJBQTZCLENBQUMsUUFBUSxDQUFDLENBQUM7Q0FDaEQsS0FBSztDQUNMO0NBQ0EsSUFBSSxJQUFJLE1BQU0sQ0FBQyxJQUFJLElBQUksT0FBTyxNQUFNLENBQUMsSUFBSSxLQUFLLFFBQVE7Q0FDdEQsUUFBUSxNQUFNLElBQUksU0FBUyxDQUFDLDhCQUE4QixDQUFDLENBQUM7Q0FDNUQsU0FBUyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUk7Q0FDekIsUUFBUSxNQUFNLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztDQUN6QixJQUFJLHNCQUFzQixDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztDQUN4QyxDQUFDO0NBQ0QsNkJBQTZCLEdBQUcscUJBQXFCLENBQUM7Q0FDdEQ7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLFNBQVMsMEJBQTBCLENBQUMsS0FBSyxFQUFFO0NBQzNDLElBQUksTUFBTSxhQUFhLEdBQUcsSUFBSSxNQUFNLENBQUMscUJBQXFCLEVBQUUsR0FBRyxDQUFDLENBQUM7Q0FDakUsSUFBSSxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVE7Q0FDakMsUUFBUSxNQUFNLElBQUksU0FBUyxDQUFDLHdCQUF3QixDQUFDLENBQUM7Q0FDdEQ7Q0FDQSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxJQUFJLE9BQU8sS0FBSyxDQUFDLFFBQVEsS0FBSyxRQUFRO0NBQzdELFFBQVEsTUFBTSxJQUFJLFNBQVMsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0NBQ3RELElBQUksTUFBTSxhQUFhLEdBQUcsYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7Q0FDN0QsSUFBSSxJQUFJLENBQUMsYUFBYTtDQUN0QixRQUFRLE1BQU0sSUFBSSxTQUFTLENBQUMsd0JBQXdCLENBQUMsQ0FBQztDQUN0RDtDQUNBLElBQUksSUFBSSxPQUFPLEtBQUssQ0FBQyxXQUFXLEtBQUssUUFBUTtDQUM3QyxRQUFRLE1BQU0sSUFBSSxTQUFTLENBQUMsMkJBQTJCLENBQUMsQ0FBQztDQUN6RDtDQUNBLElBQUksSUFBSSxPQUFPLEtBQUssQ0FBQyxTQUFTLEtBQUssUUFBUTtDQUMzQyxRQUFRLE1BQU0sSUFBSSxTQUFTLENBQUMseUJBQXlCLENBQUMsQ0FBQztDQUN2RCxJQUFJLE1BQU0sSUFBSSxHQUFHLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztDQUNoRDtDQUNBLElBQUksSUFBSSxJQUFJLEtBQUssT0FBTyxFQUFFO0NBQzFCLFFBQVEsSUFBSSxPQUFPLEtBQUssQ0FBQyxRQUFRLEtBQUssUUFBUTtDQUM5QyxZQUFZLEtBQUssQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDO0NBQy9CLEtBQUs7Q0FDTCxTQUFTO0NBQ1QsUUFBUSxPQUFPLEtBQUssQ0FBQyxRQUFRLENBQUM7Q0FDOUIsS0FBSztDQUNMO0NBQ0EsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsSUFBSSxPQUFPLEtBQUssQ0FBQyxVQUFVLEtBQUssUUFBUTtDQUNqRSxRQUFRLEtBQUssQ0FBQyxVQUFVLEdBQUcsRUFBRSxDQUFDO0NBQzlCLElBQUksS0FBSyxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsRUFBRTtDQUNyRCxRQUFRLElBQUksS0FBSyxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDMUMsUUFBUSxJQUFJLEtBQUssS0FBSyxTQUFTLEVBQUU7Q0FDakMsWUFBWSxLQUFLLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztDQUN2QyxZQUFZLEtBQUssR0FBRyxFQUFFLENBQUM7Q0FDdkIsU0FBUztDQUNULFFBQVEsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFO0NBQ3BFLFlBQVksTUFBTSxJQUFJLFNBQVMsQ0FBQyxDQUFDLDZCQUE2QixFQUFFLEdBQUcsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDekYsU0FBUztDQUNUO0NBQ0EsUUFBUSxJQUFJLEdBQUcsS0FBSyxLQUFLLEVBQUU7Q0FDM0IsWUFBWSxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVE7Q0FDekMsZ0JBQWdCLE1BQU0sSUFBSSxTQUFTLENBQUMsNkJBQTZCLENBQUMsQ0FBQztDQUNuRSxTQUFTO0NBQ1QsS0FBSztDQUNMO0NBQ0EsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQztDQUNqRSxRQUFRLEtBQUssQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDO0NBQ2hDLElBQUksS0FBSyxNQUFNLEVBQUUsSUFBSSxLQUFLLENBQUMsWUFBWSxFQUFFO0NBQ3pDLFFBQVEsb0JBQW9CLENBQUMsRUFBRSxDQUFDLENBQUM7Q0FDakMsS0FBSztDQUNMLENBQUM7Q0FDRCxrQ0FBa0MsR0FBRywwQkFBMEIsQ0FBQztDQUNoRTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0EsU0FBUyxvQ0FBb0MsQ0FBQyxHQUFHLEVBQUU7Q0FDbkQsSUFBSSxJQUFJLE9BQU8sR0FBRyxLQUFLLFFBQVE7Q0FDL0IsUUFBUSxNQUFNLElBQUksU0FBUyxDQUFDLHNCQUFzQixDQUFDLENBQUM7Q0FDcEQ7Q0FDQSxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLE9BQU8sR0FBRyxDQUFDLEdBQUcsS0FBSyxRQUFRO0NBQy9DLFFBQVEsTUFBTSxJQUFJLFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0NBQy9DO0NBQ0EsSUFBSSxJQUFJLE9BQU8sR0FBRyxDQUFDLEVBQUUsS0FBSyxRQUFRO0NBQ2xDLFFBQVEsTUFBTSxJQUFJLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0NBQzlDO0NBQ0EsSUFBSSxJQUFJLEdBQUcsQ0FBQyxPQUFPLElBQUksT0FBTyxHQUFHLENBQUMsT0FBTyxLQUFLLFNBQVM7Q0FDdkQsUUFBUSxNQUFNLElBQUksU0FBUyxDQUFDLHFCQUFxQixDQUFDLENBQUM7Q0FDbkQsU0FBUyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU87Q0FDekIsUUFBUSxHQUFHLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztDQUM1QjtDQUNBLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLElBQUksT0FBTyxHQUFHLENBQUMsVUFBVSxLQUFLLFFBQVE7Q0FDN0QsUUFBUSxHQUFHLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQztDQUM1QixJQUFJLEtBQUssTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEVBQUU7Q0FDbkQsUUFBUSxJQUFJLEtBQUssR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQ3hDLFFBQVEsSUFBSSxLQUFLLEtBQUssU0FBUyxFQUFFO0NBQ2pDLFlBQVksR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7Q0FDckMsWUFBWSxLQUFLLEdBQUcsRUFBRSxDQUFDO0NBQ3ZCLFNBQVM7Q0FDVCxRQUFRLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVE7Q0FDbEUsWUFBWSxNQUFNLElBQUksU0FBUyxDQUFDLG9DQUFvQyxDQUFDLENBQUM7Q0FDdEUsS0FBSztDQUNMLENBQUM7Q0FDRCw0Q0FBNEMsR0FBRyxvQ0FBb0MsQ0FBQztDQUNwRjtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0EsU0FBUyw2QkFBNkIsQ0FBQyxRQUFRLEVBQUU7Q0FDakQsSUFBSSxJQUFJLE9BQU8sUUFBUSxLQUFLLFFBQVE7Q0FDcEMsUUFBUSxNQUFNLElBQUksU0FBUyxDQUFDLDJCQUEyQixDQUFDLENBQUM7Q0FDekQ7Q0FDQSxJQUFJLElBQUksUUFBUSxDQUFDLElBQUksSUFBSSxPQUFPLFFBQVEsQ0FBQyxJQUFJLEtBQUssUUFBUTtDQUMxRCxRQUFRLE1BQU0sSUFBSSxTQUFTLENBQUMsdUJBQXVCLENBQUMsQ0FBQztDQUNyRDtDQUNBLElBQUksSUFBSSxRQUFRLENBQUMsR0FBRyxJQUFJLE9BQU8sUUFBUSxDQUFDLEdBQUcsS0FBSyxRQUFRO0NBQ3hELFFBQVEsTUFBTSxJQUFJLFNBQVMsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0NBQ3BEO0NBQ0EsSUFBSSxJQUFJLFFBQVEsQ0FBQyxHQUFHLElBQUksT0FBTyxRQUFRLENBQUMsR0FBRyxLQUFLLFFBQVEsRUFBRTtDQUMxRCxRQUFRLE1BQU0sSUFBSSxTQUFTLENBQUMsc0JBQXNCLENBQUMsQ0FBQztDQUNwRCxLQUFLO0NBQ0wsU0FBUyxJQUFJLFFBQVEsQ0FBQyxHQUFHLEVBQUU7Q0FDM0I7Q0FDQSxRQUFRLElBQUksT0FBTyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksS0FBSyxRQUFRO0NBQ2pELFlBQVksTUFBTSxJQUFJLFNBQVMsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0NBQzdELEtBQUs7Q0FDTDtDQUNBLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLElBQUksT0FBTyxRQUFRLENBQUMsR0FBRyxLQUFLLFNBQVM7Q0FDMUQsUUFBUSxRQUFRLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQztDQUM3QjtDQUNBLElBQUksSUFBSSxRQUFRLENBQUMsZUFBZSxJQUFJLE9BQU8sUUFBUSxDQUFDLGVBQWUsS0FBSyxRQUFRO0NBQ2hGLFFBQVEsTUFBTSxJQUFJLFNBQVMsQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDO0NBQ2hFLENBQUM7Q0FDRCxxQ0FBcUMsR0FBRyw2QkFBNkIsQ0FBQztDQUN0RTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0EsU0FBUyxzQkFBc0IsQ0FBQyxJQUFJLEVBQUU7Q0FDdEMsSUFBSSxJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVE7Q0FDaEMsUUFBUSxNQUFNLElBQUksU0FBUyxDQUFDLHVCQUF1QixDQUFDLENBQUM7Q0FDckQ7Q0FDQSxJQUFJLElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxPQUFPLElBQUksQ0FBQyxLQUFLLEtBQUssUUFBUTtDQUNwRCxRQUFRLE1BQU0sSUFBSSxTQUFTLENBQUMsb0JBQW9CLENBQUMsQ0FBQztDQUNsRDtDQUNBLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLElBQUksT0FBTyxJQUFJLENBQUMsV0FBVyxLQUFLLFNBQVM7Q0FDbEUsUUFBUSxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztDQUNoQyxDQUFDO0NBQ0QsOEJBQThCLEdBQUcsc0JBQXNCLENBQUM7Q0FDeEQ7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLFNBQVMsd0JBQXdCLENBQUMsSUFBSSxFQUFFO0NBQ3hDLElBQUksSUFBSSxPQUFPLElBQUksS0FBSyxRQUFRO0NBQ2hDLFFBQVEsTUFBTSxJQUFJLFNBQVMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0NBQ3JEO0NBQ0EsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsSUFBSSxPQUFPLElBQUksQ0FBQyxVQUFVLEtBQUssUUFBUTtDQUMvRCxRQUFRLE1BQU0sSUFBSSxTQUFTLENBQUMseUJBQXlCLENBQUMsQ0FBQztDQUN2RCxJQUFJLHNCQUFzQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztDQUM1QyxDQUFDO0NBQ0QsZ0NBQWdDLEdBQUcsd0JBQXdCLENBQUM7Q0FDNUQ7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLFNBQVMsc0JBQXNCLENBQUMsVUFBVSxFQUFFO0NBQzVDLElBQUksSUFBSSxPQUFPLFVBQVUsS0FBSyxRQUFRO0NBQ3RDLFFBQVEsTUFBTSxJQUFJLFNBQVMsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO0NBQzNEO0NBQ0EsSUFBSSxJQUFJLE9BQU8sVUFBVSxDQUFDLEVBQUUsS0FBSyxRQUFRO0NBQ3pDLFFBQVEsTUFBTSxJQUFJLFNBQVMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0NBQ3JEO0NBQ0EsSUFBSSxJQUFJLE9BQU8sVUFBVSxDQUFDLEdBQUcsS0FBSyxRQUFRO0NBQzFDLFFBQVEsTUFBTSxJQUFJLFNBQVMsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0NBQ3RELENBQUM7Q0FDRCw4QkFBOEIsR0FBRyxzQkFBc0IsQ0FBQztDQUN4RDtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0EsU0FBUyxzQkFBc0IsQ0FBQyxNQUFNLEVBQUU7Q0FDeEMsSUFBSSxJQUFJLE9BQU8sTUFBTSxLQUFLLFFBQVE7Q0FDbEMsUUFBUSxNQUFNLElBQUksU0FBUyxDQUFDLHlCQUF5QixDQUFDLENBQUM7Q0FDdkQ7Q0FDQSxJQUFJLElBQUksT0FBTyxNQUFNLENBQUMsSUFBSSxLQUFLLFFBQVE7Q0FDdkMsUUFBUSxNQUFNLElBQUksU0FBUyxDQUFDLHFCQUFxQixDQUFDLENBQUM7Q0FDbkQ7Q0FDQSxJQUFJLElBQUksT0FBTyxNQUFNLENBQUMsRUFBRSxLQUFLLFFBQVE7Q0FDckMsUUFBUSxNQUFNLElBQUksU0FBUyxDQUFDLG1CQUFtQixDQUFDLENBQUM7Q0FDakQ7Q0FDQSxJQUFJLElBQUksT0FBTyxNQUFNLENBQUMsR0FBRyxLQUFLLFFBQVE7Q0FDdEMsUUFBUSxNQUFNLElBQUksU0FBUyxDQUFDLG9CQUFvQixDQUFDLENBQUM7Q0FDbEQ7Q0FDQSxJQUFJLElBQUksT0FBTyxNQUFNLENBQUMsY0FBYyxLQUFLLFFBQVE7Q0FDakQsUUFBUSxNQUFNLElBQUksU0FBUyxDQUFDLCtCQUErQixDQUFDLENBQUM7Q0FDN0QsQ0FBQztDQUNELDhCQUE4QixHQUFHLHNCQUFzQixDQUFDO0NBQ3hEO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQSxTQUFTLDRCQUE0QixDQUFDLE1BQU0sRUFBRTtDQUM5QyxJQUFJLElBQUksT0FBTyxNQUFNLEtBQUssUUFBUTtDQUNsQyxRQUFRLE1BQU0sSUFBSSxTQUFTLENBQUMseUJBQXlCLENBQUMsQ0FBQztDQUN2RDtDQUNBLElBQUksSUFBSSxPQUFPLE1BQU0sQ0FBQyxRQUFRLEtBQUssUUFBUTtDQUMzQyxRQUFRLE1BQU0sSUFBSSxTQUFTLENBQUMseUJBQXlCLENBQUMsQ0FBQztDQUN2RDtDQUNBLElBQUksSUFBSSxZQUFZLEdBQUcsS0FBSyxDQUFDO0NBQzdCLElBQUksSUFBSSxPQUFPLE1BQU0sQ0FBQyxPQUFPLEtBQUssU0FBUztDQUMzQyxRQUFRLFlBQVksR0FBRyxJQUFJLENBQUM7Q0FDNUI7Q0FDQSxRQUFRLE1BQU0sQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO0NBQzlCO0NBQ0EsSUFBSSxJQUFJLE1BQU0sQ0FBQyxpQkFBaUIsSUFBSSxPQUFPLE1BQU0sQ0FBQyxpQkFBaUIsS0FBSyxRQUFRO0NBQ2hGLFFBQVEsTUFBTSxJQUFJLFNBQVMsQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDO0NBQ2hFO0NBQ0EsSUFBSSxJQUFJLE1BQU0sQ0FBQyxjQUFjLElBQUksT0FBTyxNQUFNLENBQUMsY0FBYyxLQUFLLFFBQVE7Q0FDMUUsUUFBUSxNQUFNLElBQUksU0FBUyxDQUFDLCtCQUErQixDQUFDLENBQUM7Q0FDN0QsSUFBSSxJQUFJLE1BQU0sQ0FBQyxpQkFBaUIsSUFBSSxNQUFNLENBQUMsY0FBYztDQUN6RCxRQUFRLE1BQU0sSUFBSSxTQUFTLENBQUMsMERBQTBELENBQUMsQ0FBQztDQUN4RixJQUFJLElBQUksWUFBWTtDQUNwQixRQUFRLE1BQU0sQ0FBQyxPQUFPO0NBQ3RCLFNBQVMsTUFBTSxDQUFDLGlCQUFpQixJQUFJLE1BQU0sQ0FBQyxjQUFjLENBQUMsRUFBRTtDQUM3RCxRQUFRLE1BQU0sSUFBSSxTQUFTLENBQUMsNERBQTRELENBQUMsQ0FBQztDQUMxRixLQUFLO0NBQ0wsU0FBUyxJQUFJLENBQUMsWUFBWSxLQUFLLE1BQU0sQ0FBQyxpQkFBaUIsSUFBSSxNQUFNLENBQUMsY0FBYyxDQUFDLEVBQUU7Q0FDbkYsUUFBUSxNQUFNLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztDQUMvQixLQUFLO0NBQ0w7Q0FDQSxJQUFJLElBQUksTUFBTSxDQUFDLFFBQVEsSUFBSSxPQUFPLE1BQU0sQ0FBQyxRQUFRLEtBQUssUUFBUTtDQUM5RCxRQUFRLE1BQU0sSUFBSSxTQUFTLENBQUMseUJBQXlCLENBQUMsQ0FBQztDQUN2RDtDQUNBLElBQUksSUFBSSxNQUFNLENBQUMsS0FBSyxJQUFJLE9BQU8sTUFBTSxDQUFDLEtBQUssS0FBSyxRQUFRO0NBQ3hELFFBQVEsTUFBTSxJQUFJLFNBQVMsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0NBQ3BEO0NBQ0EsSUFBSSxJQUFJLE1BQU0sQ0FBQyxRQUFRLElBQUksT0FBTyxNQUFNLENBQUMsUUFBUSxLQUFLLFFBQVE7Q0FDOUQsUUFBUSxNQUFNLElBQUksU0FBUyxDQUFDLHlCQUF5QixDQUFDLENBQUM7Q0FDdkQsQ0FBQztDQUNELG9DQUFvQyxHQUFHLDRCQUE0QixDQUFDO0NBQ3BFO0NBQ0E7Q0FDQTtDQUNBLFNBQVMsMEJBQTBCLENBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRTtDQUMzRCxJQUFJLE1BQU0sdUJBQXVCLEdBQUc7Q0FDcEMsUUFBUSxNQUFNLEVBQUUsRUFBRTtDQUNsQixRQUFRLGdCQUFnQixFQUFFLEVBQUU7Q0FDNUIsS0FBSyxDQUFDO0NBQ047Q0FDQSxJQUFJLEtBQUssTUFBTSxXQUFXLElBQUksVUFBVSxDQUFDLE1BQU0sSUFBSSxFQUFFLEVBQUU7Q0FDdkQsUUFBUSxJQUFJLFVBQVUsQ0FBQyxXQUFXLENBQUM7Q0FDbkMsWUFBWSxTQUFTO0NBQ3JCLFFBQVEsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLFNBQVMsQ0FBQyxNQUFNLElBQUksRUFBRTtDQUMxRCxhQUFhLElBQUksQ0FBQyxDQUFDLFVBQVUsTUFBTSxXQUFXLENBQUMsVUFBVSxFQUFFLFdBQVcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQzFHLFFBQVEsSUFBSSxDQUFDLGtCQUFrQjtDQUMvQixZQUFZLFNBQVM7Q0FDckIsUUFBUSxNQUFNLGFBQWEsR0FBRztDQUM5QixZQUFZLFFBQVEsRUFBRSxrQkFBa0IsQ0FBQyxRQUFRO0NBQ2pELFlBQVksSUFBSSxFQUFFLGtCQUFrQixDQUFDLElBQUk7Q0FDekMsWUFBWSxTQUFTLEVBQUUsa0JBQWtCLENBQUMsU0FBUztDQUNuRCxZQUFZLFFBQVEsRUFBRSxrQkFBa0IsQ0FBQyxRQUFRO0NBQ2pELFlBQVksZ0JBQWdCLEVBQUUsa0JBQWtCLENBQUMsb0JBQW9CO0NBQ3JFLFlBQVksbUJBQW1CLEVBQUUsU0FBUztDQUMxQyxZQUFZLGlCQUFpQixFQUFFLFdBQVcsQ0FBQyxvQkFBb0I7Q0FDL0QsWUFBWSxvQkFBb0IsRUFBRSxTQUFTO0NBQzNDLFlBQVksZUFBZSxFQUFFLGtCQUFrQixDQUFDLFVBQVU7Q0FDMUQsWUFBWSxnQkFBZ0IsRUFBRSxXQUFXLENBQUMsVUFBVTtDQUNwRCxZQUFZLFlBQVksRUFBRSxrQkFBa0IsQ0FBQyxrQkFBa0IsRUFBRSxXQUFXLENBQUM7Q0FDN0UsU0FBUyxDQUFDO0NBQ1YsUUFBUSx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0NBQzNELEtBQUs7Q0FDTDtDQUNBLElBQUksS0FBSyxNQUFNLGFBQWEsSUFBSSx1QkFBdUIsQ0FBQyxNQUFNLEVBQUU7Q0FDaEUsUUFBUSxNQUFNLHFCQUFxQixHQUFHLFNBQVMsQ0FBQyxNQUFNO0NBQ3RELGFBQWEsSUFBSSxDQUFDLENBQUMsVUFBVSxNQUFNLFVBQVUsQ0FBQyxVQUFVLENBQUM7Q0FDekQsWUFBWSxVQUFVLENBQUMsVUFBVSxDQUFDLEdBQUcsS0FBSyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO0NBQzNFLFFBQVEsTUFBTSxzQkFBc0IsR0FBRyxVQUFVLENBQUMsTUFBTTtDQUN4RCxhQUFhLElBQUksQ0FBQyxDQUFDLFdBQVcsTUFBTSxVQUFVLENBQUMsV0FBVyxDQUFDO0NBQzNELFlBQVksV0FBVyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEtBQUssYUFBYSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQztDQUM3RSxRQUFRLElBQUkscUJBQXFCLElBQUksc0JBQXNCLEVBQUU7Q0FDN0QsWUFBWSxhQUFhLENBQUMsbUJBQW1CLEdBQUcscUJBQXFCLENBQUMsb0JBQW9CLENBQUM7Q0FDM0YsWUFBWSxhQUFhLENBQUMsb0JBQW9CLEdBQUcsc0JBQXNCLENBQUMsb0JBQW9CLENBQUM7Q0FDN0YsU0FBUztDQUNULEtBQUs7Q0FDTDtDQUNBLElBQUksS0FBSyxNQUFNLFNBQVMsSUFBSSxVQUFVLENBQUMsZ0JBQWdCLEVBQUU7Q0FDekQsUUFBUSxNQUFNLGdCQUFnQixHQUFHLFNBQVMsQ0FBQyxnQkFBZ0I7Q0FDM0QsYUFBYSxJQUFJLENBQUMsQ0FBQyxRQUFRLE1BQU0scUJBQXFCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUM5RSxRQUFRLElBQUksQ0FBQyxnQkFBZ0I7Q0FDN0IsWUFBWSxTQUFTO0NBQ3JCLFFBQVEsTUFBTSxXQUFXLEdBQUc7Q0FDNUIsWUFBWSxJQUFJLEVBQUUsU0FBUyxDQUFDLElBQUk7Q0FDaEMsWUFBWSxHQUFHLEVBQUUsU0FBUyxDQUFDLEdBQUc7Q0FDOUIsWUFBWSxNQUFNLEVBQUUsZ0JBQWdCLENBQUMsV0FBVztDQUNoRCxZQUFZLE1BQU0sRUFBRSxTQUFTLENBQUMsV0FBVztDQUN6QyxZQUFZLE9BQU8sRUFBRSxnQkFBZ0IsQ0FBQyxnQkFBZ0I7Q0FDdEQsWUFBWSxTQUFTLEVBQUUsVUFBVTtDQUNqQyxTQUFTLENBQUM7Q0FDVixRQUFRLFFBQVEsU0FBUyxDQUFDLFNBQVM7Q0FDbkMsWUFBWSxLQUFLLFVBQVU7Q0FDM0IsZ0JBQWdCLFdBQVcsQ0FBQyxTQUFTLEdBQUcsVUFBVSxDQUFDO0NBQ25ELGdCQUFnQixNQUFNO0NBQ3RCLFlBQVksS0FBSyxVQUFVO0NBQzNCLGdCQUFnQixXQUFXLENBQUMsU0FBUyxHQUFHLFVBQVUsQ0FBQztDQUNuRCxnQkFBZ0IsTUFBTTtDQUN0QixZQUFZLEtBQUssVUFBVTtDQUMzQixnQkFBZ0IsV0FBVyxDQUFDLFNBQVMsR0FBRyxVQUFVLENBQUM7Q0FDbkQsZ0JBQWdCLE1BQU07Q0FDdEIsWUFBWSxLQUFLLFVBQVU7Q0FDM0IsZ0JBQWdCLFdBQVcsQ0FBQyxTQUFTLEdBQUcsVUFBVSxDQUFDO0NBQ25ELGdCQUFnQixNQUFNO0NBQ3RCLFNBQVM7Q0FDVCxRQUFRLHVCQUF1QixDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztDQUNuRSxLQUFLO0NBQ0wsSUFBSSxPQUFPLHVCQUF1QixDQUFDO0NBQ25DLENBQUM7Q0FDRCxrQ0FBa0MsR0FBRywwQkFBMEIsQ0FBQztDQUNoRTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLFNBQVMsc0JBQXNCLENBQUMsdUJBQXVCLEVBQUU7Q0FDekQsSUFBSSxNQUFNLGVBQWUsR0FBRztDQUM1QixRQUFRLE1BQU0sRUFBRSxFQUFFO0NBQ2xCLFFBQVEsZ0JBQWdCLEVBQUUsRUFBRTtDQUM1QixLQUFLLENBQUM7Q0FDTixJQUFJLEtBQUssTUFBTSxhQUFhLElBQUksdUJBQXVCLENBQUMsTUFBTSxFQUFFO0NBQ2hFLFFBQVEsTUFBTSxLQUFLLEdBQUc7Q0FDdEIsWUFBWSxRQUFRLEVBQUUsYUFBYSxDQUFDLFFBQVE7Q0FDNUMsWUFBWSxJQUFJLEVBQUUsYUFBYSxDQUFDLElBQUk7Q0FDcEMsWUFBWSxvQkFBb0IsRUFBRSxhQUFhLENBQUMsaUJBQWlCO0NBQ2pFLFlBQVksU0FBUyxFQUFFLGFBQWEsQ0FBQyxTQUFTO0NBQzlDLFlBQVksUUFBUSxFQUFFLGFBQWEsQ0FBQyxRQUFRO0NBQzVDLFlBQVksVUFBVSxFQUFFLGFBQWEsQ0FBQyxlQUFlO0NBQ3JELFlBQVksWUFBWSxFQUFFLGFBQWEsQ0FBQyxZQUFZO0NBQ3BELFNBQVMsQ0FBQztDQUNWLFFBQVEsZUFBZSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDM0M7Q0FDQSxRQUFRLElBQUksQ0FBQyxhQUFhLENBQUMsb0JBQW9CO0NBQy9DLFlBQVksU0FBUztDQUNyQixRQUFRLE1BQU0sUUFBUSxHQUFHO0NBQ3pCLFlBQVksUUFBUSxFQUFFLENBQUMsRUFBRSxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztDQUNqRCxZQUFZLElBQUksRUFBRSxhQUFhLENBQUMsSUFBSTtDQUNwQyxZQUFZLG9CQUFvQixFQUFFLGFBQWEsQ0FBQyxvQkFBb0I7Q0FDcEUsWUFBWSxTQUFTLEVBQUUsYUFBYSxDQUFDLFNBQVM7Q0FDOUMsWUFBWSxVQUFVLEVBQUU7Q0FDeEIsZ0JBQWdCLEdBQUcsRUFBRSxhQUFhLENBQUMsaUJBQWlCO0NBQ3BELGFBQWE7Q0FDYixZQUFZLFlBQVksRUFBRSxFQUFFO0NBQzVCLFNBQVMsQ0FBQztDQUNWLFFBQVEsZUFBZSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7Q0FDOUM7Q0FDQSxLQUFLO0NBQ0wsSUFBSSxLQUFLLE1BQU0saUJBQWlCLElBQUksdUJBQXVCLENBQUMsZ0JBQWdCLEVBQUU7Q0FDOUU7Q0FDQSxRQUFRLElBQUksaUJBQWlCLENBQUMsU0FBUyxLQUFLLFVBQVU7Q0FDdEQsWUFBWSxpQkFBaUIsQ0FBQyxTQUFTLEtBQUssVUFBVSxFQUFFO0NBQ3hELFlBQVksU0FBUztDQUNyQixTQUFTO0NBQ1QsUUFBUSxNQUFNLEdBQUcsR0FBRztDQUNwQixZQUFZLElBQUksRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO0NBQ3hDLFlBQVksR0FBRyxFQUFFLGlCQUFpQixDQUFDLEdBQUc7Q0FDdEMsWUFBWSxXQUFXLEVBQUUsaUJBQWlCLENBQUMsTUFBTTtDQUNqRCxZQUFZLGdCQUFnQixFQUFFLGlCQUFpQixDQUFDLE9BQU87Q0FDdkQsWUFBWSxTQUFTLEVBQUUsaUJBQWlCLENBQUMsU0FBUztDQUNsRCxTQUFTLENBQUM7Q0FDVixRQUFRLGVBQWUsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDbkQsS0FBSztDQUNMLElBQUksT0FBTyxlQUFlLENBQUM7Q0FDM0IsQ0FBQztDQUNELDhCQUE4QixHQUFHLHNCQUFzQixDQUFDO0NBQ3hEO0NBQ0E7Q0FDQTtDQUNBO0NBQ0EsU0FBUyx1QkFBdUIsQ0FBQyxJQUFJLEVBQUUsdUJBQXVCLEVBQUU7Q0FDaEUsSUFBSSxNQUFNLGFBQWEsR0FBRztDQUMxQixRQUFRLEdBQUcsRUFBRSxTQUFTO0NBQ3RCLFFBQVEsTUFBTSxFQUFFLEVBQUU7Q0FDbEIsUUFBUSxnQkFBZ0IsRUFBRSxFQUFFO0NBQzVCLFFBQVEsU0FBUyxFQUFFLEVBQUU7Q0FDckIsUUFBUSxJQUFJLEVBQUUsRUFBRTtDQUNoQixLQUFLLENBQUM7Q0FDTixJQUFJLEtBQUssTUFBTSxhQUFhLElBQUksdUJBQXVCLENBQUMsTUFBTSxFQUFFO0NBQ2hFLFFBQVEsSUFBSSxhQUFhLENBQUMsSUFBSSxLQUFLLElBQUk7Q0FDdkMsWUFBWSxTQUFTO0NBQ3JCLFFBQVEsTUFBTSxLQUFLLEdBQUc7Q0FDdEIsWUFBWSxRQUFRLEVBQUUsYUFBYSxDQUFDLFFBQVE7Q0FDNUMsWUFBWSxXQUFXLEVBQUUsYUFBYSxDQUFDLGdCQUFnQjtDQUN2RCxZQUFZLFNBQVMsRUFBRSxhQUFhLENBQUMsU0FBUztDQUM5QyxZQUFZLFFBQVEsRUFBRSxhQUFhLENBQUMsUUFBUTtDQUM1QyxZQUFZLFVBQVUsRUFBRSxhQUFhLENBQUMsZUFBZTtDQUNyRCxZQUFZLFlBQVksRUFBRSxhQUFhLENBQUMsWUFBWTtDQUNwRCxTQUFTLENBQUM7Q0FDVixRQUFRLGFBQWEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0NBQ3pDO0NBQ0EsUUFBUSxJQUFJLGFBQWEsQ0FBQyxtQkFBbUIsRUFBRTtDQUMvQyxZQUFZLE1BQU0sUUFBUSxHQUFHO0NBQzdCLGdCQUFnQixRQUFRLEVBQUUsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO0NBQ3JELGdCQUFnQixXQUFXLEVBQUUsYUFBYSxDQUFDLG1CQUFtQjtDQUM5RCxnQkFBZ0IsU0FBUyxFQUFFLGFBQWEsQ0FBQyxTQUFTO0NBQ2xELGdCQUFnQixVQUFVLEVBQUU7Q0FDNUIsb0JBQW9CLEdBQUcsRUFBRSxhQUFhLENBQUMsZ0JBQWdCO0NBQ3ZELGlCQUFpQjtDQUNqQixnQkFBZ0IsWUFBWSxFQUFFLEVBQUU7Q0FDaEMsYUFBYSxDQUFDO0NBQ2QsWUFBWSxhQUFhLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztDQUNoRCxTQUFTO0NBQ1QsS0FBSztDQUNMLElBQUksS0FBSyxNQUFNLGlCQUFpQixJQUFJLHVCQUF1QixDQUFDLGdCQUFnQixFQUFFO0NBQzlFO0NBQ0EsUUFBUSxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxJQUFJLGlCQUFpQixDQUFDLElBQUksS0FBSyxJQUFJO0NBQ3RFLGFBQWEsaUJBQWlCLENBQUMsU0FBUyxLQUFLLFVBQVU7Q0FDdkQsZ0JBQWdCLGlCQUFpQixDQUFDLFNBQVMsS0FBSyxVQUFVLENBQUMsRUFBRTtDQUM3RCxZQUFZLFNBQVM7Q0FDckIsU0FBUztDQUNULFFBQVEsTUFBTSxHQUFHLEdBQUc7Q0FDcEIsWUFBWSxHQUFHLEVBQUUsaUJBQWlCLENBQUMsR0FBRztDQUN0QyxZQUFZLEVBQUUsRUFBRSxpQkFBaUIsQ0FBQyxNQUFNO0NBQ3hDLFlBQVksT0FBTyxFQUFFLGlCQUFpQixDQUFDLE9BQU87Q0FDOUMsWUFBWSxVQUFVLEVBQUUsRUFBRTtDQUMxQixTQUFTLENBQUM7Q0FDVixRQUFRLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDakQsS0FBSztDQUNMLElBQUksT0FBTyxhQUFhLENBQUM7Q0FDekIsQ0FBQztDQUNELCtCQUErQixHQUFHLHVCQUF1QixDQUFDO0NBQzFEO0NBQ0E7Q0FDQTtDQUNBLFNBQVMsNkJBQTZCLENBQUMsSUFBSSxFQUFFLHVCQUF1QixFQUFFO0NBQ3RFLElBQUksTUFBTSxhQUFhLEdBQUc7Q0FDMUIsUUFBUSxHQUFHLEVBQUUsU0FBUztDQUN0QixRQUFRLE1BQU0sRUFBRSxFQUFFO0NBQ2xCLFFBQVEsZ0JBQWdCLEVBQUUsRUFBRTtDQUM1QixRQUFRLFNBQVMsRUFBRSxFQUFFO0NBQ3JCLFFBQVEsSUFBSSxFQUFFLEVBQUU7Q0FDaEIsS0FBSyxDQUFDO0NBQ04sSUFBSSxLQUFLLE1BQU0sYUFBYSxJQUFJLHVCQUF1QixDQUFDLE1BQU0sRUFBRTtDQUNoRSxRQUFRLElBQUksYUFBYSxDQUFDLElBQUksS0FBSyxJQUFJO0NBQ3ZDLFlBQVksU0FBUztDQUNyQixRQUFRLE1BQU0sS0FBSyxHQUFHO0NBQ3RCLFlBQVksUUFBUSxFQUFFLGFBQWEsQ0FBQyxRQUFRO0NBQzVDLFlBQVksV0FBVyxFQUFFLGFBQWEsQ0FBQyxnQkFBZ0I7Q0FDdkQsWUFBWSxTQUFTLEVBQUUsYUFBYSxDQUFDLFNBQVM7Q0FDOUMsWUFBWSxRQUFRLEVBQUUsYUFBYSxDQUFDLFFBQVE7Q0FDNUMsWUFBWSxVQUFVLEVBQUUsYUFBYSxDQUFDLGdCQUFnQjtDQUN0RCxZQUFZLFlBQVksRUFBRSxhQUFhLENBQUMsWUFBWTtDQUNwRCxTQUFTLENBQUM7Q0FDVixRQUFRLGFBQWEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0NBQ3pDO0NBQ0EsUUFBUSxJQUFJLGFBQWEsQ0FBQyxtQkFBbUIsRUFBRTtDQUMvQyxZQUFZLE1BQU0sUUFBUSxHQUFHO0NBQzdCLGdCQUFnQixRQUFRLEVBQUUsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO0NBQ3JELGdCQUFnQixXQUFXLEVBQUUsYUFBYSxDQUFDLG1CQUFtQjtDQUM5RCxnQkFBZ0IsU0FBUyxFQUFFLGFBQWEsQ0FBQyxTQUFTO0NBQ2xELGdCQUFnQixVQUFVLEVBQUU7Q0FDNUIsb0JBQW9CLEdBQUcsRUFBRSxhQUFhLENBQUMsZ0JBQWdCO0NBQ3ZELGlCQUFpQjtDQUNqQixnQkFBZ0IsWUFBWSxFQUFFLEVBQUU7Q0FDaEMsYUFBYSxDQUFDO0NBQ2QsWUFBWSxhQUFhLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztDQUNoRCxTQUFTO0NBQ1QsS0FBSztDQUNMLElBQUksS0FBSyxNQUFNLGlCQUFpQixJQUFJLHVCQUF1QixDQUFDLGdCQUFnQixFQUFFO0NBQzlFO0NBQ0EsUUFBUSxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxJQUFJLGlCQUFpQixDQUFDLElBQUksS0FBSyxJQUFJO0NBQ3RFLGFBQWEsaUJBQWlCLENBQUMsU0FBUyxLQUFLLFVBQVU7Q0FDdkQsZ0JBQWdCLGlCQUFpQixDQUFDLFNBQVMsS0FBSyxVQUFVLENBQUMsRUFBRTtDQUM3RCxZQUFZLFNBQVM7Q0FDckIsU0FBUztDQUNULFFBQVEsTUFBTSxHQUFHLEdBQUc7Q0FDcEIsWUFBWSxHQUFHLEVBQUUsaUJBQWlCLENBQUMsR0FBRztDQUN0QyxZQUFZLEVBQUUsRUFBRSxpQkFBaUIsQ0FBQyxNQUFNO0NBQ3hDLFlBQVksT0FBTyxFQUFFLGlCQUFpQixDQUFDLE9BQU87Q0FDOUMsWUFBWSxVQUFVLEVBQUUsRUFBRTtDQUMxQixTQUFTLENBQUM7Q0FDVixRQUFRLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDakQsS0FBSztDQUNMO0NBQ0EsSUFBSSxJQUFJLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLE1BQU0sR0FBRyxDQUFDLEdBQUcsS0FBSywyRUFBMkUsQ0FBQyxDQUFDLEVBQUU7Q0FDakosUUFBUSxLQUFLLE1BQU0sS0FBSyxJQUFJLGFBQWEsQ0FBQyxNQUFNLEVBQUU7Q0FDbEQsWUFBWSxLQUFLLENBQUMsWUFBWSxHQUFHLENBQUMsS0FBSyxDQUFDLFlBQVksSUFBSSxFQUFFO0NBQzFELGlCQUFpQixNQUFNLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLElBQUksS0FBSyxXQUFXLENBQUMsQ0FBQztDQUN6RCxTQUFTO0NBQ1QsS0FBSztDQUNMLFNBQVMsSUFBSSxhQUFhLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxNQUFNLEdBQUcsQ0FBQyxHQUFHLEtBQUssNERBQTRELENBQUMsQ0FBQyxFQUFFO0NBQ3ZJLFFBQVEsS0FBSyxNQUFNLEtBQUssSUFBSSxhQUFhLENBQUMsTUFBTSxFQUFFO0NBQ2xELFlBQVksS0FBSyxDQUFDLFlBQVksR0FBRyxDQUFDLEtBQUssQ0FBQyxZQUFZLElBQUksRUFBRTtDQUMxRCxpQkFBaUIsTUFBTSxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxJQUFJLEtBQUssY0FBYyxDQUFDLENBQUM7Q0FDNUQsU0FBUztDQUNULEtBQUs7Q0FDTCxTQUFTO0NBQ1QsUUFBUSxLQUFLLE1BQU0sS0FBSyxJQUFJLGFBQWEsQ0FBQyxNQUFNLEVBQUU7Q0FDbEQsWUFBWSxLQUFLLENBQUMsWUFBWSxHQUFHLENBQUMsS0FBSyxDQUFDLFlBQVksSUFBSSxFQUFFO0NBQzFELGlCQUFpQixNQUFNLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLElBQUksS0FBSyxjQUFjO0NBQzNELGdCQUFnQixFQUFFLENBQUMsSUFBSSxLQUFLLFdBQVcsQ0FBQyxDQUFDLENBQUM7Q0FDMUMsU0FBUztDQUNULEtBQUs7Q0FDTCxJQUFJLE9BQU8sYUFBYSxDQUFDO0NBQ3pCLENBQUM7Q0FDRCxxQ0FBcUMsR0FBRyw2QkFBNkIsQ0FBQztDQUN0RTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLFNBQVMsWUFBWSxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUU7Q0FDeEMsSUFBSSxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUM7Q0FDOUI7Q0FDQSxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7Q0FDbkIsUUFBUSxjQUFjLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ3ZDLFFBQVEsSUFBSSxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ2pDLFlBQVksY0FBYyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUMzQyxLQUFLO0NBQ0w7Q0FDQSxTQUFTO0NBQ1QsUUFBUSxLQUFLLElBQUksR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLEdBQUcsRUFBRTtDQUN0RCxZQUFZLElBQUksV0FBVyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxRQUFRLENBQUMsRUFBRTtDQUNwRCxnQkFBZ0IsY0FBYyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztDQUNqRCxnQkFBZ0IsSUFBSSxVQUFVLENBQUMsTUFBTSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQztDQUMvQyxvQkFBb0IsY0FBYyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDekQsZ0JBQWdCLE1BQU07Q0FDdEIsYUFBYTtDQUNiLFNBQVM7Q0FDVCxRQUFRLElBQUksY0FBYyxDQUFDLE1BQU0sS0FBSyxDQUFDO0NBQ3ZDLFlBQVksTUFBTSxJQUFJLFNBQVMsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0NBQzNELEtBQUs7Q0FDTCxJQUFJLE9BQU8sY0FBYyxDQUFDO0NBQzFCLENBQUM7Q0FDRCxvQkFBb0IsR0FBRyxZQUFZLENBQUM7Q0FDcEM7Q0FDQTtDQUNBO0NBQ0EsU0FBUyw2QkFBNkIsQ0FBQyxrQkFBa0IsRUFBRTtDQUMzRDtDQUNBLElBQUksa0JBQWtCLEdBQUdhLEtBQU8sQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsQ0FBQztDQUMzRDtDQUNBLElBQUkscUJBQXFCLENBQUMsa0JBQWtCLENBQUMsQ0FBQztDQUM5QyxJQUFJLE1BQU0sYUFBYSxHQUFHO0NBQzFCLFFBQVEsR0FBRyxFQUFFLGdCQUFnQjtDQUM3QixRQUFRLE1BQU0sRUFBRSxFQUFFO0NBQ2xCLFFBQVEsZ0JBQWdCLEVBQUUsRUFBRTtDQUM1QixRQUFRLFNBQVMsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLGlCQUFpQixFQUFFLENBQUM7Q0FDaEQsUUFBUSxJQUFJLEVBQUUsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFO0NBQ25DLEtBQUssQ0FBQztDQUNOLElBQUksYUFBYSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDNUQsSUFBSSxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsR0FBRywrQkFBK0IsQ0FBQztDQUMxRSxJQUFJLGFBQWEsQ0FBQyxnQkFBZ0IsR0FBRyxrQkFBa0IsQ0FBQyxnQkFBZ0IsQ0FBQztDQUN6RSxJQUFJLE9BQU8sYUFBYSxDQUFDO0NBQ3pCLENBQUM7Q0FDRCxxQ0FBcUMsR0FBRyw2QkFBNkIsQ0FBQztDQUN0RTtDQUNBO0NBQ0E7Q0FDQSxTQUFTLE9BQU8sQ0FBQyxJQUFJLEVBQUUsdUJBQXVCLEVBQUU7Q0FDaEQsSUFBSSxPQUFPLHVCQUF1QixDQUFDLE1BQU07Q0FDekMsUUFBUSxJQUFJLENBQUMsQ0FBQyxLQUFLLEtBQUssS0FBSyxDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsQ0FBQztDQUM3QyxDQUFDO0NBQ0QsZUFBZSxHQUFHLE9BQU8sQ0FBQztDQUMxQjtDQUNBO0NBQ0E7Q0FDQTtDQUNBLFNBQVMsVUFBVSxDQUFDLGFBQWEsRUFBRSx1QkFBdUIsRUFBRTtDQUM1RDtDQUNBLElBQUkscUJBQXFCLENBQUMsYUFBYSxDQUFDLENBQUM7Q0FDekMsSUFBSSxJQUFJLGFBQWEsQ0FBQyxNQUFNLENBQUMsTUFBTSxLQUFLLENBQUM7Q0FDekMsUUFBUSxPQUFPLEtBQUssQ0FBQztDQUNyQixJQUFJLE1BQU0sZUFBZSxHQUFHLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDcEQsSUFBSSxPQUFPLHVCQUF1QixDQUFDLE1BQU07Q0FDekMsU0FBUyxJQUFJLENBQUMsQ0FBQyxLQUFLLEtBQUssS0FBSyxDQUFDLGlCQUFpQixLQUFLLGVBQWUsQ0FBQyxXQUFXLENBQUMsQ0FBQztDQUNsRixDQUFDO0NBQ0Qsa0JBQWtCLEdBQUcsVUFBVSxDQUFDO0NBQ2hDLFNBQVMsVUFBVSxDQUFDLEtBQUssRUFBRTtDQUMzQixJQUFJLElBQUksQ0FBQyxLQUFLO0NBQ2QsUUFBUSxPQUFPLEtBQUssQ0FBQztDQUNyQixJQUFJLE9BQU8sV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7Q0FDNUMsQ0FBQztDQUNELFNBQVMsV0FBVyxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsRUFBRSxNQUFNLEdBQUcsS0FBSyxFQUFFLE1BQU0sR0FBRyxLQUFLLEVBQUUsR0FBRyxFQUFFLEVBQUU7Q0FDOUUsSUFBSSxNQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDO0NBQ3BELElBQUksTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztDQUNwRCxJQUFJLElBQUksU0FBUyxLQUFLLFNBQVM7Q0FDL0IsUUFBUSxPQUFPLEtBQUssQ0FBQztDQUNyQixJQUFJLElBQUksTUFBTSxDQUFDLFNBQVMsS0FBSyxNQUFNLENBQUMsU0FBUztDQUM3QyxRQUFRLE9BQU8sS0FBSyxDQUFDO0NBQ3JCLElBQUksSUFBSSxNQUFNLENBQUMsUUFBUSxLQUFLLE1BQU0sQ0FBQyxRQUFRO0NBQzNDLFFBQVEsT0FBTyxLQUFLLENBQUM7Q0FDckI7Q0FDQSxJQUFJLFFBQVEsU0FBUztDQUNyQixRQUFRLEtBQUssWUFBWTtDQUN6QixZQUFZO0NBQ1osZ0JBQWdCLE1BQU0sa0JBQWtCLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztDQUN4RixnQkFBZ0IsTUFBTSxrQkFBa0IsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxDQUFDO0NBQ3hGLGdCQUFnQixJQUFJLGtCQUFrQixLQUFLLGtCQUFrQjtDQUM3RCxvQkFBb0IsT0FBTyxLQUFLLENBQUM7Q0FDakM7Q0FDQSxnQkFBZ0IsSUFBSSxNQUFNLEVBQUU7Q0FDNUIsb0JBQW9CLElBQUksQ0FBQ0Msa0JBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRSxNQUFNLENBQUMsVUFBVSxDQUFDO0NBQ2pGLHdCQUF3QixPQUFPLEtBQUssQ0FBQztDQUNyQyxvQkFBb0IsSUFBSSxzQkFBc0IsQ0FBQztDQUMvQyxvQkFBb0IsSUFBSTtDQUN4Qix3QkFBd0Isc0JBQXNCO0NBQzlDLDRCQUE0QkEsa0JBQUksQ0FBQywrQkFBK0IsQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztDQUN2RyxxQkFBcUI7Q0FDckIsb0JBQW9CLE9BQU8sS0FBSyxFQUFFO0NBQ2xDLHdCQUF3QixPQUFPLEtBQUssQ0FBQztDQUNyQyxxQkFBcUI7Q0FDckIsb0JBQW9CLElBQUksTUFBTSxFQUFFO0NBQ2hDLHdCQUF3QixJQUFJLHNCQUFzQjtDQUNsRCw0QkFBNEIsTUFBTSxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLHNCQUFzQixDQUFDO0NBQzNGO0NBQ0EsNEJBQTRCLE9BQU8sTUFBTSxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0NBQ3pFLHFCQUFxQjtDQUNyQixpQkFBaUI7Q0FDakIsZ0JBQWdCLE1BQU07Q0FDdEIsYUFBYTtDQUNiLFFBQVEsS0FBSyxXQUFXO0NBQ3hCLFlBQVk7Q0FDWjtDQUNBLGdCQUFnQixJQUFJLE1BQU0sRUFBRTtDQUM1QixvQkFBb0IsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7Q0FDNUUsb0JBQW9CLE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO0NBQzVFLG9CQUFvQixJQUFJLFVBQVUsS0FBSyxVQUFVO0NBQ2pELHdCQUF3QixPQUFPLEtBQUssQ0FBQztDQUNyQyxpQkFBaUI7Q0FDakIsZ0JBQWdCLE1BQU07Q0FDdEIsYUFBYTtDQUNiLEtBQUs7Q0FDTCxJQUFJLE9BQU8sSUFBSSxDQUFDO0NBQ2hCLENBQUM7Q0FDRCxTQUFTLHFCQUFxQixDQUFDLElBQUksRUFBRSxJQUFJLEVBQUU7Q0FDM0MsSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxJQUFJO0NBQ3pELFFBQVEsT0FBTyxLQUFLLENBQUM7Q0FDckIsSUFBSSxJQUFJLElBQUksQ0FBQyxHQUFHLEtBQUssSUFBSSxDQUFDLEdBQUc7Q0FDN0IsUUFBUSxPQUFPLEtBQUssQ0FBQztDQUNyQixJQUFJLE9BQU8sSUFBSSxDQUFDO0NBQ2hCLENBQUM7Q0FDRCxTQUFTLGtCQUFrQixDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUU7Q0FDNUMsSUFBSSxNQUFNLG1CQUFtQixHQUFHLEVBQUUsQ0FBQztDQUNuQyxJQUFJLEtBQUssTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLFlBQVksSUFBSSxFQUFFLEVBQUU7Q0FDakQsUUFBUSxNQUFNLFdBQVcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxZQUFZLElBQUksRUFBRTtDQUN0RCxhQUFhLElBQUksQ0FBQyxDQUFDLEdBQUcsTUFBTSxHQUFHLENBQUMsSUFBSSxLQUFLLEdBQUcsQ0FBQyxJQUFJO0NBQ2pELGFBQWEsR0FBRyxDQUFDLFNBQVMsS0FBSyxHQUFHLENBQUMsU0FBUyxLQUFLLENBQUMsR0FBRyxDQUFDLFNBQVMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUN0RixRQUFRLElBQUksV0FBVztDQUN2QixZQUFZLG1CQUFtQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztDQUNsRCxLQUFLO0NBQ0wsSUFBSSxPQUFPLG1CQUFtQixDQUFDO0NBQy9COzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUN2ekJBLENBQ0EsSUFBSSxTQUFTLEdBQUcsQ0FBQ2YsY0FBSSxJQUFJQSxjQUFJLENBQUMsU0FBUyxLQUFLLFVBQVUsT0FBTyxFQUFFLFVBQVUsRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFO0NBQ3pGLElBQUksU0FBUyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsT0FBTyxLQUFLLFlBQVksQ0FBQyxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQyxVQUFVLE9BQU8sRUFBRSxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFO0NBQ2hILElBQUksT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsT0FBTyxDQUFDLEVBQUUsVUFBVSxPQUFPLEVBQUUsTUFBTSxFQUFFO0NBQy9ELFFBQVEsU0FBUyxTQUFTLENBQUMsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtDQUNuRyxRQUFRLFNBQVMsUUFBUSxDQUFDLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtDQUN0RyxRQUFRLFNBQVMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLE1BQU0sQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUMsRUFBRTtDQUN0SCxRQUFRLElBQUksQ0FBQyxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxVQUFVLElBQUksRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztDQUM5RSxLQUFLLENBQUMsQ0FBQztDQUNQLENBQUMsQ0FBQztDQUNGLE1BQU0sQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0NBQzlELE1BQU0sVUFBVSxDQUFDO0NBQ2pCLElBQUksV0FBVyxDQUFDLEVBQUUsZ0JBQWdCLEVBQUUsaUJBQWlCLEVBQUUsR0FBRztDQUMxRCxRQUFRLGdCQUFnQixFQUFFLEtBQUs7Q0FDL0IsUUFBUSxpQkFBaUIsRUFBRSxLQUFLO0NBQ2hDLEtBQUssRUFBRTtDQUNQO0NBQ0EsUUFBUSxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztDQUM1QjtDQUNBLFFBQVEsSUFBSSxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUM7Q0FDL0I7Q0FDQSxRQUFRLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUM7Q0FDdEM7Q0FDQSxRQUFRLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxLQUFLLENBQUM7Q0FDdkMsUUFBUSxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsZ0JBQWdCLENBQUM7Q0FDakQsUUFBUSxJQUFJLENBQUMsaUJBQWlCLEdBQUcsaUJBQWlCLENBQUM7Q0FDbkQsS0FBSztDQUNMO0NBQ0E7Q0FDQTtDQUNBLElBQUksSUFBSSxJQUFJLEdBQUc7Q0FDZixRQUFRLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUM7Q0FDeEMsS0FBSztDQUNMO0NBQ0E7Q0FDQTtDQUNBO0NBQ0EsSUFBSSxLQUFLLEdBQUc7Q0FDWixRQUFRLElBQUksSUFBSSxDQUFDLE1BQU07Q0FDdkIsWUFBWSxPQUFPO0NBQ25CLFFBQVEsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7Q0FDM0IsUUFBUSxLQUFLLE1BQU0sV0FBVyxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7Q0FDckQsWUFBWSxXQUFXLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztDQUN2QyxZQUFZLFdBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDO0NBQy9FLFNBQVM7Q0FDVDtDQUNBLFFBQVEsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0NBQ3JDLEtBQUs7Q0FDTDtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUU7Q0FDckIsUUFBUSxPQUFPLFNBQVMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLEVBQUUsS0FBSyxDQUFDLEVBQUUsYUFBYTtDQUM1RCxZQUFZLElBQUksSUFBSSxDQUFDLE1BQU07Q0FDM0IsZ0JBQWdCLE1BQU0sSUFBSSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsbUJBQW1CLENBQUMsQ0FBQztDQUNyRSxZQUFZLElBQUksT0FBTyxJQUFJLEtBQUssVUFBVTtDQUMxQyxnQkFBZ0IsTUFBTSxJQUFJLFNBQVMsQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO0NBQ3BFLFlBQVksSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxFQUFFO0NBQ3BDLGdCQUFnQixJQUFJO0NBQ3BCLG9CQUFvQixNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztDQUN6RSxpQkFBaUI7Q0FDakIsZ0JBQWdCLE9BQU8sS0FBSyxFQUFFLEdBQUc7Q0FDakMsYUFBYTtDQUNiLFlBQVksT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEtBQUs7Q0FDcEQsZ0JBQWdCLE1BQU0sV0FBVyxHQUFHO0NBQ3BDLG9CQUFvQixJQUFJO0NBQ3hCLG9CQUFvQixJQUFJO0NBQ3hCLG9CQUFvQixPQUFPO0NBQzNCLG9CQUFvQixNQUFNO0NBQzFCLG9CQUFvQixPQUFPLEVBQUUsS0FBSztDQUNsQyxpQkFBaUIsQ0FBQztDQUNsQjtDQUNBLGdCQUFnQixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztDQUNwRDtDQUNBLGdCQUFnQixJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxLQUFLLENBQUM7Q0FDbEQsb0JBQW9CLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztDQUNoQyxhQUFhLENBQUMsQ0FBQztDQUNmLFNBQVMsQ0FBQyxDQUFDO0NBQ1gsS0FBSztDQUNMO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQSxJQUFJLElBQUksR0FBRztDQUNYLFFBQVEsSUFBSSxJQUFJLENBQUMsTUFBTTtDQUN2QixZQUFZLE9BQU87Q0FDbkIsUUFBUSxLQUFLLE1BQU0sV0FBVyxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7Q0FDckQsWUFBWSxXQUFXLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztDQUN2QyxZQUFZLFdBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsaUJBQWlCLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDO0NBQ2pGLFNBQVM7Q0FDVDtDQUNBLFFBQVEsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0NBQ3JDLEtBQUs7Q0FDTCxJQUFJLElBQUksR0FBRztDQUNYLFFBQVEsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFdBQVcsS0FBSztDQUN0RCxZQUFZLE9BQU87Q0FDbkIsZ0JBQWdCLElBQUksRUFBRSxXQUFXLENBQUMsSUFBSTtDQUN0QyxnQkFBZ0IsSUFBSSxFQUFFLFdBQVcsQ0FBQyxJQUFJO0NBQ3RDLGdCQUFnQixPQUFPLEVBQUUsV0FBVyxDQUFDLE9BQU87Q0FDNUMsYUFBYSxDQUFDO0NBQ2QsU0FBUyxDQUFDLENBQUM7Q0FDWCxLQUFLO0NBQ0wsSUFBSSxJQUFJLEdBQUc7Q0FDWCxRQUFRLE9BQU8sU0FBUyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsRUFBRSxLQUFLLENBQUMsRUFBRSxhQUFhO0NBQzVEO0NBQ0EsWUFBWSxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ3JELFlBQVksSUFBSSxDQUFDLFdBQVc7Q0FDNUIsZ0JBQWdCLE9BQU87Q0FDdkI7Q0FDQSxZQUFZLE1BQU0sSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQztDQUNoRDtDQUNBLFlBQVksSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsQ0FBQztDQUN0QztDQUNBLFlBQVksSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0NBQ3hCLFNBQVMsQ0FBQyxDQUFDO0NBQ1gsS0FBSztDQUNMLElBQUksV0FBVyxDQUFDLFdBQVcsRUFBRTtDQUM3QixRQUFRLE9BQU8sU0FBUyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsRUFBRSxLQUFLLENBQUMsRUFBRSxhQUFhO0NBQzVEO0NBQ0EsWUFBWSxJQUFJLFdBQVcsQ0FBQyxPQUFPO0NBQ25DLGdCQUFnQixPQUFPO0NBQ3ZCLFlBQVksSUFBSTtDQUNoQixnQkFBZ0IsTUFBTSxNQUFNLEdBQUcsTUFBTSxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7Q0FDeEQ7Q0FDQSxnQkFBZ0IsSUFBSSxXQUFXLENBQUMsT0FBTztDQUN2QyxvQkFBb0IsT0FBTztDQUMzQjtDQUNBLGdCQUFnQixXQUFXLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0NBQzVDLGFBQWE7Q0FDYixZQUFZLE9BQU8sS0FBSyxFQUFFO0NBQzFCO0NBQ0EsZ0JBQWdCLElBQUksV0FBVyxDQUFDLE9BQU87Q0FDdkMsb0JBQW9CLE9BQU87Q0FDM0I7Q0FDQSxnQkFBZ0IsV0FBVyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztDQUMxQyxhQUFhO0NBQ2IsU0FBUyxDQUFDLENBQUM7Q0FDWCxLQUFLO0NBQ0wsQ0FBQztDQUNELGtCQUFrQixHQUFHLFVBQVU7Ozs7OztDQzlJL0IsSUFBSSxNQUFNLENBQUM7QUFDWDtDQUNBO0NBQ0E7Q0FDQTtDQUNBLFNBQVMsYUFBYSxHQUFHLEVBQUU7Q0FDM0IsYUFBYSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzlDO0NBQ0EsU0FBUyxZQUFZLEdBQUc7Q0FDeEIsRUFBRSxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztDQUMvQixDQUFDO0FBQ0QsQUFFQTtDQUNBO0NBQ0E7Q0FDQSxZQUFZLENBQUMsWUFBWSxHQUFHLGFBQVk7QUFDeEM7Q0FDQSxZQUFZLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztBQUNsQztDQUNBLFlBQVksQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQztDQUMxQyxZQUFZLENBQUMsU0FBUyxDQUFDLE9BQU8sR0FBRyxTQUFTLENBQUM7Q0FDM0MsWUFBWSxDQUFDLFNBQVMsQ0FBQyxhQUFhLEdBQUcsU0FBUyxDQUFDO0FBQ2pEO0NBQ0E7Q0FDQTtDQUNBLFlBQVksQ0FBQyxtQkFBbUIsR0FBRyxFQUFFLENBQUM7QUFDdEM7Q0FDQSxZQUFZLENBQUMsSUFBSSxHQUFHLFdBQVc7Q0FDL0IsRUFBRSxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztDQUNyQixFQUFFLElBQUksWUFBWSxDQUFDLFlBQVksRUFBRTtDQUNqQztDQUNBLElBQUksSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLEFBQW1DLEVBQUUsQ0FFdEQ7Q0FDTCxHQUFHO0FBQ0g7Q0FDQSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLEtBQUssTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLEVBQUU7Q0FDN0UsSUFBSSxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksYUFBYSxFQUFFLENBQUM7Q0FDdkMsSUFBSSxJQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsQ0FBQztDQUMxQixHQUFHO0FBQ0g7Q0FDQSxFQUFFLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLGFBQWEsSUFBSSxTQUFTLENBQUM7Q0FDdkQsQ0FBQyxDQUFDO0FBQ0Y7Q0FDQTtDQUNBO0NBQ0EsWUFBWSxDQUFDLFNBQVMsQ0FBQyxlQUFlLEdBQUcsU0FBUyxlQUFlLENBQUMsQ0FBQyxFQUFFO0NBQ3JFLEVBQUUsSUFBSSxPQUFPLENBQUMsS0FBSyxRQUFRLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDO0NBQ2hELElBQUksTUFBTSxJQUFJLFNBQVMsQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDO0NBQ2xFLEVBQUUsSUFBSSxDQUFDLGFBQWEsR0FBRyxDQUFDLENBQUM7Q0FDekIsRUFBRSxPQUFPLElBQUksQ0FBQztDQUNkLENBQUMsQ0FBQztBQUNGO0NBQ0EsU0FBUyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUU7Q0FDaEMsRUFBRSxJQUFJLElBQUksQ0FBQyxhQUFhLEtBQUssU0FBUztDQUN0QyxJQUFJLE9BQU8sWUFBWSxDQUFDLG1CQUFtQixDQUFDO0NBQzVDLEVBQUUsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDO0NBQzVCLENBQUM7QUFDRDtDQUNBLFlBQVksQ0FBQyxTQUFTLENBQUMsZUFBZSxHQUFHLFNBQVMsZUFBZSxHQUFHO0NBQ3BFLEVBQUUsT0FBTyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztDQUNoQyxDQUFDLENBQUM7QUFDRjtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQSxTQUFTLFFBQVEsQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRTtDQUN2QyxFQUFFLElBQUksSUFBSTtDQUNWLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztDQUN2QixPQUFPO0NBQ1AsSUFBSSxJQUFJLEdBQUcsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDO0NBQzdCLElBQUksSUFBSSxTQUFTLEdBQUcsVUFBVSxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQztDQUM3QyxJQUFJLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsRUFBRSxDQUFDO0NBQ2hDLE1BQU0sU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztDQUM5QixHQUFHO0NBQ0gsQ0FBQztDQUNELFNBQVMsT0FBTyxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRTtDQUM1QyxFQUFFLElBQUksSUFBSTtDQUNWLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7Q0FDN0IsT0FBTztDQUNQLElBQUksSUFBSSxHQUFHLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQztDQUM3QixJQUFJLElBQUksU0FBUyxHQUFHLFVBQVUsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUM7Q0FDN0MsSUFBSSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLEVBQUUsQ0FBQztDQUNoQyxNQUFNLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0NBQ3BDLEdBQUc7Q0FDSCxDQUFDO0NBQ0QsU0FBUyxPQUFPLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRTtDQUNsRCxFQUFFLElBQUksSUFBSTtDQUNWLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0NBQ25DLE9BQU87Q0FDUCxJQUFJLElBQUksR0FBRyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUM7Q0FDN0IsSUFBSSxJQUFJLFNBQVMsR0FBRyxVQUFVLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0NBQzdDLElBQUksS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxFQUFFLENBQUM7Q0FDaEMsTUFBTSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7Q0FDMUMsR0FBRztDQUNILENBQUM7Q0FDRCxTQUFTLFNBQVMsQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRTtDQUMxRCxFQUFFLElBQUksSUFBSTtDQUNWLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztDQUN6QyxPQUFPO0NBQ1AsSUFBSSxJQUFJLEdBQUcsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDO0NBQzdCLElBQUksSUFBSSxTQUFTLEdBQUcsVUFBVSxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQztDQUM3QyxJQUFJLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsRUFBRSxDQUFDO0NBQ2hDLE1BQU0sU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztDQUNoRCxHQUFHO0NBQ0gsQ0FBQztBQUNEO0NBQ0EsU0FBUyxRQUFRLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFO0NBQzdDLEVBQUUsSUFBSSxJQUFJO0NBQ1YsSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztDQUM5QixPQUFPO0NBQ1AsSUFBSSxJQUFJLEdBQUcsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDO0NBQzdCLElBQUksSUFBSSxTQUFTLEdBQUcsVUFBVSxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQztDQUM3QyxJQUFJLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsRUFBRSxDQUFDO0NBQ2hDLE1BQU0sU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7Q0FDckMsR0FBRztDQUNILENBQUM7QUFDRDtDQUNBLFlBQVksQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLFNBQVMsSUFBSSxDQUFDLElBQUksRUFBRTtDQUNsRCxFQUFFLElBQUksRUFBRSxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDO0FBQ2hELENBQ0EsRUFBRSxJQUFJLE9BQU8sSUFBSSxJQUFJLEtBQUssT0FBTyxDQUFDLENBQUM7QUFDbkM7Q0FDQSxFQUFFLE1BQU0sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO0NBQ3hCLEVBQUUsSUFBSSxNQUFNO0NBQ1osSUFBSSxPQUFPLElBQUksT0FBTyxJQUFJLE1BQU0sQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLENBQUM7Q0FDaEQsT0FBTyxJQUFJLENBQUMsT0FBTztDQUNuQixJQUFJLE9BQU8sS0FBSyxDQUFDO0FBQ2pCO0NBQ0EsRUFBRSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztBQUN2QjtDQUNBO0NBQ0EsRUFBRSxJQUFJLE9BQU8sRUFBRTtDQUNmLElBQUksRUFBRSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUN0QixJQUFJLElBQUksTUFBTSxFQUFFO0NBQ2hCLE1BQU0sSUFBSSxDQUFDLEVBQUU7Q0FDYixRQUFRLEVBQUUsR0FBRyxJQUFJLEtBQUssQ0FBQyxxQ0FBcUMsQ0FBQyxDQUFDO0NBQzlELE1BQU0sRUFBRSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUM7Q0FDOUIsTUFBTSxFQUFFLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztDQUN6QixNQUFNLEVBQUUsQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDO0NBQzlCLE1BQU0sTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7Q0FDL0IsS0FBSyxNQUFNLElBQUksRUFBRSxZQUFZLEtBQUssRUFBRTtDQUNwQyxNQUFNLE1BQU0sRUFBRSxDQUFDO0NBQ2YsS0FBSyxNQUFNO0NBQ1g7Q0FDQSxNQUFNLElBQUksR0FBRyxHQUFHLElBQUksS0FBSyxDQUFDLHdDQUF3QyxHQUFHLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQztDQUMvRSxNQUFNLEdBQUcsQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO0NBQ3ZCLE1BQU0sTUFBTSxHQUFHLENBQUM7Q0FDaEIsS0FBSztDQUNMLElBQUksT0FBTyxLQUFLLENBQUM7Q0FDakIsR0FBRztBQUNIO0NBQ0EsRUFBRSxPQUFPLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3pCO0NBQ0EsRUFBRSxJQUFJLENBQUMsT0FBTztDQUNkLElBQUksT0FBTyxLQUFLLENBQUM7QUFDakI7Q0FDQSxFQUFFLElBQUksSUFBSSxHQUFHLE9BQU8sT0FBTyxLQUFLLFVBQVUsQ0FBQztDQUMzQyxFQUFFLEdBQUcsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDO0NBQ3pCLEVBQUUsUUFBUSxHQUFHO0NBQ2I7Q0FDQSxJQUFJLEtBQUssQ0FBQztDQUNWLE1BQU0sUUFBUSxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7Q0FDcEMsTUFBTSxNQUFNO0NBQ1osSUFBSSxLQUFLLENBQUM7Q0FDVixNQUFNLE9BQU8sQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUNqRCxNQUFNLE1BQU07Q0FDWixJQUFJLEtBQUssQ0FBQztDQUNWLE1BQU0sT0FBTyxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUMvRCxNQUFNLE1BQU07Q0FDWixJQUFJLEtBQUssQ0FBQztDQUNWLE1BQU0sU0FBUyxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDL0UsTUFBTSxNQUFNO0NBQ1o7Q0FDQSxJQUFJO0NBQ0osTUFBTSxJQUFJLEdBQUcsSUFBSSxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDO0NBQ2hDLE1BQU0sS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFO0NBQzlCLFFBQVEsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDbkMsTUFBTSxRQUFRLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7Q0FDMUMsR0FBRztBQUNILEFBR0E7Q0FDQSxFQUFFLE9BQU8sSUFBSSxDQUFDO0NBQ2QsQ0FBQyxDQUFDO0FBQ0Y7Q0FDQSxTQUFTLFlBQVksQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUU7Q0FDdkQsRUFBRSxJQUFJLENBQUMsQ0FBQztDQUNSLEVBQUUsSUFBSSxNQUFNLENBQUM7Q0FDYixFQUFFLElBQUksUUFBUSxDQUFDO0FBQ2Y7Q0FDQSxFQUFFLElBQUksT0FBTyxRQUFRLEtBQUssVUFBVTtDQUNwQyxJQUFJLE1BQU0sSUFBSSxTQUFTLENBQUMsd0NBQXdDLENBQUMsQ0FBQztBQUNsRTtDQUNBLEVBQUUsTUFBTSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUM7Q0FDMUIsRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFO0NBQ2YsSUFBSSxNQUFNLEdBQUcsTUFBTSxDQUFDLE9BQU8sR0FBRyxJQUFJLGFBQWEsRUFBRSxDQUFDO0NBQ2xELElBQUksTUFBTSxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUM7Q0FDNUIsR0FBRyxNQUFNO0NBQ1Q7Q0FDQTtDQUNBLElBQUksSUFBSSxNQUFNLENBQUMsV0FBVyxFQUFFO0NBQzVCLE1BQU0sTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsSUFBSTtDQUNyQyxrQkFBa0IsUUFBUSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQyxDQUFDO0FBQ3BFO0NBQ0E7Q0FDQTtDQUNBLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUM7Q0FDOUIsS0FBSztDQUNMLElBQUksUUFBUSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztDQUM1QixHQUFHO0FBQ0g7Q0FDQSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUU7Q0FDakI7Q0FDQSxJQUFJLFFBQVEsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsUUFBUSxDQUFDO0NBQ3ZDLElBQUksRUFBRSxNQUFNLENBQUMsWUFBWSxDQUFDO0NBQzFCLEdBQUcsTUFBTTtDQUNULElBQUksSUFBSSxPQUFPLFFBQVEsS0FBSyxVQUFVLEVBQUU7Q0FDeEM7Q0FDQSxNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsT0FBTyxHQUFHLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQztDQUM5RCwwQ0FBMEMsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7Q0FDL0QsS0FBSyxNQUFNO0NBQ1g7Q0FDQSxNQUFNLElBQUksT0FBTyxFQUFFO0NBQ25CLFFBQVEsUUFBUSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztDQUNuQyxPQUFPLE1BQU07Q0FDYixRQUFRLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7Q0FDaEMsT0FBTztDQUNQLEtBQUs7QUFDTDtDQUNBO0NBQ0EsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRTtDQUMxQixNQUFNLENBQUMsR0FBRyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztDQUNuQyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7Q0FDN0MsUUFBUSxRQUFRLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztDQUMvQixRQUFRLElBQUksQ0FBQyxHQUFHLElBQUksS0FBSyxDQUFDLDhDQUE4QztDQUN4RSw0QkFBNEIsUUFBUSxDQUFDLE1BQU0sR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLG9CQUFvQjtDQUMvRSw0QkFBNEIsaURBQWlELENBQUMsQ0FBQztDQUMvRSxRQUFRLENBQUMsQ0FBQyxJQUFJLEdBQUcsNkJBQTZCLENBQUM7Q0FDL0MsUUFBUSxDQUFDLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztDQUMzQixRQUFRLENBQUMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0NBQ3RCLFFBQVEsQ0FBQyxDQUFDLEtBQUssR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDO0NBQ2xDLFFBQVEsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ3ZCLE9BQU87Q0FDUCxLQUFLO0NBQ0wsR0FBRztBQUNIO0NBQ0EsRUFBRSxPQUFPLE1BQU0sQ0FBQztDQUNoQixDQUFDO0NBQ0QsU0FBUyxXQUFXLENBQUMsQ0FBQyxFQUFFO0NBQ3hCLEVBQUUsT0FBTyxPQUFPLENBQUMsSUFBSSxLQUFLLFVBQVUsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDeEUsQ0FBQztDQUNELFlBQVksQ0FBQyxTQUFTLENBQUMsV0FBVyxHQUFHLFNBQVMsV0FBVyxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUU7Q0FDMUUsRUFBRSxPQUFPLFlBQVksQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQztDQUNuRCxDQUFDLENBQUM7QUFDRjtDQUNBLFlBQVksQ0FBQyxTQUFTLENBQUMsRUFBRSxHQUFHLFlBQVksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDO0FBQy9EO0NBQ0EsWUFBWSxDQUFDLFNBQVMsQ0FBQyxlQUFlO0NBQ3RDLElBQUksU0FBUyxlQUFlLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRTtDQUM3QyxNQUFNLE9BQU8sWUFBWSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO0NBQ3RELEtBQUssQ0FBQztBQUNOO0NBQ0EsU0FBUyxTQUFTLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUU7Q0FDM0MsRUFBRSxJQUFJLEtBQUssR0FBRyxLQUFLLENBQUM7Q0FDcEIsRUFBRSxTQUFTLENBQUMsR0FBRztDQUNmLElBQUksTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7Q0FDbkMsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO0NBQ2hCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQztDQUNuQixNQUFNLFFBQVEsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0NBQ3hDLEtBQUs7Q0FDTCxHQUFHO0NBQ0gsRUFBRSxDQUFDLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztDQUN4QixFQUFFLE9BQU8sQ0FBQyxDQUFDO0NBQ1gsQ0FBQztBQUNEO0NBQ0EsWUFBWSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsU0FBUyxJQUFJLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRTtDQUM1RCxFQUFFLElBQUksT0FBTyxRQUFRLEtBQUssVUFBVTtDQUNwQyxJQUFJLE1BQU0sSUFBSSxTQUFTLENBQUMsd0NBQXdDLENBQUMsQ0FBQztDQUNsRSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7Q0FDakQsRUFBRSxPQUFPLElBQUksQ0FBQztDQUNkLENBQUMsQ0FBQztBQUNGO0NBQ0EsWUFBWSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUI7Q0FDMUMsSUFBSSxTQUFTLG1CQUFtQixDQUFDLElBQUksRUFBRSxRQUFRLEVBQUU7Q0FDakQsTUFBTSxJQUFJLE9BQU8sUUFBUSxLQUFLLFVBQVU7Q0FDeEMsUUFBUSxNQUFNLElBQUksU0FBUyxDQUFDLHdDQUF3QyxDQUFDLENBQUM7Q0FDdEUsTUFBTSxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO0NBQ2xFLE1BQU0sT0FBTyxJQUFJLENBQUM7Q0FDbEIsS0FBSyxDQUFDO0FBQ047Q0FDQTtDQUNBLFlBQVksQ0FBQyxTQUFTLENBQUMsY0FBYztDQUNyQyxJQUFJLFNBQVMsY0FBYyxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUU7Q0FDNUMsTUFBTSxJQUFJLElBQUksRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxnQkFBZ0IsQ0FBQztBQUN0RDtDQUNBLE1BQU0sSUFBSSxPQUFPLFFBQVEsS0FBSyxVQUFVO0NBQ3hDLFFBQVEsTUFBTSxJQUFJLFNBQVMsQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDO0FBQ3RFO0NBQ0EsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztDQUM1QixNQUFNLElBQUksQ0FBQyxNQUFNO0NBQ2pCLFFBQVEsT0FBTyxJQUFJLENBQUM7QUFDcEI7Q0FDQSxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7Q0FDMUIsTUFBTSxJQUFJLENBQUMsSUFBSTtDQUNmLFFBQVEsT0FBTyxJQUFJLENBQUM7QUFDcEI7Q0FDQSxNQUFNLElBQUksSUFBSSxLQUFLLFFBQVEsS0FBSyxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxRQUFRLEtBQUssUUFBUSxDQUFDLEVBQUU7Q0FDOUUsUUFBUSxJQUFJLEVBQUUsSUFBSSxDQUFDLFlBQVksS0FBSyxDQUFDO0NBQ3JDLFVBQVUsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLGFBQWEsRUFBRSxDQUFDO0NBQzdDLGFBQWE7Q0FDYixVQUFVLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0NBQzlCLFVBQVUsSUFBSSxNQUFNLENBQUMsY0FBYztDQUNuQyxZQUFZLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxRQUFRLElBQUksUUFBUSxDQUFDLENBQUM7Q0FDekUsU0FBUztDQUNULE9BQU8sTUFBTSxJQUFJLE9BQU8sSUFBSSxLQUFLLFVBQVUsRUFBRTtDQUM3QyxRQUFRLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN0QjtDQUNBLFFBQVEsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLEdBQUc7Q0FDeEMsVUFBVSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO0NBQ2xDLGVBQWUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxLQUFLLFFBQVEsQ0FBQyxFQUFFO0NBQ25FLFlBQVksZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQztDQUNoRCxZQUFZLFFBQVEsR0FBRyxDQUFDLENBQUM7Q0FDekIsWUFBWSxNQUFNO0NBQ2xCLFdBQVc7Q0FDWCxTQUFTO0FBQ1Q7Q0FDQSxRQUFRLElBQUksUUFBUSxHQUFHLENBQUM7Q0FDeEIsVUFBVSxPQUFPLElBQUksQ0FBQztBQUN0QjtDQUNBLFFBQVEsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtDQUMvQixVQUFVLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxTQUFTLENBQUM7Q0FDOUIsVUFBVSxJQUFJLEVBQUUsSUFBSSxDQUFDLFlBQVksS0FBSyxDQUFDLEVBQUU7Q0FDekMsWUFBWSxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksYUFBYSxFQUFFLENBQUM7Q0FDL0MsWUFBWSxPQUFPLElBQUksQ0FBQztDQUN4QixXQUFXLE1BQU07Q0FDakIsWUFBWSxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztDQUNoQyxXQUFXO0NBQ1gsU0FBUyxNQUFNO0NBQ2YsVUFBVSxTQUFTLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0NBQ3BDLFNBQVM7QUFDVDtDQUNBLFFBQVEsSUFBSSxNQUFNLENBQUMsY0FBYztDQUNqQyxVQUFVLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxFQUFFLGdCQUFnQixJQUFJLFFBQVEsQ0FBQyxDQUFDO0NBQzFFLE9BQU87QUFDUDtDQUNBLE1BQU0sT0FBTyxJQUFJLENBQUM7Q0FDbEIsS0FBSyxDQUFDO0FBQ047Q0FDQSxZQUFZLENBQUMsU0FBUyxDQUFDLGtCQUFrQjtDQUN6QyxJQUFJLFNBQVMsa0JBQWtCLENBQUMsSUFBSSxFQUFFO0NBQ3RDLE1BQU0sSUFBSSxTQUFTLEVBQUUsTUFBTSxDQUFDO0FBQzVCO0NBQ0EsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztDQUM1QixNQUFNLElBQUksQ0FBQyxNQUFNO0NBQ2pCLFFBQVEsT0FBTyxJQUFJLENBQUM7QUFDcEI7Q0FDQTtDQUNBLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLEVBQUU7Q0FDbEMsUUFBUSxJQUFJLFNBQVMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO0NBQ3BDLFVBQVUsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLGFBQWEsRUFBRSxDQUFDO0NBQzdDLFVBQVUsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUM7Q0FDaEMsU0FBUyxNQUFNLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFO0NBQ2pDLFVBQVUsSUFBSSxFQUFFLElBQUksQ0FBQyxZQUFZLEtBQUssQ0FBQztDQUN2QyxZQUFZLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxhQUFhLEVBQUUsQ0FBQztDQUMvQztDQUNBLFlBQVksT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7Q0FDaEMsU0FBUztDQUNULFFBQVEsT0FBTyxJQUFJLENBQUM7Q0FDcEIsT0FBTztBQUNQO0NBQ0E7Q0FDQSxNQUFNLElBQUksU0FBUyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7Q0FDbEMsUUFBUSxJQUFJLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0NBQ3ZDLFFBQVEsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFO0NBQ25ELFVBQVUsR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUN4QixVQUFVLElBQUksR0FBRyxLQUFLLGdCQUFnQixFQUFFLFNBQVM7Q0FDakQsVUFBVSxJQUFJLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDdkMsU0FBUztDQUNULFFBQVEsSUFBSSxDQUFDLGtCQUFrQixDQUFDLGdCQUFnQixDQUFDLENBQUM7Q0FDbEQsUUFBUSxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksYUFBYSxFQUFFLENBQUM7Q0FDM0MsUUFBUSxJQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsQ0FBQztDQUM5QixRQUFRLE9BQU8sSUFBSSxDQUFDO0NBQ3BCLE9BQU87QUFDUDtDQUNBLE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMvQjtDQUNBLE1BQU0sSUFBSSxPQUFPLFNBQVMsS0FBSyxVQUFVLEVBQUU7Q0FDM0MsUUFBUSxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztDQUM3QyxPQUFPLE1BQU0sSUFBSSxTQUFTLEVBQUU7Q0FDNUI7Q0FDQSxRQUFRLEdBQUc7Q0FDWCxVQUFVLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDckUsU0FBUyxRQUFRLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRTtDQUMvQixPQUFPO0FBQ1A7Q0FDQSxNQUFNLE9BQU8sSUFBSSxDQUFDO0NBQ2xCLEtBQUssQ0FBQztBQUNOO0NBQ0EsWUFBWSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEdBQUcsU0FBUyxTQUFTLENBQUMsSUFBSSxFQUFFO0NBQzVELEVBQUUsSUFBSSxVQUFVLENBQUM7Q0FDakIsRUFBRSxJQUFJLEdBQUcsQ0FBQztDQUNWLEVBQUUsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztBQUM1QjtDQUNBLEVBQUUsSUFBSSxDQUFDLE1BQU07Q0FDYixJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUM7Q0FDYixPQUFPO0NBQ1AsSUFBSSxVQUFVLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0NBQzlCLElBQUksSUFBSSxDQUFDLFVBQVU7Q0FDbkIsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDO0NBQ2YsU0FBUyxJQUFJLE9BQU8sVUFBVSxLQUFLLFVBQVU7Q0FDN0MsTUFBTSxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsUUFBUSxJQUFJLFVBQVUsQ0FBQyxDQUFDO0NBQ2hEO0NBQ0EsTUFBTSxHQUFHLEdBQUcsZUFBZSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0NBQ3hDLEdBQUc7QUFDSDtDQUNBLEVBQUUsT0FBTyxHQUFHLENBQUM7Q0FDYixDQUFDLENBQUM7QUFDRjtDQUNBLFlBQVksQ0FBQyxhQUFhLEdBQUcsU0FBUyxPQUFPLEVBQUUsSUFBSSxFQUFFO0NBQ3JELEVBQUUsSUFBSSxPQUFPLE9BQU8sQ0FBQyxhQUFhLEtBQUssVUFBVSxFQUFFO0NBQ25ELElBQUksT0FBTyxPQUFPLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO0NBQ3ZDLEdBQUcsTUFBTTtDQUNULElBQUksT0FBTyxhQUFhLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztDQUM3QyxHQUFHO0NBQ0gsQ0FBQyxDQUFDO0FBQ0Y7Q0FDQSxZQUFZLENBQUMsU0FBUyxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7Q0FDckQsU0FBUyxhQUFhLENBQUMsSUFBSSxFQUFFO0NBQzdCLEVBQUUsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztBQUM1QjtDQUNBLEVBQUUsSUFBSSxNQUFNLEVBQUU7Q0FDZCxJQUFJLElBQUksVUFBVSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNsQztDQUNBLElBQUksSUFBSSxPQUFPLFVBQVUsS0FBSyxVQUFVLEVBQUU7Q0FDMUMsTUFBTSxPQUFPLENBQUMsQ0FBQztDQUNmLEtBQUssTUFBTSxJQUFJLFVBQVUsRUFBRTtDQUMzQixNQUFNLE9BQU8sVUFBVSxDQUFDLE1BQU0sQ0FBQztDQUMvQixLQUFLO0NBQ0wsR0FBRztBQUNIO0NBQ0EsRUFBRSxPQUFPLENBQUMsQ0FBQztDQUNYLENBQUM7QUFDRDtDQUNBLFlBQVksQ0FBQyxTQUFTLENBQUMsVUFBVSxHQUFHLFNBQVMsVUFBVSxHQUFHO0NBQzFELEVBQUUsT0FBTyxJQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUM7Q0FDcEUsQ0FBQyxDQUFDO0FBQ0Y7Q0FDQTtDQUNBLFNBQVMsU0FBUyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUU7Q0FDaEMsRUFBRSxLQUFLLElBQUksQ0FBQyxHQUFHLEtBQUssRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUM7Q0FDdkUsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ3RCLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0NBQ2IsQ0FBQztBQUNEO0NBQ0EsU0FBUyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRTtDQUM1QixFQUFFLElBQUksSUFBSSxHQUFHLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQzFCLEVBQUUsT0FBTyxDQUFDLEVBQUU7Q0FDWixJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDckIsRUFBRSxPQUFPLElBQUksQ0FBQztDQUNkLENBQUM7QUFDRDtDQUNBLFNBQVMsZUFBZSxDQUFDLEdBQUcsRUFBRTtDQUM5QixFQUFFLElBQUksR0FBRyxHQUFHLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztDQUNsQyxFQUFFLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFO0NBQ3ZDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ3ZDLEdBQUc7Q0FDSCxFQUFFLE9BQU8sR0FBRyxDQUFDO0NBQ2IsQ0FBQzs7O0FDMWRELENBQ0EsTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7QUFDM0I7QUFDRTtDQUNyQyxNQUFNLE1BQU0sR0FBRyxJQUFJLFFBQVEsQ0FBQyxNQUFNLENBQUMsc0JBQXNCLENBQUMsQ0FBQztDQUMzRCxNQUFNLG9CQUFvQixTQUFTZ0IsWUFBUSxDQUFDLFlBQVksQ0FBQztDQUN6RCxJQUFJLFdBQVcsR0FBRztDQUNsQixRQUFRLEtBQUssRUFBRSxDQUFDO0NBQ2hCLFFBQVEsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQztDQUN2QyxLQUFLO0NBQ0wsSUFBSSxRQUFRLENBQUMsS0FBSyxFQUFFLEdBQUcsSUFBSSxFQUFFO0NBQzdCLFFBQVEsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztDQUN2RCxRQUFRLElBQUk7Q0FDWixZQUFZLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztDQUM3QyxTQUFTO0NBQ1QsUUFBUSxPQUFPLEtBQUssRUFBRTtDQUN0QixZQUFZLE1BQU0sQ0FBQyxLQUFLLENBQUMsMERBQTBELEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO0NBQ25HLFlBQVksT0FBTyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7Q0FDekMsU0FBUztDQUNULEtBQUs7Q0FDTCxJQUFJLE1BQU0saUJBQWlCLENBQUMsS0FBSyxFQUFFLEdBQUcsSUFBSSxFQUFFO0NBQzVDLFFBQVEsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsR0FBRyxJQUFJLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUNsRyxLQUFLO0NBQ0wsQ0FBQztDQUNELDRCQUE0QixHQUFHLG9CQUFvQjs7Ozs7OztBQ3hCbkQsQ0FDQSxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUN6QjtBQUM0QjtBQUM1QjtDQUNyQyxNQUFNLE1BQU0sR0FBRyxJQUFJLFFBQVEsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7Q0FDL0MsTUFBTSxRQUFRLFNBQVMsc0JBQXNCLENBQUMsb0JBQW9CLENBQUM7Q0FDbkU7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0EsSUFBSSxXQUFXLENBQUMsRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsYUFBYSxFQUFFLFVBQVUsRUFBRSxtQkFBbUIsRUFBRSxjQUFjLEVBQUUsT0FBTyxFQUFFLEVBQUU7Q0FDNUgsUUFBUSxLQUFLLEVBQUUsQ0FBQztDQUNoQjtDQUNBLFFBQVEsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7Q0FDN0IsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0NBQ3RDLFFBQVEsSUFBSSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUM7Q0FDdEIsUUFBUSxJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQztDQUNoQyxRQUFRLElBQUksQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDO0NBQ3BDLFFBQVEsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7Q0FDNUIsUUFBUSxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUM7Q0FDaEMsUUFBUSxJQUFJLENBQUMsY0FBYyxHQUFHLGFBQWEsQ0FBQztDQUM1QyxRQUFRLElBQUksQ0FBQyxPQUFPLEdBQUcsbUJBQW1CLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztDQUNwRSxRQUFRLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxTQUFTLENBQUM7Q0FDMUMsUUFBUSxJQUFJLENBQUMsV0FBVyxHQUFHLFVBQVUsQ0FBQztDQUN0QyxRQUFRLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxtQkFBbUIsQ0FBQztDQUN4RCxRQUFRLElBQUksQ0FBQyxlQUFlLEdBQUcsY0FBYyxDQUFDO0NBQzlDLFFBQVEsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUM7Q0FDaEMsUUFBUSxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0NBQzNEO0NBQ0E7Q0FDQSxRQUFRLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztDQUM1QixLQUFLO0NBQ0w7Q0FDQTtDQUNBO0NBQ0EsSUFBSSxJQUFJLEVBQUUsR0FBRztDQUNiLFFBQVEsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDO0NBQ3hCLEtBQUs7Q0FDTDtDQUNBO0NBQ0E7Q0FDQSxJQUFJLElBQUksT0FBTyxHQUFHO0NBQ2xCLFFBQVEsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0NBQzdCLEtBQUs7Q0FDTDtDQUNBO0NBQ0E7Q0FDQSxJQUFJLElBQUksTUFBTSxHQUFHO0NBQ2pCLFFBQVEsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0NBQzVCLEtBQUs7Q0FDTDtDQUNBO0NBQ0E7Q0FDQSxJQUFJLElBQUksSUFBSSxHQUFHO0NBQ2YsUUFBUSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7Q0FDMUIsS0FBSztDQUNMO0NBQ0E7Q0FDQTtDQUNBLElBQUksSUFBSSxTQUFTLEdBQUc7Q0FDcEIsUUFBUSxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7Q0FDL0IsS0FBSztDQUNMO0NBQ0E7Q0FDQTtDQUNBLElBQUksSUFBSSxLQUFLLEdBQUc7Q0FDaEIsUUFBUSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7Q0FDM0IsS0FBSztDQUNMO0NBQ0E7Q0FDQTtDQUNBLElBQUksSUFBSSxhQUFhLEdBQUc7Q0FDeEIsUUFBUSxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUM7Q0FDbkMsS0FBSztDQUNMO0NBQ0E7Q0FDQTtDQUNBLElBQUksSUFBSSxNQUFNLEdBQUc7Q0FDakIsUUFBUSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7Q0FDNUIsS0FBSztDQUNMO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQSxJQUFJLElBQUksZUFBZSxHQUFHO0NBQzFCLFFBQVEsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7Q0FDckMsS0FBSztDQUNMO0NBQ0E7Q0FDQTtDQUNBLElBQUksSUFBSSxPQUFPLEdBQUc7Q0FDbEIsUUFBUSxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7Q0FDN0IsS0FBSztDQUNMO0NBQ0E7Q0FDQTtDQUNBLElBQUksSUFBSSxPQUFPLENBQUMsT0FBTyxFQUFFO0NBQ3pCLFFBQVEsTUFBTSxJQUFJLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO0NBQzFELEtBQUs7Q0FDTDtDQUNBO0NBQ0E7Q0FDQSxJQUFJLEtBQUssR0FBRztDQUNaLFFBQVEsSUFBSSxJQUFJLENBQUMsT0FBTztDQUN4QixZQUFZLE9BQU87Q0FDbkIsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0NBQ2hDLFFBQVEsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7Q0FDNUIsUUFBUSxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7Q0FDN0IsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0NBQzVCLEtBQUs7Q0FDTDtDQUNBO0NBQ0E7Q0FDQSxJQUFJLGVBQWUsR0FBRztDQUN0QixRQUFRLElBQUksSUFBSSxDQUFDLE9BQU87Q0FDeEIsWUFBWSxPQUFPO0NBQ25CLFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0NBQzFDLFFBQVEsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7Q0FDNUIsUUFBUSxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7Q0FDN0IsUUFBUSxJQUFJLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLENBQUM7Q0FDeEMsS0FBSztDQUNMO0NBQ0E7Q0FDQTtDQUNBLElBQUksTUFBTSxRQUFRLEdBQUc7Q0FDckIsUUFBUSxJQUFJLElBQUksQ0FBQyxPQUFPO0NBQ3hCLFlBQVksTUFBTSxJQUFJQyxNQUFRLENBQUMsaUJBQWlCLENBQUMsUUFBUSxDQUFDLENBQUM7Q0FDM0QsUUFBUSxPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLENBQUMsQ0FBQztDQUNuRCxLQUFLO0NBQ0w7Q0FDQTtDQUNBO0NBQ0EsSUFBSSxLQUFLLEdBQUc7Q0FDWixRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7Q0FDaEMsUUFBUSxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7Q0FDMUIsWUFBWSxNQUFNLENBQUMsS0FBSyxDQUFDLDJCQUEyQixDQUFDLENBQUM7Q0FDdEQsWUFBWSxPQUFPO0NBQ25CLFNBQVM7Q0FDVCxRQUFRLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO0NBQzVCLFFBQVEsSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxvQkFBb0IsRUFBRTtDQUN0RCxZQUFZLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztDQUN4QyxTQUFTO0NBQ1QsUUFBUSxJQUFJLElBQUksQ0FBQyxlQUFlLEVBQUU7Q0FDbEMsWUFBWSxJQUFJLENBQUMsaUJBQWlCLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQztDQUN6RCxpQkFBaUIsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7Q0FDbEMsU0FBUztDQUNULEtBQUs7Q0FDTDtDQUNBO0NBQ0E7Q0FDQSxJQUFJLE1BQU0sR0FBRztDQUNiLFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztDQUNqQyxRQUFRLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtDQUMxQixZQUFZLE1BQU0sQ0FBQyxLQUFLLENBQUMsNEJBQTRCLENBQUMsQ0FBQztDQUN2RCxZQUFZLE9BQU87Q0FDbkIsU0FBUztDQUNULFFBQVEsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7Q0FDN0IsUUFBUSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLG9CQUFvQixFQUFFO0NBQ3RELFlBQVksSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO0NBQ3ZDLFNBQVM7Q0FDVCxRQUFRLElBQUksSUFBSSxDQUFDLGVBQWUsRUFBRTtDQUNsQyxZQUFZLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQztDQUNoRSxpQkFBaUIsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7Q0FDbEMsU0FBUztDQUNULEtBQUs7Q0FDTDtDQUNBO0NBQ0E7Q0FDQSxJQUFJLE1BQU0sWUFBWSxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUU7Q0FDbEMsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLDJCQUEyQixFQUFFLEtBQUssQ0FBQyxDQUFDO0NBQ3pELFFBQVEsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO0NBQzFCO0NBQ0E7Q0FDQSxZQUFZLElBQUksS0FBSyxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7Q0FDM0MsZ0JBQWdCLElBQUk7Q0FDcEIsb0JBQW9CLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztDQUNqQyxpQkFBaUI7Q0FDakIsZ0JBQWdCLE9BQU8sS0FBSyxFQUFFLEdBQUc7Q0FDakMsYUFBYTtDQUNiLFlBQVksTUFBTSxJQUFJQSxNQUFRLENBQUMsaUJBQWlCLENBQUMsUUFBUSxDQUFDLENBQUM7Q0FDM0QsU0FBUztDQUNULGFBQWEsSUFBSSxLQUFLLElBQUksS0FBSyxDQUFDLFVBQVUsS0FBSyxPQUFPLEVBQUU7Q0FDeEQsWUFBWSxNQUFNLElBQUlBLE1BQVEsQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLENBQUMsQ0FBQztDQUNoRSxTQUFTO0NBQ1Q7Q0FDQSxRQUFRLElBQUksS0FBSyxLQUFLLElBQUksQ0FBQyxNQUFNLEVBQUU7Q0FDbkMsWUFBWSxNQUFNLENBQUMsS0FBSyxDQUFDLHNDQUFzQyxDQUFDLENBQUM7Q0FDakUsWUFBWSxPQUFPO0NBQ25CLFNBQVM7Q0FDVCxRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRTtDQUNwRCxZQUFZLE1BQU0sSUFBSSxDQUFDLGlCQUFpQixDQUFDLGVBQWUsRUFBRSxLQUFLLENBQUMsQ0FBQztDQUNqRSxTQUFTO0NBQ1Q7Q0FDQSxRQUFRLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztDQUM3QjtDQUNBLFFBQVEsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7Q0FDNUI7Q0FDQTtDQUNBLFFBQVEsSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxvQkFBb0IsRUFBRTtDQUN0RCxZQUFZLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTztDQUM3QixnQkFBZ0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO0NBQzNDLGlCQUFpQixJQUFJLElBQUksQ0FBQyxPQUFPO0NBQ2pDLGdCQUFnQixJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7Q0FDNUMsU0FBUztDQUNUO0NBQ0EsUUFBUSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7Q0FDNUIsS0FBSztDQUNMO0NBQ0E7Q0FDQTtDQUNBLElBQUksTUFBTSxrQkFBa0IsQ0FBQyxZQUFZLEVBQUU7Q0FDM0MsUUFBUSxJQUFJLElBQUksQ0FBQyxPQUFPO0NBQ3hCLFlBQVksTUFBTSxJQUFJQSxNQUFRLENBQUMsaUJBQWlCLENBQUMsUUFBUSxDQUFDLENBQUM7Q0FDM0QsYUFBYSxJQUFJLElBQUksQ0FBQyxLQUFLLEtBQUssT0FBTztDQUN2QyxZQUFZLE1BQU0sSUFBSUEsTUFBUSxDQUFDLGdCQUFnQixDQUFDLHNCQUFzQixDQUFDLENBQUM7Q0FDeEUsYUFBYSxJQUFJLE9BQU8sWUFBWSxLQUFLLFFBQVE7Q0FDakQsWUFBWSxNQUFNLElBQUksU0FBUyxDQUFDLHNCQUFzQixDQUFDLENBQUM7Q0FDeEQsUUFBUSxJQUFJLFlBQVksS0FBSyxJQUFJLENBQUMsZ0JBQWdCO0NBQ2xELFlBQVksT0FBTztDQUNuQixRQUFRLE1BQU0sSUFBSSxDQUFDLGlCQUFpQixDQUFDLHFCQUFxQixFQUFFLFlBQVksQ0FBQyxDQUFDO0NBQzFFLFFBQVEsSUFBSSxDQUFDLGdCQUFnQixHQUFHLFlBQVksQ0FBQztDQUM3QyxLQUFLO0NBQ0w7Q0FDQTtDQUNBO0NBQ0EsSUFBSSxNQUFNLHdCQUF3QixDQUFDLE1BQU0sRUFBRTtDQUMzQyxRQUFRLElBQUksSUFBSSxDQUFDLE9BQU87Q0FDeEIsWUFBWSxNQUFNLElBQUlBLE1BQVEsQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztDQUMzRCxhQUFhLElBQUksT0FBTyxNQUFNLEtBQUssUUFBUTtDQUMzQyxZQUFZLE1BQU0sSUFBSSxTQUFTLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztDQUNsRCxRQUFRLE1BQU0sSUFBSSxDQUFDLGlCQUFpQixDQUFDLDJCQUEyQixFQUFFLE1BQU0sQ0FBQyxDQUFDO0NBQzFFLEtBQUs7Q0FDTCxJQUFJLGFBQWEsR0FBRztDQUNwQixRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMscUJBQXFCLENBQUMsQ0FBQztDQUM1QyxRQUFRLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUM7Q0FDcEMsS0FBSztDQUNMLElBQUksWUFBWSxHQUFHO0NBQ25CLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNO0NBQ3hCLFlBQVksT0FBTztDQUNuQixRQUFRLElBQUksQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztDQUNsRSxLQUFLO0NBQ0wsSUFBSSxhQUFhLEdBQUc7Q0FDcEIsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU07Q0FDeEIsWUFBWSxPQUFPO0NBQ25CLFFBQVEsSUFBSTtDQUNaLFlBQVksSUFBSSxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0NBQ3pFO0NBQ0EsWUFBWSxJQUFJLElBQUksQ0FBQyxXQUFXO0NBQ2hDLGdCQUFnQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO0NBQ25DLFNBQVM7Q0FDVCxRQUFRLE9BQU8sS0FBSyxFQUFFLEdBQUc7Q0FDekIsS0FBSztDQUNMLENBQUM7Q0FDRCxnQkFBZ0IsR0FBRyxRQUFROzs7Ozs7O0FDcFEzQixDQUNBLE1BQU0sQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQ3pCO0FBQzRCO0FBQzVCO0NBQ3JDLE1BQU0sTUFBTSxHQUFHLElBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztDQUMvQyxNQUFNLFFBQVEsU0FBUyxzQkFBc0IsQ0FBQyxvQkFBb0IsQ0FBQztDQUNuRTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQSxJQUFJLFdBQVcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsYUFBYSxFQUFFLE9BQU8sRUFBRSxFQUFFO0NBQ3pGLFFBQVEsS0FBSyxFQUFFLENBQUM7Q0FDaEI7Q0FDQSxRQUFRLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO0NBQzdCLFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQztDQUN0QyxRQUFRLElBQUksQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDO0NBQ3RCLFFBQVEsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUM7Q0FDaEMsUUFBUSxJQUFJLENBQUMsV0FBVyxHQUFHLFVBQVUsQ0FBQztDQUN0QyxRQUFRLElBQUksQ0FBQyxZQUFZLEdBQUcsV0FBVyxDQUFDO0NBQ3hDLFFBQVEsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7Q0FDNUIsUUFBUSxJQUFJLENBQUMsY0FBYyxHQUFHLGFBQWEsQ0FBQztDQUM1QyxRQUFRLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDO0NBQ3RDLFFBQVEsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUM7Q0FDaEMsUUFBUSxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0NBQzNELFFBQVEsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0NBQzVCLEtBQUs7Q0FDTDtDQUNBO0NBQ0E7Q0FDQSxJQUFJLElBQUksRUFBRSxHQUFHO0NBQ2IsUUFBUSxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUM7Q0FDeEIsS0FBSztDQUNMO0NBQ0E7Q0FDQTtDQUNBLElBQUksSUFBSSxPQUFPLEdBQUc7Q0FDbEIsUUFBUSxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7Q0FDN0IsS0FBSztDQUNMO0NBQ0E7Q0FDQTtDQUNBLElBQUksSUFBSSxVQUFVLEdBQUc7Q0FDckIsUUFBUSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7Q0FDaEMsS0FBSztDQUNMO0NBQ0E7Q0FDQTtDQUNBLElBQUksSUFBSSxNQUFNLEdBQUc7Q0FDakIsUUFBUSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7Q0FDNUIsS0FBSztDQUNMO0NBQ0E7Q0FDQTtDQUNBLElBQUksSUFBSSxJQUFJLEdBQUc7Q0FDZixRQUFRLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7Q0FDaEMsS0FBSztDQUNMO0NBQ0E7Q0FDQTtDQUNBLElBQUksSUFBSSxXQUFXLEdBQUc7Q0FDdEIsUUFBUSxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUM7Q0FDakMsS0FBSztDQUNMO0NBQ0E7Q0FDQTtDQUNBLElBQUksSUFBSSxLQUFLLEdBQUc7Q0FDaEIsUUFBUSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7Q0FDM0IsS0FBSztDQUNMO0NBQ0E7Q0FDQTtDQUNBLElBQUksSUFBSSxhQUFhLEdBQUc7Q0FDeEIsUUFBUSxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUM7Q0FDbkMsS0FBSztDQUNMO0NBQ0E7Q0FDQTtDQUNBLElBQUksSUFBSSxNQUFNLEdBQUc7Q0FDakIsUUFBUSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7Q0FDNUIsS0FBSztDQUNMO0NBQ0E7Q0FDQTtDQUNBLElBQUksSUFBSSxPQUFPLEdBQUc7Q0FDbEIsUUFBUSxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7Q0FDN0IsS0FBSztDQUNMO0NBQ0E7Q0FDQTtDQUNBLElBQUksSUFBSSxPQUFPLENBQUMsT0FBTyxFQUFFO0NBQ3pCLFFBQVEsTUFBTSxJQUFJLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO0NBQzFELEtBQUs7Q0FDTDtDQUNBO0NBQ0E7Q0FDQSxJQUFJLEtBQUssR0FBRztDQUNaLFFBQVEsSUFBSSxJQUFJLENBQUMsT0FBTztDQUN4QixZQUFZLE9BQU87Q0FDbkIsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0NBQ2hDLFFBQVEsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7Q0FDNUIsUUFBUSxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7Q0FDN0IsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0NBQzVCLEtBQUs7Q0FDTDtDQUNBO0NBQ0E7Q0FDQSxJQUFJLGVBQWUsR0FBRztDQUN0QixRQUFRLElBQUksSUFBSSxDQUFDLE9BQU87Q0FDeEIsWUFBWSxPQUFPO0NBQ25CLFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0NBQzFDLFFBQVEsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7Q0FDNUIsUUFBUSxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7Q0FDN0IsUUFBUSxJQUFJLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLENBQUM7Q0FDeEMsS0FBSztDQUNMO0NBQ0E7Q0FDQTtDQUNBLElBQUksTUFBTSxRQUFRLEdBQUc7Q0FDckIsUUFBUSxJQUFJLElBQUksQ0FBQyxPQUFPO0NBQ3hCLFlBQVksTUFBTSxJQUFJQSxNQUFRLENBQUMsaUJBQWlCLENBQUMsUUFBUSxDQUFDLENBQUM7Q0FDM0QsUUFBUSxPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLENBQUMsQ0FBQztDQUNuRCxLQUFLO0NBQ0w7Q0FDQTtDQUNBO0NBQ0EsSUFBSSxLQUFLLEdBQUc7Q0FDWixRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7Q0FDaEMsUUFBUSxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7Q0FDMUIsWUFBWSxNQUFNLENBQUMsS0FBSyxDQUFDLDJCQUEyQixDQUFDLENBQUM7Q0FDdEQsWUFBWSxPQUFPO0NBQ25CLFNBQVM7Q0FDVCxRQUFRLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO0NBQzVCLFFBQVEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO0NBQ3BDLEtBQUs7Q0FDTDtDQUNBO0NBQ0E7Q0FDQSxJQUFJLE1BQU0sR0FBRztDQUNiLFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztDQUNqQyxRQUFRLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtDQUMxQixZQUFZLE1BQU0sQ0FBQyxLQUFLLENBQUMsNEJBQTRCLENBQUMsQ0FBQztDQUN2RCxZQUFZLE9BQU87Q0FDbkIsU0FBUztDQUNULFFBQVEsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7Q0FDN0IsUUFBUSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7Q0FDbkMsS0FBSztDQUNMLElBQUksYUFBYSxHQUFHO0NBQ3BCLFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0NBQzVDLFFBQVEsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQztDQUNwQyxLQUFLO0NBQ0wsSUFBSSxZQUFZLEdBQUc7Q0FDbkIsUUFBUSxJQUFJLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7Q0FDbEUsS0FBSztDQUNMLElBQUksYUFBYSxHQUFHO0NBQ3BCLFFBQVEsSUFBSTtDQUNaLFlBQVksSUFBSSxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0NBQ3pFLFlBQVksSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztDQUMvQixTQUFTO0NBQ1QsUUFBUSxPQUFPLEtBQUssRUFBRSxHQUFHO0NBQ3pCLEtBQUs7Q0FDTCxDQUFDO0NBQ0QsZ0JBQWdCLEdBQUcsUUFBUTs7Ozs7OztBQ3BLM0IsQ0FDQSxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUN6QjtBQUM0QjtBQUM1QjtDQUNyQyxNQUFNLE1BQU0sR0FBRyxJQUFJLFFBQVEsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUM7Q0FDbkQsTUFBTSxZQUFZLFNBQVMsc0JBQXNCLENBQUMsb0JBQW9CLENBQUM7Q0FDdkU7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLElBQUksV0FBVyxDQUFDLEVBQUUsRUFBRSxFQUFFLFdBQVcsRUFBRSxvQkFBb0IsRUFBRSxPQUFPLEVBQUUsRUFBRTtDQUNwRSxRQUFRLEtBQUssRUFBRSxDQUFDO0NBQ2hCO0NBQ0EsUUFBUSxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztDQUM3QixRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUM7Q0FDdEMsUUFBUSxJQUFJLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQztDQUN0QixRQUFRLElBQUksQ0FBQyxZQUFZLEdBQUcsV0FBVyxDQUFDO0NBQ3hDLFFBQVEsSUFBSSxDQUFDLHFCQUFxQixHQUFHLG9CQUFvQixDQUFDO0NBQzFELFFBQVEsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUM7Q0FDaEMsUUFBUSxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztDQUNsQyxLQUFLO0NBQ0w7Q0FDQTtDQUNBO0NBQ0EsSUFBSSxJQUFJLEVBQUUsR0FBRztDQUNiLFFBQVEsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDO0NBQ3hCLEtBQUs7Q0FDTDtDQUNBO0NBQ0E7Q0FDQSxJQUFJLElBQUksTUFBTSxHQUFHO0NBQ2pCLFFBQVEsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0NBQzVCLEtBQUs7Q0FDTDtDQUNBO0NBQ0E7Q0FDQSxJQUFJLElBQUksb0JBQW9CLEdBQUc7Q0FDL0IsUUFBUSxPQUFPLElBQUksQ0FBQyxxQkFBcUIsQ0FBQztDQUMxQyxLQUFLO0NBQ0w7Q0FDQTtDQUNBO0NBQ0EsSUFBSSxJQUFJLFVBQVUsR0FBRztDQUNyQixRQUFRLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUM7Q0FDNUMsS0FBSztDQUNMO0NBQ0E7Q0FDQTtDQUNBLElBQUksSUFBSSxLQUFLLEdBQUc7Q0FDaEIsUUFBUSxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDO0NBQ3ZDLEtBQUs7Q0FDTDtDQUNBO0NBQ0E7Q0FDQSxJQUFJLElBQUksUUFBUSxHQUFHO0NBQ25CLFFBQVEsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQztDQUMxQyxLQUFLO0NBQ0w7Q0FDQTtDQUNBO0NBQ0EsSUFBSSxJQUFJLGNBQWMsR0FBRztDQUN6QixRQUFRLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUM7Q0FDaEQsS0FBSztDQUNMO0NBQ0E7Q0FDQTtDQUNBLElBQUksSUFBSSwwQkFBMEIsR0FBRztDQUNyQyxRQUFRLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQywwQkFBMEIsQ0FBQztDQUM1RCxLQUFLO0NBQ0w7Q0FDQTtDQUNBO0NBQ0EsSUFBSSxJQUFJLDBCQUEwQixDQUFDLDBCQUEwQixFQUFFO0NBQy9ELFFBQVEsSUFBSSxDQUFDLFlBQVksQ0FBQywwQkFBMEIsR0FBRywwQkFBMEIsQ0FBQztDQUNsRixLQUFLO0NBQ0w7Q0FDQTtDQUNBO0NBQ0EsSUFBSSxJQUFJLE9BQU8sR0FBRztDQUNsQixRQUFRLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztDQUM3QixLQUFLO0NBQ0w7Q0FDQTtDQUNBO0NBQ0EsSUFBSSxJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUU7Q0FDekIsUUFBUSxNQUFNLElBQUksS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7Q0FDMUQsS0FBSztDQUNMO0NBQ0E7Q0FDQTtDQUNBLElBQUksS0FBSyxHQUFHO0NBQ1osUUFBUSxJQUFJLElBQUksQ0FBQyxPQUFPO0NBQ3hCLFlBQVksT0FBTztDQUNuQixRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7Q0FDaEMsUUFBUSxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztDQUM1QixRQUFRLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLENBQUM7Q0FDbEMsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0NBQzVCLEtBQUs7Q0FDTDtDQUNBO0NBQ0E7Q0FDQSxJQUFJLGVBQWUsR0FBRztDQUN0QixRQUFRLElBQUksSUFBSSxDQUFDLE9BQU87Q0FDeEIsWUFBWSxPQUFPO0NBQ25CLFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0NBQzFDLFFBQVEsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7Q0FDNUIsUUFBUSxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxDQUFDO0NBQ2xDLFFBQVEsSUFBSSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0NBQ3hDLEtBQUs7Q0FDTDtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0EsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO0NBQ2YsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0NBQy9CLFFBQVEsSUFBSSxJQUFJLENBQUMsT0FBTztDQUN4QixZQUFZLE1BQU0sSUFBSUEsTUFBUSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0NBQzNELFFBQVEsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7Q0FDckMsS0FBSztDQUNMLElBQUksa0JBQWtCLEdBQUc7Q0FDekIsUUFBUSxJQUFJLENBQUMsWUFBWSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxNQUFNO0NBQ3pELFlBQVksSUFBSSxJQUFJLENBQUMsT0FBTztDQUM1QixnQkFBZ0IsT0FBTztDQUN2QixZQUFZLE1BQU0sQ0FBQyxLQUFLLENBQUMsMEJBQTBCLENBQUMsQ0FBQztDQUNyRCxZQUFZLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7Q0FDbEMsU0FBUyxDQUFDLENBQUM7Q0FDWCxRQUFRLElBQUksQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLENBQUMsS0FBSyxLQUFLO0NBQy9ELFlBQVksSUFBSSxJQUFJLENBQUMsT0FBTztDQUM1QixnQkFBZ0IsT0FBTztDQUN2QixZQUFZLElBQUksRUFBRSxLQUFLLEVBQUUsR0FBRyxLQUFLLENBQUM7Q0FDbEMsWUFBWSxJQUFJLENBQUMsS0FBSztDQUN0QixnQkFBZ0IsS0FBSyxHQUFHLElBQUksS0FBSyxDQUFDLDJCQUEyQixDQUFDLENBQUM7Q0FDL0QsWUFBWSxJQUFJLEtBQUssQ0FBQyxXQUFXLEtBQUssY0FBYyxFQUFFO0NBQ3RELGdCQUFnQixNQUFNLENBQUMsS0FBSyxDQUFDLCtDQUErQyxFQUFFLEtBQUssQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0NBQ2xILGFBQWE7Q0FDYixpQkFBaUI7Q0FDakIsZ0JBQWdCLE1BQU0sQ0FBQyxLQUFLLENBQUMsK0JBQStCLEVBQUUsS0FBSyxDQUFDLENBQUM7Q0FDckUsYUFBYTtDQUNiLFlBQVksSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7Q0FDMUMsU0FBUyxDQUFDLENBQUM7Q0FDWCxRQUFRLElBQUksQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLE1BQU07Q0FDMUQsWUFBWSxJQUFJLElBQUksQ0FBQyxPQUFPO0NBQzVCLGdCQUFnQixPQUFPO0NBQ3ZCLFlBQVksTUFBTSxDQUFDLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0NBQ3JELFlBQVksSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7Q0FDaEMsWUFBWSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0NBQ2hDLFlBQVksSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztDQUNuQyxTQUFTLENBQUMsQ0FBQztDQUNYLFFBQVEsSUFBSSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsTUFBTTtDQUM1RCxZQUFZLElBQUksSUFBSSxDQUFDLE9BQU87Q0FDNUIsZ0JBQWdCLE9BQU87Q0FDdkIsWUFBWSxNQUFNLENBQUMsSUFBSSxDQUFDLGtFQUFrRSxDQUFDLENBQUM7Q0FDNUYsU0FBUyxDQUFDLENBQUM7Q0FDWCxRQUFRLElBQUksQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLENBQUMsbUJBQW1CLEVBQUUsTUFBTTtDQUN0RSxZQUFZLElBQUksSUFBSSxDQUFDLE9BQU87Q0FDNUIsZ0JBQWdCLE9BQU87Q0FDdkIsWUFBWSxJQUFJLENBQUMsUUFBUSxDQUFDLG1CQUFtQixDQUFDLENBQUM7Q0FDL0MsU0FBUyxDQUFDLENBQUM7Q0FDWCxLQUFLO0NBQ0wsQ0FBQztDQUNELG9CQUFvQixHQUFHLFlBQVk7Ozs7Ozs7QUN0S25DLENBQ0EsTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7QUFDekI7QUFDNEI7Q0FDakUsTUFBTSxNQUFNLEdBQUcsSUFBSSxRQUFRLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0NBQ25ELE1BQU0sWUFBWSxTQUFTLHNCQUFzQixDQUFDLG9CQUFvQixDQUFDO0NBQ3ZFO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQSxJQUFJLFdBQVcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxjQUFjLEVBQUUsV0FBVyxFQUFFLG9CQUFvQixFQUFFLE9BQU8sRUFBRSxFQUFFO0NBQ3BGLFFBQVEsS0FBSyxFQUFFLENBQUM7Q0FDaEI7Q0FDQSxRQUFRLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO0NBQzdCLFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQztDQUN0QyxRQUFRLElBQUksQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDO0NBQ3RCLFFBQVEsSUFBSSxDQUFDLGVBQWUsR0FBRyxjQUFjLENBQUM7Q0FDOUMsUUFBUSxJQUFJLENBQUMsWUFBWSxHQUFHLFdBQVcsQ0FBQztDQUN4QyxRQUFRLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxvQkFBb0IsQ0FBQztDQUMxRCxRQUFRLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDO0NBQ2hDLFFBQVEsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7Q0FDbEMsS0FBSztDQUNMO0NBQ0E7Q0FDQTtDQUNBLElBQUksSUFBSSxFQUFFLEdBQUc7Q0FDYixRQUFRLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQztDQUN4QixLQUFLO0NBQ0w7Q0FDQTtDQUNBO0NBQ0EsSUFBSSxJQUFJLGNBQWMsR0FBRztDQUN6QixRQUFRLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQztDQUNwQyxLQUFLO0NBQ0w7Q0FDQTtDQUNBO0NBQ0EsSUFBSSxJQUFJLE1BQU0sR0FBRztDQUNqQixRQUFRLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztDQUM1QixLQUFLO0NBQ0w7Q0FDQTtDQUNBO0NBQ0EsSUFBSSxJQUFJLG9CQUFvQixHQUFHO0NBQy9CLFFBQVEsT0FBTyxJQUFJLENBQUMscUJBQXFCLENBQUM7Q0FDMUMsS0FBSztDQUNMO0NBQ0E7Q0FDQTtDQUNBLElBQUksSUFBSSxVQUFVLEdBQUc7Q0FDckIsUUFBUSxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDO0NBQzVDLEtBQUs7Q0FDTDtDQUNBO0NBQ0E7Q0FDQSxJQUFJLElBQUksS0FBSyxHQUFHO0NBQ2hCLFFBQVEsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQztDQUN2QyxLQUFLO0NBQ0w7Q0FDQTtDQUNBO0NBQ0EsSUFBSSxJQUFJLFFBQVEsR0FBRztDQUNuQixRQUFRLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUM7Q0FDMUMsS0FBSztDQUNMO0NBQ0E7Q0FDQTtDQUNBLElBQUksSUFBSSxVQUFVLEdBQUc7Q0FDckIsUUFBUSxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDO0NBQzVDLEtBQUs7Q0FDTDtDQUNBO0NBQ0E7Q0FDQSxJQUFJLElBQUksVUFBVSxDQUFDLFVBQVUsRUFBRTtDQUMvQixRQUFRLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztDQUNsRCxLQUFLO0NBQ0w7Q0FDQTtDQUNBO0NBQ0EsSUFBSSxJQUFJLE9BQU8sR0FBRztDQUNsQixRQUFRLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztDQUM3QixLQUFLO0NBQ0w7Q0FDQTtDQUNBO0NBQ0EsSUFBSSxJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUU7Q0FDekIsUUFBUSxNQUFNLElBQUksS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7Q0FDMUQsS0FBSztDQUNMO0NBQ0E7Q0FDQTtDQUNBLElBQUksS0FBSyxHQUFHO0NBQ1osUUFBUSxJQUFJLElBQUksQ0FBQyxPQUFPO0NBQ3hCLFlBQVksT0FBTztDQUNuQixRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7Q0FDaEMsUUFBUSxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztDQUM1QixRQUFRLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLENBQUM7Q0FDbEMsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0NBQzVCLEtBQUs7Q0FDTDtDQUNBO0NBQ0E7Q0FDQSxJQUFJLGVBQWUsR0FBRztDQUN0QixRQUFRLElBQUksSUFBSSxDQUFDLE9BQU87Q0FDeEIsWUFBWSxPQUFPO0NBQ25CLFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0NBQzFDLFFBQVEsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7Q0FDNUIsUUFBUSxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxDQUFDO0NBQ2xDLFFBQVEsSUFBSSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0NBQ3hDLEtBQUs7Q0FDTCxJQUFJLGtCQUFrQixHQUFHO0NBQ3pCLFFBQVEsSUFBSSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsTUFBTTtDQUN6RCxZQUFZLElBQUksSUFBSSxDQUFDLE9BQU87Q0FDNUIsZ0JBQWdCLE9BQU87Q0FDdkIsWUFBWSxNQUFNLENBQUMsS0FBSyxDQUFDLDBCQUEwQixDQUFDLENBQUM7Q0FDckQsWUFBWSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0NBQ2xDLFNBQVMsQ0FBQyxDQUFDO0NBQ1gsUUFBUSxJQUFJLENBQUMsWUFBWSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQUssS0FBSztDQUMvRCxZQUFZLElBQUksSUFBSSxDQUFDLE9BQU87Q0FDNUIsZ0JBQWdCLE9BQU87Q0FDdkIsWUFBWSxJQUFJLEVBQUUsS0FBSyxFQUFFLEdBQUcsS0FBSyxDQUFDO0NBQ2xDLFlBQVksSUFBSSxDQUFDLEtBQUs7Q0FDdEIsZ0JBQWdCLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0NBQy9ELFlBQVksSUFBSSxLQUFLLENBQUMsV0FBVyxLQUFLLGNBQWMsRUFBRTtDQUN0RCxnQkFBZ0IsTUFBTSxDQUFDLEtBQUssQ0FBQywrQ0FBK0MsRUFBRSxLQUFLLENBQUMsYUFBYSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztDQUNsSCxhQUFhO0NBQ2IsaUJBQWlCO0NBQ2pCLGdCQUFnQixNQUFNLENBQUMsS0FBSyxDQUFDLCtCQUErQixFQUFFLEtBQUssQ0FBQyxDQUFDO0NBQ3JFLGFBQWE7Q0FDYixZQUFZLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO0NBQzFDLFNBQVMsQ0FBQyxDQUFDO0NBQ1gsUUFBUSxJQUFJLENBQUMsWUFBWSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxNQUFNO0NBQzFELFlBQVksSUFBSSxJQUFJLENBQUMsT0FBTztDQUM1QixnQkFBZ0IsT0FBTztDQUN2QixZQUFZLE1BQU0sQ0FBQyxJQUFJLENBQUMsMkJBQTJCLENBQUMsQ0FBQztDQUNyRCxZQUFZLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO0NBQ2hDLFlBQVksSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztDQUNoQyxZQUFZLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7Q0FDbkMsU0FBUyxDQUFDLENBQUM7Q0FDWCxRQUFRLElBQUksQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBSyxLQUFLO0NBQ2pFLFlBQVksSUFBSSxJQUFJLENBQUMsT0FBTztDQUM1QixnQkFBZ0IsT0FBTztDQUN2QixZQUFZLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztDQUNqRCxTQUFTLENBQUMsQ0FBQztDQUNYLEtBQUs7Q0FDTCxDQUFDO0NBQ0Qsb0JBQW9CLEdBQUcsWUFBWTs7Ozs7OztBQ3RKbkMsQ0FDQSxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUNuQjtBQUNOO0FBQzRCO0FBQzVCO0FBQ0o7QUFDRjtBQUNVO0FBQ0E7QUFDUTtBQUNBO0NBQ2pELE1BQU0sTUFBTSxHQUFHLElBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztDQUNoRCxNQUFNLFNBQVMsU0FBUyxzQkFBc0IsQ0FBQyxvQkFBb0IsQ0FBQztDQUNwRTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQSxJQUFJLFdBQVcsQ0FBQyxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsYUFBYSxFQUFFLGFBQWEsRUFBRSxjQUFjLEVBQUUsY0FBYyxFQUFFLFVBQVUsRUFBRSxrQkFBa0IsRUFBRSxrQkFBa0IsRUFBRSxzQkFBc0IsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLHVCQUF1QixFQUFFLGdCQUFnQixFQUFFLEVBQUU7Q0FDalAsUUFBUSxLQUFLLEVBQUUsQ0FBQztDQUNoQjtDQUNBLFFBQVEsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7Q0FDN0I7Q0FDQSxRQUFRLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUM7Q0FDdEM7Q0FDQSxRQUFRLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQztDQUNwQztDQUNBLFFBQVEsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO0NBQ3BDO0NBQ0EsUUFBUSxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7Q0FDeEM7Q0FDQSxRQUFRLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQztDQUN4QztDQUNBLFFBQVEsSUFBSSxDQUFDLHdCQUF3QixHQUFHLEtBQUssQ0FBQztDQUM5QztDQUNBLFFBQVEsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJQyxHQUFZLENBQUMsVUFBVSxDQUFDLEVBQUUsZ0JBQWdCLEVBQUVELE1BQVEsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUM7Q0FDekcsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLHFDQUFxQyxFQUFFLEVBQUUsRUFBRSxTQUFTLENBQUMsQ0FBQztDQUMzRSxRQUFRLElBQUksQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDO0NBQ3RCLFFBQVEsSUFBSSxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUM7Q0FDcEMsUUFBUSxJQUFJLENBQUMsd0JBQXdCLEdBQUcsdUJBQXVCLENBQUM7Q0FDaEUsUUFBUSxJQUFJLENBQUMsaUJBQWlCLEdBQUcsZ0JBQWdCLENBQUM7Q0FDbEQsUUFBUSxJQUFJLENBQUMsbUJBQW1CO0NBQ2hDLFlBQVksY0FBYyxHQUFHLGNBQWMsQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDO0NBQ2xFO0NBQ0EsUUFBUSxrQkFBa0IsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLGtCQUFrQixDQUFDLENBQUM7Q0FDN0QsUUFBUSxPQUFPLGtCQUFrQixDQUFDLFVBQVUsQ0FBQztDQUM3QyxRQUFRLE9BQU8sa0JBQWtCLENBQUMsa0JBQWtCLENBQUM7Q0FDckQsUUFBUSxPQUFPLGtCQUFrQixDQUFDLFlBQVksQ0FBQztDQUMvQyxRQUFRLE9BQU8sa0JBQWtCLENBQUMsYUFBYSxDQUFDO0NBQ2hELFFBQVEsT0FBTyxrQkFBa0IsQ0FBQyxZQUFZLENBQUM7Q0FDL0MsUUFBUSxJQUFJLENBQUMsUUFBUSxHQUFHLGNBQWMsRUFBRSxDQUFDO0NBQ3pDLFFBQVEsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUM7Q0FDMUIsWUFBWSxTQUFTO0NBQ3JCLFlBQVksYUFBYTtDQUN6QixZQUFZLGFBQWE7Q0FDekIsWUFBWSxjQUFjO0NBQzFCLFlBQVksY0FBYztDQUMxQixZQUFZLFVBQVU7Q0FDdEIsWUFBWSxrQkFBa0I7Q0FDOUIsWUFBWSxrQkFBa0I7Q0FDOUIsWUFBWSxzQkFBc0I7Q0FDbEMsWUFBWSx1QkFBdUI7Q0FDbkMsU0FBUyxDQUFDLENBQUM7Q0FDWCxRQUFRLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDO0NBQ2hDLFFBQVEsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0NBQzlCLEtBQUs7Q0FDTDtDQUNBO0NBQ0E7Q0FDQSxJQUFJLElBQUksRUFBRSxHQUFHO0NBQ2IsUUFBUSxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUM7Q0FDeEIsS0FBSztDQUNMO0NBQ0E7Q0FDQTtDQUNBLElBQUksSUFBSSxNQUFNLEdBQUc7Q0FDakIsUUFBUSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7Q0FDNUIsS0FBSztDQUNMO0NBQ0E7Q0FDQTtDQUNBLElBQUksSUFBSSxTQUFTLEdBQUc7Q0FDcEIsUUFBUSxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7Q0FDL0IsS0FBSztDQUNMO0NBQ0E7Q0FDQTtDQUNBLElBQUksSUFBSSxPQUFPLEdBQUc7Q0FDbEIsUUFBUSxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7Q0FDN0IsS0FBSztDQUNMO0NBQ0E7Q0FDQTtDQUNBLElBQUksSUFBSSxlQUFlLEdBQUc7Q0FDMUIsUUFBUSxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztDQUNyQyxLQUFLO0NBQ0w7Q0FDQTtDQUNBO0NBQ0EsSUFBSSxJQUFJLE9BQU8sR0FBRztDQUNsQixRQUFRLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztDQUM3QixLQUFLO0NBQ0w7Q0FDQTtDQUNBO0NBQ0EsSUFBSSxJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUU7Q0FDekIsUUFBUSxNQUFNLElBQUksS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7Q0FDMUQsS0FBSztDQUNMO0NBQ0E7Q0FDQTtDQUNBLElBQUksS0FBSyxHQUFHO0NBQ1osUUFBUSxJQUFJLElBQUksQ0FBQyxPQUFPO0NBQ3hCLFlBQVksT0FBTztDQUNuQixRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7Q0FDaEMsUUFBUSxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztDQUM1QjtDQUNBLFFBQVEsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztDQUNqQztDQUNBLFFBQVEsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztDQUM5QjtDQUNBLFFBQVEsS0FBSyxNQUFNLFFBQVEsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxFQUFFO0NBQ3pELFlBQVksUUFBUSxDQUFDLGVBQWUsRUFBRSxDQUFDO0NBQ3ZDLFNBQVM7Q0FDVCxRQUFRLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLENBQUM7Q0FDaEM7Q0FDQSxRQUFRLEtBQUssTUFBTSxRQUFRLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsRUFBRTtDQUN6RCxZQUFZLFFBQVEsQ0FBQyxlQUFlLEVBQUUsQ0FBQztDQUN2QyxTQUFTO0NBQ1QsUUFBUSxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxDQUFDO0NBQ2hDO0NBQ0EsUUFBUSxLQUFLLE1BQU0sWUFBWSxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLEVBQUU7Q0FDakUsWUFBWSxZQUFZLENBQUMsZUFBZSxFQUFFLENBQUM7Q0FDM0MsU0FBUztDQUNULFFBQVEsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztDQUNwQztDQUNBLFFBQVEsS0FBSyxNQUFNLFlBQVksSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxFQUFFO0NBQ2pFLFlBQVksWUFBWSxDQUFDLGVBQWUsRUFBRSxDQUFDO0NBQzNDLFNBQVM7Q0FDVCxRQUFRLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLENBQUM7Q0FDcEMsS0FBSztDQUNMO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQSxJQUFJLE1BQU0sUUFBUSxHQUFHO0NBQ3JCLFFBQVEsSUFBSSxJQUFJLENBQUMsT0FBTztDQUN4QixZQUFZLE1BQU0sSUFBSUEsTUFBUSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0NBQzNELFFBQVEsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLGlCQUFpQixFQUFFLENBQUM7Q0FDakQsS0FBSztDQUNMO0NBQ0E7Q0FDQTtDQUNBLElBQUksTUFBTSxVQUFVLENBQUMsRUFBRSxhQUFhLEVBQUUsRUFBRTtDQUN4QyxRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUM7Q0FDckMsUUFBUSxJQUFJLElBQUksQ0FBQyxPQUFPO0NBQ3hCLFlBQVksTUFBTSxJQUFJQSxNQUFRLENBQUMsaUJBQWlCLENBQUMsUUFBUSxDQUFDLENBQUM7Q0FDM0QsYUFBYSxJQUFJLENBQUMsYUFBYTtDQUMvQixZQUFZLE1BQU0sSUFBSSxTQUFTLENBQUMsdUJBQXVCLENBQUMsQ0FBQztDQUN6RDtDQUNBLFFBQVEsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxZQUFZLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7Q0FDMUYsS0FBSztDQUNMO0NBQ0E7Q0FDQTtDQUNBLElBQUksTUFBTSxnQkFBZ0IsQ0FBQyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsRUFBRTtDQUNoRCxRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQztDQUMzQyxRQUFRLElBQUksSUFBSSxDQUFDLE9BQU87Q0FDeEIsWUFBWSxNQUFNLElBQUlBLE1BQVEsQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztDQUMzRCxhQUFhLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQztDQUMzQyxZQUFZLE1BQU0sSUFBSSxTQUFTLENBQUMsb0JBQW9CLENBQUMsQ0FBQztDQUN0RDtDQUNBLFFBQVEsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxZQUFZLElBQUksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztDQUM3RixLQUFLO0NBQ0w7Q0FDQTtDQUNBO0NBQ0EsSUFBSSxNQUFNLE9BQU8sQ0FBQyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxVQUFVLEdBQUcsSUFBSSxFQUFFLG1CQUFtQixHQUFHLElBQUksRUFBRSxjQUFjLEdBQUcsS0FBSyxFQUFFLE9BQU8sR0FBRyxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUU7Q0FDdkosUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLHNCQUFzQixFQUFFLEtBQUssQ0FBQyxDQUFDO0NBQ3BELFFBQVEsSUFBSSxDQUFDLEtBQUs7Q0FDbEIsWUFBWSxNQUFNLElBQUksU0FBUyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0NBQ2pELGFBQWEsSUFBSSxJQUFJLENBQUMsVUFBVSxLQUFLLE1BQU07Q0FDM0MsWUFBWSxNQUFNLElBQUlBLE1BQVEsQ0FBQyxnQkFBZ0IsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0NBQzNFLGFBQWEsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO0NBQ3BELFlBQVksTUFBTSxJQUFJQSxNQUFRLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxlQUFlLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUNoRixhQUFhLElBQUksS0FBSyxDQUFDLFVBQVUsS0FBSyxPQUFPO0NBQzdDLFlBQVksTUFBTSxJQUFJQSxNQUFRLENBQUMsaUJBQWlCLENBQUMsYUFBYSxDQUFDLENBQUM7Q0FDaEUsYUFBYSxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsS0FBSyxLQUFLO0NBQ3ZGLFlBQVksTUFBTSxJQUFJLFNBQVMsQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDO0NBQ2pGLGFBQWEsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUM7Q0FDcEQsWUFBWSxNQUFNLElBQUksU0FBUyxDQUFDLCtDQUErQyxDQUFDLENBQUM7Q0FDakYsYUFBYSxJQUFJLE9BQU8sSUFBSSxPQUFPLE9BQU8sS0FBSyxRQUFRO0NBQ3ZELFlBQVksTUFBTSxJQUFJLFNBQVMsQ0FBQyxxQ0FBcUMsQ0FBQyxDQUFDO0NBQ3ZFO0NBQ0EsUUFBUSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFlBQVk7Q0FDakQsWUFBWSxJQUFJLG1CQUFtQixDQUFDO0NBQ3BDLFlBQVksSUFBSSxTQUFTLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFO0NBQ3hELGdCQUFnQixNQUFNLFNBQVMsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO0NBQzlELGFBQWE7Q0FDYixpQkFBaUIsSUFBSSxTQUFTLElBQUksU0FBUyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7Q0FDMUQsZ0JBQWdCLG1CQUFtQixHQUFHLFNBQVMsQ0FBQztDQUNoRCxhQUFhO0NBQ2IsaUJBQWlCLElBQUksU0FBUyxFQUFFO0NBQ2hDLGdCQUFnQixtQkFBbUIsR0FBRyxTQUFTO0NBQy9DLHFCQUFxQixHQUFHLENBQUMsQ0FBQyxRQUFRLEtBQUs7Q0FDdkMsb0JBQW9CLE1BQU0sa0JBQWtCLEdBQUcsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUM7Q0FDaEUsb0JBQW9CLElBQUksUUFBUSxDQUFDLE1BQU0sS0FBSyxLQUFLO0NBQ2pELHdCQUF3QixrQkFBa0IsQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO0NBQzFELG9CQUFvQixJQUFJLE9BQU8sUUFBUSxDQUFDLEdBQUcsS0FBSyxTQUFTO0NBQ3pELHdCQUF3QixrQkFBa0IsQ0FBQyxHQUFHLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQztDQUM5RCxvQkFBb0IsSUFBSSxPQUFPLFFBQVEsQ0FBQyxlQUFlLEtBQUssUUFBUTtDQUNwRSx3QkFBd0Isa0JBQWtCLENBQUMsZUFBZSxHQUFHLFFBQVEsQ0FBQyxlQUFlLENBQUM7Q0FDdEYsb0JBQW9CLElBQUksT0FBTyxRQUFRLENBQUMscUJBQXFCLEtBQUssUUFBUTtDQUMxRSx3QkFBd0Isa0JBQWtCLENBQUMscUJBQXFCLEdBQUcsUUFBUSxDQUFDLHFCQUFxQixDQUFDO0NBQ2xHLG9CQUFvQixJQUFJLE9BQU8sUUFBUSxDQUFDLFVBQVUsS0FBSyxRQUFRO0NBQy9ELHdCQUF3QixrQkFBa0IsQ0FBQyxVQUFVLEdBQUcsUUFBUSxDQUFDLFVBQVUsQ0FBQztDQUM1RSxvQkFBb0IsSUFBSSxPQUFPLFFBQVEsQ0FBQyxZQUFZLEtBQUssUUFBUTtDQUNqRSx3QkFBd0Isa0JBQWtCLENBQUMsWUFBWSxHQUFHLFFBQVEsQ0FBQyxZQUFZLENBQUM7Q0FDaEYsb0JBQW9CLElBQUksT0FBTyxRQUFRLENBQUMsYUFBYSxLQUFLLFNBQVM7Q0FDbkUsd0JBQXdCLGtCQUFrQixDQUFDLGFBQWEsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDO0NBQ2xGLG9CQUFvQixJQUFJLE9BQU8sUUFBUSxDQUFDLFFBQVEsS0FBSyxRQUFRO0NBQzdELHdCQUF3QixrQkFBa0IsQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQztDQUN4RSxvQkFBb0IsSUFBSSxPQUFPLFFBQVEsQ0FBQyxlQUFlLEtBQUssUUFBUTtDQUNwRSx3QkFBd0Isa0JBQWtCLENBQUMsZUFBZSxHQUFHLFFBQVEsQ0FBQyxlQUFlLENBQUM7Q0FDdEYsb0JBQW9CLE9BQU8sa0JBQWtCLENBQUM7Q0FDOUMsaUJBQWlCLENBQUMsQ0FBQztDQUNuQixhQUFhO0NBQ2IsWUFBWSxNQUFNLEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxTQUFTLEVBQUUsR0FBRyxNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDO0NBQ25GLGdCQUFnQixLQUFLO0NBQ3JCLGdCQUFnQixTQUFTLEVBQUUsbUJBQW1CO0NBQzlDLGdCQUFnQixZQUFZO0NBQzVCLGdCQUFnQixLQUFLO0NBQ3JCLGFBQWEsQ0FBQyxDQUFDO0NBQ2YsWUFBWSxJQUFJO0NBQ2hCO0NBQ0EsZ0JBQWdCLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxhQUFhLENBQUMsQ0FBQztDQUMxRCxnQkFBZ0IsTUFBTSxFQUFFLEVBQUUsRUFBRSxHQUFHLE1BQU0sSUFBSSxDQUFDLGlCQUFpQixDQUFDLFNBQVMsRUFBRTtDQUN2RSxvQkFBb0IsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJO0NBQ3BDLG9CQUFvQixhQUFhO0NBQ2pDLG9CQUFvQixPQUFPO0NBQzNCLGlCQUFpQixDQUFDLENBQUM7Q0FDbkIsZ0JBQWdCLE1BQU0sUUFBUSxHQUFHLElBQUksVUFBVSxDQUFDLFFBQVEsQ0FBQztDQUN6RCxvQkFBb0IsRUFBRTtDQUN0QixvQkFBb0IsT0FBTztDQUMzQixvQkFBb0IsU0FBUztDQUM3QixvQkFBb0IsS0FBSztDQUN6QixvQkFBb0IsYUFBYTtDQUNqQyxvQkFBb0IsVUFBVTtDQUM5QixvQkFBb0IsbUJBQW1CO0NBQ3ZDLG9CQUFvQixjQUFjO0NBQ2xDLG9CQUFvQixPQUFPO0NBQzNCLGlCQUFpQixDQUFDLENBQUM7Q0FDbkIsZ0JBQWdCLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUM7Q0FDM0QsZ0JBQWdCLElBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLENBQUM7Q0FDL0MsZ0JBQWdCLE9BQU8sUUFBUSxDQUFDO0NBQ2hDLGFBQWE7Q0FDYixZQUFZLE9BQU8sS0FBSyxFQUFFO0NBQzFCLGdCQUFnQixJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUM7Q0FDbEQscUJBQXFCLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0NBQ3RDLGdCQUFnQixNQUFNLEtBQUssQ0FBQztDQUM1QixhQUFhO0NBQ2IsU0FBUyxDQUFDO0NBQ1Y7Q0FDQTtDQUNBLGFBQWEsS0FBSyxDQUFDLENBQUMsS0FBSyxLQUFLO0NBQzlCLFlBQVksSUFBSSxVQUFVLEVBQUU7Q0FDNUIsZ0JBQWdCLElBQUk7Q0FDcEIsb0JBQW9CLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztDQUNqQyxpQkFBaUI7Q0FDakIsZ0JBQWdCLE9BQU8sTUFBTSxFQUFFLEdBQUc7Q0FDbEMsYUFBYTtDQUNiLFlBQVksTUFBTSxLQUFLLENBQUM7Q0FDeEIsU0FBUyxDQUFDLENBQUM7Q0FDWCxLQUFLO0NBQ0w7Q0FDQTtDQUNBO0NBQ0EsSUFBSSxNQUFNLE9BQU8sQ0FBQyxFQUFFLEVBQUUsRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLGFBQWEsRUFBRSxPQUFPLEdBQUcsRUFBRSxFQUFFLEVBQUU7Q0FDekUsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0NBQ2xDLFFBQVEsSUFBSSxJQUFJLENBQUMsT0FBTztDQUN4QixZQUFZLE1BQU0sSUFBSUEsTUFBUSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0NBQzNELGFBQWEsSUFBSSxJQUFJLENBQUMsVUFBVSxLQUFLLE1BQU07Q0FDM0MsWUFBWSxNQUFNLElBQUlBLE1BQVEsQ0FBQyxnQkFBZ0IsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0NBQzdFLGFBQWEsSUFBSSxPQUFPLEVBQUUsS0FBSyxRQUFRO0NBQ3ZDLFlBQVksTUFBTSxJQUFJLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQztDQUM5QyxhQUFhLElBQUksT0FBTyxVQUFVLEtBQUssUUFBUTtDQUMvQyxZQUFZLE1BQU0sSUFBSSxTQUFTLENBQUMsb0JBQW9CLENBQUMsQ0FBQztDQUN0RCxhQUFhLElBQUksSUFBSSxLQUFLLE9BQU8sSUFBSSxJQUFJLEtBQUssT0FBTztDQUNyRCxZQUFZLE1BQU0sSUFBSSxTQUFTLENBQUMsQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDMUQsYUFBYSxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsS0FBSyxLQUFLO0NBQ3ZGLFlBQVksTUFBTSxJQUFJLFNBQVMsQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDO0NBQ2pGLGFBQWEsSUFBSSxPQUFPLElBQUksT0FBTyxPQUFPLEtBQUssUUFBUTtDQUN2RCxZQUFZLE1BQU0sSUFBSSxTQUFTLENBQUMscUNBQXFDLENBQUMsQ0FBQztDQUN2RTtDQUNBLFFBQVEsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxZQUFZO0NBQ2pEO0NBQ0EsWUFBWSxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsd0JBQXdCLENBQUMsQ0FBQztDQUM3RixZQUFZLElBQUksQ0FBQyxVQUFVO0NBQzNCLGdCQUFnQixNQUFNLElBQUlBLE1BQVEsQ0FBQyxnQkFBZ0IsQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO0NBQ3BGLFlBQVksTUFBTSxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLEdBQUcsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLGFBQWEsRUFBRSxDQUFDLENBQUM7Q0FDdEgsWUFBWSxNQUFNLFFBQVEsR0FBRyxJQUFJLFVBQVUsQ0FBQyxRQUFRLENBQUM7Q0FDckQsZ0JBQWdCLEVBQUU7Q0FDbEIsZ0JBQWdCLE9BQU87Q0FDdkIsZ0JBQWdCLFVBQVU7Q0FDMUIsZ0JBQWdCLFdBQVc7Q0FDM0IsZ0JBQWdCLEtBQUs7Q0FDckIsZ0JBQWdCLGFBQWE7Q0FDN0IsZ0JBQWdCLE9BQU87Q0FDdkIsYUFBYSxDQUFDLENBQUM7Q0FDZixZQUFZLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUM7Q0FDdkQsWUFBWSxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0NBQzNDO0NBQ0E7Q0FDQSxZQUFZLElBQUksQ0FBQyxJQUFJLENBQUMsd0JBQXdCLElBQUksSUFBSSxLQUFLLE9BQU8sRUFBRTtDQUNwRSxnQkFBZ0IsSUFBSTtDQUNwQixvQkFBb0IsTUFBTSxxQkFBcUIsR0FBRyxJQUFJLENBQUMsNkJBQTZCLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0NBQzdHLG9CQUFvQixNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDO0NBQ2hELHdCQUF3QixPQUFPLEVBQUUsVUFBVTtDQUMzQyx3QkFBd0IsSUFBSSxFQUFFLE9BQU87Q0FDckMsd0JBQXdCLGFBQWEsRUFBRSxxQkFBcUI7Q0FDNUQscUJBQXFCLENBQUMsQ0FBQztDQUN2QixvQkFBb0IsTUFBTSxDQUFDLEtBQUssQ0FBQyxnREFBZ0QsQ0FBQyxDQUFDO0NBQ25GLG9CQUFvQixJQUFJLENBQUMsd0JBQXdCLEdBQUcsSUFBSSxDQUFDO0NBQ3pELGlCQUFpQjtDQUNqQixnQkFBZ0IsT0FBTyxLQUFLLEVBQUU7Q0FDOUIsb0JBQW9CLE1BQU0sQ0FBQyxLQUFLLENBQUMsNERBQTRELEVBQUUsS0FBSyxDQUFDLENBQUM7Q0FDdEcsaUJBQWlCO0NBQ2pCLGFBQWE7Q0FDYixZQUFZLE9BQU8sUUFBUSxDQUFDO0NBQzVCLFNBQVMsQ0FBQyxDQUFDO0NBQ1gsS0FBSztDQUNMO0NBQ0E7Q0FDQTtDQUNBLElBQUksTUFBTSxXQUFXLENBQUMsRUFBRSxPQUFPLEdBQUcsSUFBSSxFQUFFLGlCQUFpQixFQUFFLGNBQWMsRUFBRSxRQUFRLEdBQUcsS0FBSyxFQUFFLEtBQUssR0FBRyxFQUFFLEVBQUUsUUFBUSxHQUFHLEVBQUUsRUFBRSxPQUFPLEdBQUcsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFO0NBQzdJLFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQztDQUN0QyxRQUFRLElBQUksSUFBSSxDQUFDLFVBQVUsS0FBSyxNQUFNO0NBQ3RDLFlBQVksTUFBTSxJQUFJQSxNQUFRLENBQUMsZ0JBQWdCLENBQUMseUJBQXlCLENBQUMsQ0FBQztDQUMzRSxhQUFhLElBQUksQ0FBQyxJQUFJLENBQUMsbUJBQW1CO0NBQzFDLFlBQVksTUFBTSxJQUFJQSxNQUFRLENBQUMsZ0JBQWdCLENBQUMsc0NBQXNDLENBQUMsQ0FBQztDQUN4RixhQUFhLElBQUksQ0FBQyxDQUFDLFVBQVUsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUM7Q0FDMUUsWUFBWSxNQUFNLElBQUksU0FBUyxDQUFDLGdCQUFnQixDQUFDLENBQUM7Q0FDbEQsYUFBYSxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsS0FBSyxLQUFLO0NBQ3ZGLFlBQVksTUFBTSxJQUFJLFNBQVMsQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDO0NBQ2pGLGFBQWEsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUM7Q0FDeEQsWUFBWSxNQUFNLElBQUksU0FBUyxDQUFDLG1EQUFtRCxDQUFDLENBQUM7Q0FDckYsYUFBYSxJQUFJLE9BQU8sSUFBSSxPQUFPLE9BQU8sS0FBSyxRQUFRO0NBQ3ZELFlBQVksTUFBTSxJQUFJLFNBQVMsQ0FBQyxxQ0FBcUMsQ0FBQyxDQUFDO0NBQ3ZFLFFBQVEsSUFBSSxpQkFBaUIsSUFBSSxjQUFjO0NBQy9DLFlBQVksT0FBTyxHQUFHLEtBQUssQ0FBQztDQUM1QjtDQUNBLFFBQVEsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxZQUFZO0NBQ2pELFlBQVksTUFBTSxFQUFFLFdBQVcsRUFBRSxvQkFBb0IsRUFBRSxHQUFHLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUM7Q0FDOUYsZ0JBQWdCLE9BQU87Q0FDdkIsZ0JBQWdCLGlCQUFpQjtDQUNqQyxnQkFBZ0IsY0FBYztDQUM5QixnQkFBZ0IsUUFBUTtDQUN4QixnQkFBZ0IsS0FBSztDQUNyQixnQkFBZ0IsUUFBUTtDQUN4QixhQUFhLENBQUMsQ0FBQztDQUNmO0NBQ0EsWUFBWSxJQUFJLENBQUMsNEJBQTRCLENBQUMsb0JBQW9CLENBQUMsQ0FBQztDQUNwRSxZQUFZLE1BQU0sRUFBRSxFQUFFLEVBQUUsR0FBRyxNQUFNLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLEVBQUU7Q0FDdkUsZ0JBQWdCLG9CQUFvQjtDQUNwQyxnQkFBZ0IsS0FBSztDQUNyQixnQkFBZ0IsUUFBUTtDQUN4QixnQkFBZ0IsT0FBTztDQUN2QixhQUFhLENBQUMsQ0FBQztDQUNmLFlBQVksTUFBTSxZQUFZLEdBQUcsSUFBSSxjQUFjLENBQUMsWUFBWSxDQUFDLEVBQUUsRUFBRSxFQUFFLFdBQVcsRUFBRSxvQkFBb0IsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO0NBQ3JILFlBQVksSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLEVBQUUsRUFBRSxZQUFZLENBQUMsQ0FBQztDQUNuRSxZQUFZLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxZQUFZLENBQUMsQ0FBQztDQUNuRCxZQUFZLE9BQU8sWUFBWSxDQUFDO0NBQ2hDLFNBQVMsQ0FBQyxDQUFDO0NBQ1gsS0FBSztDQUNMO0NBQ0E7Q0FDQTtDQUNBLElBQUksTUFBTSxXQUFXLENBQUMsRUFBRSxFQUFFLEVBQUUsY0FBYyxFQUFFLG9CQUFvQixFQUFFLEtBQUssR0FBRyxFQUFFLEVBQUUsUUFBUSxHQUFHLEVBQUUsRUFBRSxPQUFPLEdBQUcsRUFBRSxFQUFFLEVBQUU7Q0FDN0csUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0NBQ3RDLFFBQVEsSUFBSSxJQUFJLENBQUMsT0FBTztDQUN4QixZQUFZLE1BQU0sSUFBSUEsTUFBUSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0NBQzNELGFBQWEsSUFBSSxJQUFJLENBQUMsVUFBVSxLQUFLLE1BQU07Q0FDM0MsWUFBWSxNQUFNLElBQUlBLE1BQVEsQ0FBQyxnQkFBZ0IsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0NBQzdFLGFBQWEsSUFBSSxDQUFDLElBQUksQ0FBQyxtQkFBbUI7Q0FDMUMsWUFBWSxNQUFNLElBQUlBLE1BQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDO0NBQ3hGLGFBQWEsSUFBSSxPQUFPLEVBQUUsS0FBSyxRQUFRO0NBQ3ZDLFlBQVksTUFBTSxJQUFJLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQztDQUM5QyxhQUFhLElBQUksT0FBTyxjQUFjLEtBQUssUUFBUTtDQUNuRCxZQUFZLE1BQU0sSUFBSSxTQUFTLENBQUMsd0JBQXdCLENBQUMsQ0FBQztDQUMxRCxhQUFhLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLGdCQUFnQixLQUFLLEtBQUs7Q0FDdkYsWUFBWSxNQUFNLElBQUksU0FBUyxDQUFDLCtDQUErQyxDQUFDLENBQUM7Q0FDakYsYUFBYSxJQUFJLE9BQU8sSUFBSSxPQUFPLE9BQU8sS0FBSyxRQUFRO0NBQ3ZELFlBQVksTUFBTSxJQUFJLFNBQVMsQ0FBQyxxQ0FBcUMsQ0FBQyxDQUFDO0NBQ3ZFO0NBQ0EsUUFBUSxJQUFJLENBQUMsNEJBQTRCLENBQUMsb0JBQW9CLENBQUMsQ0FBQztDQUNoRTtDQUNBLFFBQVEsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxZQUFZO0NBQ2pELFlBQVksTUFBTSxFQUFFLFdBQVcsRUFBRSxHQUFHLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQztDQUMzRSxnQkFBZ0Isb0JBQW9CO0NBQ3BDLGdCQUFnQixLQUFLO0NBQ3JCLGdCQUFnQixRQUFRO0NBQ3hCLGFBQWEsQ0FBQyxDQUFDO0NBQ2YsWUFBWSxNQUFNLFlBQVksR0FBRyxJQUFJLGNBQWMsQ0FBQyxZQUFZLENBQUM7Q0FDakUsZ0JBQWdCLEVBQUU7Q0FDbEIsZ0JBQWdCLGNBQWM7Q0FDOUIsZ0JBQWdCLFdBQVc7Q0FDM0IsZ0JBQWdCLG9CQUFvQjtDQUNwQyxnQkFBZ0IsT0FBTztDQUN2QixhQUFhLENBQUMsQ0FBQztDQUNmLFlBQVksSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLEVBQUUsRUFBRSxZQUFZLENBQUMsQ0FBQztDQUNuRSxZQUFZLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxZQUFZLENBQUMsQ0FBQztDQUNuRCxZQUFZLE9BQU8sWUFBWSxDQUFDO0NBQ2hDLFNBQVMsQ0FBQyxDQUFDO0NBQ1gsS0FBSztDQUNMLElBQUksY0FBYyxHQUFHO0NBQ3JCLFFBQVEsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztDQUN0QyxRQUFRLE9BQU8sQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUMsRUFBRSxjQUFjLEVBQUUsRUFBRSxRQUFRLEVBQUUsT0FBTyxLQUFLO0NBQzFFLFlBQVksSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO0NBQzlCLGdCQUFnQixPQUFPLENBQUMsSUFBSUEsTUFBUSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7Q0FDbEUsZ0JBQWdCLE9BQU87Q0FDdkIsYUFBYTtDQUNiLFlBQVksSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7Q0FDNUUsU0FBUyxDQUFDLENBQUM7Q0FDWCxRQUFRLE9BQU8sQ0FBQyxFQUFFLENBQUMsd0JBQXdCLEVBQUUsQ0FBQyxlQUFlLEtBQUs7Q0FDbEUsWUFBWSxJQUFJLGVBQWUsS0FBSyxJQUFJLENBQUMsZ0JBQWdCO0NBQ3pELGdCQUFnQixPQUFPO0NBQ3ZCLFlBQVksTUFBTSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsRUFBRSxlQUFlLENBQUMsQ0FBQztDQUM1RSxZQUFZLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxlQUFlLENBQUM7Q0FDcEQsWUFBWSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU87Q0FDN0IsZ0JBQWdCLElBQUksQ0FBQyxRQUFRLENBQUMsdUJBQXVCLEVBQUUsZUFBZSxDQUFDLENBQUM7Q0FDeEUsU0FBUyxDQUFDLENBQUM7Q0FDWCxLQUFLO0NBQ0wsSUFBSSxlQUFlLENBQUMsUUFBUSxFQUFFO0NBQzlCLFFBQVEsUUFBUSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsTUFBTTtDQUNwQyxZQUFZLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztDQUNoRCxZQUFZLElBQUksSUFBSSxDQUFDLE9BQU87Q0FDNUIsZ0JBQWdCLE9BQU87Q0FDdkIsWUFBWSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxZQUFZLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztDQUMxRixpQkFBaUIsS0FBSyxDQUFDLENBQUMsS0FBSyxLQUFLLE1BQU0sQ0FBQyxJQUFJLENBQUMsNEJBQTRCLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztDQUNwRixTQUFTLENBQUMsQ0FBQztDQUNYLFFBQVEsUUFBUSxDQUFDLEVBQUUsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxLQUFLLEVBQUUsUUFBUSxFQUFFLE9BQU8sS0FBSztDQUNuRSxZQUFZLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFlBQVksSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztDQUNsRyxpQkFBaUIsSUFBSSxDQUFDLFFBQVEsQ0FBQztDQUMvQixpQkFBaUIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0NBQ2hDLFNBQVMsQ0FBQyxDQUFDO0NBQ1gsUUFBUSxRQUFRLENBQUMsRUFBRSxDQUFDLHFCQUFxQixFQUFFLENBQUMsWUFBWSxFQUFFLFFBQVEsRUFBRSxPQUFPLEtBQUs7Q0FDaEYsWUFBWSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxhQUFhLElBQUksQ0FBQyxRQUFRLENBQUMsa0JBQWtCLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDO0NBQ2pILGlCQUFpQixJQUFJLENBQUMsUUFBUSxDQUFDO0NBQy9CLGlCQUFpQixLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7Q0FDaEMsU0FBUyxDQUFDLENBQUM7Q0FDWCxRQUFRLFFBQVEsQ0FBQyxFQUFFLENBQUMsMkJBQTJCLEVBQUUsQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLE9BQU8sS0FBSztDQUNoRixZQUFZLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGFBQWEsSUFBSSxDQUFDLFFBQVEsQ0FBQyx3QkFBd0IsQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7Q0FDakgsaUJBQWlCLElBQUksQ0FBQyxRQUFRLENBQUM7Q0FDL0IsaUJBQWlCLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztDQUNoQyxTQUFTLENBQUMsQ0FBQztDQUNYLFFBQVEsUUFBUSxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxRQUFRLEVBQUUsT0FBTyxLQUFLO0NBQ3hELFlBQVksSUFBSSxJQUFJLENBQUMsT0FBTztDQUM1QixnQkFBZ0IsT0FBTyxPQUFPLENBQUMsSUFBSUEsTUFBUSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7Q0FDekUsWUFBWSxJQUFJLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDO0NBQzFELGlCQUFpQixJQUFJLENBQUMsUUFBUSxDQUFDO0NBQy9CLGlCQUFpQixLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7Q0FDaEMsU0FBUyxDQUFDLENBQUM7Q0FDWCxLQUFLO0NBQ0wsSUFBSSxlQUFlLENBQUMsUUFBUSxFQUFFO0NBQzlCLFFBQVEsUUFBUSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsTUFBTTtDQUNwQyxZQUFZLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztDQUNoRCxZQUFZLElBQUksSUFBSSxDQUFDLE9BQU87Q0FDNUIsZ0JBQWdCLE9BQU87Q0FDdkIsWUFBWSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxZQUFZLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztDQUM1RixpQkFBaUIsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7Q0FDbEMsU0FBUyxDQUFDLENBQUM7Q0FDWCxRQUFRLFFBQVEsQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsUUFBUSxFQUFFLE9BQU8sS0FBSztDQUN4RCxZQUFZLElBQUksSUFBSSxDQUFDLE9BQU87Q0FDNUIsZ0JBQWdCLE9BQU8sT0FBTyxDQUFDLElBQUlBLE1BQVEsQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0NBQ3pFLFlBQVksSUFBSSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDO0NBQzVELGlCQUFpQixJQUFJLENBQUMsUUFBUSxDQUFDO0NBQy9CLGlCQUFpQixLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7Q0FDaEMsU0FBUyxDQUFDLENBQUM7Q0FDWCxLQUFLO0NBQ0wsSUFBSSxtQkFBbUIsQ0FBQyxZQUFZLEVBQUU7Q0FDdEMsUUFBUSxZQUFZLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxNQUFNO0NBQ3hDLFlBQVksSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0NBQ3hELFNBQVMsQ0FBQyxDQUFDO0NBQ1gsS0FBSztDQUNMLElBQUksbUJBQW1CLENBQUMsWUFBWSxFQUFFO0NBQ3RDLFFBQVEsWUFBWSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsTUFBTTtDQUN4QyxZQUFZLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQztDQUN4RCxTQUFTLENBQUMsQ0FBQztDQUNYLEtBQUs7Q0FDTCxDQUFDO0NBQ0QsaUJBQWlCLEdBQUcsU0FBUzs7Ozs7OztDQzdlN0IsSUFBSSxPQUFPLEdBQUcsY0FBYyxHQUFHO0NBQy9CLEVBQUUsQ0FBQyxFQUFFLENBQUM7Q0FDTixJQUFJLElBQUksRUFBRSxTQUFTO0NBQ25CLElBQUksR0FBRyxFQUFFLFNBQVM7Q0FDbEIsR0FBRyxDQUFDO0NBQ0osRUFBRSxDQUFDLEVBQUUsQ0FBQztDQUNOO0NBQ0E7Q0FDQSxJQUFJLElBQUksRUFBRSxRQUFRO0NBQ2xCLElBQUksR0FBRyxFQUFFLHVDQUF1QztDQUNoRCxJQUFJLEtBQUssRUFBRSxDQUFDLFVBQVUsRUFBRSxXQUFXLEVBQUUsZ0JBQWdCLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxTQUFTLENBQUM7Q0FDckYsSUFBSSxNQUFNLEVBQUUscUJBQXFCO0NBQ2pDLEdBQUcsQ0FBQztDQUNKO0NBQ0EsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQztDQUN2QixFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLGFBQWEsRUFBRSxDQUFDO0NBQzlCLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUM7Q0FDdEIsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsQ0FBQztDQUN4QixFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxDQUFDO0NBQ3hCLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFLENBQUM7Q0FDNUIsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsQ0FBQztDQUMxQjtDQUNBLEVBQUUsQ0FBQyxFQUFFLENBQUM7Q0FDTjtDQUNBLElBQUksSUFBSSxFQUFFLFFBQVE7Q0FDbEIsSUFBSSxHQUFHLEVBQUUsY0FBYztDQUN2QixJQUFJLEtBQUssRUFBRSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUM7Q0FDNUIsSUFBSSxNQUFNLEVBQUUsT0FBTztDQUNuQixHQUFHLENBQUM7Q0FDSixFQUFFLENBQUMsRUFBRSxDQUFDO0NBQ047Q0FDQSxJQUFJLElBQUksRUFBRSxZQUFZO0NBQ3RCLElBQUksR0FBRyxFQUFFLGtCQUFrQjtDQUMzQixJQUFJLEtBQUssRUFBRSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUM7Q0FDNUIsSUFBSSxNQUFNLEVBQUUsWUFBWTtDQUN4QixHQUFHLENBQUM7Q0FDSixFQUFFLENBQUMsRUFBRSxDQUFDO0NBQ047Q0FDQSxJQUFJLElBQUksRUFBRSxXQUFXO0NBQ3JCLElBQUksR0FBRyxFQUFFLDJCQUEyQjtDQUNwQyxJQUFJLEtBQUssRUFBRSxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUM7Q0FDNUIsSUFBSSxNQUFNLEVBQUUsT0FBTztDQUNuQixHQUFHLENBQUM7Q0FDSixFQUFFLENBQUMsRUFBRSxDQUFDO0NBQ047Q0FDQTtDQUNBO0NBQ0EsSUFBSSxHQUFHLEVBQUUsaUNBQWlDO0NBQzFDLElBQUksS0FBSyxFQUFFLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsVUFBVSxDQUFDO0NBQ25ELElBQUksTUFBTSxFQUFFLGFBQWE7Q0FDekIsR0FBRyxDQUFDO0NBQ0osRUFBRSxDQUFDLEVBQUU7Q0FDTCxJQUFJO0NBQ0o7Q0FDQSxNQUFNLElBQUksRUFBRSxLQUFLO0NBQ2pCLE1BQU0sR0FBRyxFQUFFLHdEQUF3RDtDQUNuRSxNQUFNLEtBQUssRUFBRSxDQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsQ0FBQztDQUNyRCxNQUFNLE1BQU0sRUFBRSxVQUFVLENBQUMsRUFBRTtDQUMzQixRQUFRLE9BQU8sQ0FBQyxDQUFDLENBQUMsUUFBUTtDQUMxQixZQUFZLG9CQUFvQjtDQUNoQyxZQUFZLENBQUMsQ0FBQyxJQUFJO0NBQ2xCLGNBQWMsaUJBQWlCO0NBQy9CLGNBQWMsY0FBYyxDQUFDO0NBQzdCLE9BQU87Q0FDUCxLQUFLO0NBQ0wsSUFBSTtDQUNKO0NBQ0E7Q0FDQSxNQUFNLElBQUksRUFBRSxNQUFNO0NBQ2xCLE1BQU0sR0FBRyxFQUFFLHVCQUF1QjtDQUNsQyxNQUFNLEtBQUssRUFBRSxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUM7Q0FDbEMsTUFBTSxNQUFNLEVBQUUsWUFBWTtDQUMxQixLQUFLO0NBQ0wsSUFBSTtDQUNKO0NBQ0EsTUFBTSxJQUFJLEVBQUUsU0FBUztDQUNyQixNQUFNLEdBQUcsRUFBRSxlQUFlO0NBQzFCLE1BQU0sTUFBTSxFQUFFLFlBQVk7Q0FDMUIsS0FBSztDQUNMLElBQUk7Q0FDSjtDQUNBLE1BQU0sSUFBSSxFQUFFLE1BQU07Q0FDbEIsTUFBTSxHQUFHLEVBQUUscUNBQXFDO0NBQ2hELE1BQU0sS0FBSyxFQUFFLENBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsU0FBUyxDQUFDO0NBQ3BELE1BQU0sTUFBTSxFQUFFLFVBQVUsQ0FBQyxFQUFFO0NBQzNCLFFBQVEsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLElBQUksSUFBSTtDQUNqQyxZQUFZLG9CQUFvQjtDQUNoQyxZQUFZLFNBQVMsQ0FBQztDQUN0QixPQUFPO0NBQ1AsS0FBSztDQUNMLElBQUk7Q0FDSjtDQUNBLE1BQU0sSUFBSSxFQUFFLGNBQWM7Q0FDMUIsTUFBTSxHQUFHLEVBQUUsaUNBQWlDO0NBQzVDLE1BQU0sS0FBSyxFQUFFLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQztDQUNqQyxNQUFNLE1BQU0sRUFBRSx1QkFBdUI7Q0FDckMsS0FBSztDQUNMLElBQUk7Q0FDSjtDQUNBLE1BQU0sSUFBSSxFQUFFLFFBQVE7Q0FDcEIsTUFBTSxHQUFHLEVBQUUsNENBQTRDO0NBQ3ZELE1BQU0sS0FBSyxFQUFFLENBQUMsU0FBUyxFQUFFLE1BQU0sRUFBRSxTQUFTLENBQUM7Q0FDM0MsTUFBTSxNQUFNLEVBQUUsVUFBVSxDQUFDLEVBQUU7Q0FDM0IsUUFBUSxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sSUFBSSxJQUFJO0NBQ2pDLFlBQVksa0JBQWtCO0NBQzlCLFlBQVksZUFBZSxDQUFDO0NBQzVCLE9BQU87Q0FDUCxLQUFLO0NBQ0wsSUFBSTtDQUNKO0NBQ0E7Q0FDQTtDQUNBLE1BQU0sSUFBSSxFQUFFLEtBQUs7Q0FDakIsTUFBTSxHQUFHLEVBQUUsc0ZBQXNGO0NBQ2pHLE1BQU0sS0FBSyxFQUFFLENBQUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxhQUFhLEVBQUUsS0FBSyxFQUFFLFFBQVEsQ0FBQztDQUNuRSxNQUFNLE1BQU0sRUFBRSxVQUFVLENBQUMsRUFBRTtDQUMzQixRQUFRO0NBQ1IsVUFBVSxXQUFXO0NBQ3JCLFdBQVcsQ0FBQyxDQUFDLFNBQVMsR0FBRyxLQUFLLEdBQUcsSUFBSSxDQUFDO0NBQ3RDLFdBQVcsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUM7Q0FDM0MsVUFBVSxLQUFLO0NBQ2YsV0FBVyxDQUFDLENBQUMsTUFBTSxHQUFHLEtBQUssR0FBRyxFQUFFLENBQUM7Q0FDakMsVUFBVTtDQUNWLE9BQU87Q0FDUCxLQUFLO0NBQ0wsSUFBSTtDQUNKO0NBQ0EsTUFBTSxJQUFJLEVBQUUsa0JBQWtCO0NBQzlCLE1BQU0sR0FBRyxFQUFFLHVCQUF1QjtDQUNsQyxLQUFLO0NBQ0wsSUFBSTtDQUNKO0NBQ0EsTUFBTSxJQUFJLEVBQUUsUUFBUTtDQUNwQixNQUFNLEdBQUcsRUFBRSx5Q0FBeUM7Q0FDcEQsTUFBTSxLQUFLLEVBQUUsQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxlQUFlLENBQUM7Q0FDdkQsTUFBTSxNQUFNLEVBQUUsVUFBVSxDQUFDLEVBQUU7Q0FDM0IsUUFBUSxPQUFPLENBQUMsQ0FBQyxDQUFDLGFBQWEsSUFBSSxJQUFJO0NBQ3ZDLFlBQVksb0JBQW9CO0NBQ2hDLFlBQVksaUJBQWlCLENBQUM7Q0FDOUIsT0FBTztDQUNQLEtBQUs7Q0FDTCxJQUFJO0NBQ0o7Q0FDQSxNQUFNLElBQUksRUFBRSxPQUFPO0NBQ25CLE1BQU0sR0FBRyxFQUFFLGNBQWM7Q0FDekIsTUFBTSxNQUFNLEVBQUUsVUFBVTtDQUN4QixLQUFLO0NBQ0wsSUFBSTtDQUNKO0NBQ0EsTUFBTSxJQUFJLEVBQUUsZ0JBQWdCO0NBQzVCLE1BQU0sR0FBRyxFQUFFLDRCQUE0QjtDQUN2QyxNQUFNLE1BQU0sRUFBRSxlQUFlO0NBQzdCLEtBQUs7Q0FDTCxJQUFJO0NBQ0o7Q0FDQSxNQUFNLElBQUksRUFBRSxLQUFLO0NBQ2pCLE1BQU0sR0FBRyxFQUFFLGVBQWU7Q0FDMUIsTUFBTSxNQUFNLEVBQUUsUUFBUTtDQUN0QixLQUFLO0NBQ0wsSUFBSTtDQUNKO0NBQ0EsTUFBTSxJQUFJLEVBQUUsTUFBTTtDQUNsQixNQUFNLEdBQUcsRUFBRSxZQUFZO0NBQ3ZCLE1BQU0sTUFBTSxFQUFFLFNBQVM7Q0FDdkIsS0FBSztDQUNMLElBQUk7Q0FDSjtDQUNBLE1BQU0sSUFBSSxFQUFFLE9BQU87Q0FDbkIsTUFBTSxHQUFHLEVBQUUsd0JBQXdCO0NBQ25DLE1BQU0sTUFBTSxFQUFFLFVBQVU7Q0FDeEIsS0FBSztDQUNMLElBQUk7Q0FDSjtDQUNBLE1BQU0sSUFBSSxFQUFFLFVBQVU7Q0FDdEIsTUFBTSxHQUFHLEVBQUUsMkJBQTJCO0NBQ3RDLE1BQU0sTUFBTSxFQUFFLGFBQWE7Q0FDM0IsS0FBSztDQUNMLElBQUk7Q0FDSjtDQUNBLE1BQU0sSUFBSSxFQUFFLFdBQVc7Q0FDdkIsTUFBTSxHQUFHLEVBQUUsd0NBQXdDO0NBQ25ELEtBQUs7Q0FDTCxJQUFJO0NBQ0o7Q0FDQSxNQUFNLElBQUksRUFBRSxTQUFTO0NBQ3JCLE1BQU0sR0FBRyxFQUFFLGFBQWE7Q0FDeEIsS0FBSztDQUNMLElBQUk7Q0FDSjtDQUNBLE1BQU0sSUFBSSxFQUFFLFVBQVU7Q0FDdEIsTUFBTSxHQUFHLEVBQUUsa0JBQWtCO0NBQzdCLE1BQU0sTUFBTSxFQUFFLGNBQWM7Q0FDNUIsS0FBSztDQUNMLElBQUk7Q0FDSjtDQUNBLE1BQU0sSUFBSSxFQUFFLFFBQVE7Q0FDcEIsTUFBTSxHQUFHLEVBQUUsZ0JBQWdCO0NBQzNCLE1BQU0sTUFBTSxFQUFFLFlBQVk7Q0FDMUIsS0FBSztDQUNMLElBQUk7Q0FDSjtDQUNBLE1BQU0sSUFBSSxFQUFFLGFBQWE7Q0FDekIsTUFBTSxHQUFHLEVBQUUsMEJBQTBCO0NBQ3JDLE1BQU0sS0FBSyxFQUFFLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQztDQUM3QixNQUFNLE1BQU0sRUFBRSxtQkFBbUI7Q0FDakMsS0FBSztDQUNMLElBQUk7Q0FDSjtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0EsTUFBTSxJQUFJLENBQUMsWUFBWTtDQUN2QixNQUFNLEdBQUcsRUFBRSw4S0FBOEs7Q0FDekwsTUFBTSxLQUFLLEVBQUUsQ0FBQyxZQUFZLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSxjQUFjLENBQUM7Q0FDaEssTUFBTSxNQUFNLEVBQUUsVUFBVSxDQUFDLEVBQUU7Q0FDM0IsUUFBUSxJQUFJLEdBQUcsR0FBRyxvQ0FBb0MsQ0FBQztBQUN2RDtDQUNBLFFBQVEsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxJQUFJLElBQUksb0JBQW9CLEdBQUcsTUFBTSxDQUFDO0FBQ2pFO0NBQ0E7Q0FDQSxRQUFRLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLElBQUksSUFBSSxJQUFJLGFBQWEsR0FBRyxJQUFJLENBQUM7QUFDMUQ7Q0FDQSxRQUFRLElBQUksQ0FBQyxDQUFDLFVBQVUsSUFBSSxJQUFJLEVBQUU7Q0FDbEMsVUFBVSxHQUFHLElBQUksZ0JBQWdCLENBQUM7Q0FDbEMsU0FBUztBQUNUO0NBQ0EsUUFBUSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLElBQUksSUFBSSxJQUFJLGdCQUFnQixHQUFHLElBQUksQ0FBQztDQUNuRSxRQUFRLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsSUFBSSxJQUFJLElBQUksa0JBQWtCLEdBQUcsSUFBSSxDQUFDO0NBQ3ZFLFFBQVEsT0FBTyxHQUFHLENBQUM7Q0FDbkIsT0FBTztDQUNQLEtBQUs7Q0FDTCxJQUFJO0NBQ0o7Q0FDQSxNQUFNLElBQUksRUFBRSxpQkFBaUI7Q0FDN0IsTUFBTSxHQUFHLEVBQUUsc0JBQXNCO0NBQ2pDLEtBQUs7Q0FDTCxJQUFJO0NBQ0o7Q0FDQSxNQUFNLElBQUksRUFBRSxrQkFBa0I7Q0FDOUIsTUFBTSxHQUFHLEVBQUUseUJBQXlCO0NBQ3BDLE1BQU0sTUFBTSxFQUFFLHNCQUFzQjtDQUNwQyxLQUFLO0NBQ0wsSUFBSTtDQUNKO0NBQ0EsTUFBTSxJQUFJLEVBQUUsWUFBWTtDQUN4QixNQUFNLEdBQUcsRUFBRSxvQkFBb0I7Q0FDL0IsTUFBTSxNQUFNLEVBQUUsZ0JBQWdCO0NBQzlCLEtBQUs7Q0FDTCxJQUFJO0NBQ0o7Q0FDQSxNQUFNLElBQUksRUFBRSxPQUFPO0NBQ25CLE1BQU0sR0FBRyxFQUFFLGlDQUFpQztDQUM1QyxNQUFNLEtBQUssRUFBRSxDQUFDLElBQUksRUFBRSxXQUFXLEVBQUUsT0FBTyxDQUFDO0NBQ3pDLE1BQU0sTUFBTSxFQUFFLFVBQVUsQ0FBQyxFQUFFO0NBQzNCLFFBQVEsSUFBSSxHQUFHLEdBQUcsU0FBUyxDQUFDO0NBQzVCLFFBQVEsSUFBSSxDQUFDLENBQUMsU0FBUyxJQUFJLElBQUksRUFBRTtDQUNqQyxVQUFVLEdBQUcsSUFBSSxLQUFLLENBQUM7Q0FDdkIsVUFBVSxJQUFJLENBQUMsQ0FBQyxLQUFLLElBQUksSUFBSSxFQUFFO0NBQy9CLFlBQVksR0FBRyxJQUFJLEtBQUssQ0FBQztDQUN6QixXQUFXO0NBQ1gsU0FBUztDQUNULFFBQVEsT0FBTyxHQUFHLENBQUM7Q0FDbkIsT0FBTztDQUNQLEtBQUs7Q0FDTCxJQUFJO0NBQ0o7Q0FDQTtDQUNBLE1BQU0sSUFBSSxFQUFFLFlBQVk7Q0FDeEI7Q0FDQSxNQUFNLEdBQUcsRUFBRSxrRUFBa0U7Q0FDN0UsTUFBTSxLQUFLLEVBQUUsQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDO0NBQ25DLE1BQU0sTUFBTSxFQUFFLGtCQUFrQjtDQUNoQyxLQUFLO0NBQ0wsSUFBSTtDQUNKO0NBQ0EsTUFBTSxJQUFJLEVBQUUsY0FBYztDQUMxQixNQUFNLEdBQUcsRUFBRSwrQkFBK0I7Q0FDMUMsTUFBTSxLQUFLLEVBQUUsQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDO0NBQ2xDLE1BQU0sTUFBTSxFQUFFLHNCQUFzQjtDQUNwQyxLQUFLO0NBQ0wsSUFBSTtDQUNKO0NBQ0EsTUFBTSxJQUFJLEVBQUUsUUFBUTtDQUNwQixNQUFNLEdBQUcsRUFBRSxtQkFBbUI7Q0FDOUIsTUFBTSxLQUFLLEVBQUUsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDO0NBQzdCLE1BQU0sTUFBTSxFQUFFLGFBQWE7Q0FDM0IsS0FBSztDQUNMLElBQUk7Q0FDSjtDQUNBLE1BQU0sSUFBSSxFQUFFLFNBQVM7Q0FDckIsTUFBTSxHQUFHLEVBQUUsYUFBYTtDQUN4QixLQUFLO0NBQ0wsSUFBSTtDQUNKO0NBQ0EsTUFBTSxJQUFJLEVBQUUsV0FBVztDQUN2QixNQUFNLEdBQUcsRUFBRSxlQUFlO0NBQzFCLEtBQUs7Q0FDTCxJQUFJO0NBQ0o7Q0FDQSxNQUFNLElBQUksRUFBRSxTQUFTO0NBQ3JCLE1BQU0sR0FBRyxFQUFFLHFDQUFxQztDQUNoRCxNQUFNLEtBQUssRUFBRSxDQUFDLGVBQWUsRUFBRSxLQUFLLEVBQUUsZ0JBQWdCLENBQUM7Q0FDdkQsTUFBTSxNQUFNLEVBQUUsVUFBVSxDQUFDLEVBQUU7Q0FDM0IsUUFBUSxPQUFPLENBQUMsQ0FBQyxDQUFDLGNBQWMsSUFBSSxJQUFJO0NBQ3hDLFlBQVksa0JBQWtCO0NBQzlCLFlBQVksZUFBZSxDQUFDO0NBQzVCLE9BQU87Q0FDUCxLQUFLO0NBQ0wsSUFBSTtDQUNKO0NBQ0EsTUFBTSxJQUFJLEVBQUUsYUFBYTtDQUN6QixNQUFNLEdBQUcsRUFBRSx5QkFBeUI7Q0FDcEMsTUFBTSxNQUFNLEVBQUUsa0JBQWtCO0NBQ2hDLEtBQUs7Q0FDTCxJQUFJO0NBQ0o7Q0FDQSxNQUFNLElBQUksRUFBRSxNQUFNO0NBQ2xCLE1BQU0sR0FBRyxFQUFFLHFDQUFxQztDQUNoRCxNQUFNLEtBQUssRUFBRSxDQUFDLElBQUksRUFBRSxXQUFXLEVBQUUsUUFBUSxDQUFDO0NBQzFDLE1BQU0sTUFBTSxFQUFFLFVBQVUsQ0FBQyxFQUFFO0NBQzNCLFFBQVEsT0FBTyxDQUFDLENBQUMsQ0FBQyxNQUFNLElBQUksY0FBYyxHQUFHLFdBQVcsQ0FBQztDQUN6RCxPQUFPO0NBQ1AsS0FBSztDQUNMLElBQUk7Q0FDSjtDQUNBO0NBQ0E7Q0FDQSxNQUFNLElBQUksRUFBRSxZQUFZO0NBQ3hCLE1BQU0sR0FBRyxFQUFFLElBQUksTUFBTTtDQUNyQjtDQUNBLFFBQVEsdUJBQXVCO0NBQy9CO0NBQ0EsUUFBUSx1RUFBdUU7Q0FDL0U7Q0FDQSxRQUFRLDRFQUE0RTtDQUNwRixPQUFPO0NBQ1AsTUFBTSxLQUFLLEVBQUUsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsUUFBUSxDQUFDO0NBQ3ZELE1BQU0sTUFBTSxFQUFFLFVBQVUsQ0FBQyxFQUFFO0NBQzNCLFFBQVEsT0FBTyxvQkFBb0IsSUFBSSxDQUFDLENBQUMsSUFBSSxHQUFHLFFBQVEsR0FBRyxFQUFFLENBQUMsQ0FBQztDQUMvRCxPQUFPO0NBQ1AsS0FBSztDQUNMLElBQUk7Q0FDSjtDQUNBO0NBQ0EsTUFBTSxJQUFJLEVBQUUsV0FBVztDQUN2QixNQUFNLEdBQUcsRUFBRSxJQUFJLE1BQU07Q0FDckI7Q0FDQSxRQUFRLGFBQWE7Q0FDckI7Q0FDQSxRQUFRLG1DQUFtQztDQUMzQztDQUNBLFFBQVEsNENBQTRDO0NBQ3BEO0NBQ0EsUUFBUSxHQUFHO0NBQ1gsT0FBTztDQUNQLE1BQU0sS0FBSyxFQUFFLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDO0NBQy9DLE1BQU0sTUFBTSxFQUFFLFVBQVUsQ0FBQyxFQUFFO0NBQzNCLFFBQVEsT0FBTyxpQkFBaUIsSUFBSSxDQUFDLENBQUMsSUFBSSxHQUFHLFFBQVEsR0FBRyxFQUFFLENBQUMsQ0FBQztDQUM1RCxPQUFPO0NBQ1AsS0FBSztDQUNMLElBQUk7Q0FDSjtDQUNBO0NBQ0E7Q0FDQTtDQUNBLE1BQU0sSUFBSSxFQUFFLGNBQWM7Q0FDMUIsTUFBTSxHQUFHLEVBQUUsaUNBQWlDO0NBQzVDLE1BQU0sS0FBSyxFQUFFLENBQUMsT0FBTyxDQUFDO0NBQ3RCLE1BQU0sTUFBTSxFQUFFLGVBQWU7Q0FDN0IsS0FBSztDQUNMLElBQUk7Q0FDSjtDQUNBO0NBQ0EsTUFBTSxJQUFJLEVBQUUsV0FBVztDQUN2QixNQUFNLEdBQUcsRUFBRSw2QkFBNkI7Q0FDeEMsTUFBTSxNQUFNLEVBQUUsY0FBYztDQUM1QixLQUFLO0NBQ0wsSUFBSTtDQUNKO0NBQ0E7Q0FDQSxNQUFNLElBQUksRUFBRSxjQUFjO0NBQzFCLE1BQU0sR0FBRyxFQUFFLDREQUE0RDtDQUN2RSxNQUFNLEtBQUssRUFBRSxDQUFDLFlBQVksRUFBRSxTQUFTLEVBQUUsY0FBYyxFQUFFLGFBQWEsRUFBRSxTQUFTLENBQUM7Q0FDaEYsTUFBTSxNQUFNLEVBQUUsK0JBQStCO0NBQzdDLEtBQUs7Q0FDTCxJQUFJO0NBQ0o7Q0FDQSxNQUFNLElBQUksRUFBRSxZQUFZO0NBQ3hCLE1BQU0sR0FBRyxFQUFFLGdCQUFnQjtDQUMzQixLQUFLO0NBQ0wsSUFBSTtDQUNKO0NBQ0EsTUFBTSxJQUFJLEVBQUUsT0FBTztDQUNuQixNQUFNLEdBQUcsRUFBRSxhQUFhO0NBQ3hCLE1BQU0sTUFBTSxFQUFFLFVBQVU7Q0FDeEIsS0FBSztDQUNMLElBQUk7Q0FDSjtDQUNBO0NBQ0EsTUFBTSxJQUFJLEVBQUUsVUFBVTtDQUN0QixNQUFNLEdBQUcsRUFBRSxtQkFBbUI7Q0FDOUIsTUFBTSxNQUFNLEVBQUUsY0FBYztDQUM1QixLQUFLO0NBQ0wsSUFBSTtDQUNKO0NBQ0E7Q0FDQSxNQUFNLElBQUksRUFBRSxnQkFBZ0I7Q0FDNUIsTUFBTSxHQUFHLEVBQUUsMEJBQTBCO0NBQ3JDLE1BQU0sTUFBTSxFQUFFLHFCQUFxQjtDQUNuQyxLQUFLO0NBQ0wsSUFBSTtDQUNKO0NBQ0E7Q0FDQSxNQUFNLElBQUksQ0FBQyxhQUFhO0NBQ3hCLE1BQU0sR0FBRyxFQUFFLGlDQUFpQztDQUM1QyxNQUFNLEtBQUssRUFBRSxDQUFDLFFBQVEsRUFBRSxXQUFXLENBQUM7Q0FDcEMsTUFBTSxNQUFNLEVBQUUsVUFBVSxDQUFDLEVBQUU7Q0FDM0IsUUFBUSxPQUFPLGNBQWMsSUFBSSxDQUFDLENBQUMsU0FBUyxJQUFJLElBQUksR0FBRyxLQUFLLEdBQUcsRUFBRSxDQUFDLENBQUM7Q0FDbkUsT0FBTztDQUNQLEtBQUs7Q0FDTCxJQUFJO0NBQ0o7Q0FDQTtDQUNBLE1BQU0sSUFBSSxDQUFDLFVBQVU7Q0FDckIsTUFBTSxHQUFHLEVBQUUsdUVBQXVFO0NBQ2xGLE1BQU0sS0FBSyxFQUFFLENBQUMsSUFBSSxFQUFFLGdCQUFnQixFQUFFLGlCQUFpQixFQUFFLGVBQWUsRUFBRSxpQkFBaUIsQ0FBQztDQUM1RixNQUFNLE1BQU0sRUFBRSxVQUFVLENBQUMsRUFBRTtDQUMzQixRQUFRLElBQUksR0FBRyxHQUFHLFdBQVcsQ0FBQztDQUM5QixRQUFRLEdBQUcsS0FBSyxDQUFDLENBQUMsRUFBRSxJQUFJLElBQUksR0FBRyxVQUFVLEdBQUcsTUFBTSxDQUFDLENBQUM7Q0FDcEQsUUFBUSxHQUFHLEtBQUssQ0FBQyxDQUFDLGVBQWUsSUFBSSxJQUFJLEdBQUcsS0FBSyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0NBQ3hELFFBQVEsR0FBRyxLQUFLLENBQUMsQ0FBQyxhQUFhLElBQUksSUFBSSxHQUFHLFVBQVUsR0FBRyxFQUFFLENBQUMsQ0FBQztDQUMzRCxRQUFRLEdBQUcsS0FBSyxDQUFDLENBQUMsZUFBZSxJQUFJLElBQUksR0FBRyxLQUFLLEdBQUcsRUFBRSxDQUFDLENBQUM7Q0FDeEQsUUFBUSxPQUFPLEdBQUcsQ0FBQztDQUNuQixPQUFPO0NBQ1AsS0FBSztDQUNMLElBQUk7Q0FDSjtDQUNBLE1BQU0sSUFBSSxFQUFFLFVBQVU7Q0FDdEIsTUFBTSxHQUFHLEVBQUUsZUFBZTtDQUMxQixNQUFNLE1BQU0sRUFBRSxXQUFXO0NBQ3pCLEtBQUs7Q0FDTCxJQUFJO0NBQ0o7Q0FDQSxNQUFNLElBQUksRUFBRSxTQUFTO0NBQ3JCLE1BQU0sR0FBRyxFQUFFLGVBQWU7Q0FDMUIsTUFBTSxNQUFNLEVBQUUsWUFBWTtDQUMxQixLQUFLO0NBQ0w7Q0FDQSxJQUFJO0NBQ0o7Q0FDQSxNQUFNLElBQUksRUFBRSxlQUFlO0NBQzNCLE1BQU0sR0FBRyxFQUFFLGdDQUFnQztDQUMzQyxNQUFNLE1BQU0sRUFBRSxjQUFjO0NBQzVCLEtBQUs7Q0FDTCxJQUFJO0NBQ0o7Q0FDQSxNQUFNLElBQUksRUFBRSxZQUFZO0NBQ3hCLE1BQU0sR0FBRyxFQUFFLGVBQWU7Q0FDMUIsTUFBTSxNQUFNLEVBQUUsV0FBVztDQUN6QixLQUFLO0NBQ0wsSUFBSTtDQUNKO0NBQ0EsTUFBTSxJQUFJLEVBQUUsWUFBWTtDQUN4QixNQUFNLEdBQUcsRUFBRSxlQUFlO0NBQzFCLE1BQU0sTUFBTSxFQUFFLFdBQVc7Q0FDekIsS0FBSztDQUNMLElBQUk7Q0FDSjtDQUNBLE1BQU0sSUFBSSxFQUFFLGFBQWE7Q0FDekIsTUFBTSxHQUFHLEVBQUUsdUNBQXVDO0NBQ2xELE1BQU0sS0FBSyxFQUFFLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQztDQUM5QixNQUFNLE1BQU0sRUFBRSxxQkFBcUI7Q0FDbkMsS0FBSztDQUNMLElBQUk7Q0FDSjtDQUNBLE1BQU0sSUFBSSxFQUFFLFNBQVM7Q0FDckIsTUFBTSxLQUFLLEVBQUUsQ0FBQyxPQUFPLENBQUM7Q0FDdEIsS0FBSztDQUNMLEdBQUc7Q0FDSCxDQUFDLENBQUM7QUFDRjtDQUNBO0NBQ0EsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxHQUFHLEVBQUU7Q0FDNUMsRUFBRSxJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDMUIsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsR0FBRyxFQUFFO0NBQzlCLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUU7Q0FDbEIsTUFBTSxHQUFHLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQztDQUN2QixLQUFLO0NBQ0wsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRTtDQUNyQixNQUFNLEdBQUcsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO0NBQ3hCLEtBQUs7Q0FDTCxHQUFHLENBQUMsQ0FBQztDQUNMLENBQUMsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NDN2VGLElBQUksVUFBVSxHQUFHLFVBQVUsQ0FBQyxFQUFFO0NBQzlCLEVBQUUsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDakQsQ0FBQyxDQUFDO0FBQ0Y7Q0FDQSxJQUFJLGdCQUFnQixHQUFHLFVBQVUsS0FBSyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFO0NBQ2xFLEVBQUUsSUFBSSxPQUFPLElBQUksQ0FBQyxLQUFLLEVBQUU7Q0FDekIsSUFBSSxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQzdDLEdBQUc7Q0FDSCxPQUFPO0NBQ1AsSUFBSSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFO0NBQzlDLE1BQU0sSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksRUFBRTtDQUM5QixRQUFRLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ3BELE9BQU87Q0FDUCxLQUFLO0NBQ0wsR0FBRztDQUNILENBQUMsQ0FBQztBQUNGO0NBQ0EsSUFBSSxRQUFRLEdBQUcsVUFBVSxHQUFHLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRTtDQUNqRCxFQUFFLElBQUksVUFBVSxHQUFHLEdBQUcsQ0FBQyxJQUFJLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQztDQUN6QyxFQUFFLElBQUksR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUU7Q0FDdkMsSUFBSSxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztDQUM1QixHQUFHO0NBQ0gsT0FBTyxJQUFJLFVBQVUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUU7Q0FDOUMsSUFBSSxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztDQUM1QixHQUFHO0NBQ0gsRUFBRSxJQUFJLFdBQVcsR0FBRyxHQUFHLENBQUMsSUFBSTtDQUM1QixJQUFJLEVBQUU7Q0FDTixJQUFJLFVBQVUsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLFFBQVEsQ0FBQztBQUMvQztDQUNBLEVBQUUsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsV0FBVyxFQUFFLEdBQUcsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzdFO0NBQ0EsRUFBRSxJQUFJLEdBQUcsQ0FBQyxJQUFJLEVBQUU7Q0FDaEIsSUFBSSxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztDQUN6QyxHQUFHO0NBQ0gsQ0FBQyxDQUFDO0FBQ0Y7QUFDbUM7Q0FDbkMsSUFBSSxTQUFTLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQzVEO0NBQ0EsYUFBYSxHQUFHLFVBQVUsR0FBRyxFQUFFO0NBQy9CLEVBQUUsSUFBSSxPQUFPLEdBQUcsRUFBRTtDQUNsQixNQUFNLEtBQUssR0FBRyxFQUFFO0NBQ2hCLE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQztBQUN6QjtDQUNBO0NBQ0EsRUFBRSxHQUFHLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEVBQUU7Q0FDbkUsSUFBSSxJQUFJLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDcEIsSUFBSSxJQUFJLE9BQU8sR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQzdCLElBQUksSUFBSSxJQUFJLEtBQUssR0FBRyxFQUFFO0NBQ3RCLE1BQU0sS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7Q0FDdEMsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDdkMsS0FBSztBQUNMO0NBQ0EsSUFBSSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQ0UsU0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtDQUM5RCxNQUFNLElBQUksR0FBRyxHQUFHQSxTQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDakMsTUFBTSxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFO0NBQ2pDLFFBQVEsT0FBTyxRQUFRLENBQUMsR0FBRyxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQztDQUNoRCxPQUFPO0NBQ1AsS0FBSztDQUNMLEdBQUcsQ0FBQyxDQUFDO0FBQ0w7Q0FDQSxFQUFFLE9BQU8sQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0NBQ3hCLEVBQUUsT0FBTyxPQUFPLENBQUM7Q0FDakIsQ0FBQyxDQUFDO0FBQ0Y7Q0FDQSxJQUFJLFlBQVksR0FBRyxVQUFVLEdBQUcsRUFBRSxJQUFJLEVBQUU7Q0FDeEMsRUFBRSxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQztDQUNqQyxFQUFFLElBQUksQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7Q0FDdEIsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ2pDLEdBQUcsTUFBTSxJQUFJLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0NBQ2hELElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLFNBQVMsQ0FBQztDQUMxQixHQUFHO0NBQ0gsRUFBRSxPQUFPLEdBQUcsQ0FBQztDQUNiLENBQUMsQ0FBQztBQUNGO0NBQ0EsbUJBQW1CLEdBQUcsVUFBVSxHQUFHLEVBQUU7Q0FDckMsRUFBRSxPQUFPLEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUMsQ0FBQztDQUNwRCxDQUFDLENBQUM7QUFDRjtDQUNBO0NBQ0EsdUJBQXVCLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQztBQUM5QztDQUNBLHFCQUFxQixHQUFHLFVBQVUsR0FBRyxFQUFFO0NBQ3ZDLEVBQUUsT0FBTyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztDQUMvQyxDQUFDLENBQUM7QUFDRjtDQUNBLDZCQUE2QixHQUFHLFVBQVUsR0FBRyxFQUFFO0NBQy9DLEVBQUUsSUFBSSxVQUFVLEdBQUcsRUFBRSxDQUFDO0NBQ3RCLEVBQUUsSUFBSSxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7Q0FDN0MsRUFBRSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFO0NBQzVDLElBQUksVUFBVSxDQUFDLElBQUksQ0FBQztDQUNwQixNQUFNLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO0NBQ3pCLE1BQU0sRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQ3RCLE1BQU0sSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQ3hCLEtBQUssQ0FBQyxDQUFDO0NBQ1AsR0FBRztDQUNILEVBQUUsT0FBTyxVQUFVLENBQUM7Q0FDcEIsQ0FBQyxDQUFDO0FBQ0Y7Q0FDQSw0QkFBNEIsR0FBRyxVQUFVLEdBQUcsRUFBRTtDQUM5QyxFQUFFLE9BQU8sR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxJQUFJLEVBQUU7Q0FDNUMsSUFBSSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLENBQUM7Q0FDaEYsR0FBRyxDQUFDLENBQUM7Q0FDTCxDQUFDLENBQUM7QUFDRjtDQUNBLGdDQUFnQyxHQUFHLFVBQVUsR0FBRyxFQUFFO0NBQ2xELEVBQUUsT0FBTyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLE1BQU0sRUFBRTtDQUM5QyxJQUFJLE9BQU8sTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxNQUFNLEVBQUU7Q0FDbkQsTUFBTSxJQUFJLElBQUksRUFBRSxNQUFNLEdBQUcsS0FBSyxDQUFDO0FBQy9CO0NBQ0EsTUFBTSxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLEVBQUU7Q0FDN0IsUUFBUSxJQUFJLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0NBQ2xDLE9BQU8sTUFBTTtDQUNiLFFBQVEsSUFBSSxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztDQUM5RCxRQUFRLE1BQU0sR0FBRyxJQUFJLENBQUM7Q0FDdEIsT0FBTztBQUNQO0NBQ0EsTUFBTSxPQUFPO0NBQ2IsUUFBUSxJQUFJLEVBQUUsSUFBSTtDQUNsQixRQUFRLE1BQU0sRUFBRSxNQUFNO0NBQ3RCLE9BQU8sQ0FBQztDQUNSLEtBQUssQ0FBQyxDQUFDO0NBQ1AsR0FBRyxDQUFDLENBQUM7Q0FDTCxDQUFDOzs7Ozs7Ozs7O0NDekhEO0NBQ0EsSUFBSSxZQUFZLEdBQUcsVUFBVSxDQUFDO0NBQzlCLElBQUksTUFBTSxHQUFHLFVBQVUsU0FBUyxFQUFFO0NBQ2xDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQ1osRUFBRSxJQUFJLElBQUksR0FBRyxTQUFTLENBQUM7Q0FDdkIsRUFBRSxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0NBQ3hCLEVBQUUsT0FBTyxTQUFTLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxVQUFVLENBQUMsRUFBRTtDQUN0RCxJQUFJLElBQUksQ0FBQyxJQUFJLEdBQUcsRUFBRTtDQUNsQixNQUFNLE9BQU8sQ0FBQyxDQUFDO0NBQ2YsS0FBSztDQUNMLElBQUksSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ3RCLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztDQUNYLElBQUksUUFBUSxDQUFDO0NBQ2IsSUFBSSxLQUFLLElBQUk7Q0FDYixNQUFNLE9BQU8sR0FBRyxDQUFDO0NBQ2pCLElBQUksS0FBSyxJQUFJO0NBQ2IsTUFBTSxPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUN6QixJQUFJLEtBQUssSUFBSTtDQUNiLE1BQU0sT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDekIsSUFBSSxLQUFLLElBQUk7Q0FDYixNQUFNLE9BQU8sRUFBRSxDQUFDO0NBQ2hCLEtBQUs7Q0FDTCxHQUFHLENBQUMsQ0FBQztDQUNMO0NBQ0EsQ0FBQyxDQUFDO0FBQ0Y7Q0FDQSxJQUFJLFFBQVEsR0FBRyxVQUFVLElBQUksRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFO0NBQzlDLEVBQUUsSUFBSSxHQUFHLEdBQUcsR0FBRyxDQUFDLE1BQU0sWUFBWSxRQUFRO0NBQzFDLEtBQUssR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLFFBQVEsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0NBQ3pELElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQztBQUNmO0NBQ0EsRUFBRSxJQUFJLElBQUksR0FBRyxDQUFDLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUM7Q0FDaEMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxLQUFLLEVBQUU7Q0FDakIsSUFBSSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtDQUNsRCxNQUFNLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDM0IsTUFBTSxJQUFJLEdBQUcsQ0FBQyxJQUFJLEVBQUU7Q0FDcEIsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUN6QyxPQUFPO0NBQ1AsV0FBVztDQUNYLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDMUMsT0FBTztDQUNQLEtBQUs7Q0FDTCxHQUFHO0NBQ0gsT0FBTztDQUNQLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7Q0FDbEMsR0FBRztDQUNILEVBQUUsT0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztDQUNsQyxDQUFDLENBQUM7QUFDRjtDQUNBO0NBQ0E7Q0FDQSxJQUFJLGlCQUFpQixHQUFHO0NBQ3hCLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRztDQUNwQixFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUc7Q0FDcEIsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRztDQUN6QixDQUFDLENBQUM7Q0FDRixJQUFJLGlCQUFpQixHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDN0M7QUFDQTtDQUNBLFVBQWMsR0FBRyxVQUFVLE9BQU8sRUFBRSxJQUFJLEVBQUU7Q0FDMUMsRUFBRSxJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztDQUNwQjtDQUNBLEVBQUUsSUFBSSxPQUFPLENBQUMsT0FBTyxJQUFJLElBQUksRUFBRTtDQUMvQixJQUFJLE9BQU8sQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDO0NBQ3hCLEdBQUc7Q0FDSCxFQUFFLElBQUksT0FBTyxDQUFDLElBQUksSUFBSSxJQUFJLEVBQUU7Q0FDNUIsSUFBSSxPQUFPLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQztDQUN2QixHQUFHO0NBQ0gsRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFVLEtBQUssRUFBRTtDQUN6QyxJQUFJLElBQUksS0FBSyxDQUFDLFFBQVEsSUFBSSxJQUFJLEVBQUU7Q0FDaEMsTUFBTSxLQUFLLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztDQUMxQixLQUFLO0NBQ0wsR0FBRyxDQUFDLENBQUM7QUFDTDtDQUNBLEVBQUUsSUFBSSxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsSUFBSSxpQkFBaUIsQ0FBQztDQUN4RCxFQUFFLElBQUksVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLElBQUksaUJBQWlCLENBQUM7Q0FDeEQsRUFBRSxJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUM7QUFDZjtDQUNBO0NBQ0EsRUFBRSxVQUFVLENBQUMsT0FBTyxDQUFDLFVBQVUsSUFBSSxFQUFFO0NBQ3JDLElBQUlBLFNBQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxHQUFHLEVBQUU7Q0FDekMsTUFBTSxJQUFJLEdBQUcsQ0FBQyxJQUFJLElBQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxFQUFFO0NBQzVELFFBQVEsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0NBQy9DLE9BQU87Q0FDUCxXQUFXLElBQUksR0FBRyxDQUFDLElBQUksSUFBSSxPQUFPLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLEVBQUU7Q0FDakUsUUFBUSxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsRUFBRTtDQUNoRCxVQUFVLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztDQUM1QyxTQUFTLENBQUMsQ0FBQztDQUNYLE9BQU87Q0FDUCxLQUFLLENBQUMsQ0FBQztDQUNQLEdBQUcsQ0FBQyxDQUFDO0FBQ0w7Q0FDQTtDQUNBLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBVSxLQUFLLEVBQUU7Q0FDekMsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUVBLFNBQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUNqRDtDQUNBLElBQUksVUFBVSxDQUFDLE9BQU8sQ0FBQyxVQUFVLElBQUksRUFBRTtDQUN2QyxNQUFNQSxTQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsR0FBRyxFQUFFO0NBQzNDLFFBQVEsSUFBSSxHQUFHLENBQUMsSUFBSSxJQUFJLEtBQUssSUFBSSxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksRUFBRTtDQUMxRCxVQUFVLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztDQUMvQyxTQUFTO0NBQ1QsYUFBYSxJQUFJLEdBQUcsQ0FBQyxJQUFJLElBQUksS0FBSyxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxFQUFFO0NBQy9ELFVBQVUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLEVBQUU7Q0FDaEQsWUFBWSxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7Q0FDOUMsV0FBVyxDQUFDLENBQUM7Q0FDYixTQUFTO0NBQ1QsT0FBTyxDQUFDLENBQUM7Q0FDVCxLQUFLLENBQUMsQ0FBQztDQUNQLEdBQUcsQ0FBQyxDQUFDO0FBQ0w7Q0FDQSxFQUFFLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxNQUFNLENBQUM7Q0FDbkMsQ0FBQzs7Q0M5R0QsU0FBYSxHQUFHLE1BQU0sQ0FBQztDQUN2QixXQUFhLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQztDQUM3QixlQUFtQixHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUM7Q0FDekMsbUJBQXVCLEdBQUcsTUFBTSxDQUFDLGVBQWUsQ0FBQztDQUNqRCxpQkFBcUIsR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDO0NBQzdDLHlCQUE2QixHQUFHLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQztDQUM3RCx3QkFBNEIsR0FBRyxNQUFNLENBQUMsb0JBQW9CLENBQUM7Q0FDM0QsNEJBQWdDLEdBQUcsTUFBTSxDQUFDLHdCQUF3Qjs7Ozs7Ozs7Ozs7Ozs7QUNWbEUsQ0FDQSxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUNoQjtDQUM5QyxTQUFTLHNCQUFzQixDQUFDLEVBQUUsU0FBUyxFQUFFLEVBQUU7Q0FDL0M7Q0FDQSxJQUFJLE1BQU0sU0FBUyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7Q0FDaEM7Q0FDQSxJQUFJLE1BQU0sZ0JBQWdCLEdBQUcsRUFBRSxDQUFDO0NBQ2hDO0NBQ0EsSUFBSSxJQUFJLFFBQVEsR0FBRyxLQUFLLENBQUM7Q0FDekIsSUFBSSxJQUFJLFFBQVEsR0FBRyxLQUFLLENBQUM7Q0FDekIsSUFBSSxLQUFLLE1BQU0sQ0FBQyxJQUFJLFNBQVMsQ0FBQyxLQUFLLEVBQUU7Q0FDckMsUUFBUSxNQUFNLElBQUksR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO0NBQzVCLFFBQVEsUUFBUSxJQUFJO0NBQ3BCLFlBQVksS0FBSyxPQUFPO0NBQ3hCLGdCQUFnQjtDQUNoQixvQkFBb0IsSUFBSSxRQUFRO0NBQ2hDLHdCQUF3QixTQUFTO0NBQ2pDLG9CQUFvQixRQUFRLEdBQUcsSUFBSSxDQUFDO0NBQ3BDLG9CQUFvQixNQUFNO0NBQzFCLGlCQUFpQjtDQUNqQixZQUFZLEtBQUssT0FBTztDQUN4QixnQkFBZ0I7Q0FDaEIsb0JBQW9CLElBQUksUUFBUTtDQUNoQyx3QkFBd0IsU0FBUztDQUNqQyxvQkFBb0IsUUFBUSxHQUFHLElBQUksQ0FBQztDQUNwQyxvQkFBb0IsTUFBTTtDQUMxQixpQkFBaUI7Q0FDakIsWUFBWTtDQUNaLGdCQUFnQjtDQUNoQixvQkFBb0IsU0FBUztDQUM3QixpQkFBaUI7Q0FDakIsU0FBUztDQUNUO0NBQ0EsUUFBUSxLQUFLLE1BQU0sR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUU7Q0FDakMsWUFBWSxNQUFNLEtBQUssR0FBRztDQUMxQixnQkFBZ0IsSUFBSSxFQUFFLElBQUk7Q0FDMUIsZ0JBQWdCLFFBQVEsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDaEQsZ0JBQWdCLG9CQUFvQixFQUFFLEdBQUcsQ0FBQyxPQUFPO0NBQ2pELGdCQUFnQixTQUFTLEVBQUUsR0FBRyxDQUFDLElBQUk7Q0FDbkMsZ0JBQWdCLFFBQVEsRUFBRSxHQUFHLENBQUMsUUFBUTtDQUN0QyxnQkFBZ0IsVUFBVSxFQUFFLEVBQUU7Q0FDOUIsZ0JBQWdCLFlBQVksRUFBRSxFQUFFO0NBQ2hDLGFBQWEsQ0FBQztDQUNkLFlBQVksU0FBUyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsb0JBQW9CLEVBQUUsS0FBSyxDQUFDLENBQUM7Q0FDN0QsU0FBUztDQUNUO0NBQ0EsUUFBUSxLQUFLLE1BQU0sSUFBSSxJQUFJLENBQUMsQ0FBQyxJQUFJLElBQUksRUFBRSxFQUFFO0NBQ3pDLFlBQVksTUFBTSxVQUFVLEdBQUdDLEtBQVksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0NBQ3JFLFlBQVksTUFBTSxLQUFLLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7Q0FDdEQsWUFBWSxJQUFJLENBQUMsS0FBSztDQUN0QixnQkFBZ0IsU0FBUztDQUN6QjtDQUNBLFlBQVksSUFBSSxVQUFVLElBQUksVUFBVSxDQUFDLGtCQUFrQixDQUFDO0NBQzVELGdCQUFnQixVQUFVLENBQUMsa0JBQWtCLENBQUMsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQztDQUN4RixZQUFZLEtBQUssQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO0NBQzFDLFNBQVM7Q0FDVDtDQUNBLFFBQVEsS0FBSyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUMsTUFBTSxJQUFJLEVBQUUsRUFBRTtDQUN6QyxZQUFZLE1BQU0sS0FBSyxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0NBQ3BELFlBQVksSUFBSSxDQUFDLEtBQUs7Q0FDdEIsZ0JBQWdCLFNBQVM7Q0FDekIsWUFBWSxNQUFNLFFBQVEsR0FBRztDQUM3QixnQkFBZ0IsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJO0NBQzdCLGdCQUFnQixTQUFTLEVBQUUsRUFBRSxDQUFDLE9BQU87Q0FDckMsYUFBYSxDQUFDO0NBQ2QsWUFBWSxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVM7Q0FDbkMsZ0JBQWdCLE9BQU8sUUFBUSxDQUFDLFNBQVMsQ0FBQztDQUMxQyxZQUFZLEtBQUssQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0NBQzlDLFNBQVM7Q0FDVDtDQUNBLFFBQVEsS0FBSyxNQUFNLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLEVBQUUsRUFBRTtDQUN2QztDQUNBLFlBQVksSUFBSSxHQUFHLENBQUMsYUFBYSxDQUFDO0NBQ2xDLGdCQUFnQixTQUFTO0NBQ3pCLFlBQVksTUFBTSxlQUFlLEdBQUc7Q0FDcEMsZ0JBQWdCLElBQUksRUFBRSxJQUFJO0NBQzFCLGdCQUFnQixHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUc7Q0FDNUIsZ0JBQWdCLFdBQVcsRUFBRSxHQUFHLENBQUMsS0FBSztDQUN0QyxhQUFhLENBQUM7Q0FDZCxZQUFZLGdCQUFnQixDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztDQUNuRCxTQUFTO0NBQ1QsS0FBSztDQUNMLElBQUksTUFBTSxlQUFlLEdBQUc7Q0FDNUIsUUFBUSxNQUFNLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUM7Q0FDOUMsUUFBUSxnQkFBZ0IsRUFBRSxnQkFBZ0I7Q0FDMUMsS0FBSyxDQUFDO0NBQ04sSUFBSSxPQUFPLGVBQWUsQ0FBQztDQUMzQixDQUFDO0NBQ0QsOEJBQThCLEdBQUcsc0JBQXNCLENBQUM7Q0FDeEQsU0FBUyxxQkFBcUIsQ0FBQyxFQUFFLFNBQVMsRUFBRSxFQUFFO0NBQzlDLElBQUksTUFBTSxXQUFXLEdBQUcsQ0FBQyxTQUFTLENBQUMsS0FBSyxJQUFJLEVBQUU7Q0FDOUMsU0FBUyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQVEsSUFBSSxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDbkQsSUFBSSxJQUFJLENBQUMsV0FBVztDQUNwQixRQUFRLE1BQU0sSUFBSSxLQUFLLENBQUMsK0JBQStCLENBQUMsQ0FBQztDQUN6RCxJQUFJLE1BQU0sV0FBVyxHQUFHLFdBQVcsQ0FBQyxXQUFXLElBQUksU0FBUyxDQUFDLFdBQVcsQ0FBQztDQUN6RSxJQUFJLElBQUksSUFBSSxDQUFDO0NBQ2IsSUFBSSxRQUFRLFdBQVcsQ0FBQyxLQUFLO0NBQzdCLFFBQVEsS0FBSyxRQUFRO0NBQ3JCLFlBQVksSUFBSSxHQUFHLFFBQVEsQ0FBQztDQUM1QixZQUFZLE1BQU07Q0FDbEIsUUFBUSxLQUFLLFNBQVM7Q0FDdEIsWUFBWSxJQUFJLEdBQUcsUUFBUSxDQUFDO0NBQzVCLFlBQVksTUFBTTtDQUNsQixRQUFRLEtBQUssU0FBUztDQUN0QixZQUFZLElBQUksR0FBRyxNQUFNLENBQUM7Q0FDMUIsWUFBWSxNQUFNO0NBQ2xCLEtBQUs7Q0FDTCxJQUFJLE1BQU0sY0FBYyxHQUFHO0NBQzNCLFFBQVEsSUFBSTtDQUNaLFFBQVEsWUFBWSxFQUFFO0NBQ3RCLFlBQVk7Q0FDWixnQkFBZ0IsU0FBUyxFQUFFLFdBQVcsQ0FBQyxJQUFJO0NBQzNDLGdCQUFnQixLQUFLLEVBQUUsV0FBVyxDQUFDLElBQUk7Q0FDdkMsYUFBYTtDQUNiLFNBQVM7Q0FDVCxLQUFLLENBQUM7Q0FDTixJQUFJLE9BQU8sY0FBYyxDQUFDO0NBQzFCLENBQUM7Q0FDRCw2QkFBNkIsR0FBRyxxQkFBcUIsQ0FBQztDQUN0RCxTQUFTLFFBQVEsQ0FBQyxFQUFFLGdCQUFnQixFQUFFLEVBQUU7Q0FDeEMsSUFBSSxNQUFNLGFBQWEsR0FBRyxDQUFDLGdCQUFnQixDQUFDLEtBQUssSUFBSSxFQUFFO0NBQ3ZELFNBQVMsSUFBSSxDQUFDLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxTQUFTLEtBQUssT0FBTyxDQUFDLENBQUM7Q0FDcEQsSUFBSSxJQUFJLENBQUMsYUFBYTtDQUN0QixRQUFRLE9BQU8sRUFBRSxDQUFDO0NBQ2xCLElBQUksT0FBTyxhQUFhLENBQUMsS0FBSyxDQUFDO0NBQy9CLENBQUM7Q0FDRCxnQkFBZ0IsR0FBRyxRQUFRLENBQUM7Q0FDNUI7Q0FDQTtDQUNBO0NBQ0E7Q0FDQSxTQUFTLG9CQUFvQixDQUFDLEVBQUUsa0JBQWtCLEVBQUUsaUJBQWlCLEVBQUUsRUFBRTtDQUN6RSxJQUFJLEtBQUssTUFBTSxLQUFLLElBQUksa0JBQWtCLENBQUMsTUFBTSxFQUFFO0NBQ25ELFFBQVEsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztDQUN0RDtDQUNBLFFBQVEsSUFBSSxRQUFRLEtBQUssWUFBWTtDQUNyQyxZQUFZLFNBQVM7Q0FDckIsUUFBUSxNQUFNLEdBQUcsR0FBRyxDQUFDLGlCQUFpQixDQUFDLEdBQUcsSUFBSSxFQUFFO0NBQ2hELGFBQWEsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLEtBQUssS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0NBQzFELFFBQVEsSUFBSSxDQUFDLEdBQUc7Q0FDaEIsWUFBWSxTQUFTO0NBQ3JCO0NBQ0EsUUFBUSxpQkFBaUIsQ0FBQyxJQUFJLEdBQUcsaUJBQWlCLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQztDQUM5RCxRQUFRLElBQUksSUFBSSxHQUFHLGlCQUFpQixDQUFDLElBQUk7Q0FDekMsYUFBYSxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sS0FBSyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7Q0FDMUQsUUFBUSxJQUFJLENBQUMsSUFBSSxFQUFFO0NBQ25CLFlBQVksSUFBSSxHQUFHLEVBQUUsT0FBTyxFQUFFLEtBQUssQ0FBQyxXQUFXLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxDQUFDO0NBQzlELFlBQVksaUJBQWlCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztDQUM5QyxTQUFTO0NBQ1QsUUFBUSxNQUFNLFVBQVUsR0FBR0EsS0FBWSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7Q0FDakUsUUFBUSxRQUFRLFFBQVE7Q0FDeEIsWUFBWSxLQUFLLFlBQVk7Q0FDN0IsZ0JBQWdCO0NBQ2hCLG9CQUFvQixNQUFNLFdBQVcsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0NBQ3pFLG9CQUFvQixJQUFJLFdBQVcsS0FBSyxTQUFTO0NBQ2pELHdCQUF3QixVQUFVLENBQUMsTUFBTSxHQUFHLFdBQVcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQ2hFLG9CQUFvQixNQUFNO0NBQzFCLGlCQUFpQjtDQUNqQixTQUFTO0NBQ1Q7Q0FDQSxRQUFRLElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO0NBQ3pCLFFBQVEsS0FBSyxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFO0NBQ25ELFlBQVksSUFBSSxJQUFJLENBQUMsTUFBTTtDQUMzQixnQkFBZ0IsSUFBSSxDQUFDLE1BQU0sSUFBSSxHQUFHLENBQUM7Q0FDbkMsWUFBWSxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDdkQsU0FBUztDQUNULEtBQUs7Q0FDTCxDQUFDO0NBQ0QsNEJBQTRCLEdBQUcsb0JBQW9COzs7Ozs7Ozs7O0FDektuRCxDQUNBLE1BQU0sQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0NBQzlELFNBQVMsZUFBZSxDQUFDLEVBQUUsZ0JBQWdCLEVBQUUsRUFBRTtDQUMvQyxJQUFJLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7Q0FDNUIsSUFBSSxLQUFLLE1BQU0sSUFBSSxJQUFJLGdCQUFnQixDQUFDLEtBQUssSUFBSSxFQUFFLEVBQUU7Q0FDckQsUUFBUSxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDO0NBQzdCLFFBQVEsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztDQUN4QixLQUFLO0NBQ0wsSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLEtBQUssQ0FBQztDQUN4QixRQUFRLE1BQU0sSUFBSSxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQztDQUNqRCxJQUFJLE1BQU0sYUFBYSxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7Q0FDcEM7Q0FDQSxJQUFJLEtBQUssTUFBTSxJQUFJLElBQUksZ0JBQWdCLENBQUMsVUFBVSxJQUFJLEVBQUUsRUFBRTtDQUMxRCxRQUFRLElBQUksSUFBSSxDQUFDLFNBQVMsS0FBSyxLQUFLO0NBQ3BDLFlBQVksU0FBUztDQUNyQixRQUFRLElBQUksQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDdEQsUUFBUSxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0NBQzVCLFFBQVEsT0FBTyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztDQUNsQyxRQUFRLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRTtDQUM3QjtDQUNBO0NBQ0EsWUFBWSxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0NBQy9CLFlBQVksS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztDQUNsQztDQUNBLFlBQVksYUFBYSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7Q0FDN0MsU0FBUztDQUNULEtBQUs7Q0FDTDtDQUNBO0NBQ0EsSUFBSSxLQUFLLE1BQU0sSUFBSSxJQUFJLEtBQUssRUFBRTtDQUM5QjtDQUNBLFFBQVEsYUFBYSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7Q0FDdEMsS0FBSztDQUNMLElBQUksTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDO0NBQ3pCLElBQUksS0FBSyxNQUFNLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxJQUFJLGFBQWEsRUFBRTtDQUNqRCxRQUFRLE1BQU0sUUFBUSxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUM7Q0FDbEMsUUFBUSxJQUFJLE9BQU87Q0FDbkIsWUFBWSxRQUFRLENBQUMsR0FBRyxHQUFHLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxDQUFDO0NBQzdDLFFBQVEsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztDQUNqQyxLQUFLO0NBQ0wsSUFBSSxPQUFPLFNBQVMsQ0FBQztDQUNyQixDQUFDO0NBQ0QsdUJBQXVCLEdBQUcsZUFBZSxDQUFDO0NBQzFDO0NBQ0E7Q0FDQTtDQUNBLFNBQVMsa0JBQWtCLENBQUMsRUFBRSxnQkFBZ0IsRUFBRSxVQUFVLEVBQUUsRUFBRTtDQUM5RCxJQUFJLElBQUksVUFBVSxJQUFJLENBQUM7Q0FDdkIsUUFBUSxNQUFNLElBQUksU0FBUyxDQUFDLG1DQUFtQyxDQUFDLENBQUM7Q0FDakU7Q0FDQSxJQUFJLE1BQU0sWUFBWSxHQUFHLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxJQUFJLEVBQUU7Q0FDdEQsU0FBUyxJQUFJLENBQUMsQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLFNBQVMsS0FBSyxNQUFNLENBQUMsQ0FBQztDQUNuRCxJQUFJLElBQUksQ0FBQyxZQUFZO0NBQ3JCLFFBQVEsTUFBTSxJQUFJLEtBQUssQ0FBQyw2Q0FBNkMsQ0FBQyxDQUFDO0NBQ3ZFLElBQUksTUFBTSxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsR0FBRyxZQUFZLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUNqRSxJQUFJLE1BQU0sU0FBUyxHQUFHLFlBQVksQ0FBQyxFQUFFLENBQUM7Q0FDdEMsSUFBSSxJQUFJLFlBQVksQ0FBQztDQUNyQjtDQUNBLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLElBQUksRUFBRTtDQUN0QyxTQUFTLElBQUksQ0FBQyxDQUFDLElBQUksS0FBSztDQUN4QixRQUFRLElBQUksSUFBSSxDQUFDLFNBQVMsS0FBSyxLQUFLO0NBQ3BDLFlBQVksT0FBTyxLQUFLLENBQUM7Q0FDekIsUUFBUSxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztDQUM5QyxRQUFRLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLFNBQVMsRUFBRTtDQUM1QyxZQUFZLFlBQVksR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDNUMsWUFBWSxPQUFPLElBQUksQ0FBQztDQUN4QixTQUFTO0NBQ1QsYUFBYTtDQUNiLFlBQVksT0FBTyxLQUFLLENBQUM7Q0FDekIsU0FBUztDQUNULEtBQUssQ0FBQyxDQUFDO0NBQ1AsSUFBSSxNQUFNLGFBQWEsR0FBRyxnQkFBZ0IsQ0FBQyxLQUFLO0NBQ2hELFNBQVMsSUFBSSxDQUFDLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxTQUFTLEtBQUssT0FBTyxDQUFDLENBQUM7Q0FDcEQsSUFBSSxJQUFJLENBQUMsYUFBYTtDQUN0QixRQUFRLE1BQU0sSUFBSSxLQUFLLENBQUMsOENBQThDLENBQUMsQ0FBQztDQUN4RSxJQUFJLE1BQU0sS0FBSyxHQUFHLGFBQWEsQ0FBQyxLQUFLLENBQUM7Q0FDdEMsSUFBSSxNQUFNLEtBQUssR0FBRyxFQUFFLENBQUM7Q0FDckIsSUFBSSxNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUM7Q0FDeEIsSUFBSSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsVUFBVSxFQUFFLEVBQUUsQ0FBQyxFQUFFO0NBQ3pDLFFBQVEsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUM7Q0FDbEMsUUFBUSxJQUFJLFlBQVk7Q0FDeEIsWUFBWSxRQUFRLENBQUMsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUMsQ0FBQztDQUM1QyxLQUFLO0NBQ0wsSUFBSSxnQkFBZ0IsQ0FBQyxVQUFVLEdBQUcsRUFBRSxDQUFDO0NBQ3JDLElBQUksZ0JBQWdCLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztDQUNoQyxJQUFJLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUM7Q0FDckMsUUFBUSxTQUFTLEVBQUUsS0FBSztDQUN4QixRQUFRLEtBQUssRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztDQUM5QixLQUFLLENBQUMsQ0FBQztDQUNQLElBQUksS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUU7Q0FDM0MsUUFBUSxNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDOUIsUUFBUSxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO0NBQ3BDLFlBQVksRUFBRSxFQUFFLElBQUk7Q0FDcEIsWUFBWSxTQUFTLEVBQUUsT0FBTztDQUM5QixZQUFZLEtBQUssRUFBRSxLQUFLO0NBQ3hCLFNBQVMsQ0FBQyxDQUFDO0NBQ1gsUUFBUSxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO0NBQ3BDLFlBQVksRUFBRSxFQUFFLElBQUk7Q0FDcEIsWUFBWSxTQUFTLEVBQUUsTUFBTTtDQUM3QixZQUFZLEtBQUssRUFBRSxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztDQUMzQyxTQUFTLENBQUMsQ0FBQztDQUNYLEtBQUs7Q0FDTCxJQUFJLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxRQUFRLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFO0NBQzlDLFFBQVEsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQzlCLFFBQVEsTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ3BDLFFBQVEsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztDQUNwQyxZQUFZLEVBQUUsRUFBRSxPQUFPO0NBQ3ZCLFlBQVksU0FBUyxFQUFFLE9BQU87Q0FDOUIsWUFBWSxLQUFLLEVBQUUsS0FBSztDQUN4QixTQUFTLENBQUMsQ0FBQztDQUNYLFFBQVEsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztDQUNwQyxZQUFZLEVBQUUsRUFBRSxPQUFPO0NBQ3ZCLFlBQVksU0FBUyxFQUFFLE1BQU07Q0FDN0IsWUFBWSxLQUFLLEVBQUUsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7Q0FDM0MsU0FBUyxDQUFDLENBQUM7Q0FDWCxRQUFRLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUM7Q0FDekMsWUFBWSxTQUFTLEVBQUUsS0FBSztDQUM1QixZQUFZLEtBQUssRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztDQUN2QyxTQUFTLENBQUMsQ0FBQztDQUNYLEtBQUs7Q0FDTCxDQUFDO0NBQ0QsMEJBQTBCLEdBQUcsa0JBQWtCOzs7Ozs7OztBQ3pIL0MsQ0FDQSxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUNJO0NBQ2xFLE1BQU0sZ0JBQWdCLFNBQVMsc0JBQXNCLENBQUMsb0JBQW9CLENBQUM7Q0FDM0U7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLElBQUksV0FBVyxHQUFHO0NBQ2xCLFFBQVEsS0FBSyxFQUFFLENBQUM7Q0FDaEIsS0FBSztDQUNMLENBQUM7Q0FDRCx3QkFBd0IsR0FBRyxnQkFBZ0I7Ozs7Ozs7QUNoQjNDLENBQ0EsTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7QUFDekI7Q0FDckMsTUFBTSxZQUFZLENBQUM7Q0FDbkIsSUFBSSxXQUFXLENBQUMsRUFBRSxhQUFhLEVBQUUsYUFBYSxFQUFFLGNBQWMsRUFBRSxLQUFLLEdBQUcsS0FBSyxFQUFFLEVBQUU7Q0FDakYsUUFBUSxJQUFJLENBQUMsWUFBWSxHQUFHLEVBQUUsQ0FBQztDQUMvQixRQUFRLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO0NBQzVCLFFBQVEsSUFBSSxhQUFhLEVBQUU7Q0FDM0IsWUFBWSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxDQUFDLENBQUM7Q0FDakQsU0FBUztDQUNULFFBQVEsSUFBSSxhQUFhLEVBQUU7Q0FDM0IsWUFBWSxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUM7Q0FDOUMsWUFBWSxLQUFLLE1BQU0sU0FBUyxJQUFJLGFBQWEsRUFBRTtDQUNuRCxnQkFBZ0IsTUFBTSxlQUFlLEdBQUcsRUFBRSxDQUFDO0NBQzNDO0NBQ0E7Q0FDQSxnQkFBZ0IsZUFBZSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7Q0FDOUMsZ0JBQWdCLGVBQWUsQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDLFVBQVUsQ0FBQztDQUNsRSxnQkFBZ0IsZUFBZSxDQUFDLEVBQUUsR0FBRyxTQUFTLENBQUMsRUFBRSxDQUFDO0NBQ2xELGdCQUFnQixlQUFlLENBQUMsSUFBSSxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUM7Q0FDdEQsZ0JBQWdCLGVBQWUsQ0FBQyxRQUFRLEdBQUcsU0FBUyxDQUFDLFFBQVEsQ0FBQztDQUM5RCxnQkFBZ0IsZUFBZSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUMsUUFBUSxDQUFDO0NBQy9ELGdCQUFnQixlQUFlLENBQUMsSUFBSSxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUM7Q0FDdEQsZ0JBQWdCLElBQUksU0FBUyxDQUFDLE9BQU87Q0FDckMsb0JBQW9CLGVBQWUsQ0FBQyxPQUFPLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQztDQUNoRSxnQkFBZ0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0NBQ25FLGFBQWE7Q0FDYixZQUFZLElBQUksQ0FBQyxZQUFZLENBQUMsZUFBZSxHQUFHLG1CQUFtQixDQUFDO0NBQ3BFLFlBQVksSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLEdBQUcsY0FBYyxDQUFDO0NBQzFELFNBQVM7Q0FDVCxRQUFRLElBQUksY0FBYyxFQUFFO0NBQzVCLFlBQVksSUFBSSxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7Q0FDbEQsU0FBUztDQUNULEtBQUs7Q0FDTCxJQUFJLElBQUksR0FBRyxHQUFHO0NBQ2QsUUFBUSxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQzdDLEtBQUs7Q0FDTCxJQUFJLElBQUksTUFBTSxHQUFHO0NBQ2pCLFFBQVEsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksS0FBSyxDQUFDLENBQUM7Q0FDNUMsS0FBSztDQUNMLElBQUksU0FBUyxHQUFHO0NBQ2hCLFFBQVEsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO0NBQ2pDLEtBQUs7Q0FDTCxJQUFJLGdCQUFnQixDQUFDLGFBQWEsRUFBRTtDQUNwQyxRQUFRLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxHQUFHLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQztDQUNwRSxRQUFRLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxHQUFHLGFBQWEsQ0FBQyxRQUFRLENBQUM7Q0FDMUQsS0FBSztDQUNMLElBQUksT0FBTyxHQUFHO0NBQ2QsUUFBUSxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsR0FBRyxVQUFVLENBQUM7Q0FDakQsUUFBUSxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDO0NBQ3JDLFFBQVEsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQztDQUN2QyxRQUFRLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUM7Q0FDNUMsUUFBUSxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDO0NBQzNDLFFBQVEsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQztDQUM5QyxRQUFRLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUM7Q0FDdEMsS0FBSztDQUNMLElBQUksS0FBSyxHQUFHO0NBQ1osUUFBUSxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsR0FBRyxVQUFVLENBQUM7Q0FDakQsUUFBUSxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUM7Q0FDbkMsUUFBUSxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDO0NBQ3JDLFFBQVEsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQztDQUN2QyxRQUFRLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUM7Q0FDNUMsUUFBUSxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDO0NBQzNDLFFBQVEsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQztDQUM5QyxRQUFRLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUM7Q0FDdEMsUUFBUSxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLENBQUM7Q0FDbEQsS0FBSztDQUNMLENBQUM7Q0FDRCxvQkFBb0IsR0FBRyxZQUFZLENBQUM7Q0FDcEMsTUFBTSxrQkFBa0IsU0FBUyxZQUFZLENBQUM7Q0FDOUMsSUFBSSxXQUFXLENBQUMsRUFBRSxhQUFhLEVBQUUsYUFBYSxFQUFFLGNBQWMsRUFBRSxjQUFjLEVBQUUsa0JBQWtCLEVBQUUsS0FBSyxHQUFHLEtBQUssRUFBRSxnQkFBZ0IsRUFBRSxrQkFBa0IsRUFBRSxtQkFBbUIsRUFBRSxZQUFZLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxFQUFFLEVBQUU7Q0FDeE4sUUFBUSxLQUFLLENBQUMsRUFBRSxhQUFhLEVBQUUsYUFBYSxFQUFFLGNBQWMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0NBQ3ZFLFFBQVEsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQzdELFFBQVEsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEdBQUcsZ0JBQWdCLENBQUMsSUFBSSxDQUFDO0NBQ3ZELFFBQVEsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLEdBQUcsZ0JBQWdCLENBQUMsUUFBUSxDQUFDO0NBQy9ELFFBQVEsSUFBSSxDQUFDLGtCQUFrQixFQUFFO0NBQ2pDLFlBQVksSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLEdBQUcsRUFBRSxFQUFFLEVBQUUsV0FBVyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQztDQUMzRSxZQUFZLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQztDQUN2QyxTQUFTO0NBQ1QsYUFBYTtDQUNiLFlBQVksSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVO0NBQ3hDLGdCQUFnQjtDQUNoQixvQkFBb0IsRUFBRSxFQUFFLGtCQUFrQixDQUFDLEVBQUU7Q0FDN0Msb0JBQW9CLE9BQU8sRUFBRSxrQkFBa0IsQ0FBQyxTQUFTO0NBQ3pELGlCQUFpQixDQUFDO0NBQ2xCLFlBQVksSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEdBQUcsa0JBQWtCLENBQUMsSUFBSSxDQUFDO0NBQzdELFNBQVM7Q0FDVCxRQUFRLFFBQVEsZ0JBQWdCLENBQUMsSUFBSTtDQUNyQyxZQUFZLEtBQUssT0FBTyxDQUFDO0NBQ3pCLFlBQVksS0FBSyxPQUFPO0NBQ3hCLGdCQUFnQjtDQUNoQixvQkFBb0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLEdBQUcsVUFBVSxDQUFDO0NBQzdELG9CQUFvQixJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUM7Q0FDL0Msb0JBQW9CLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQztDQUNsRCxvQkFBb0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDO0NBQ2hELG9CQUFvQixLQUFLLE1BQU0sS0FBSyxJQUFJLG1CQUFtQixDQUFDLE1BQU0sRUFBRTtDQUNwRSx3QkFBd0IsTUFBTSxHQUFHLEdBQUc7Q0FDcEMsNEJBQTRCLE9BQU8sRUFBRSxLQUFLLENBQUMsV0FBVztDQUN0RCw0QkFBNEIsS0FBSyxFQUFFLFlBQVksQ0FBQyxLQUFLLENBQUM7Q0FDdEQsNEJBQTRCLElBQUksRUFBRSxLQUFLLENBQUMsU0FBUztDQUNqRCx5QkFBeUIsQ0FBQztDQUMxQix3QkFBd0IsSUFBSSxLQUFLLENBQUMsUUFBUSxHQUFHLENBQUM7Q0FDOUMsNEJBQTRCLEdBQUcsQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQztDQUMxRCx3QkFBd0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQ3hELHdCQUF3QixNQUFNLGVBQWUsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxVQUFVLElBQUksRUFBRSxDQUFDLENBQUM7Q0FDcEYsd0JBQXdCLElBQUksWUFBWSxFQUFFO0NBQzFDLDRCQUE0QixNQUFNLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsU0FBUyxFQUFFLHVCQUF1QixFQUFFLHFCQUFxQixFQUFFLHFCQUFxQixFQUFFLEdBQUcsWUFBWSxDQUFDO0NBQ3pMLDRCQUE0QixNQUFNLFVBQVUsR0FBRyxrQkFBa0IsQ0FBQyxNQUFNO0NBQ3hFLGlDQUFpQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFdBQVcsS0FBSyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztDQUNwRiw0QkFBNEIsUUFBUSxLQUFLLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRTtDQUNoRSxnQ0FBZ0MsS0FBSyxZQUFZO0NBQ2pELG9DQUFvQztDQUNwQyx3Q0FBd0MsSUFBSSxVQUFVLEtBQUssU0FBUyxFQUFFO0NBQ3RFLDRDQUE0QyxVQUFVLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxHQUFHLFVBQVUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQ3ZHLDRDQUE0QyxlQUFlLENBQUMsTUFBTSxHQUFHLFVBQVUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQ3hGLHlDQUF5QztDQUN6Qyx3Q0FBd0MsSUFBSSxPQUFPLEtBQUssU0FBUyxFQUFFO0NBQ25FLDRDQUE0QyxVQUFVLENBQUMsVUFBVSxDQUFDLFlBQVksR0FBRyxPQUFPLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUNqRyw0Q0FBNEMsZUFBZSxDQUFDLFlBQVksR0FBRyxPQUFPLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUMzRix5Q0FBeUM7Q0FDekMsd0NBQXdDLElBQUksT0FBTyxLQUFLLFNBQVMsRUFBRTtDQUNuRSw0Q0FBNEMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEdBQUcsT0FBTyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDM0YsNENBQTRDLGVBQWUsQ0FBQyxNQUFNLEdBQUcsT0FBTyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDckYseUNBQXlDO0NBQ3pDLHdDQUF3QyxJQUFJLG1CQUFtQixLQUFLLFNBQVMsRUFBRTtDQUMvRSw0Q0FBNEMsZUFBZSxDQUFDLGVBQWUsR0FBRyxtQkFBbUIsQ0FBQztDQUNsRyx5Q0FBeUM7Q0FDekMsd0NBQXdDLElBQUksU0FBUyxLQUFLLFNBQVMsRUFBRTtDQUNyRSw0Q0FBNEMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEdBQUcsU0FBUyxDQUFDO0NBQ3BGLDRDQUE0QyxlQUFlLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBQztDQUM5RSx5Q0FBeUM7Q0FDekMsd0NBQXdDLE1BQU07Q0FDOUMscUNBQXFDO0NBQ3JDLGdDQUFnQyxLQUFLLFdBQVcsQ0FBQztDQUNqRCxnQ0FBZ0MsS0FBSyxXQUFXLENBQUM7Q0FDakQsZ0NBQWdDLEtBQUssWUFBWSxDQUFDO0NBQ2xELGdDQUFnQyxLQUFLLFlBQVk7Q0FDakQsb0NBQW9DO0NBQ3BDLHdDQUF3QyxJQUFJLHVCQUF1QixLQUFLLFNBQVM7Q0FDakYsNENBQTRDLGVBQWUsQ0FBQyx3QkFBd0IsQ0FBQyxHQUFHLHVCQUF1QixDQUFDO0NBQ2hILHdDQUF3QyxJQUFJLHFCQUFxQixLQUFLLFNBQVM7Q0FDL0UsNENBQTRDLGVBQWUsQ0FBQyxzQkFBc0IsQ0FBQyxHQUFHLHFCQUFxQixDQUFDO0NBQzVHLHdDQUF3QyxJQUFJLHFCQUFxQixLQUFLLFNBQVM7Q0FDL0UsNENBQTRDLGVBQWUsQ0FBQyxzQkFBc0IsQ0FBQyxHQUFHLHFCQUFxQixDQUFDO0NBQzVHLHdDQUF3QyxNQUFNO0NBQzlDLHFDQUFxQztDQUNyQyw2QkFBNkI7Q0FDN0IseUJBQXlCO0NBQ3pCLHdCQUF3QixNQUFNLElBQUksR0FBRztDQUNyQyw0QkFBNEIsT0FBTyxFQUFFLEtBQUssQ0FBQyxXQUFXO0NBQ3RELDRCQUE0QixNQUFNLEVBQUUsRUFBRTtDQUN0Qyx5QkFBeUIsQ0FBQztDQUMxQix3QkFBd0IsS0FBSyxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxFQUFFO0NBQ3hFLDRCQUE0QixJQUFJLElBQUksQ0FBQyxNQUFNO0NBQzNDLGdDQUFnQyxJQUFJLENBQUMsTUFBTSxJQUFJLEdBQUcsQ0FBQztDQUNuRCw0QkFBNEIsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQzVFLHlCQUF5QjtDQUN6Qix3QkFBd0IsSUFBSSxJQUFJLENBQUMsTUFBTTtDQUN2Qyw0QkFBNEIsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0NBQzlELHdCQUF3QixLQUFLLE1BQU0sRUFBRSxJQUFJLEtBQUssQ0FBQyxZQUFZLEVBQUU7Q0FDN0QsNEJBQTRCLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztDQUMxRCxnQ0FBZ0MsT0FBTyxFQUFFLEtBQUssQ0FBQyxXQUFXO0NBQzFELGdDQUFnQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUk7Q0FDN0MsZ0NBQWdDLE9BQU8sRUFBRSxFQUFFLENBQUMsU0FBUztDQUNyRCw2QkFBNkIsQ0FBQyxDQUFDO0NBQy9CLHlCQUF5QjtDQUN6QixxQkFBcUI7Q0FDckIsb0JBQW9CLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxHQUFHLG1CQUFtQixDQUFDLE1BQU07Q0FDM0UseUJBQXlCLEdBQUcsQ0FBQyxDQUFDLEtBQUssS0FBSyxLQUFLLENBQUMsV0FBVyxDQUFDO0NBQzFELHlCQUF5QixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDbkMsb0JBQW9CLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQztDQUMvQyxvQkFBb0IsS0FBSyxNQUFNLEdBQUcsSUFBSSxtQkFBbUIsQ0FBQyxnQkFBZ0IsRUFBRTtDQUM1RTtDQUNBLHdCQUF3QixNQUFNLEtBQUssR0FBRyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsSUFBSSxFQUFFO0NBQ2pFLDZCQUE2QixJQUFJLENBQUMsQ0FBQyxRQUFRLEtBQUssUUFBUSxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDMUUsd0JBQXdCLElBQUksQ0FBQyxLQUFLO0NBQ2xDLDRCQUE0QixTQUFTO0NBQ3JDLHdCQUF3QixJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUM7Q0FDbkQsNEJBQTRCLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRztDQUN4Qyw0QkFBNEIsS0FBSyxFQUFFLEdBQUcsQ0FBQyxFQUFFO0NBQ3pDLHlCQUF5QixDQUFDLENBQUM7Q0FDM0IscUJBQXFCO0NBQ3JCO0NBQ0Esb0JBQW9CLElBQUksZ0JBQWdCO0NBQ3hDLHdCQUF3QixnQkFBZ0IsQ0FBQyxnQkFBZ0IsS0FBSyxvQkFBb0IsRUFBRTtDQUNwRix3QkFBd0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsR0FBRyxvQkFBb0IsQ0FBQztDQUNsRixxQkFBcUI7Q0FDckI7Q0FDQSxvQkFBb0IsSUFBSSxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUU7Q0FDcEQsd0JBQXdCLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUztDQUNuRCw0QkFBNEI7Q0FDNUIsZ0NBQWdDLElBQUksRUFBRSxNQUFNO0NBQzVDLGdDQUFnQyxLQUFLLEVBQUUsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLEtBQUs7Q0FDdkUsNkJBQTZCLENBQUM7Q0FDOUIsd0JBQXdCLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztDQUNwRCx3QkFBd0IsS0FBSyxNQUFNLEdBQUcsSUFBSSxnQkFBZ0IsQ0FBQyxJQUFJLElBQUksRUFBRSxFQUFFO0NBQ3ZFLDRCQUE0QixJQUFJLEdBQUcsQ0FBQyxTQUFTLEtBQUssTUFBTTtDQUN4RCxnQ0FBZ0MsU0FBUztDQUN6Qyw0QkFBNEIsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO0NBQ3hELGdDQUFnQyxFQUFFLEVBQUUsR0FBRyxDQUFDLEVBQUU7Q0FDMUMsZ0NBQWdDLFNBQVMsRUFBRSxNQUFNO0NBQ2pELDZCQUE2QixDQUFDLENBQUM7Q0FDL0IseUJBQXlCO0NBQ3pCLHFCQUFxQjtDQUNyQjtDQUNBLHlCQUF5QixJQUFJLGdCQUFnQixDQUFDLFlBQVksRUFBRTtDQUM1RDtDQUNBLHdCQUF3QixJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVk7Q0FDdEQsNEJBQTRCO0NBQzVCLGdDQUFnQyxLQUFLLEVBQUUsZ0JBQWdCLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQztDQUNuRyw2QkFBNkIsQ0FBQztDQUM5Qix3QkFBd0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDO0NBQ3BELHdCQUF3QixLQUFLLE1BQU0sR0FBRyxJQUFJLGdCQUFnQixDQUFDLElBQUksSUFBSSxFQUFFLEVBQUU7Q0FDdkUsNEJBQTRCLElBQUksR0FBRyxDQUFDLFNBQVMsS0FBSyxNQUFNO0NBQ3hELGdDQUFnQyxTQUFTO0NBQ3pDLDRCQUE0QixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7Q0FDeEQsZ0NBQWdDLEVBQUUsRUFBRSxHQUFHLENBQUMsRUFBRTtDQUMxQyxnQ0FBZ0MsU0FBUyxFQUFFLE1BQU07Q0FDakQsNkJBQTZCLENBQUMsQ0FBQztDQUMvQix5QkFBeUI7Q0FDekIscUJBQXFCO0NBQ3JCLG9CQUFvQixJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sR0FBRyxVQUFVLENBQUM7Q0FDM0Qsb0JBQW9CLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxHQUFHLFlBQVksQ0FBQztDQUMvRCxvQkFBb0IsSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxLQUFLLE9BQU87Q0FDekUsd0JBQXdCLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxHQUFHLFlBQVksQ0FBQztDQUNyRSxvQkFBb0IsTUFBTTtDQUMxQixpQkFBaUI7Q0FDakIsWUFBWSxLQUFLLGFBQWE7Q0FDOUIsZ0JBQWdCO0NBQ2hCO0NBQ0Esb0JBQW9CLElBQUksT0FBTyxnQkFBZ0IsQ0FBQyxRQUFRLEtBQUssUUFBUSxFQUFFO0NBQ3ZFLHdCQUF3QixJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsR0FBRyxvQkFBb0IsQ0FBQztDQUMxRSx3QkFBd0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLEdBQUcsY0FBYyxDQUFDLElBQUksQ0FBQztDQUN6RSx3QkFBd0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxjQUFjLEdBQUcsY0FBYyxDQUFDLGNBQWMsQ0FBQztDQUN6RixxQkFBcUI7Q0FDckI7Q0FDQSx5QkFBeUIsSUFBSSxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUU7Q0FDdkQsd0JBQXdCLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxHQUFHLGNBQWMsQ0FBQyxJQUFJLENBQUM7Q0FDekUsd0JBQXdCLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTztDQUNqRCw0QkFBNEI7Q0FDNUIsZ0NBQWdDLEdBQUcsRUFBRSxvQkFBb0I7Q0FDekQsZ0NBQWdDLGFBQWEsRUFBRSxjQUFjLENBQUMsSUFBSTtDQUNsRSxnQ0FBZ0MsY0FBYyxFQUFFLGNBQWMsQ0FBQyxjQUFjO0NBQzdFLDZCQUE2QixDQUFDO0NBQzlCLHFCQUFxQjtDQUNyQixvQkFBb0IsTUFBTTtDQUMxQixpQkFBaUI7Q0FDakIsU0FBUztDQUNULEtBQUs7Q0FDTCxJQUFJLFdBQVcsQ0FBQyxJQUFJLEVBQUU7Q0FDdEIsUUFBUSxRQUFRLElBQUk7Q0FDcEIsWUFBWSxLQUFLLFFBQVE7Q0FDekIsZ0JBQWdCLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQztDQUNuRCxnQkFBZ0IsTUFBTTtDQUN0QixZQUFZLEtBQUssUUFBUTtDQUN6QixnQkFBZ0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLEdBQUcsU0FBUyxDQUFDO0NBQ3BELGdCQUFnQixNQUFNO0NBQ3RCLFlBQVksS0FBSyxNQUFNO0NBQ3ZCLGdCQUFnQixJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssR0FBRyxTQUFTLENBQUM7Q0FDcEQsZ0JBQWdCLE1BQU07Q0FDdEIsU0FBUztDQUNULEtBQUs7Q0FDTCxDQUFDO0NBQ0QsMEJBQTBCLEdBQUcsa0JBQWtCLENBQUM7Q0FDaEQsTUFBTSxpQkFBaUIsU0FBUyxZQUFZLENBQUM7Q0FDN0MsSUFBSSxXQUFXLENBQUMsRUFBRSxhQUFhLEVBQUUsYUFBYSxFQUFFLGNBQWMsRUFBRSxjQUFjLEVBQUUsa0JBQWtCLEVBQUUsS0FBSyxHQUFHLEtBQUssRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLGtCQUFrQixFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsa0JBQWtCLEdBQUcsS0FBSyxFQUFFLEVBQUU7Q0FDbk0sUUFBUSxLQUFLLENBQUMsRUFBRSxhQUFhLEVBQUUsYUFBYSxFQUFFLGNBQWMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0NBQ3ZFLFFBQVEsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQzVDLFFBQVEsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0NBQ3RDLFFBQVEsSUFBSSxDQUFDLGtCQUFrQixFQUFFO0NBQ2pDLFlBQVksSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLEdBQUcsRUFBRSxFQUFFLEVBQUUsV0FBVyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQztDQUMzRSxZQUFZLElBQUksQ0FBQyxjQUFjO0NBQy9CLGdCQUFnQixJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsR0FBRyxtQkFBbUIsQ0FBQztDQUNqRTtDQUNBLGdCQUFnQixJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsR0FBRyxlQUFlLENBQUM7Q0FDN0QsWUFBWSxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUM7Q0FDdkMsU0FBUztDQUNULGFBQWE7Q0FDYixZQUFZLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVTtDQUN4QyxnQkFBZ0I7Q0FDaEIsb0JBQW9CLEVBQUUsRUFBRSxrQkFBa0IsQ0FBQyxFQUFFO0NBQzdDLG9CQUFvQixPQUFPLEVBQUUsa0JBQWtCLENBQUMsU0FBUztDQUN6RCxpQkFBaUIsQ0FBQztDQUNsQixZQUFZLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQztDQUNuRCxZQUFZLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxHQUFHLGtCQUFrQixDQUFDLElBQUksQ0FBQztDQUM3RCxTQUFTO0NBQ1QsUUFBUSxRQUFRLElBQUk7Q0FDcEIsWUFBWSxLQUFLLE9BQU8sQ0FBQztDQUN6QixZQUFZLEtBQUssT0FBTztDQUN4QixnQkFBZ0I7Q0FDaEIsb0JBQW9CLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxHQUFHLFVBQVUsQ0FBQztDQUM3RCxvQkFBb0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDO0NBQy9DLG9CQUFvQixJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7Q0FDbEQsb0JBQW9CLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztDQUNoRCxvQkFBb0IsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNO0NBQ3BDLHdCQUF3QixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksR0FBRyxDQUFDLEVBQUUsUUFBUSxJQUFJLEdBQUcsQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztDQUNqRixvQkFBb0IsS0FBSyxNQUFNLEtBQUssSUFBSSxrQkFBa0IsQ0FBQyxNQUFNLEVBQUU7Q0FDbkUsd0JBQXdCLE1BQU0sR0FBRyxHQUFHO0NBQ3BDLDRCQUE0QixPQUFPLEVBQUUsS0FBSyxDQUFDLFdBQVc7Q0FDdEQsNEJBQTRCLEtBQUssRUFBRSxZQUFZLENBQUMsS0FBSyxDQUFDO0NBQ3RELDRCQUE0QixJQUFJLEVBQUUsS0FBSyxDQUFDLFNBQVM7Q0FDakQseUJBQXlCLENBQUM7Q0FDMUIsd0JBQXdCLElBQUksS0FBSyxDQUFDLFFBQVEsR0FBRyxDQUFDO0NBQzlDLDRCQUE0QixHQUFHLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUM7Q0FDMUQsd0JBQXdCLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUN4RCx3QkFBd0IsTUFBTSxJQUFJLEdBQUc7Q0FDckMsNEJBQTRCLE9BQU8sRUFBRSxLQUFLLENBQUMsV0FBVztDQUN0RCw0QkFBNEIsTUFBTSxFQUFFLEVBQUU7Q0FDdEMseUJBQXlCLENBQUM7Q0FDMUIsd0JBQXdCLEtBQUssTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLEVBQUU7Q0FDekUsNEJBQTRCLElBQUksSUFBSSxDQUFDLE1BQU07Q0FDM0MsZ0NBQWdDLElBQUksQ0FBQyxNQUFNLElBQUksR0FBRyxDQUFDO0NBQ25ELDRCQUE0QixJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQzdFLHlCQUF5QjtDQUN6Qix3QkFBd0IsSUFBSSxJQUFJLENBQUMsTUFBTTtDQUN2Qyw0QkFBNEIsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0NBQzlELHdCQUF3QixLQUFLLE1BQU0sRUFBRSxJQUFJLEtBQUssQ0FBQyxZQUFZLEVBQUU7Q0FDN0QsNEJBQTRCLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztDQUMxRCxnQ0FBZ0MsT0FBTyxFQUFFLEtBQUssQ0FBQyxXQUFXO0NBQzFELGdDQUFnQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUk7Q0FDN0MsZ0NBQWdDLE9BQU8sRUFBRSxFQUFFLENBQUMsU0FBUztDQUNyRCw2QkFBNkIsQ0FBQyxDQUFDO0NBQy9CLHlCQUF5QjtDQUN6QixxQkFBcUI7Q0FDckIsb0JBQW9CLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxHQUFHLGtCQUFrQixDQUFDLE1BQU07Q0FDMUUseUJBQXlCLEdBQUcsQ0FBQyxDQUFDLEtBQUssS0FBSyxLQUFLLENBQUMsV0FBVyxDQUFDO0NBQzFELHlCQUF5QixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDbkMsb0JBQW9CLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQztDQUMvQyxvQkFBb0IsS0FBSyxNQUFNLEdBQUcsSUFBSSxrQkFBa0IsQ0FBQyxnQkFBZ0IsRUFBRTtDQUMzRSx3QkFBd0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDO0NBQ25ELDRCQUE0QixHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUc7Q0FDeEMsNEJBQTRCLEtBQUssRUFBRSxHQUFHLENBQUMsRUFBRTtDQUN6Qyx5QkFBeUIsQ0FBQyxDQUFDO0NBQzNCLHFCQUFxQjtDQUNyQixvQkFBb0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLEdBQUcsVUFBVSxDQUFDO0NBQzNELG9CQUFvQixJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsR0FBRyxZQUFZLENBQUM7Q0FDL0Qsb0JBQW9CLE1BQU0sUUFBUSxHQUFHLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUNyRSxvQkFBb0IsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQztDQUMvQyxvQkFBb0IsTUFBTSxPQUFPLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxJQUFJLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSTtDQUN0RSwwQkFBMEIsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJO0NBQzNDLDBCQUEwQixTQUFTLENBQUM7Q0FDcEMsb0JBQW9CLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztDQUNqRCxvQkFBb0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLEdBQUcsRUFBRSxDQUFDO0NBQ3RELG9CQUFvQixJQUFJLGtCQUFrQixDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUU7Q0FDdkQsd0JBQXdCLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztDQUNyRCw0QkFBNEIsRUFBRSxFQUFFLElBQUk7Q0FDcEMsNEJBQTRCLFNBQVMsRUFBRSxPQUFPO0NBQzlDLDRCQUE0QixLQUFLLEVBQUUsa0JBQWtCLENBQUMsSUFBSSxDQUFDLEtBQUs7Q0FDaEUseUJBQXlCLENBQUMsQ0FBQztDQUMzQixxQkFBcUI7Q0FDckIsb0JBQW9CLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtDQUNyQyx3QkFBd0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO0NBQ3JELDRCQUE0QixFQUFFLEVBQUUsSUFBSTtDQUNwQyw0QkFBNEIsU0FBUyxFQUFFLE1BQU07Q0FDN0MsNEJBQTRCLEtBQUssRUFBRSxDQUFDLEVBQUUsUUFBUSxJQUFJLEdBQUcsQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7Q0FDbEUseUJBQXlCLENBQUMsQ0FBQztDQUMzQixxQkFBcUI7Q0FDckIsb0JBQW9CLElBQUksT0FBTyxFQUFFO0NBQ2pDLHdCQUF3QixJQUFJLGtCQUFrQixDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUU7Q0FDM0QsNEJBQTRCLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztDQUN6RCxnQ0FBZ0MsRUFBRSxFQUFFLE9BQU87Q0FDM0MsZ0NBQWdDLFNBQVMsRUFBRSxPQUFPO0NBQ2xELGdDQUFnQyxLQUFLLEVBQUUsa0JBQWtCLENBQUMsSUFBSSxDQUFDLEtBQUs7Q0FDcEUsNkJBQTZCLENBQUMsQ0FBQztDQUMvQix5QkFBeUI7Q0FDekIsd0JBQXdCLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtDQUN6Qyw0QkFBNEIsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO0NBQ3pELGdDQUFnQyxFQUFFLEVBQUUsT0FBTztDQUMzQyxnQ0FBZ0MsU0FBUyxFQUFFLE1BQU07Q0FDakQsZ0NBQWdDLEtBQUssRUFBRSxDQUFDLEVBQUUsUUFBUSxJQUFJLEdBQUcsQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7Q0FDdEUsNkJBQTZCLENBQUMsQ0FBQztDQUMvQix5QkFBeUI7Q0FDekI7Q0FDQSx3QkFBd0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDO0NBQzFELDRCQUE0QixTQUFTLEVBQUUsS0FBSztDQUM1Qyw0QkFBNEIsS0FBSyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0NBQ3ZELHlCQUF5QixDQUFDLENBQUM7Q0FDM0IscUJBQXFCO0NBQ3JCLG9CQUFvQixNQUFNO0NBQzFCLGlCQUFpQjtDQUNqQixZQUFZLEtBQUssYUFBYTtDQUM5QixnQkFBZ0I7Q0FDaEI7Q0FDQSxvQkFBb0IsSUFBSSxDQUFDLGtCQUFrQixFQUFFO0NBQzdDLHdCQUF3QixJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsR0FBRyxvQkFBb0IsQ0FBQztDQUMxRSx3QkFBd0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLEdBQUcsY0FBYyxDQUFDLElBQUksQ0FBQztDQUN6RSx3QkFBd0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxjQUFjLEdBQUcsY0FBYyxDQUFDLGNBQWMsQ0FBQztDQUN6RixxQkFBcUI7Q0FDckI7Q0FDQSx5QkFBeUI7Q0FDekIsd0JBQXdCLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxHQUFHLGNBQWMsQ0FBQyxJQUFJLENBQUM7Q0FDekUsd0JBQXdCLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTztDQUNqRCw0QkFBNEI7Q0FDNUIsZ0NBQWdDLEdBQUcsRUFBRSxvQkFBb0I7Q0FDekQsZ0NBQWdDLGFBQWEsRUFBRSxjQUFjLENBQUMsSUFBSTtDQUNsRSxnQ0FBZ0MsY0FBYyxFQUFFLGNBQWMsQ0FBQyxjQUFjO0NBQzdFLDZCQUE2QixDQUFDO0NBQzlCLHFCQUFxQjtDQUNyQixvQkFBb0IsTUFBTTtDQUMxQixpQkFBaUI7Q0FDakIsU0FBUztDQUNULEtBQUs7Q0FDTDtDQUNBLElBQUksV0FBVyxDQUFDLElBQUksRUFBRTtDQUN0QjtDQUNBLFFBQVEsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLEdBQUcsU0FBUyxDQUFDO0NBQzVDLEtBQUs7Q0FDTCxJQUFJLFlBQVksQ0FBQyxFQUFFLGtCQUFrQixFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsRUFBRTtDQUM1RCxRQUFRLE1BQU0sUUFBUSxHQUFHLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUN6RCxRQUFRLE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUM7Q0FDbkMsUUFBUSxNQUFNLE9BQU8sR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLElBQUksUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJO0NBQzFELGNBQWMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJO0NBQy9CLGNBQWMsU0FBUyxDQUFDO0NBQ3hCLFFBQVEsSUFBSSxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFO0NBQzNDLFlBQVksSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO0NBQ3pDLGdCQUFnQixFQUFFLEVBQUUsSUFBSTtDQUN4QixnQkFBZ0IsU0FBUyxFQUFFLE9BQU87Q0FDbEMsZ0JBQWdCLEtBQUssRUFBRSxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsS0FBSztDQUNwRCxhQUFhLENBQUMsQ0FBQztDQUNmLFNBQVM7Q0FDVCxRQUFRLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztDQUNyQyxZQUFZLEVBQUUsRUFBRSxJQUFJO0NBQ3BCLFlBQVksU0FBUyxFQUFFLE1BQU07Q0FDN0IsWUFBWSxLQUFLLEVBQUUsQ0FBQyxFQUFFLFFBQVEsSUFBSSxHQUFHLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0NBQ2xELFNBQVMsQ0FBQyxDQUFDO0NBQ1gsUUFBUSxJQUFJLE9BQU8sRUFBRTtDQUNyQixZQUFZLElBQUksa0JBQWtCLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRTtDQUMvQyxnQkFBZ0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO0NBQzdDLG9CQUFvQixFQUFFLEVBQUUsT0FBTztDQUMvQixvQkFBb0IsU0FBUyxFQUFFLE9BQU87Q0FDdEMsb0JBQW9CLEtBQUssRUFBRSxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsS0FBSztDQUN4RCxpQkFBaUIsQ0FBQyxDQUFDO0NBQ25CLGFBQWE7Q0FDYixZQUFZLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztDQUN6QyxnQkFBZ0IsRUFBRSxFQUFFLE9BQU87Q0FDM0IsZ0JBQWdCLFNBQVMsRUFBRSxNQUFNO0NBQ2pDLGdCQUFnQixLQUFLLEVBQUUsQ0FBQyxFQUFFLFFBQVEsSUFBSSxHQUFHLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0NBQ3RELGFBQWEsQ0FBQyxDQUFDO0NBQ2Y7Q0FDQSxZQUFZLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQztDQUM5QyxnQkFBZ0IsU0FBUyxFQUFFLEtBQUs7Q0FDaEMsZ0JBQWdCLEtBQUssRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztDQUMzQyxhQUFhLENBQUMsQ0FBQztDQUNmLFNBQVM7Q0FDVCxLQUFLO0NBQ0wsSUFBSSxrQkFBa0IsQ0FBQyxFQUFFLGtCQUFrQixFQUFFLEVBQUU7Q0FDL0MsUUFBUSxNQUFNLFFBQVEsR0FBRyxrQkFBa0IsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDekQsUUFBUSxNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDO0NBQ25DLFFBQVEsTUFBTSxPQUFPLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxJQUFJLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSTtDQUMxRCxjQUFjLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSTtDQUMvQixjQUFjLFNBQVMsQ0FBQztDQUN4QixRQUFRLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSztDQUN6RCxhQUFhLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxLQUFLLElBQUksSUFBSSxDQUFDLENBQUMsRUFBRSxLQUFLLE9BQU8sQ0FBQyxDQUFDO0NBQzlELFFBQVEsSUFBSSxPQUFPLEVBQUU7Q0FDckIsWUFBWSxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVU7Q0FDdkUsaUJBQWlCLE1BQU0sQ0FBQyxDQUFDLEtBQUssS0FBSyxLQUFLLENBQUMsS0FBSyxLQUFLLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUN6RSxTQUFTO0NBQ1QsS0FBSztDQUNMLENBQUM7Q0FDRCx5QkFBeUIsR0FBRyxpQkFBaUIsQ0FBQztDQUM5QyxTQUFTLFlBQVksQ0FBQyxLQUFLLEVBQUU7Q0FDN0IsSUFBSSxNQUFNLGFBQWEsR0FBRyxJQUFJLE1BQU0sQ0FBQyxxQkFBcUIsRUFBRSxHQUFHLENBQUMsQ0FBQztDQUNqRSxJQUFJLE1BQU0sYUFBYSxHQUFHLGFBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0NBQzdELElBQUksSUFBSSxDQUFDLGFBQWE7Q0FDdEIsUUFBUSxNQUFNLElBQUksU0FBUyxDQUFDLHdCQUF3QixDQUFDLENBQUM7Q0FDdEQsSUFBSSxPQUFPLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUM1Qjs7Ozs7Ozs7O0FDbGRBLENBQ0EsTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7QUFDaEI7QUFDTDtBQUNRO0NBQ2pELE1BQU0sTUFBTSxHQUFHLElBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztDQUNoRCxNQUFNLFNBQVMsQ0FBQztDQUNoQixJQUFJLFdBQVcsQ0FBQyxFQUFFLGFBQWEsRUFBRSxhQUFhLEVBQUUsY0FBYyxFQUFFLGNBQWMsRUFBRSxrQkFBa0IsRUFBRSxLQUFLLEdBQUcsS0FBSyxFQUFFLEVBQUU7Q0FDckg7Q0FDQSxRQUFRLElBQUksQ0FBQyxjQUFjLEdBQUcsRUFBRSxDQUFDO0NBQ2pDO0NBQ0EsUUFBUSxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7Q0FDckMsUUFBUSxJQUFJLENBQUMsY0FBYyxHQUFHLGFBQWEsQ0FBQztDQUM1QyxRQUFRLElBQUksQ0FBQyxjQUFjLEdBQUcsYUFBYSxDQUFDO0NBQzVDLFFBQVEsSUFBSSxDQUFDLGVBQWUsR0FBRyxjQUFjLENBQUM7Q0FDOUMsUUFBUSxJQUFJLENBQUMsZUFBZSxHQUFHLGNBQWMsQ0FBQztDQUM5QyxRQUFRLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxrQkFBa0IsQ0FBQztDQUN0RCxRQUFRLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO0NBQzVCLFFBQVEsSUFBSSxDQUFDLFVBQVU7Q0FDdkIsWUFBWTtDQUNaLGdCQUFnQixPQUFPLEVBQUUsQ0FBQztDQUMxQixnQkFBZ0IsTUFBTSxFQUFFO0NBQ3hCLG9CQUFvQixPQUFPLEVBQUUsU0FBUztDQUN0QyxvQkFBb0IsS0FBSyxFQUFFLENBQUM7Q0FDNUIsb0JBQW9CLE9BQU8sRUFBRSxJQUFJO0NBQ2pDLG9CQUFvQixTQUFTLEVBQUUsS0FBSztDQUNwQyxvQkFBb0IsY0FBYyxFQUFFLENBQUM7Q0FDckMsb0JBQW9CLFFBQVEsRUFBRSxrQkFBa0I7Q0FDaEQsaUJBQWlCO0NBQ2pCLGdCQUFnQixJQUFJLEVBQUUsR0FBRztDQUN6QixnQkFBZ0IsTUFBTSxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFO0NBQzdDLGdCQUFnQixLQUFLLEVBQUUsRUFBRTtDQUN6QixhQUFhLENBQUM7Q0FDZDtDQUNBLFFBQVEsSUFBSSxhQUFhLElBQUksYUFBYSxDQUFDLE9BQU8sRUFBRTtDQUNwRCxZQUFZLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxHQUFHLFVBQVUsQ0FBQztDQUNqRCxTQUFTO0NBQ1Q7Q0FDQSxRQUFRLElBQUksY0FBYyxFQUFFO0NBQzVCLFlBQVksSUFBSSxDQUFDLFVBQVUsQ0FBQyxZQUFZLEdBQUcsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsQ0FBQztDQUMzRTtDQUNBLFlBQVksTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDO0NBQzdFLFlBQVksSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXO0NBQ3ZDLGdCQUFnQjtDQUNoQixvQkFBb0IsSUFBSSxFQUFFLGNBQWMsQ0FBQyxZQUFZLENBQUMsZUFBZSxHQUFHLENBQUMsQ0FBQyxDQUFDLFNBQVM7Q0FDcEYsb0JBQW9CLElBQUksRUFBRSxjQUFjLENBQUMsWUFBWSxDQUFDLGVBQWUsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLO0NBQ2hGLGlCQUFpQixDQUFDO0NBQ2xCLFlBQVksSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7Q0FDcEUsU0FBUztDQUNUO0NBQ0EsUUFBUSxJQUFJLGtCQUFrQixFQUFFO0NBQ2hDLFlBQVksSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsT0FBTyxHQUFHLGtCQUFrQixDQUFDLEVBQUUsQ0FBQztDQUNuRSxZQUFZLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRyxrQkFBa0IsQ0FBQyxTQUFTLENBQUM7Q0FDeEUsU0FBUztDQUNULEtBQUs7Q0FDTCxJQUFJLG1CQUFtQixDQUFDLGFBQWEsRUFBRTtDQUN2QyxRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsMENBQTBDLEVBQUUsYUFBYSxDQUFDLENBQUM7Q0FDaEYsUUFBUSxJQUFJLENBQUMsY0FBYyxHQUFHLGFBQWEsQ0FBQztDQUM1QyxRQUFRLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxHQUFHLGFBQWEsQ0FBQyxPQUFPLEdBQUcsVUFBVSxHQUFHLFNBQVMsQ0FBQztDQUNqRixRQUFRLEtBQUssTUFBTSxZQUFZLElBQUksSUFBSSxDQUFDLGNBQWMsRUFBRTtDQUN4RCxZQUFZLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLENBQUMsQ0FBQztDQUN6RCxTQUFTO0NBQ1QsS0FBSztDQUNMLElBQUksY0FBYyxDQUFDLElBQUksRUFBRTtDQUN6QixRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsNEJBQTRCLEVBQUUsSUFBSSxDQUFDLENBQUM7Q0FDekQsUUFBUSxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7Q0FDekMsUUFBUSxLQUFLLE1BQU0sWUFBWSxJQUFJLElBQUksQ0FBQyxjQUFjLEVBQUU7Q0FDeEQsWUFBWSxZQUFZLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0NBQzNDLFNBQVM7Q0FDVCxLQUFLO0NBQ0wsSUFBSSxzQkFBc0IsR0FBRztDQUM3QjtDQUNBLFFBQVEsS0FBSyxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLEVBQUUsR0FBRyxFQUFFO0NBQ25FLFlBQVksTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUMxRCxZQUFZLElBQUksWUFBWSxDQUFDLE1BQU07Q0FDbkMsZ0JBQWdCLE9BQU8sRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLFlBQVksQ0FBQyxHQUFHLEVBQUUsQ0FBQztDQUMzRCxTQUFTO0NBQ1Q7Q0FDQSxRQUFRLE9BQU8sRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztDQUNuRCxLQUFLO0NBQ0wsSUFBSSxJQUFJLENBQUMsRUFBRSxnQkFBZ0IsRUFBRSxRQUFRLEVBQUUsa0JBQWtCLEVBQUUsbUJBQW1CLEVBQUUsWUFBWSxFQUFFLGdCQUFnQixHQUFHLEtBQUssRUFBRSxFQUFFO0NBQzFILFFBQVEsTUFBTSxZQUFZLEdBQUcsSUFBSSxjQUFjLENBQUMsa0JBQWtCLENBQUM7Q0FDbkUsWUFBWSxhQUFhLEVBQUUsSUFBSSxDQUFDLGNBQWM7Q0FDOUMsWUFBWSxhQUFhLEVBQUUsSUFBSSxDQUFDLGNBQWM7Q0FDOUMsWUFBWSxjQUFjLEVBQUUsSUFBSSxDQUFDLGVBQWU7Q0FDaEQsWUFBWSxrQkFBa0IsRUFBRSxJQUFJLENBQUMsbUJBQW1CO0NBQ3hELFlBQVksS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNO0NBQzlCLFlBQVksZ0JBQWdCO0NBQzVCLFlBQVksa0JBQWtCO0NBQzlCLFlBQVksbUJBQW1CO0NBQy9CLFlBQVksWUFBWTtDQUN4QixZQUFZLGdCQUFnQjtDQUM1QixTQUFTLENBQUMsQ0FBQztDQUNYO0NBQ0EsUUFBUSxJQUFJLFFBQVEsRUFBRTtDQUN0QixZQUFZLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxZQUFZLEVBQUUsUUFBUSxDQUFDLENBQUM7Q0FDOUQsU0FBUztDQUNUO0NBQ0EsYUFBYSxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxFQUFFO0NBQzFELFlBQVksSUFBSSxDQUFDLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxDQUFDO0NBQ2hELFNBQVM7Q0FDVDtDQUNBLGFBQWE7Q0FDYixZQUFZLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxZQUFZLENBQUMsQ0FBQztDQUNwRCxTQUFTO0NBQ1QsS0FBSztDQUNMLElBQUksT0FBTyxDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxrQkFBa0IsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLEVBQUU7Q0FDbEUsUUFBUSxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUM5QyxRQUFRLElBQUksWUFBWSxDQUFDO0NBQ3pCLFFBQVEsSUFBSSxHQUFHLEtBQUssU0FBUztDQUM3QixZQUFZLFlBQVksR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQ3BEO0NBQ0EsUUFBUSxJQUFJLENBQUMsWUFBWSxFQUFFO0NBQzNCLFlBQVksWUFBWSxHQUFHLElBQUksY0FBYyxDQUFDLGlCQUFpQixDQUFDO0NBQ2hFLGdCQUFnQixhQUFhLEVBQUUsSUFBSSxDQUFDLGNBQWM7Q0FDbEQsZ0JBQWdCLGFBQWEsRUFBRSxJQUFJLENBQUMsY0FBYztDQUNsRCxnQkFBZ0IsY0FBYyxFQUFFLElBQUksQ0FBQyxlQUFlO0NBQ3BELGdCQUFnQixrQkFBa0IsRUFBRSxJQUFJLENBQUMsbUJBQW1CO0NBQzVELGdCQUFnQixLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU07Q0FDbEMsZ0JBQWdCLEdBQUc7Q0FDbkIsZ0JBQWdCLElBQUk7Q0FDcEIsZ0JBQWdCLGtCQUFrQjtDQUNsQyxnQkFBZ0IsUUFBUTtDQUN4QixnQkFBZ0IsT0FBTztDQUN2QixhQUFhLENBQUMsQ0FBQztDQUNmLFlBQVksSUFBSSxDQUFDLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxDQUFDO0NBQ2hELFNBQVM7Q0FDVDtDQUNBLGFBQWE7Q0FDYixZQUFZLFlBQVksQ0FBQyxZQUFZLENBQUMsRUFBRSxrQkFBa0IsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztDQUNqRixZQUFZLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxZQUFZLENBQUMsQ0FBQztDQUNwRCxTQUFTO0NBQ1QsS0FBSztDQUNMLElBQUksbUJBQW1CLENBQUMsR0FBRyxFQUFFO0NBQzdCLFFBQVEsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDOUMsUUFBUSxJQUFJLEdBQUcsS0FBSyxTQUFTLEVBQUU7Q0FDL0IsWUFBWSxNQUFNLElBQUksS0FBSyxDQUFDLENBQUMsaUNBQWlDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDeEUsU0FBUztDQUNULFFBQVEsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUN0RCxRQUFRLFlBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQztDQUMvQixLQUFLO0NBQ0wsSUFBSSxpQkFBaUIsQ0FBQyxHQUFHLEVBQUU7Q0FDM0IsUUFBUSxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUM5QyxRQUFRLElBQUksR0FBRyxLQUFLLFNBQVMsRUFBRTtDQUMvQixZQUFZLE1BQU0sSUFBSSxLQUFLLENBQUMsQ0FBQyxpQ0FBaUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUN4RSxTQUFTO0NBQ1QsUUFBUSxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQ3REO0NBQ0E7Q0FDQSxRQUFRLElBQUksR0FBRyxLQUFLLElBQUksQ0FBQyxTQUFTLEVBQUU7Q0FDcEMsWUFBWSxNQUFNLENBQUMsS0FBSyxDQUFDLHVGQUF1RixFQUFFLEdBQUcsQ0FBQyxDQUFDO0NBQ3ZILFlBQVksSUFBSSxDQUFDLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQzFDLFlBQVksT0FBTztDQUNuQixTQUFTO0NBQ1QsUUFBUSxZQUFZLENBQUMsS0FBSyxFQUFFLENBQUM7Q0FDN0I7Q0FDQSxRQUFRLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO0NBQ3JDLEtBQUs7Q0FDTCxJQUFJLGtCQUFrQixDQUFDLEVBQUUsR0FBRyxFQUFFLGtCQUFrQixFQUFFLEVBQUU7Q0FDcEQsUUFBUSxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUM5QyxRQUFRLElBQUksR0FBRyxLQUFLLFNBQVMsRUFBRTtDQUMvQixZQUFZLE1BQU0sSUFBSSxLQUFLLENBQUMsQ0FBQyxpQ0FBaUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUN4RSxTQUFTO0NBQ1QsUUFBUSxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQ3RELFFBQVEsWUFBWSxDQUFDLGtCQUFrQixDQUFDLEVBQUUsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDO0NBQ2hFLFFBQVEsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFlBQVksQ0FBQyxDQUFDO0NBQ2hELEtBQUs7Q0FDTCxJQUFJLG1CQUFtQixDQUFDLEVBQUUsZ0JBQWdCLEVBQUUsRUFBRTtDQUM5QyxRQUFRLE1BQU0sWUFBWSxHQUFHLElBQUksY0FBYyxDQUFDLGtCQUFrQixDQUFDO0NBQ25FLFlBQVksYUFBYSxFQUFFLElBQUksQ0FBQyxjQUFjO0NBQzlDLFlBQVksYUFBYSxFQUFFLElBQUksQ0FBQyxjQUFjO0NBQzlDLFlBQVksY0FBYyxFQUFFLElBQUksQ0FBQyxlQUFlO0NBQ2hELFlBQVksY0FBYyxFQUFFLElBQUksQ0FBQyxlQUFlO0NBQ2hELFlBQVksa0JBQWtCLEVBQUUsSUFBSSxDQUFDLG1CQUFtQjtDQUN4RCxZQUFZLGdCQUFnQjtDQUM1QixTQUFTLENBQUMsQ0FBQztDQUNYLFFBQVEsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxDQUFDO0NBQzVDLEtBQUs7Q0FDTCxJQUFJLHNCQUFzQixDQUFDLEVBQUUsa0JBQWtCLEdBQUcsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFO0NBQ2hFLFFBQVEsTUFBTSxZQUFZLEdBQUcsSUFBSSxjQUFjLENBQUMsaUJBQWlCLENBQUM7Q0FDbEUsWUFBWSxhQUFhLEVBQUUsSUFBSSxDQUFDLGNBQWM7Q0FDOUMsWUFBWSxhQUFhLEVBQUUsSUFBSSxDQUFDLGNBQWM7Q0FDOUMsWUFBWSxjQUFjLEVBQUUsSUFBSSxDQUFDLGVBQWU7Q0FDaEQsWUFBWSxjQUFjLEVBQUUsSUFBSSxDQUFDLGVBQWU7Q0FDaEQsWUFBWSxrQkFBa0IsRUFBRSxJQUFJLENBQUMsbUJBQW1CO0NBQ3hELFlBQVksR0FBRyxFQUFFLGFBQWE7Q0FDOUIsWUFBWSxJQUFJLEVBQUUsYUFBYTtDQUMvQixZQUFZLGtCQUFrQjtDQUM5QixTQUFTLENBQUMsQ0FBQztDQUNYLFFBQVEsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxDQUFDO0NBQzVDLEtBQUs7Q0FDTCxJQUFJLE1BQU0sR0FBRztDQUNiO0NBQ0EsUUFBUSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxjQUFjLEVBQUUsQ0FBQztDQUNoRCxRQUFRLE9BQU9BLEtBQVksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0NBQ25ELEtBQUs7Q0FDTCxJQUFJLGdCQUFnQixDQUFDLGVBQWUsRUFBRTtDQUN0QyxRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUztDQUMzQixZQUFZLElBQUksQ0FBQyxTQUFTLEdBQUcsZUFBZSxDQUFDLEdBQUcsQ0FBQztDQUNqRDtDQUNBLFFBQVEsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7Q0FDbEQ7Q0FDQSxRQUFRLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7Q0FDbEY7Q0FDQSxRQUFRLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztDQUNoRTtDQUNBLFFBQVEsSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7Q0FDckMsS0FBSztDQUNMLElBQUksb0JBQW9CLENBQUMsZUFBZSxFQUFFLFFBQVEsRUFBRTtDQUNwRDtDQUNBLFFBQVEsSUFBSSxPQUFPLFFBQVEsS0FBSyxRQUFRLEVBQUU7Q0FDMUMsWUFBWSxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztDQUN2RCxZQUFZLElBQUksR0FBRyxLQUFLLFNBQVMsRUFBRTtDQUNuQyxnQkFBZ0IsTUFBTSxJQUFJLEtBQUssQ0FBQyxDQUFDLHFDQUFxQyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ3JGLGFBQWE7Q0FDYixZQUFZLE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDN0Q7Q0FDQSxZQUFZLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLEdBQUcsZUFBZSxDQUFDO0NBQ3ZEO0NBQ0EsWUFBWSxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDekQsWUFBWSxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0NBQzNEO0NBQ0EsWUFBWSxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxlQUFlLENBQUMsU0FBUyxFQUFFLENBQUM7Q0FDckU7Q0FDQSxZQUFZLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO0NBQ3pDLFNBQVM7Q0FDVCxhQUFhO0NBQ2IsWUFBWSxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDbEUsWUFBWSxJQUFJLEdBQUcsS0FBSyxTQUFTLEVBQUU7Q0FDbkMsZ0JBQWdCLE1BQU0sSUFBSSxLQUFLLENBQUMsQ0FBQyxpQ0FBaUMsRUFBRSxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDNUYsYUFBYTtDQUNiO0NBQ0EsWUFBWSxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxHQUFHLGVBQWUsQ0FBQztDQUN2RDtDQUNBLFlBQVksSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsZUFBZSxDQUFDLFNBQVMsRUFBRSxDQUFDO0NBQ3JFLFNBQVM7Q0FDVCxLQUFLO0NBQ0wsSUFBSSxxQkFBcUIsR0FBRztDQUM1QixRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZTtDQUNqQyxZQUFZLE9BQU87Q0FDbkIsUUFBUSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLGNBQWM7Q0FDNUQsYUFBYSxNQUFNLENBQUMsQ0FBQyxZQUFZLEtBQUssQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDO0NBQzNELGFBQWEsR0FBRyxDQUFDLENBQUMsWUFBWSxLQUFLLFlBQVksQ0FBQyxHQUFHLENBQUM7Q0FDcEQsYUFBYSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDdkIsS0FBSztDQUNMLENBQUM7Q0FDRCxpQkFBaUIsR0FBRyxTQUFTOzs7Ozs7O0FDdFA3QixDQUNBLE1BQU0sQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0NBQzlELE1BQU0sb0JBQW9CLEdBQUcsSUFBSSxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztDQUNoRixTQUFTLEtBQUssQ0FBQyxlQUFlLEVBQUU7Q0FDaEMsSUFBSSxNQUFNLEtBQUssR0FBRyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsZUFBZSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0NBQ25FLElBQUksSUFBSSxLQUFLLEVBQUU7Q0FDZixRQUFRLE9BQU87Q0FDZixZQUFZLGFBQWEsRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQzNDLFlBQVksY0FBYyxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDNUMsU0FBUyxDQUFDO0NBQ1YsS0FBSztDQUNMLFNBQVM7Q0FDVCxRQUFRLE9BQU87Q0FDZixZQUFZLGFBQWEsRUFBRSxDQUFDO0NBQzVCLFlBQVksY0FBYyxFQUFFLENBQUM7Q0FDN0IsU0FBUyxDQUFDO0NBQ1YsS0FBSztDQUNMLENBQUM7Q0FDRCxhQUFhLEdBQUcsS0FBSzs7Ozs7OztBQ2xCckIsQ0FDQSxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUNoQjtBQUNSO0FBQ0o7QUFDRjtBQUNvQjtBQUNVO0FBQ0w7QUFDVjtBQUNXO0NBQzFELE1BQU0sTUFBTSxHQUFHLElBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztDQUMvQyxNQUFNLGdCQUFnQixHQUFHLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUM7Q0FDakQsTUFBTSxRQUFRLFNBQVMsa0JBQWtCLENBQUMsZ0JBQWdCLENBQUM7Q0FDM0QsSUFBSSxXQUFXLEdBQUc7Q0FDbEIsUUFBUSxLQUFLLEVBQUUsQ0FBQztDQUNoQjtDQUNBLFFBQVEsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7Q0FDNUM7Q0FDQSxRQUFRLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQztDQUM3QztDQUNBLFFBQVEsSUFBSSxDQUFDLDJCQUEyQixHQUFHLEtBQUssQ0FBQztDQUNqRDtDQUNBLFFBQVEsSUFBSSxDQUFDLHFCQUFxQixHQUFHLENBQUMsQ0FBQztDQUN2QztDQUNBLFFBQVEsSUFBSSxDQUFDLGVBQWUsR0FBRyxLQUFLLENBQUM7Q0FDckMsS0FBSztDQUNMO0NBQ0E7Q0FDQTtDQUNBLElBQUksT0FBTyxhQUFhLEdBQUc7Q0FDM0IsUUFBUSxPQUFPLE1BQU0sSUFBSSxRQUFRLEVBQUUsQ0FBQztDQUNwQyxLQUFLO0NBQ0wsSUFBSSxJQUFJLElBQUksR0FBRztDQUNmLFFBQVEsT0FBTyxVQUFVLENBQUM7Q0FDMUIsS0FBSztDQUNMLElBQUksS0FBSyxHQUFHO0NBQ1osUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0NBQ2hDO0NBQ0EsUUFBUSxJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUU7Q0FDdEIsWUFBWSxJQUFJO0NBQ2hCLGdCQUFnQixJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO0NBQ2pDLGFBQWE7Q0FDYixZQUFZLE9BQU8sS0FBSyxFQUFFLEdBQUc7Q0FDN0IsU0FBUztDQUNULEtBQUs7Q0FDTCxJQUFJLE1BQU0sd0JBQXdCLEdBQUc7Q0FDckMsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLDRCQUE0QixDQUFDLENBQUM7Q0FDbkQsUUFBUSxNQUFNLEVBQUUsR0FBRyxJQUFJLGlCQUFpQixDQUFDO0NBQ3pDLFlBQVksVUFBVSxFQUFFLEVBQUU7Q0FDMUIsWUFBWSxrQkFBa0IsRUFBRSxLQUFLO0NBQ3JDLFlBQVksWUFBWSxFQUFFLFlBQVk7Q0FDdEMsWUFBWSxhQUFhLEVBQUUsU0FBUztDQUNwQyxZQUFZLFlBQVksRUFBRSxjQUFjO0NBQ3hDLFNBQVMsQ0FBQyxDQUFDO0NBQ1gsUUFBUSxJQUFJO0NBQ1osWUFBWSxFQUFFLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0NBQ3ZDLFlBQVksRUFBRSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztDQUN2QyxZQUFZLE1BQU0sS0FBSyxHQUFHLE1BQU0sRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDO0NBQ2pELFlBQVksSUFBSTtDQUNoQixnQkFBZ0IsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0NBQzNCLGFBQWE7Q0FDYixZQUFZLE9BQU8sS0FBSyxFQUFFLEdBQUc7Q0FDN0IsWUFBWSxNQUFNLFNBQVMsR0FBR0EsS0FBWSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDNUQsWUFBWSxNQUFNLHFCQUFxQixHQUFHQyxXQUFjLENBQUMsc0JBQXNCLENBQUMsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDO0NBQy9GLFlBQVksT0FBTyxxQkFBcUIsQ0FBQztDQUN6QyxTQUFTO0NBQ1QsUUFBUSxPQUFPLEtBQUssRUFBRTtDQUN0QixZQUFZLElBQUk7Q0FDaEIsZ0JBQWdCLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztDQUMzQixhQUFhO0NBQ2IsWUFBWSxPQUFPLE1BQU0sRUFBRSxHQUFHO0NBQzlCLFlBQVksTUFBTSxLQUFLLENBQUM7Q0FDeEIsU0FBUztDQUNULEtBQUs7Q0FDTCxJQUFJLE1BQU0seUJBQXlCLEdBQUc7Q0FDdEMsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLDZCQUE2QixDQUFDLENBQUM7Q0FDcEQsUUFBUSxPQUFPO0NBQ2YsWUFBWSxVQUFVLEVBQUUsZ0JBQWdCO0NBQ3hDLFNBQVMsQ0FBQztDQUNWLEtBQUs7Q0FDTCxJQUFJLEdBQUcsQ0FBQyxFQUFFLFNBQVMsRUFBRSxhQUFhLEVBQUUsYUFBYSxFQUFFLGNBQWMsRUFBRSxjQUFjLEVBQUUsVUFBVSxFQUFFLGtCQUFrQixFQUFFLGtCQUFrQixFQUFFLHNCQUFzQixFQUFFLHVCQUF1QixFQUFFLEVBQUU7Q0FDMUwsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0NBQzlCLFFBQVEsSUFBSSxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUM7Q0FDcEMsUUFBUSxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksV0FBVyxDQUFDLFNBQVMsQ0FBQztDQUNwRCxZQUFZLGFBQWE7Q0FDekIsWUFBWSxhQUFhO0NBQ3pCLFlBQVksY0FBYztDQUMxQixZQUFZLGNBQWM7Q0FDMUIsU0FBUyxDQUFDLENBQUM7Q0FDWCxRQUFRLElBQUksQ0FBQywyQkFBMkI7Q0FDeEMsWUFBWTtDQUNaLGdCQUFnQixLQUFLLEVBQUUsSUFBSSxDQUFDLHVCQUF1QixDQUFDLE9BQU8sRUFBRSx1QkFBdUIsQ0FBQztDQUNyRixnQkFBZ0IsS0FBSyxFQUFFLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxPQUFPLEVBQUUsdUJBQXVCLENBQUM7Q0FDckYsYUFBYSxDQUFDO0NBQ2QsUUFBUSxJQUFJLENBQUMsaUNBQWlDO0NBQzlDLFlBQVk7Q0FDWixnQkFBZ0IsS0FBSyxFQUFFLElBQUksQ0FBQyw2QkFBNkIsQ0FBQyxPQUFPLEVBQUUsdUJBQXVCLENBQUM7Q0FDM0YsZ0JBQWdCLEtBQUssRUFBRSxJQUFJLENBQUMsNkJBQTZCLENBQUMsT0FBTyxFQUFFLHVCQUF1QixDQUFDO0NBQzNGLGFBQWEsQ0FBQztDQUNkLFFBQVEsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLGlCQUFpQixDQUFDO0NBQ3pDLFlBQVksVUFBVSxFQUFFLFVBQVUsSUFBSSxFQUFFO0NBQ3hDLFlBQVksa0JBQWtCLEVBQUUsa0JBQWtCLElBQUksS0FBSztDQUMzRCxZQUFZLFlBQVksRUFBRSxZQUFZO0NBQ3RDLFlBQVksYUFBYSxFQUFFLFNBQVM7Q0FDcEMsWUFBWSxZQUFZLEVBQUUsY0FBYztDQUN4QyxZQUFZLEdBQUcsa0JBQWtCO0NBQ2pDLFNBQVMsRUFBRSxzQkFBc0IsQ0FBQyxDQUFDO0NBQ25DO0NBQ0EsUUFBUSxJQUFJLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLDBCQUEwQixFQUFFLE1BQU07Q0FDcEUsWUFBWSxRQUFRLElBQUksQ0FBQyxHQUFHLENBQUMsa0JBQWtCO0NBQy9DLGdCQUFnQixLQUFLLFVBQVU7Q0FDL0Isb0JBQW9CLElBQUksQ0FBQyxJQUFJLENBQUMsd0JBQXdCLEVBQUUsWUFBWSxDQUFDLENBQUM7Q0FDdEUsb0JBQW9CLE1BQU07Q0FDMUIsZ0JBQWdCLEtBQUssV0FBVyxDQUFDO0NBQ2pDLGdCQUFnQixLQUFLLFdBQVc7Q0FDaEMsb0JBQW9CLElBQUksQ0FBQyxJQUFJLENBQUMsd0JBQXdCLEVBQUUsV0FBVyxDQUFDLENBQUM7Q0FDckUsb0JBQW9CLE1BQU07Q0FDMUIsZ0JBQWdCLEtBQUssUUFBUTtDQUM3QixvQkFBb0IsSUFBSSxDQUFDLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxRQUFRLENBQUMsQ0FBQztDQUNsRSxvQkFBb0IsTUFBTTtDQUMxQixnQkFBZ0IsS0FBSyxjQUFjO0NBQ25DLG9CQUFvQixJQUFJLENBQUMsSUFBSSxDQUFDLHdCQUF3QixFQUFFLGNBQWMsQ0FBQyxDQUFDO0NBQ3hFLG9CQUFvQixNQUFNO0NBQzFCLGdCQUFnQixLQUFLLFFBQVE7Q0FDN0Isb0JBQW9CLElBQUksQ0FBQyxJQUFJLENBQUMsd0JBQXdCLEVBQUUsUUFBUSxDQUFDLENBQUM7Q0FDbEUsb0JBQW9CLE1BQU07Q0FDMUIsYUFBYTtDQUNiLFNBQVMsQ0FBQyxDQUFDO0NBQ1gsS0FBSztDQUNMLElBQUksTUFBTSxnQkFBZ0IsQ0FBQyxVQUFVLEVBQUU7Q0FDdkMsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLG9CQUFvQixDQUFDLENBQUM7Q0FDM0MsUUFBUSxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLENBQUM7Q0FDMUQsUUFBUSxhQUFhLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztDQUM5QyxRQUFRLElBQUksQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxDQUFDLENBQUM7Q0FDakQsS0FBSztDQUNMLElBQUksTUFBTSxVQUFVLENBQUMsYUFBYSxFQUFFO0NBQ3BDLFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQztDQUNyQztDQUNBLFFBQVEsSUFBSSxDQUFDLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxhQUFhLENBQUMsQ0FBQztDQUMzRCxRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZTtDQUNqQyxZQUFZLE9BQU87Q0FDbkIsUUFBUSxJQUFJLElBQUksQ0FBQyxVQUFVLEtBQUssTUFBTSxFQUFFO0NBQ3hDLFlBQVksTUFBTSxLQUFLLEdBQUcsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0NBQzNFLFlBQVksTUFBTSxDQUFDLEtBQUssQ0FBQyw0REFBNEQsRUFBRSxLQUFLLENBQUMsQ0FBQztDQUM5RixZQUFZLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztDQUN0RCxZQUFZLE1BQU0sTUFBTSxHQUFHLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDO0NBQzdFLFlBQVksTUFBTSxDQUFDLEtBQUssQ0FBQyw4REFBOEQsRUFBRSxNQUFNLENBQUMsQ0FBQztDQUNqRyxZQUFZLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztDQUN4RCxTQUFTO0NBQ1QsYUFBYTtDQUNiLFlBQVksTUFBTSxLQUFLLEdBQUcsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUM7Q0FDM0UsWUFBWSxNQUFNLENBQUMsS0FBSyxDQUFDLDZEQUE2RCxFQUFFLEtBQUssQ0FBQyxDQUFDO0NBQy9GLFlBQVksTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxDQUFDO0NBQ3ZELFlBQVksTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxDQUFDO0NBQ3pELFlBQVksTUFBTSxDQUFDLEtBQUssQ0FBQyw2REFBNkQsRUFBRSxNQUFNLENBQUMsQ0FBQztDQUNoRyxZQUFZLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztDQUN2RCxTQUFTO0NBQ1QsS0FBSztDQUNMLElBQUksTUFBTSxpQkFBaUIsR0FBRztDQUM5QixRQUFRLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztDQUNuQyxLQUFLO0NBQ0wsSUFBSSxNQUFNLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxFQUFFO0NBQzFELFFBQVEsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7Q0FDcEMsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLCtCQUErQixFQUFFLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0NBQzVFLFFBQVEsSUFBSSxTQUFTLElBQUksU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7Q0FDL0MsWUFBWSxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxFQUFFLEdBQUcsS0FBSztDQUNqRCxnQkFBZ0IsUUFBUSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO0NBQ3pDLGFBQWEsQ0FBQyxDQUFDO0NBQ2YsU0FBUztDQUNULFFBQVEsTUFBTSxvQkFBb0IsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztDQUMvRjtDQUNBLFFBQVEsb0JBQW9CLENBQUMsTUFBTTtDQUNuQyxZQUFZLElBQUksQ0FBQyxZQUFZLENBQUMsb0JBQW9CLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO0NBQ2xFLFFBQVEsTUFBTSwwQkFBMEIsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxpQ0FBaUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztDQUMzRztDQUNBLFFBQVEsMEJBQTBCLENBQUMsTUFBTTtDQUN6QyxZQUFZLElBQUksQ0FBQyxZQUFZLENBQUMsMEJBQTBCLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO0NBQ3hFLFFBQVEsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO0NBQ3pFLFFBQVEsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFO0NBQzNELFlBQVksU0FBUyxFQUFFLFVBQVU7Q0FDakMsWUFBWSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDO0NBQ3ZDLFlBQVksYUFBYSxFQUFFLFNBQVM7Q0FDcEMsU0FBUyxDQUFDLENBQUM7Q0FDWCxRQUFRLElBQUksS0FBSyxHQUFHLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztDQUNqRCxRQUFRLElBQUksY0FBYyxHQUFHRCxLQUFZLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUMzRCxRQUFRLElBQUksZ0JBQWdCLENBQUM7Q0FDN0IsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWU7Q0FDakMsWUFBWSxNQUFNLElBQUksQ0FBQyxlQUFlLENBQUMsRUFBRSxhQUFhLEVBQUUsUUFBUSxFQUFFLGNBQWMsRUFBRSxDQUFDLENBQUM7Q0FDcEY7Q0FDQSxRQUFRLElBQUksVUFBVSxHQUFHLEtBQUssQ0FBQztDQUMvQixRQUFRLE1BQU0sTUFBTSxHQUFHRSxnQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxTQUFTLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQztDQUN4RixRQUFRLElBQUksU0FBUztDQUNyQixZQUFZLFNBQVMsQ0FBQyxNQUFNLEtBQUssQ0FBQztDQUNsQyxZQUFZLE1BQU0sQ0FBQyxhQUFhLEdBQUcsQ0FBQztDQUNwQyxZQUFZLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLEtBQUssV0FBVyxFQUFFO0NBQ25GLFlBQVksTUFBTSxDQUFDLEtBQUssQ0FBQyxnREFBZ0QsQ0FBQyxDQUFDO0NBQzNFLFlBQVksVUFBVSxHQUFHLElBQUksQ0FBQztDQUM5QixZQUFZLGNBQWMsR0FBR0YsS0FBWSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDM0QsWUFBWSxnQkFBZ0IsR0FBRyxjQUFjLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUN6RSxZQUFZRyxnQkFBbUIsQ0FBQyxrQkFBa0IsQ0FBQztDQUNuRCxnQkFBZ0IsZ0JBQWdCO0NBQ2hDLGdCQUFnQixVQUFVLEVBQUUsTUFBTSxDQUFDLGFBQWE7Q0FDaEQsYUFBYSxDQUFDLENBQUM7Q0FDZixZQUFZLEtBQUssR0FBRyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFSCxLQUFZLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUM7Q0FDL0UsU0FBUztDQUNULFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyxzREFBc0QsRUFBRSxLQUFLLENBQUMsQ0FBQztDQUNwRixRQUFRLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztDQUNsRDtDQUNBLFFBQVEsTUFBTSxPQUFPLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQztDQUN4QztDQUNBLFFBQVEsb0JBQW9CLENBQUMsR0FBRyxHQUFHLE9BQU8sQ0FBQztDQUMzQyxRQUFRLGNBQWMsR0FBR0EsS0FBWSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQzNFLFFBQVEsZ0JBQWdCLEdBQUcsY0FBYyxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDckU7Q0FDQSxRQUFRLG9CQUFvQixDQUFDLElBQUksQ0FBQyxLQUFLO0NBQ3ZDLFlBQVlDLFdBQWMsQ0FBQyxRQUFRLENBQUMsRUFBRSxnQkFBZ0IsRUFBRSxDQUFDLENBQUM7Q0FDMUQ7Q0FDQSxRQUFRLElBQUksQ0FBQyxTQUFTLEVBQUU7Q0FDeEIsWUFBWSxvQkFBb0IsQ0FBQyxTQUFTO0NBQzFDLGdCQUFnQkUsZ0JBQW1CLENBQUMsZUFBZSxDQUFDLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDO0NBQzFFLFNBQVM7Q0FDVDtDQUNBO0NBQ0EsYUFBYSxJQUFJLFNBQVMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO0NBQ3pDLFlBQVksSUFBSSxZQUFZLEdBQUdBLGdCQUFtQixDQUFDLGVBQWUsQ0FBQyxFQUFFLGdCQUFnQixFQUFFLENBQUMsQ0FBQztDQUN6RixZQUFZLE1BQU0sQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ3pEO0NBQ0EsWUFBWSxJQUFJLFVBQVU7Q0FDMUIsZ0JBQWdCLFlBQVksR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ2pELFlBQVksb0JBQW9CLENBQUMsU0FBUyxHQUFHLFlBQVksQ0FBQztDQUMxRCxTQUFTO0NBQ1Q7Q0FDQSxhQUFhO0NBQ2IsWUFBWSxvQkFBb0IsQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO0NBQ3ZELFNBQVM7Q0FDVDtDQUNBO0NBQ0EsUUFBUSxJQUFJLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQztDQUNyRCxhQUFhLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLEtBQUssV0FBVztDQUNsRixnQkFBZ0Isb0JBQW9CLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsS0FBSyxZQUFZLENBQUMsRUFBRTtDQUN6RixZQUFZLEtBQUssTUFBTSxRQUFRLElBQUksb0JBQW9CLENBQUMsU0FBUyxFQUFFO0NBQ25FLGdCQUFnQixRQUFRLENBQUMsZUFBZSxHQUFHLE1BQU0sQ0FBQztDQUNsRCxhQUFhO0NBQ2IsU0FBUztDQUNULFFBQVEsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUM7Q0FDN0IsWUFBWSxnQkFBZ0I7Q0FDNUIsWUFBWSxRQUFRLEVBQUUsZUFBZSxDQUFDLFFBQVE7Q0FDOUMsWUFBWSxrQkFBa0IsRUFBRSxvQkFBb0I7Q0FDcEQsWUFBWSxtQkFBbUIsRUFBRSwwQkFBMEI7Q0FDM0QsWUFBWSxZQUFZO0NBQ3hCLFlBQVksZ0JBQWdCLEVBQUUsSUFBSTtDQUNsQyxTQUFTLENBQUMsQ0FBQztDQUNYLFFBQVEsTUFBTSxNQUFNLEdBQUcsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUM7Q0FDekUsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLHdEQUF3RCxFQUFFLE1BQU0sQ0FBQyxDQUFDO0NBQ3ZGLFFBQVEsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0NBQ3BEO0NBQ0EsUUFBUSxJQUFJLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxXQUFXLENBQUMsQ0FBQztDQUMxRCxRQUFRLE9BQU87Q0FDZixZQUFZLE9BQU87Q0FDbkIsWUFBWSxhQUFhLEVBQUUsb0JBQW9CO0NBQy9DLFlBQVksU0FBUyxFQUFFLFdBQVcsQ0FBQyxNQUFNO0NBQ3pDLFNBQVMsQ0FBQztDQUNWLEtBQUs7Q0FDTCxJQUFJLE1BQU0sV0FBVyxDQUFDLE9BQU8sRUFBRTtDQUMvQixRQUFRLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO0NBQ3BDLFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyw0QkFBNEIsRUFBRSxPQUFPLENBQUMsQ0FBQztDQUM1RCxRQUFRLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7Q0FDakUsUUFBUSxJQUFJLENBQUMsV0FBVztDQUN4QixZQUFZLE1BQU0sSUFBSSxLQUFLLENBQUMsd0NBQXdDLENBQUMsQ0FBQztDQUN0RSxRQUFRLFdBQVcsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO0NBQzlDLFFBQVEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0NBQ2pELFFBQVEsSUFBSSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDM0QsUUFBUSxNQUFNLEtBQUssR0FBRyxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7Q0FDbkQsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLDZEQUE2RCxFQUFFLEtBQUssQ0FBQyxDQUFDO0NBQzNGLFFBQVEsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDO0NBQ2xELFFBQVEsTUFBTSxNQUFNLEdBQUcsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUM7Q0FDekUsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLCtEQUErRCxFQUFFLE1BQU0sQ0FBQyxDQUFDO0NBQzlGLFFBQVEsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0NBQ3BELEtBQUs7Q0FDTCxJQUFJLE1BQU0sWUFBWSxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUU7Q0FDdkMsUUFBUSxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztDQUNwQyxRQUFRLElBQUksS0FBSyxFQUFFO0NBQ25CLFlBQVksTUFBTSxDQUFDLEtBQUssQ0FBQywwQ0FBMEMsRUFBRSxPQUFPLEVBQUUsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0NBQ3hGLFNBQVM7Q0FDVCxhQUFhO0NBQ2IsWUFBWSxNQUFNLENBQUMsS0FBSyxDQUFDLHVDQUF1QyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0NBQzNFLFNBQVM7Q0FDVCxRQUFRLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7Q0FDakUsUUFBUSxJQUFJLENBQUMsV0FBVztDQUN4QixZQUFZLE1BQU0sSUFBSSxLQUFLLENBQUMsd0NBQXdDLENBQUMsQ0FBQztDQUN0RSxRQUFRLE1BQU0sV0FBVyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDckQsS0FBSztDQUNMLElBQUksTUFBTSxrQkFBa0IsQ0FBQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0NBQ3BELFFBQVEsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7Q0FDcEMsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLG9EQUFvRCxFQUFFLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQztDQUNsRyxRQUFRLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7Q0FDakUsUUFBUSxJQUFJLENBQUMsV0FBVztDQUN4QixZQUFZLE1BQU0sSUFBSSxLQUFLLENBQUMsd0NBQXdDLENBQUMsQ0FBQztDQUN0RSxRQUFRLE1BQU0sVUFBVSxHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQUMsYUFBYSxFQUFFLENBQUM7Q0FDOUQsUUFBUSxVQUFVLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsRUFBRSxHQUFHLEtBQUs7Q0FDeEQsWUFBWSxJQUFJLEdBQUcsSUFBSSxZQUFZO0NBQ25DLGdCQUFnQixRQUFRLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztDQUN2QztDQUNBLGdCQUFnQixRQUFRLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztDQUN4QyxTQUFTLENBQUMsQ0FBQztDQUNYLFFBQVEsTUFBTSxXQUFXLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQztDQUMzRCxLQUFLO0NBQ0wsSUFBSSxNQUFNLHdCQUF3QixDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUU7Q0FDcEQsUUFBUSxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztDQUNwQyxRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsb0RBQW9ELEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0NBQzVGLFFBQVEsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztDQUNqRSxRQUFRLElBQUksQ0FBQyxXQUFXO0NBQ3hCLFlBQVksTUFBTSxJQUFJLEtBQUssQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDO0NBQ3RFLFFBQVEsTUFBTSxVQUFVLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsQ0FBQztDQUM5RCxRQUFRLFVBQVUsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxFQUFFLEdBQUcsS0FBSztDQUN4RCxZQUFZLFVBQVUsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLFFBQVEsRUFBRSxHQUFHLE1BQU0sRUFBRSxDQUFDO0NBQ25FLFNBQVMsQ0FBQyxDQUFDO0NBQ1gsUUFBUSxNQUFNLFdBQVcsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0NBQzNELEtBQUs7Q0FDTCxJQUFJLE1BQU0sY0FBYyxDQUFDLE9BQU8sRUFBRTtDQUNsQyxRQUFRLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO0NBQ3BDLFFBQVEsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztDQUNqRSxRQUFRLElBQUksQ0FBQyxXQUFXO0NBQ3hCLFlBQVksTUFBTSxJQUFJLEtBQUssQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDO0NBQ3RFLFFBQVEsT0FBTyxXQUFXLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO0NBQzdDLEtBQUs7Q0FDTCxJQUFJLE1BQU0sZUFBZSxDQUFDLEVBQUUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLGNBQWMsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxFQUFFO0NBQ3JHLFFBQVEsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7Q0FDcEMsUUFBUSxNQUFNLE9BQU8sR0FBRztDQUN4QixZQUFZLFVBQVUsRUFBRSxJQUFJO0NBQzVCLFlBQVksRUFBRSxFQUFFLElBQUksQ0FBQyxxQkFBcUI7Q0FDMUMsWUFBWSxPQUFPO0NBQ25CLFlBQVksaUJBQWlCO0NBQzdCLFlBQVksY0FBYztDQUMxQixZQUFZLFFBQVE7Q0FDcEIsWUFBWSxRQUFRO0NBQ3BCLFNBQVMsQ0FBQztDQUNWLFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsRUFBRSxPQUFPLENBQUMsQ0FBQztDQUNoRSxRQUFRLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0NBQ3ZFO0NBQ0EsUUFBUSxJQUFJLENBQUMscUJBQXFCO0NBQ2xDLFlBQVksRUFBRSxJQUFJLENBQUMscUJBQXFCLEdBQUcsZ0JBQWdCLENBQUMsR0FBRyxDQUFDO0NBQ2hFO0NBQ0E7Q0FDQSxRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsMkJBQTJCLEVBQUU7Q0FDL0MsWUFBWSxNQUFNLEtBQUssR0FBRyxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7Q0FDdkQsWUFBWSxNQUFNLGNBQWMsR0FBR0gsS0FBWSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDakUsWUFBWSxNQUFNLGdCQUFnQixHQUFHLGNBQWMsQ0FBQyxLQUFLO0NBQ3pELGlCQUFpQixJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksS0FBSyxhQUFhLENBQUMsQ0FBQztDQUN2RCxZQUFZLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZTtDQUNyQyxnQkFBZ0IsTUFBTSxJQUFJLENBQUMsZUFBZSxDQUFDLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRSxjQUFjLEVBQUUsQ0FBQyxDQUFDO0NBQ3hGLFlBQVksTUFBTSxDQUFDLEtBQUssQ0FBQyxpRUFBaUUsRUFBRSxLQUFLLENBQUMsQ0FBQztDQUNuRyxZQUFZLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztDQUN0RCxZQUFZLElBQUksQ0FBQyxVQUFVLENBQUMsbUJBQW1CLENBQUMsRUFBRSxnQkFBZ0IsRUFBRSxDQUFDLENBQUM7Q0FDdEUsWUFBWSxNQUFNLE1BQU0sR0FBRyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQztDQUM3RSxZQUFZLE1BQU0sQ0FBQyxLQUFLLENBQUMsbUVBQW1FLEVBQUUsTUFBTSxDQUFDLENBQUM7Q0FDdEcsWUFBWSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLENBQUM7Q0FDeEQsWUFBWSxJQUFJLENBQUMsMkJBQTJCLEdBQUcsSUFBSSxDQUFDO0NBQ3BELFNBQVM7Q0FDVCxRQUFRLE1BQU0sb0JBQW9CLEdBQUc7Q0FDckMsWUFBWSxRQUFRLEVBQUUsT0FBTyxDQUFDLEVBQUU7Q0FDaEMsWUFBWSxPQUFPLEVBQUUsT0FBTyxDQUFDLE9BQU87Q0FDcEMsWUFBWSxpQkFBaUIsRUFBRSxPQUFPLENBQUMsaUJBQWlCO0NBQ3hELFlBQVksY0FBYyxFQUFFLE9BQU8sQ0FBQyxjQUFjO0NBQ2xELFNBQVMsQ0FBQztDQUNWLFFBQVEsT0FBTyxFQUFFLFdBQVcsRUFBRSxvQkFBb0IsRUFBRSxDQUFDO0NBQ3JELEtBQUs7Q0FDTCxJQUFJLE1BQU0sT0FBTyxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxhQUFhLEVBQUUsRUFBRTtDQUNwRCxRQUFRLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO0NBQ3BDLFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyxpQ0FBaUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7Q0FDdkUsUUFBUSxNQUFNLE9BQU8sR0FBRyxhQUFhLENBQUMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUM7Q0FDbEYsUUFBUSxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQztDQUNoQyxZQUFZLEdBQUcsRUFBRSxPQUFPO0NBQ3hCLFlBQVksSUFBSTtDQUNoQixZQUFZLGtCQUFrQixFQUFFLGFBQWE7Q0FDN0MsWUFBWSxRQUFRLEVBQUUsYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLO0NBQzlDLFlBQVksT0FBTztDQUNuQixTQUFTLENBQUMsQ0FBQztDQUNYLFFBQVEsTUFBTSxLQUFLLEdBQUcsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUM7Q0FDdkUsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLDBEQUEwRCxFQUFFLEtBQUssQ0FBQyxDQUFDO0NBQ3hGLFFBQVEsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxDQUFDO0NBQ25ELFFBQVEsSUFBSSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxDQUFDO0NBQ25ELFFBQVEsTUFBTSxjQUFjLEdBQUdBLEtBQVksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQzlELFFBQVEsTUFBTSxpQkFBaUIsR0FBRyxjQUFjLENBQUMsS0FBSztDQUN0RCxhQUFhLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLE9BQU8sQ0FBQyxDQUFDO0NBQ3BEO0NBQ0E7Q0FDQSxRQUFRQyxXQUFjLENBQUMsb0JBQW9CLENBQUM7Q0FDNUMsWUFBWSxrQkFBa0IsRUFBRSxhQUFhO0NBQzdDLFlBQVksaUJBQWlCO0NBQzdCLFNBQVMsQ0FBQyxDQUFDO0NBQ1gsUUFBUSxNQUFNLEdBQUcsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRUQsS0FBWSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDO0NBQzdFLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlO0NBQ2pDLFlBQVksTUFBTSxJQUFJLENBQUMsZUFBZSxDQUFDLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRSxjQUFjLEVBQUUsQ0FBQyxDQUFDO0NBQ3BGLFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQywwREFBMEQsRUFBRSxNQUFNLENBQUMsQ0FBQztDQUN6RixRQUFRLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztDQUNuRCxRQUFRLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFO0NBQ3RELGFBQWEsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLEtBQUssT0FBTyxDQUFDLENBQUM7Q0FDNUMsUUFBUSxJQUFJLENBQUMsV0FBVztDQUN4QixZQUFZLE1BQU0sSUFBSSxLQUFLLENBQUMsaUNBQWlDLENBQUMsQ0FBQztDQUMvRDtDQUNBLFFBQVEsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxDQUFDLENBQUM7Q0FDMUQsUUFBUSxPQUFPO0NBQ2YsWUFBWSxPQUFPO0NBQ25CLFlBQVksS0FBSyxFQUFFLFdBQVcsQ0FBQyxRQUFRLENBQUMsS0FBSztDQUM3QyxZQUFZLFdBQVcsRUFBRSxXQUFXLENBQUMsUUFBUTtDQUM3QyxTQUFTLENBQUM7Q0FDVixLQUFLO0NBQ0wsSUFBSSxNQUFNLGFBQWEsQ0FBQyxPQUFPLEVBQUU7Q0FDakMsUUFBUSxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztDQUNwQyxRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsOEJBQThCLEVBQUUsT0FBTyxDQUFDLENBQUM7Q0FDOUQsUUFBUSxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0NBQ2pFLFFBQVEsSUFBSSxDQUFDLFdBQVc7Q0FDeEIsWUFBWSxNQUFNLElBQUksS0FBSyxDQUFDLHdDQUF3QyxDQUFDLENBQUM7Q0FDdEUsUUFBUSxJQUFJLENBQUMsVUFBVSxDQUFDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUMzRCxRQUFRLE1BQU0sS0FBSyxHQUFHLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDO0NBQ3ZFLFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyxnRUFBZ0UsRUFBRSxLQUFLLENBQUMsQ0FBQztDQUM5RixRQUFRLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztDQUNuRCxRQUFRLE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsQ0FBQztDQUNyRCxRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsZ0VBQWdFLEVBQUUsTUFBTSxDQUFDLENBQUM7Q0FDL0YsUUFBUSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsTUFBTSxDQUFDLENBQUM7Q0FDbkQsS0FBSztDQUNMLElBQUksTUFBTSxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUU7Q0FDcEMsUUFBUSxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztDQUNwQyxRQUFRLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7Q0FDakUsUUFBUSxJQUFJLENBQUMsV0FBVztDQUN4QixZQUFZLE1BQU0sSUFBSSxLQUFLLENBQUMsd0NBQXdDLENBQUMsQ0FBQztDQUN0RSxRQUFRLE9BQU8sV0FBVyxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztDQUMvQyxLQUFLO0NBQ0wsSUFBSSxNQUFNLGtCQUFrQixDQUFDLEVBQUUsb0JBQW9CLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxFQUFFO0NBQ3hFLFFBQVEsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7Q0FDcEMsUUFBUSxNQUFNLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxjQUFjLEVBQUUsR0FBRyxvQkFBb0IsQ0FBQztDQUM5RixRQUFRLE1BQU0sT0FBTyxHQUFHO0NBQ3hCLFlBQVksVUFBVSxFQUFFLElBQUk7Q0FDNUIsWUFBWSxFQUFFLEVBQUUsUUFBUTtDQUN4QixZQUFZLE9BQU87Q0FDbkIsWUFBWSxpQkFBaUI7Q0FDN0IsWUFBWSxjQUFjO0NBQzFCLFlBQVksUUFBUTtDQUNwQixTQUFTLENBQUM7Q0FDVixRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsbUNBQW1DLEVBQUUsT0FBTyxDQUFDLENBQUM7Q0FDbkUsUUFBUSxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztDQUN2RTtDQUNBO0NBQ0EsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLDJCQUEyQixFQUFFO0NBQy9DLFlBQVksSUFBSSxDQUFDLFVBQVUsQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO0NBQ3JELFlBQVksTUFBTSxLQUFLLEdBQUcsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUM7Q0FDM0UsWUFBWSxNQUFNLENBQUMsS0FBSyxDQUFDLHFFQUFxRSxFQUFFLEtBQUssQ0FBQyxDQUFDO0NBQ3ZHLFlBQVksTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxDQUFDO0NBQ3ZELFlBQVksTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxDQUFDO0NBQ3pELFlBQVksSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUU7Q0FDdkMsZ0JBQWdCLE1BQU0sY0FBYyxHQUFHQSxLQUFZLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUN0RSxnQkFBZ0IsTUFBTSxJQUFJLENBQUMsZUFBZSxDQUFDLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRSxjQUFjLEVBQUUsQ0FBQyxDQUFDO0NBQ3hGLGFBQWE7Q0FDYixZQUFZLE1BQU0sQ0FBQyxLQUFLLENBQUMsc0VBQXNFLEVBQUUsTUFBTSxDQUFDLENBQUM7Q0FDekcsWUFBWSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsTUFBTSxDQUFDLENBQUM7Q0FDdkQsWUFBWSxJQUFJLENBQUMsMkJBQTJCLEdBQUcsSUFBSSxDQUFDO0NBQ3BELFNBQVM7Q0FDVCxRQUFRLE9BQU8sRUFBRSxXQUFXLEVBQUUsQ0FBQztDQUMvQixLQUFLO0NBQ0wsSUFBSSxNQUFNLGVBQWUsQ0FBQyxFQUFFLGFBQWEsRUFBRSxjQUFjLEVBQUUsRUFBRTtDQUM3RCxRQUFRLElBQUksQ0FBQyxjQUFjO0NBQzNCLFlBQVksY0FBYyxHQUFHQSxLQUFZLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDL0U7Q0FDQSxRQUFRLE1BQU0sY0FBYyxHQUFHQyxXQUFjLENBQUMscUJBQXFCLENBQUMsRUFBRSxTQUFTLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztDQUNuRztDQUNBLFFBQVEsY0FBYyxDQUFDLElBQUksR0FBRyxhQUFhLENBQUM7Q0FDNUM7Q0FDQSxRQUFRLElBQUksQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLGFBQWEsS0FBSyxRQUFRLEdBQUcsUUFBUSxHQUFHLFFBQVEsQ0FBQyxDQUFDO0NBQ3pGO0NBQ0EsUUFBUSxNQUFNLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLEVBQUUsRUFBRSxjQUFjLEVBQUUsQ0FBQyxDQUFDO0NBQ3JFLFFBQVEsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7Q0FDcEMsS0FBSztDQUNMLElBQUksb0JBQW9CLEdBQUc7Q0FDM0IsUUFBUSxJQUFJLElBQUksQ0FBQyxVQUFVLEtBQUssTUFBTSxFQUFFO0NBQ3hDLFlBQVksTUFBTSxJQUFJLEtBQUssQ0FBQyw4REFBOEQsQ0FBQyxDQUFDO0NBQzVGLFNBQVM7Q0FDVCxLQUFLO0NBQ0wsSUFBSSxvQkFBb0IsR0FBRztDQUMzQixRQUFRLElBQUksSUFBSSxDQUFDLFVBQVUsS0FBSyxNQUFNLEVBQUU7Q0FDeEMsWUFBWSxNQUFNLElBQUksS0FBSyxDQUFDLDhEQUE4RCxDQUFDLENBQUM7Q0FDNUYsU0FBUztDQUNULEtBQUs7Q0FDTCxDQUFDO0NBQ0QsZ0JBQWdCLEdBQUcsUUFBUTs7Ozs7OztBQ3JlM0IsQ0FDQSxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUNoQjtBQUNSO0FBQ0o7QUFDRjtBQUNvQjtBQUNVO0FBQ0w7QUFDVjtBQUNXO0NBQzFELE1BQU0sTUFBTSxHQUFHLElBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztDQUMvQyxNQUFNLGdCQUFnQixHQUFHLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUM7Q0FDakQsTUFBTSxRQUFRLFNBQVMsa0JBQWtCLENBQUMsZ0JBQWdCLENBQUM7Q0FDM0QsSUFBSSxXQUFXLEdBQUc7Q0FDbEIsUUFBUSxLQUFLLEVBQUUsQ0FBQztDQUNoQjtDQUNBLFFBQVEsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7Q0FDNUM7Q0FDQSxRQUFRLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQztDQUM3QztDQUNBLFFBQVEsSUFBSSxDQUFDLDJCQUEyQixHQUFHLEtBQUssQ0FBQztDQUNqRDtDQUNBLFFBQVEsSUFBSSxDQUFDLHFCQUFxQixHQUFHLENBQUMsQ0FBQztDQUN2QztDQUNBLFFBQVEsSUFBSSxDQUFDLGVBQWUsR0FBRyxLQUFLLENBQUM7Q0FDckMsS0FBSztDQUNMO0NBQ0E7Q0FDQTtDQUNBLElBQUksT0FBTyxhQUFhLEdBQUc7Q0FDM0IsUUFBUSxPQUFPLE1BQU0sSUFBSSxRQUFRLEVBQUUsQ0FBQztDQUNwQyxLQUFLO0NBQ0wsSUFBSSxJQUFJLElBQUksR0FBRztDQUNmLFFBQVEsT0FBTyxVQUFVLENBQUM7Q0FDMUIsS0FBSztDQUNMLElBQUksS0FBSyxHQUFHO0NBQ1osUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0NBQ2hDO0NBQ0EsUUFBUSxJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUU7Q0FDdEIsWUFBWSxJQUFJO0NBQ2hCLGdCQUFnQixJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO0NBQ2pDLGFBQWE7Q0FDYixZQUFZLE9BQU8sS0FBSyxFQUFFLEdBQUc7Q0FDN0IsU0FBUztDQUNULEtBQUs7Q0FDTCxJQUFJLE1BQU0sd0JBQXdCLEdBQUc7Q0FDckMsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLDRCQUE0QixDQUFDLENBQUM7Q0FDbkQsUUFBUSxNQUFNLEVBQUUsR0FBRyxJQUFJLGlCQUFpQixDQUFDO0NBQ3pDLFlBQVksVUFBVSxFQUFFLEVBQUU7Q0FDMUIsWUFBWSxrQkFBa0IsRUFBRSxLQUFLO0NBQ3JDLFlBQVksWUFBWSxFQUFFLFlBQVk7Q0FDdEMsWUFBWSxhQUFhLEVBQUUsU0FBUztDQUNwQyxZQUFZLFlBQVksRUFBRSxjQUFjO0NBQ3hDLFNBQVMsQ0FBQyxDQUFDO0NBQ1gsUUFBUSxJQUFJO0NBQ1osWUFBWSxFQUFFLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0NBQ3ZDLFlBQVksRUFBRSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztDQUN2QyxZQUFZLE1BQU0sS0FBSyxHQUFHLE1BQU0sRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDO0NBQ2pELFlBQVksSUFBSTtDQUNoQixnQkFBZ0IsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0NBQzNCLGFBQWE7Q0FDYixZQUFZLE9BQU8sS0FBSyxFQUFFLEdBQUc7Q0FDN0IsWUFBWSxNQUFNLFNBQVMsR0FBR0QsS0FBWSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDNUQsWUFBWSxNQUFNLHFCQUFxQixHQUFHQyxXQUFjLENBQUMsc0JBQXNCLENBQUMsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDO0NBQy9GLFlBQVksT0FBTyxxQkFBcUIsQ0FBQztDQUN6QyxTQUFTO0NBQ1QsUUFBUSxPQUFPLEtBQUssRUFBRTtDQUN0QixZQUFZLElBQUk7Q0FDaEIsZ0JBQWdCLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztDQUMzQixhQUFhO0NBQ2IsWUFBWSxPQUFPLE1BQU0sRUFBRSxHQUFHO0NBQzlCLFlBQVksTUFBTSxLQUFLLENBQUM7Q0FDeEIsU0FBUztDQUNULEtBQUs7Q0FDTCxJQUFJLE1BQU0seUJBQXlCLEdBQUc7Q0FDdEMsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLDZCQUE2QixDQUFDLENBQUM7Q0FDcEQsUUFBUSxPQUFPO0NBQ2YsWUFBWSxVQUFVLEVBQUUsZ0JBQWdCO0NBQ3hDLFNBQVMsQ0FBQztDQUNWLEtBQUs7Q0FDTCxJQUFJLEdBQUcsQ0FBQyxFQUFFLFNBQVMsRUFBRSxhQUFhLEVBQUUsYUFBYSxFQUFFLGNBQWMsRUFBRSxjQUFjLEVBQUUsVUFBVSxFQUFFLGtCQUFrQixFQUFFLGtCQUFrQixFQUFFLHNCQUFzQixFQUFFLHVCQUF1QixFQUFFLEVBQUU7Q0FDMUwsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0NBQzlCLFFBQVEsSUFBSSxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUM7Q0FDcEMsUUFBUSxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksV0FBVyxDQUFDLFNBQVMsQ0FBQztDQUNwRCxZQUFZLGFBQWE7Q0FDekIsWUFBWSxhQUFhO0NBQ3pCLFlBQVksY0FBYztDQUMxQixZQUFZLGNBQWM7Q0FDMUIsU0FBUyxDQUFDLENBQUM7Q0FDWCxRQUFRLElBQUksQ0FBQywyQkFBMkI7Q0FDeEMsWUFBWTtDQUNaLGdCQUFnQixLQUFLLEVBQUUsSUFBSSxDQUFDLHVCQUF1QixDQUFDLE9BQU8sRUFBRSx1QkFBdUIsQ0FBQztDQUNyRixnQkFBZ0IsS0FBSyxFQUFFLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxPQUFPLEVBQUUsdUJBQXVCLENBQUM7Q0FDckYsYUFBYSxDQUFDO0NBQ2QsUUFBUSxJQUFJLENBQUMsaUNBQWlDO0NBQzlDLFlBQVk7Q0FDWixnQkFBZ0IsS0FBSyxFQUFFLElBQUksQ0FBQyw2QkFBNkIsQ0FBQyxPQUFPLEVBQUUsdUJBQXVCLENBQUM7Q0FDM0YsZ0JBQWdCLEtBQUssRUFBRSxJQUFJLENBQUMsNkJBQTZCLENBQUMsT0FBTyxFQUFFLHVCQUF1QixDQUFDO0NBQzNGLGFBQWEsQ0FBQztDQUNkLFFBQVEsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLGlCQUFpQixDQUFDO0NBQ3pDLFlBQVksVUFBVSxFQUFFLFVBQVUsSUFBSSxFQUFFO0NBQ3hDLFlBQVksa0JBQWtCLEVBQUUsa0JBQWtCLElBQUksS0FBSztDQUMzRCxZQUFZLFlBQVksRUFBRSxZQUFZO0NBQ3RDLFlBQVksYUFBYSxFQUFFLFNBQVM7Q0FDcEMsWUFBWSxZQUFZLEVBQUUsY0FBYztDQUN4QyxZQUFZLEdBQUcsa0JBQWtCO0NBQ2pDLFNBQVMsRUFBRSxzQkFBc0IsQ0FBQyxDQUFDO0NBQ25DO0NBQ0EsUUFBUSxJQUFJLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLDBCQUEwQixFQUFFLE1BQU07Q0FDcEUsWUFBWSxRQUFRLElBQUksQ0FBQyxHQUFHLENBQUMsa0JBQWtCO0NBQy9DLGdCQUFnQixLQUFLLFVBQVU7Q0FDL0Isb0JBQW9CLElBQUksQ0FBQyxJQUFJLENBQUMsd0JBQXdCLEVBQUUsWUFBWSxDQUFDLENBQUM7Q0FDdEUsb0JBQW9CLE1BQU07Q0FDMUIsZ0JBQWdCLEtBQUssV0FBVyxDQUFDO0NBQ2pDLGdCQUFnQixLQUFLLFdBQVc7Q0FDaEMsb0JBQW9CLElBQUksQ0FBQyxJQUFJLENBQUMsd0JBQXdCLEVBQUUsV0FBVyxDQUFDLENBQUM7Q0FDckUsb0JBQW9CLE1BQU07Q0FDMUIsZ0JBQWdCLEtBQUssUUFBUTtDQUM3QixvQkFBb0IsSUFBSSxDQUFDLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxRQUFRLENBQUMsQ0FBQztDQUNsRSxvQkFBb0IsTUFBTTtDQUMxQixnQkFBZ0IsS0FBSyxjQUFjO0NBQ25DLG9CQUFvQixJQUFJLENBQUMsSUFBSSxDQUFDLHdCQUF3QixFQUFFLGNBQWMsQ0FBQyxDQUFDO0NBQ3hFLG9CQUFvQixNQUFNO0NBQzFCLGdCQUFnQixLQUFLLFFBQVE7Q0FDN0Isb0JBQW9CLElBQUksQ0FBQyxJQUFJLENBQUMsd0JBQXdCLEVBQUUsUUFBUSxDQUFDLENBQUM7Q0FDbEUsb0JBQW9CLE1BQU07Q0FDMUIsYUFBYTtDQUNiLFNBQVMsQ0FBQyxDQUFDO0NBQ1gsS0FBSztDQUNMLElBQUksTUFBTSxnQkFBZ0IsQ0FBQyxVQUFVLEVBQUU7Q0FDdkMsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLG9CQUFvQixDQUFDLENBQUM7Q0FDM0MsUUFBUSxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLENBQUM7Q0FDMUQsUUFBUSxhQUFhLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztDQUM5QyxRQUFRLElBQUksQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxDQUFDLENBQUM7Q0FDakQsS0FBSztDQUNMLElBQUksTUFBTSxVQUFVLENBQUMsYUFBYSxFQUFFO0NBQ3BDLFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQztDQUNyQztDQUNBLFFBQVEsSUFBSSxDQUFDLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxhQUFhLENBQUMsQ0FBQztDQUMzRCxRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZTtDQUNqQyxZQUFZLE9BQU87Q0FDbkIsUUFBUSxJQUFJLElBQUksQ0FBQyxVQUFVLEtBQUssTUFBTSxFQUFFO0NBQ3hDLFlBQVksTUFBTSxLQUFLLEdBQUcsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0NBQzNFLFlBQVksTUFBTSxDQUFDLEtBQUssQ0FBQyw0REFBNEQsRUFBRSxLQUFLLENBQUMsQ0FBQztDQUM5RixZQUFZLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztDQUN0RCxZQUFZLE1BQU0sTUFBTSxHQUFHLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDO0NBQzdFLFlBQVksTUFBTSxDQUFDLEtBQUssQ0FBQyw4REFBOEQsRUFBRSxNQUFNLENBQUMsQ0FBQztDQUNqRyxZQUFZLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztDQUN4RCxTQUFTO0NBQ1QsYUFBYTtDQUNiLFlBQVksTUFBTSxLQUFLLEdBQUcsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUM7Q0FDM0UsWUFBWSxNQUFNLENBQUMsS0FBSyxDQUFDLDZEQUE2RCxFQUFFLEtBQUssQ0FBQyxDQUFDO0NBQy9GLFlBQVksTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxDQUFDO0NBQ3ZELFlBQVksTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxDQUFDO0NBQ3pELFlBQVksTUFBTSxDQUFDLEtBQUssQ0FBQyw2REFBNkQsRUFBRSxNQUFNLENBQUMsQ0FBQztDQUNoRyxZQUFZLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztDQUN2RCxTQUFTO0NBQ1QsS0FBSztDQUNMLElBQUksTUFBTSxpQkFBaUIsR0FBRztDQUM5QixRQUFRLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztDQUNuQyxLQUFLO0NBQ0wsSUFBSSxNQUFNLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxFQUFFO0NBQzFELFFBQVEsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7Q0FDcEMsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLCtCQUErQixFQUFFLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0NBQzVFLFFBQVEsTUFBTSxvQkFBb0IsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztDQUMvRjtDQUNBLFFBQVEsb0JBQW9CLENBQUMsTUFBTTtDQUNuQyxZQUFZLElBQUksQ0FBQyxZQUFZLENBQUMsb0JBQW9CLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO0NBQ2xFLFFBQVEsTUFBTSwwQkFBMEIsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxpQ0FBaUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztDQUMzRztDQUNBLFFBQVEsMEJBQTBCLENBQUMsTUFBTTtDQUN6QyxZQUFZLElBQUksQ0FBQyxZQUFZLENBQUMsMEJBQTBCLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO0NBQ3hFLFFBQVEsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO0NBQ3pFLFFBQVEsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0NBQ25ILFFBQVEsSUFBSSxLQUFLLEdBQUcsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO0NBQ2pELFFBQVEsSUFBSSxjQUFjLEdBQUdELEtBQVksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQzNELFFBQVEsSUFBSSxnQkFBZ0IsQ0FBQztDQUM3QixRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZTtDQUNqQyxZQUFZLE1BQU0sSUFBSSxDQUFDLGVBQWUsQ0FBQyxFQUFFLGFBQWEsRUFBRSxRQUFRLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztDQUNwRixRQUFRLElBQUksU0FBUyxJQUFJLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0NBQy9DLFlBQVksTUFBTSxDQUFDLEtBQUssQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO0NBQy9ELFlBQVksY0FBYyxHQUFHQSxLQUFZLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUMzRCxZQUFZLGdCQUFnQixHQUFHLGNBQWMsQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQ3pFLFlBQVlHLGdCQUFtQixDQUFDLGtCQUFrQixDQUFDO0NBQ25ELGdCQUFnQixnQkFBZ0I7Q0FDaEMsZ0JBQWdCLFVBQVUsRUFBRSxTQUFTLENBQUMsTUFBTTtDQUM1QyxhQUFhLENBQUMsQ0FBQztDQUNmLFlBQVksS0FBSyxHQUFHLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUVILEtBQVksQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQztDQUMvRSxTQUFTO0NBQ1Q7Q0FDQSxRQUFRLElBQUksVUFBVSxHQUFHLEtBQUssQ0FBQztDQUMvQixRQUFRLE1BQU0sTUFBTSxHQUFHRSxnQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxTQUFTLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQztDQUN4RixRQUFRLElBQUksU0FBUztDQUNyQixZQUFZLFNBQVMsQ0FBQyxNQUFNLEtBQUssQ0FBQztDQUNsQyxZQUFZLE1BQU0sQ0FBQyxhQUFhLEdBQUcsQ0FBQztDQUNwQyxZQUFZLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLEtBQUssV0FBVyxFQUFFO0NBQ25GLFlBQVksTUFBTSxDQUFDLEtBQUssQ0FBQyxnREFBZ0QsQ0FBQyxDQUFDO0NBQzNFLFlBQVksVUFBVSxHQUFHLElBQUksQ0FBQztDQUM5QixZQUFZLGNBQWMsR0FBR0YsS0FBWSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDM0QsWUFBWSxnQkFBZ0IsR0FBRyxjQUFjLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUN6RSxZQUFZRyxnQkFBbUIsQ0FBQyxrQkFBa0IsQ0FBQztDQUNuRCxnQkFBZ0IsZ0JBQWdCO0NBQ2hDLGdCQUFnQixVQUFVLEVBQUUsTUFBTSxDQUFDLGFBQWE7Q0FDaEQsYUFBYSxDQUFDLENBQUM7Q0FDZixZQUFZLEtBQUssR0FBRyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFSCxLQUFZLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUM7Q0FDL0UsU0FBUztDQUNULFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyxzREFBc0QsRUFBRSxLQUFLLENBQUMsQ0FBQztDQUNwRixRQUFRLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztDQUNsRDtDQUNBLFFBQVEsSUFBSSxTQUFTLEVBQUU7Q0FDdkIsWUFBWSxNQUFNLENBQUMsS0FBSyxDQUFDLG1DQUFtQyxDQUFDLENBQUM7Q0FDOUQsWUFBWSxNQUFNLFVBQVUsR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLGFBQWEsRUFBRSxDQUFDO0NBQ2xFLFlBQVksS0FBSyxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDLFNBQVMsSUFBSSxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsR0FBRyxFQUFFO0NBQ2hGLGdCQUFnQixNQUFNLFFBQVEsR0FBRyxVQUFVLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQzNELGdCQUFnQixNQUFNLGVBQWUsR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDdkQ7Q0FDQSxnQkFBZ0IsSUFBSSxDQUFDLGVBQWU7Q0FDcEMsb0JBQW9CLE1BQU07Q0FDMUIsZ0JBQWdCLFVBQVUsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsZUFBZSxDQUFDLENBQUM7Q0FDckYsYUFBYTtDQUNiLFlBQVksTUFBTSxXQUFXLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQztDQUMvRCxTQUFTO0NBQ1Q7Q0FDQSxRQUFRLE1BQU0sT0FBTyxHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUM7Q0FDeEM7Q0FDQSxRQUFRLG9CQUFvQixDQUFDLEdBQUcsR0FBRyxPQUFPLENBQUM7Q0FDM0MsUUFBUSxjQUFjLEdBQUdBLEtBQVksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUMzRSxRQUFRLGdCQUFnQixHQUFHLGNBQWMsQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQ3JFO0NBQ0EsUUFBUSxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsS0FBSztDQUN2QyxZQUFZQyxXQUFjLENBQUMsUUFBUSxDQUFDLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDO0NBQzFEO0NBQ0EsUUFBUSxvQkFBb0IsQ0FBQyxTQUFTO0NBQ3RDLFlBQVlFLGdCQUFtQixDQUFDLGVBQWUsQ0FBQyxFQUFFLGdCQUFnQixFQUFFLENBQUMsQ0FBQztDQUN0RTtDQUNBLFFBQVEsSUFBSSxTQUFTLEVBQUU7Q0FDdkIsWUFBWSxLQUFLLElBQUksR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsb0JBQW9CLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxFQUFFLEdBQUcsRUFBRTtDQUNsRixnQkFBZ0IsSUFBSSxTQUFTLENBQUMsR0FBRyxDQUFDO0NBQ2xDLG9CQUFvQixNQUFNLENBQUMsTUFBTSxDQUFDLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRSxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztDQUN2RixhQUFhO0NBQ2IsU0FBUztDQUNUO0NBQ0EsUUFBUSxJQUFJLFVBQVUsRUFBRTtDQUN4QixZQUFZLG9CQUFvQixDQUFDLFNBQVMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ2pGLFNBQVM7Q0FDVDtDQUNBO0NBQ0EsUUFBUSxJQUFJLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQztDQUNyRCxhQUFhLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLEtBQUssV0FBVztDQUNsRixnQkFBZ0Isb0JBQW9CLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsS0FBSyxZQUFZLENBQUMsRUFBRTtDQUN6RixZQUFZLEtBQUssTUFBTSxRQUFRLElBQUksb0JBQW9CLENBQUMsU0FBUyxFQUFFO0NBQ25FLGdCQUFnQixRQUFRLENBQUMsZUFBZSxHQUFHLE1BQU0sQ0FBQztDQUNsRCxhQUFhO0NBQ2IsU0FBUztDQUNULFFBQVEsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUM7Q0FDN0IsWUFBWSxnQkFBZ0I7Q0FDNUIsWUFBWSxRQUFRLEVBQUUsZUFBZSxDQUFDLFFBQVE7Q0FDOUMsWUFBWSxrQkFBa0IsRUFBRSxvQkFBb0I7Q0FDcEQsWUFBWSxtQkFBbUIsRUFBRSwwQkFBMEI7Q0FDM0QsWUFBWSxZQUFZO0NBQ3hCLFNBQVMsQ0FBQyxDQUFDO0NBQ1gsUUFBUSxNQUFNLE1BQU0sR0FBRyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQztDQUN6RSxRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsd0RBQXdELEVBQUUsTUFBTSxDQUFDLENBQUM7Q0FDdkYsUUFBUSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLENBQUM7Q0FDcEQ7Q0FDQSxRQUFRLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0NBQzFELFFBQVEsT0FBTztDQUNmLFlBQVksT0FBTztDQUNuQixZQUFZLGFBQWEsRUFBRSxvQkFBb0I7Q0FDL0MsWUFBWSxTQUFTLEVBQUUsV0FBVyxDQUFDLE1BQU07Q0FDekMsU0FBUyxDQUFDO0NBQ1YsS0FBSztDQUNMLElBQUksTUFBTSxXQUFXLENBQUMsT0FBTyxFQUFFO0NBQy9CLFFBQVEsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7Q0FDcEMsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLDRCQUE0QixFQUFFLE9BQU8sQ0FBQyxDQUFDO0NBQzVELFFBQVEsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztDQUNqRSxRQUFRLElBQUksQ0FBQyxXQUFXO0NBQ3hCLFlBQVksTUFBTSxJQUFJLEtBQUssQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDO0NBQ3RFLFFBQVEsV0FBVyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7Q0FDOUMsUUFBUSxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7Q0FDakQsUUFBUSxJQUFJLENBQUMsVUFBVSxDQUFDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUMzRCxRQUFRLE1BQU0sS0FBSyxHQUFHLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztDQUNuRCxRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsNkRBQTZELEVBQUUsS0FBSyxDQUFDLENBQUM7Q0FDM0YsUUFBUSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDbEQsUUFBUSxNQUFNLE1BQU0sR0FBRyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQztDQUN6RSxRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsK0RBQStELEVBQUUsTUFBTSxDQUFDLENBQUM7Q0FDOUYsUUFBUSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLENBQUM7Q0FDcEQsS0FBSztDQUNMLElBQUksTUFBTSxZQUFZLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRTtDQUN2QyxRQUFRLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO0NBQ3BDLFFBQVEsSUFBSSxLQUFLLEVBQUU7Q0FDbkIsWUFBWSxNQUFNLENBQUMsS0FBSyxDQUFDLDBDQUEwQyxFQUFFLE9BQU8sRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7Q0FDeEYsU0FBUztDQUNULGFBQWE7Q0FDYixZQUFZLE1BQU0sQ0FBQyxLQUFLLENBQUMsdUNBQXVDLEVBQUUsT0FBTyxDQUFDLENBQUM7Q0FDM0UsU0FBUztDQUNULFFBQVEsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztDQUNqRSxRQUFRLElBQUksQ0FBQyxXQUFXO0NBQ3hCLFlBQVksTUFBTSxJQUFJLEtBQUssQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDO0NBQ3RFLFFBQVEsTUFBTSxXQUFXLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztDQUNyRCxLQUFLO0NBQ0wsSUFBSSxNQUFNLGtCQUFrQixDQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUU7Q0FDcEQsUUFBUSxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztDQUNwQyxRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsb0RBQW9ELEVBQUUsT0FBTyxFQUFFLFlBQVksQ0FBQyxDQUFDO0NBQ2xHLFFBQVEsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztDQUNqRSxRQUFRLElBQUksQ0FBQyxXQUFXO0NBQ3hCLFlBQVksTUFBTSxJQUFJLEtBQUssQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDO0NBQ3RFLFFBQVEsTUFBTSxVQUFVLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsQ0FBQztDQUM5RCxRQUFRLFVBQVUsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxFQUFFLEdBQUcsS0FBSztDQUN4RCxZQUFZLElBQUksR0FBRyxJQUFJLFlBQVk7Q0FDbkMsZ0JBQWdCLFFBQVEsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO0NBQ3ZDO0NBQ0EsZ0JBQWdCLFFBQVEsQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO0NBQ3hDLFNBQVMsQ0FBQyxDQUFDO0NBQ1gsUUFBUSxNQUFNLFdBQVcsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0NBQzNELEtBQUs7Q0FDTCxJQUFJLE1BQU0sd0JBQXdCLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRTtDQUNwRCxRQUFRLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO0NBQ3BDLFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyxvREFBb0QsRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7Q0FDNUYsUUFBUSxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0NBQ2pFLFFBQVEsSUFBSSxDQUFDLFdBQVc7Q0FDeEIsWUFBWSxNQUFNLElBQUksS0FBSyxDQUFDLHdDQUF3QyxDQUFDLENBQUM7Q0FDdEUsUUFBUSxNQUFNLFVBQVUsR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLGFBQWEsRUFBRSxDQUFDO0NBQzlELFFBQVEsVUFBVSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFRLEVBQUUsR0FBRyxLQUFLO0NBQ3hELFlBQVksVUFBVSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsUUFBUSxFQUFFLEdBQUcsTUFBTSxFQUFFLENBQUM7Q0FDbkUsU0FBUyxDQUFDLENBQUM7Q0FDWCxRQUFRLE1BQU0sV0FBVyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUM7Q0FDM0QsS0FBSztDQUNMLElBQUksTUFBTSxjQUFjLENBQUMsT0FBTyxFQUFFO0NBQ2xDLFFBQVEsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7Q0FDcEMsUUFBUSxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0NBQ2pFLFFBQVEsSUFBSSxDQUFDLFdBQVc7Q0FDeEIsWUFBWSxNQUFNLElBQUksS0FBSyxDQUFDLHdDQUF3QyxDQUFDLENBQUM7Q0FDdEUsUUFBUSxPQUFPLFdBQVcsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7Q0FDN0MsS0FBSztDQUNMLElBQUksTUFBTSxlQUFlLENBQUMsRUFBRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsY0FBYyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLEVBQUU7Q0FDckcsUUFBUSxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztDQUNwQyxRQUFRLE1BQU0sT0FBTyxHQUFHO0NBQ3hCLFlBQVksVUFBVSxFQUFFLElBQUk7Q0FDNUIsWUFBWSxFQUFFLEVBQUUsSUFBSSxDQUFDLHFCQUFxQjtDQUMxQyxZQUFZLE9BQU87Q0FDbkIsWUFBWSxpQkFBaUI7Q0FDN0IsWUFBWSxpQkFBaUIsRUFBRSxpQkFBaUI7Q0FDaEQsWUFBWSxjQUFjO0NBQzFCLFlBQVksUUFBUTtDQUNwQixZQUFZLFFBQVE7Q0FDcEIsU0FBUyxDQUFDO0NBQ1YsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0NBQ2hFLFFBQVEsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7Q0FDdkU7Q0FDQSxRQUFRLElBQUksQ0FBQyxxQkFBcUI7Q0FDbEMsWUFBWSxFQUFFLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUM7Q0FDaEU7Q0FDQTtDQUNBLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQywyQkFBMkIsRUFBRTtDQUMvQyxZQUFZLE1BQU0sS0FBSyxHQUFHLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztDQUN2RCxZQUFZLE1BQU0sY0FBYyxHQUFHSCxLQUFZLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUNqRSxZQUFZLE1BQU0sZ0JBQWdCLEdBQUcsY0FBYyxDQUFDLEtBQUs7Q0FDekQsaUJBQWlCLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxLQUFLLGFBQWEsQ0FBQyxDQUFDO0NBQ3ZELFlBQVksSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlO0NBQ3JDLGdCQUFnQixNQUFNLElBQUksQ0FBQyxlQUFlLENBQUMsRUFBRSxhQUFhLEVBQUUsUUFBUSxFQUFFLGNBQWMsRUFBRSxDQUFDLENBQUM7Q0FDeEYsWUFBWSxNQUFNLENBQUMsS0FBSyxDQUFDLGlFQUFpRSxFQUFFLEtBQUssQ0FBQyxDQUFDO0NBQ25HLFlBQVksTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDO0NBQ3RELFlBQVksSUFBSSxDQUFDLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFLGdCQUFnQixFQUFFLENBQUMsQ0FBQztDQUN0RSxZQUFZLE1BQU0sTUFBTSxHQUFHLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDO0NBQzdFLFlBQVksTUFBTSxDQUFDLEtBQUssQ0FBQyxtRUFBbUUsRUFBRSxNQUFNLENBQUMsQ0FBQztDQUN0RyxZQUFZLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztDQUN4RCxZQUFZLElBQUksQ0FBQywyQkFBMkIsR0FBRyxJQUFJLENBQUM7Q0FDcEQsU0FBUztDQUNULFFBQVEsTUFBTSxvQkFBb0IsR0FBRztDQUNyQyxZQUFZLFFBQVEsRUFBRSxPQUFPLENBQUMsRUFBRTtDQUNoQyxZQUFZLE9BQU8sRUFBRSxPQUFPLENBQUMsT0FBTztDQUNwQyxZQUFZLGlCQUFpQixFQUFFLE9BQU8sQ0FBQyxpQkFBaUI7Q0FDeEQsWUFBWSxjQUFjLEVBQUUsT0FBTyxDQUFDLGNBQWM7Q0FDbEQsU0FBUyxDQUFDO0NBQ1YsUUFBUSxPQUFPLEVBQUUsV0FBVyxFQUFFLG9CQUFvQixFQUFFLENBQUM7Q0FDckQsS0FBSztDQUNMLElBQUksTUFBTSxPQUFPLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLGFBQWEsRUFBRSxFQUFFO0NBQ3BELFFBQVEsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7Q0FDcEMsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLGlDQUFpQyxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztDQUN2RSxRQUFRLE1BQU0sT0FBTyxHQUFHLGFBQWEsQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztDQUNsRixRQUFRLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDO0NBQ2hDLFlBQVksR0FBRyxFQUFFLE9BQU87Q0FDeEIsWUFBWSxJQUFJO0NBQ2hCLFlBQVksa0JBQWtCLEVBQUUsYUFBYTtDQUM3QyxZQUFZLFFBQVEsRUFBRSxhQUFhLENBQUMsSUFBSSxDQUFDLEtBQUs7Q0FDOUMsWUFBWSxPQUFPO0NBQ25CLFNBQVMsQ0FBQyxDQUFDO0NBQ1gsUUFBUSxNQUFNLEtBQUssR0FBRyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQztDQUN2RSxRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsMERBQTBELEVBQUUsS0FBSyxDQUFDLENBQUM7Q0FDeEYsUUFBUSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDbkQsUUFBUSxJQUFJLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUM7Q0FDbkQsUUFBUSxNQUFNLGNBQWMsR0FBR0EsS0FBWSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDOUQsUUFBUSxNQUFNLGlCQUFpQixHQUFHLGNBQWMsQ0FBQyxLQUFLO0NBQ3RELGFBQWEsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssT0FBTyxDQUFDLENBQUM7Q0FDcEQ7Q0FDQTtDQUNBLFFBQVFDLFdBQWMsQ0FBQyxvQkFBb0IsQ0FBQztDQUM1QyxZQUFZLGtCQUFrQixFQUFFLGFBQWE7Q0FDN0MsWUFBWSxpQkFBaUI7Q0FDN0IsU0FBUyxDQUFDLENBQUM7Q0FDWCxRQUFRLE1BQU0sR0FBRyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFRCxLQUFZLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUM7Q0FDN0UsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWU7Q0FDakMsWUFBWSxNQUFNLElBQUksQ0FBQyxlQUFlLENBQUMsRUFBRSxhQUFhLEVBQUUsUUFBUSxFQUFFLGNBQWMsRUFBRSxDQUFDLENBQUM7Q0FDcEYsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLDBEQUEwRCxFQUFFLE1BQU0sQ0FBQyxDQUFDO0NBQ3pGLFFBQVEsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0NBQ25ELFFBQVEsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUU7Q0FDdEQsYUFBYSxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsS0FBSyxPQUFPLENBQUMsQ0FBQztDQUM1QyxRQUFRLElBQUksQ0FBQyxXQUFXO0NBQ3hCLFlBQVksTUFBTSxJQUFJLEtBQUssQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDO0NBQy9EO0NBQ0EsUUFBUSxJQUFJLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxXQUFXLENBQUMsQ0FBQztDQUMxRCxRQUFRLE9BQU87Q0FDZixZQUFZLE9BQU87Q0FDbkIsWUFBWSxLQUFLLEVBQUUsV0FBVyxDQUFDLFFBQVEsQ0FBQyxLQUFLO0NBQzdDLFlBQVksV0FBVyxFQUFFLFdBQVcsQ0FBQyxRQUFRO0NBQzdDLFNBQVMsQ0FBQztDQUNWLEtBQUs7Q0FDTCxJQUFJLE1BQU0sYUFBYSxDQUFDLE9BQU8sRUFBRTtDQUNqQyxRQUFRLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO0NBQ3BDLFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyw4QkFBOEIsRUFBRSxPQUFPLENBQUMsQ0FBQztDQUM5RCxRQUFRLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7Q0FDakUsUUFBUSxJQUFJLENBQUMsV0FBVztDQUN4QixZQUFZLE1BQU0sSUFBSSxLQUFLLENBQUMsd0NBQXdDLENBQUMsQ0FBQztDQUN0RSxRQUFRLElBQUksQ0FBQyxVQUFVLENBQUMsaUJBQWlCLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQzNELFFBQVEsTUFBTSxLQUFLLEdBQUcsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUM7Q0FDdkUsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLGdFQUFnRSxFQUFFLEtBQUssQ0FBQyxDQUFDO0NBQzlGLFFBQVEsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxDQUFDO0NBQ25ELFFBQVEsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxDQUFDO0NBQ3JELFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyxnRUFBZ0UsRUFBRSxNQUFNLENBQUMsQ0FBQztDQUMvRixRQUFRLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztDQUNuRCxLQUFLO0NBQ0wsSUFBSSxNQUFNLGdCQUFnQixDQUFDLE9BQU8sRUFBRTtDQUNwQyxRQUFRLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO0NBQ3BDLFFBQVEsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztDQUNqRSxRQUFRLElBQUksQ0FBQyxXQUFXO0NBQ3hCLFlBQVksTUFBTSxJQUFJLEtBQUssQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDO0NBQ3RFLFFBQVEsT0FBTyxXQUFXLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO0NBQy9DLEtBQUs7Q0FDTCxJQUFJLE1BQU0sa0JBQWtCLENBQUMsRUFBRSxvQkFBb0IsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLEVBQUU7Q0FDeEUsUUFBUSxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztDQUNwQyxRQUFRLE1BQU0sRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLGNBQWMsRUFBRSxHQUFHLG9CQUFvQixDQUFDO0NBQzlGLFFBQVEsTUFBTSxPQUFPLEdBQUc7Q0FDeEIsWUFBWSxVQUFVLEVBQUUsSUFBSTtDQUM1QixZQUFZLEVBQUUsRUFBRSxRQUFRO0NBQ3hCLFlBQVksT0FBTztDQUNuQixZQUFZLGlCQUFpQjtDQUM3QixZQUFZLGlCQUFpQixFQUFFLGlCQUFpQjtDQUNoRCxZQUFZLGNBQWM7Q0FDMUIsWUFBWSxRQUFRO0NBQ3BCLFNBQVMsQ0FBQztDQUNWLFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyxtQ0FBbUMsRUFBRSxPQUFPLENBQUMsQ0FBQztDQUNuRSxRQUFRLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0NBQ3ZFO0NBQ0E7Q0FDQSxRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsMkJBQTJCLEVBQUU7Q0FDL0MsWUFBWSxJQUFJLENBQUMsVUFBVSxDQUFDLHNCQUFzQixFQUFFLENBQUM7Q0FDckQsWUFBWSxNQUFNLEtBQUssR0FBRyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQztDQUMzRSxZQUFZLE1BQU0sQ0FBQyxLQUFLLENBQUMscUVBQXFFLEVBQUUsS0FBSyxDQUFDLENBQUM7Q0FDdkcsWUFBWSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDdkQsWUFBWSxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUM7Q0FDekQsWUFBWSxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRTtDQUN2QyxnQkFBZ0IsTUFBTSxjQUFjLEdBQUdBLEtBQVksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQ3RFLGdCQUFnQixNQUFNLElBQUksQ0FBQyxlQUFlLENBQUMsRUFBRSxhQUFhLEVBQUUsUUFBUSxFQUFFLGNBQWMsRUFBRSxDQUFDLENBQUM7Q0FDeEYsYUFBYTtDQUNiLFlBQVksTUFBTSxDQUFDLEtBQUssQ0FBQyxzRUFBc0UsRUFBRSxNQUFNLENBQUMsQ0FBQztDQUN6RyxZQUFZLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztDQUN2RCxZQUFZLElBQUksQ0FBQywyQkFBMkIsR0FBRyxJQUFJLENBQUM7Q0FDcEQsU0FBUztDQUNULFFBQVEsT0FBTyxFQUFFLFdBQVcsRUFBRSxDQUFDO0NBQy9CLEtBQUs7Q0FDTCxJQUFJLE1BQU0sZUFBZSxDQUFDLEVBQUUsYUFBYSxFQUFFLGNBQWMsRUFBRSxFQUFFO0NBQzdELFFBQVEsSUFBSSxDQUFDLGNBQWM7Q0FDM0IsWUFBWSxjQUFjLEdBQUdBLEtBQVksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUMvRTtDQUNBLFFBQVEsTUFBTSxjQUFjLEdBQUdDLFdBQWMsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLFNBQVMsRUFBRSxjQUFjLEVBQUUsQ0FBQyxDQUFDO0NBQ25HO0NBQ0EsUUFBUSxjQUFjLENBQUMsSUFBSSxHQUFHLGFBQWEsQ0FBQztDQUM1QztDQUNBLFFBQVEsSUFBSSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsYUFBYSxLQUFLLFFBQVEsR0FBRyxRQUFRLEdBQUcsUUFBUSxDQUFDLENBQUM7Q0FDekY7Q0FDQSxRQUFRLE1BQU0sSUFBSSxDQUFDLGlCQUFpQixDQUFDLFVBQVUsRUFBRSxFQUFFLGNBQWMsRUFBRSxDQUFDLENBQUM7Q0FDckUsUUFBUSxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQztDQUNwQyxLQUFLO0NBQ0wsSUFBSSxvQkFBb0IsR0FBRztDQUMzQixRQUFRLElBQUksSUFBSSxDQUFDLFVBQVUsS0FBSyxNQUFNLEVBQUU7Q0FDeEMsWUFBWSxNQUFNLElBQUksS0FBSyxDQUFDLDhEQUE4RCxDQUFDLENBQUM7Q0FDNUYsU0FBUztDQUNULEtBQUs7Q0FDTCxJQUFJLG9CQUFvQixHQUFHO0NBQzNCLFFBQVEsSUFBSSxJQUFJLENBQUMsVUFBVSxLQUFLLE1BQU0sRUFBRTtDQUN4QyxZQUFZLE1BQU0sSUFBSSxLQUFLLENBQUMsOERBQThELENBQUMsQ0FBQztDQUM1RixTQUFTO0NBQ1QsS0FBSztDQUNMLENBQUM7Q0FDRCxnQkFBZ0IsR0FBRyxRQUFROzs7Ozs7O0FDaGYzQixDQUNBLE1BQU0sQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0NBQzlELFNBQVMsZUFBZSxDQUFDLEVBQUUsZ0JBQWdCLEVBQUUsS0FBSyxFQUFFLEVBQUU7QUFDdEQsQ0FFQSxJQUFJLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7Q0FDNUIsSUFBSSxLQUFLLE1BQU0sSUFBSSxJQUFJLGdCQUFnQixDQUFDLEtBQUssSUFBSSxFQUFFLEVBQUU7Q0FDckQsUUFBUSxJQUFJLElBQUksQ0FBQyxTQUFTLEtBQUssTUFBTTtDQUNyQyxZQUFZLFNBQVM7Q0FDckIsUUFBUSxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUNqRCxRQUFRLElBQUksT0FBTyxLQUFLLEtBQUssQ0FBQyxFQUFFLEVBQUU7Q0FDbEMsWUFBWSxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDO0NBQ2pDLFlBQVksS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM1QixDQUVBLFNBQVM7Q0FDVCxLQUFLO0NBQ0wsSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLEtBQUssQ0FBQztDQUN4QixRQUFRLE1BQU0sSUFBSSxLQUFLLENBQUMsQ0FBQyxzREFBc0QsRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDOUYsSUFBSSxNQUFNLGFBQWEsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO0NBQ3BDO0NBQ0EsSUFBSSxLQUFLLE1BQU0sSUFBSSxJQUFJLGdCQUFnQixDQUFDLFVBQVUsSUFBSSxFQUFFLEVBQUU7Q0FDMUQsUUFBUSxJQUFJLElBQUksQ0FBQyxTQUFTLEtBQUssS0FBSztDQUNwQyxZQUFZLFNBQVM7Q0FDckIsUUFBUSxJQUFJLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0NBQ3RELFFBQVEsSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztDQUM1QixRQUFRLE9BQU8sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7Q0FDbEMsUUFBUSxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUU7Q0FDN0I7Q0FDQTtDQUNBLFlBQVksS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztDQUMvQixZQUFZLEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7Q0FDbEM7Q0FDQSxZQUFZLGFBQWEsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0NBQzdDLFNBQVM7Q0FDVCxLQUFLO0NBQ0w7Q0FDQTtDQUNBLElBQUksS0FBSyxNQUFNLElBQUksSUFBSSxLQUFLLEVBQUU7Q0FDOUI7Q0FDQSxRQUFRLGFBQWEsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0NBQ3RDLEtBQUs7Q0FDTCxJQUFJLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQztDQUN6QixJQUFJLEtBQUssTUFBTSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSSxhQUFhLEVBQUU7Q0FDakQsUUFBUSxNQUFNLFFBQVEsR0FBRyxFQUFFLElBQUksRUFBRSxDQUFDO0NBQ2xDLFFBQVEsSUFBSSxPQUFPO0NBQ25CLFlBQVksUUFBUSxDQUFDLEdBQUcsR0FBRyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsQ0FBQztDQUM3QyxRQUFRLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7Q0FDakMsS0FBSztDQUNMLElBQUksT0FBTyxTQUFTLENBQUM7Q0FDckIsQ0FBQztDQUNELHVCQUF1QixHQUFHLGVBQWUsQ0FBQztDQUMxQztDQUNBO0NBQ0E7Q0FDQSxTQUFTLGtCQUFrQixDQUFDLEVBQUUsZ0JBQWdCLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxFQUFFO0NBQ3JFLElBQUksSUFBSSxVQUFVLElBQUksQ0FBQztDQUN2QixRQUFRLE1BQU0sSUFBSSxTQUFTLENBQUMsbUNBQW1DLENBQUMsQ0FBQztDQUNqRSxJQUFJLElBQUksU0FBUyxDQUFDO0NBQ2xCLElBQUksSUFBSSxZQUFZLENBQUM7Q0FDckIsSUFBSSxJQUFJLFFBQVEsQ0FBQztDQUNqQjtDQUNBLElBQUksTUFBTSxZQUFZLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLElBQUksRUFBRTtDQUN0RCxTQUFTLElBQUksQ0FBQyxDQUFDLElBQUksS0FBSztDQUN4QixRQUFRLElBQUksSUFBSSxDQUFDLFNBQVMsS0FBSyxNQUFNO0NBQ3JDLFlBQVksT0FBTyxLQUFLLENBQUM7Q0FDekIsUUFBUSxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUNqRCxRQUFRLElBQUksT0FBTyxLQUFLLEtBQUssQ0FBQyxFQUFFLEVBQUU7Q0FDbEMsWUFBWSxTQUFTLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQztDQUNoQyxZQUFZLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUNoRCxZQUFZLE9BQU8sSUFBSSxDQUFDO0NBQ3hCLFNBQVM7Q0FDVCxhQUFhO0NBQ2IsWUFBWSxPQUFPLEtBQUssQ0FBQztDQUN6QixTQUFTO0NBQ1QsS0FBSyxDQUFDLENBQUM7Q0FDUCxJQUFJLElBQUksQ0FBQyxZQUFZO0NBQ3JCLFFBQVEsTUFBTSxJQUFJLEtBQUssQ0FBQyxDQUFDLHNEQUFzRCxFQUFFLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUM5RjtDQUNBLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLElBQUksRUFBRTtDQUN0QyxTQUFTLElBQUksQ0FBQyxDQUFDLElBQUksS0FBSztDQUN4QixRQUFRLElBQUksSUFBSSxDQUFDLFNBQVMsS0FBSyxLQUFLO0NBQ3BDLFlBQVksT0FBTyxLQUFLLENBQUM7Q0FDekIsUUFBUSxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztDQUM5QyxRQUFRLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLFNBQVMsRUFBRTtDQUM1QyxZQUFZLFlBQVksR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDNUMsWUFBWSxPQUFPLElBQUksQ0FBQztDQUN4QixTQUFTO0NBQ1QsYUFBYTtDQUNiLFlBQVksT0FBTyxLQUFLLENBQUM7Q0FDekIsU0FBUztDQUNULEtBQUssQ0FBQyxDQUFDO0NBQ1AsSUFBSSxNQUFNLGFBQWEsR0FBRyxnQkFBZ0IsQ0FBQyxLQUFLO0NBQ2hELFNBQVMsSUFBSSxDQUFDLENBQUMsSUFBSSxNQUFNLElBQUksQ0FBQyxTQUFTLEtBQUssT0FBTyxJQUFJLElBQUksQ0FBQyxFQUFFLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztDQUMvRSxJQUFJLElBQUksQ0FBQyxhQUFhO0NBQ3RCLFFBQVEsTUFBTSxJQUFJLEtBQUssQ0FBQyxDQUFDLHVEQUF1RCxFQUFFLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUMvRixJQUFJLE1BQU0sS0FBSyxHQUFHLGFBQWEsQ0FBQyxLQUFLLENBQUM7Q0FDdEMsSUFBSSxNQUFNLEtBQUssR0FBRyxFQUFFLENBQUM7Q0FDckIsSUFBSSxNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUM7Q0FDeEIsSUFBSSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsVUFBVSxFQUFFLEVBQUUsQ0FBQyxFQUFFO0NBQ3pDLFFBQVEsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUM7Q0FDbEMsUUFBUSxJQUFJLFlBQVk7Q0FDeEIsWUFBWSxRQUFRLENBQUMsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUMsQ0FBQztDQUM1QyxLQUFLO0NBQ0wsSUFBSSxnQkFBZ0IsQ0FBQyxVQUFVLEdBQUcsZ0JBQWdCLENBQUMsVUFBVSxJQUFJLEVBQUUsQ0FBQztDQUNwRSxJQUFJLGdCQUFnQixDQUFDLEtBQUssR0FBRyxnQkFBZ0IsQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDO0NBQzFELElBQUksZ0JBQWdCLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQztDQUNyQyxRQUFRLFNBQVMsRUFBRSxLQUFLO0NBQ3hCLFFBQVEsS0FBSyxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO0NBQzlCLEtBQUssQ0FBQyxDQUFDO0NBQ1AsSUFBSSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsRUFBRTtDQUMzQyxRQUFRLE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUM5QixRQUFRLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7Q0FDcEMsWUFBWSxFQUFFLEVBQUUsSUFBSTtDQUNwQixZQUFZLFNBQVMsRUFBRSxPQUFPO0NBQzlCLFlBQVksS0FBSyxFQUFFLEtBQUs7Q0FDeEIsU0FBUyxDQUFDLENBQUM7Q0FDWCxRQUFRLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7Q0FDcEMsWUFBWSxFQUFFLEVBQUUsSUFBSTtDQUNwQixZQUFZLFNBQVMsRUFBRSxNQUFNO0NBQzdCLFlBQVksS0FBSyxFQUFFLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztDQUM1QyxTQUFTLENBQUMsQ0FBQztDQUNYLEtBQUs7Q0FDTCxJQUFJLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxRQUFRLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFO0NBQzlDLFFBQVEsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQzlCLFFBQVEsTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ3BDLFFBQVEsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztDQUNwQyxZQUFZLEVBQUUsRUFBRSxPQUFPO0NBQ3ZCLFlBQVksU0FBUyxFQUFFLE9BQU87Q0FDOUIsWUFBWSxLQUFLLEVBQUUsS0FBSztDQUN4QixTQUFTLENBQUMsQ0FBQztDQUNYLFFBQVEsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztDQUNwQyxZQUFZLEVBQUUsRUFBRSxPQUFPO0NBQ3ZCLFlBQVksU0FBUyxFQUFFLE1BQU07Q0FDN0IsWUFBWSxLQUFLLEVBQUUsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0NBQzVDLFNBQVMsQ0FBQyxDQUFDO0NBQ1gsUUFBUSxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDO0NBQ3pDLFlBQVksU0FBUyxFQUFFLEtBQUs7Q0FDNUIsWUFBWSxLQUFLLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7Q0FDdkMsU0FBUyxDQUFDLENBQUM7Q0FDWCxLQUFLO0NBQ0wsQ0FBQztDQUNELDBCQUEwQixHQUFHLGtCQUFrQjs7Ozs7Ozs7QUM5SS9DLENBQ0EsTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7QUFDaEI7QUFDUjtBQUNKO0FBQ0Y7QUFDb0I7QUFDRjtBQUNPO0FBQ1Y7Q0FDL0MsTUFBTSxNQUFNLEdBQUcsSUFBSSxRQUFRLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0NBQy9DLE1BQU0sZ0JBQWdCLEdBQUcsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsQ0FBQztDQUNqRCxNQUFNLFFBQVEsU0FBUyxrQkFBa0IsQ0FBQyxnQkFBZ0IsQ0FBQztDQUMzRCxJQUFJLFdBQVcsR0FBRztDQUNsQixRQUFRLEtBQUssRUFBRSxDQUFDO0NBQ2hCO0NBQ0EsUUFBUSxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksV0FBVyxFQUFFLENBQUM7Q0FDN0M7Q0FDQSxRQUFRLElBQUksQ0FBQyx3QkFBd0IsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO0NBQ2xEO0NBQ0EsUUFBUSxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsQ0FBQyxDQUFDO0NBQ2xDO0NBQ0E7Q0FDQSxRQUFRLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO0NBQzdDO0NBQ0EsUUFBUSxJQUFJLENBQUMsMkJBQTJCLEdBQUcsS0FBSyxDQUFDO0NBQ2pEO0NBQ0EsUUFBUSxJQUFJLENBQUMscUJBQXFCLEdBQUcsQ0FBQyxDQUFDO0NBQ3ZDO0NBQ0EsUUFBUSxJQUFJLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQztDQUNyQyxLQUFLO0NBQ0w7Q0FDQTtDQUNBO0NBQ0EsSUFBSSxPQUFPLGFBQWEsR0FBRztDQUMzQixRQUFRLE9BQU8sTUFBTSxJQUFJLFFBQVEsRUFBRSxDQUFDO0NBQ3BDLEtBQUs7Q0FDTCxJQUFJLElBQUksSUFBSSxHQUFHO0NBQ2YsUUFBUSxPQUFPLFVBQVUsQ0FBQztDQUMxQixLQUFLO0NBQ0wsSUFBSSxLQUFLLEdBQUc7Q0FDWixRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7Q0FDaEM7Q0FDQSxRQUFRLElBQUksSUFBSSxDQUFDLEdBQUcsRUFBRTtDQUN0QixZQUFZLElBQUk7Q0FDaEIsZ0JBQWdCLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7Q0FDakMsYUFBYTtDQUNiLFlBQVksT0FBTyxLQUFLLEVBQUUsR0FBRztDQUM3QixTQUFTO0NBQ1QsS0FBSztDQUNMLElBQUksTUFBTSx3QkFBd0IsR0FBRztDQUNyQyxRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsNEJBQTRCLENBQUMsQ0FBQztDQUNuRCxRQUFRLE1BQU0sRUFBRSxHQUFHLElBQUksaUJBQWlCLENBQUM7Q0FDekMsWUFBWSxVQUFVLEVBQUUsRUFBRTtDQUMxQixZQUFZLGtCQUFrQixFQUFFLEtBQUs7Q0FDckMsWUFBWSxZQUFZLEVBQUUsWUFBWTtDQUN0QyxZQUFZLGFBQWEsRUFBRSxTQUFTO0NBQ3BDLFlBQVksWUFBWSxFQUFFLFFBQVE7Q0FDbEMsU0FBUyxDQUFDLENBQUM7Q0FDWCxRQUFRLElBQUk7Q0FDWixZQUFZLE1BQU0sS0FBSyxHQUFHLE1BQU0sRUFBRSxDQUFDLFdBQVcsQ0FBQztDQUMvQyxnQkFBZ0IsbUJBQW1CLEVBQUUsSUFBSTtDQUN6QyxnQkFBZ0IsbUJBQW1CLEVBQUUsSUFBSTtDQUN6QyxhQUFhLENBQUMsQ0FBQztDQUNmLFlBQVksSUFBSTtDQUNoQixnQkFBZ0IsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0NBQzNCLGFBQWE7Q0FDYixZQUFZLE9BQU8sS0FBSyxFQUFFLEdBQUc7Q0FDN0IsWUFBWSxNQUFNLFNBQVMsR0FBR0QsS0FBWSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDNUQsWUFBWSxNQUFNLHFCQUFxQixHQUFHQyxXQUFjLENBQUMsc0JBQXNCLENBQUMsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDO0NBQy9GLFlBQVksT0FBTyxxQkFBcUIsQ0FBQztDQUN6QyxTQUFTO0NBQ1QsUUFBUSxPQUFPLEtBQUssRUFBRTtDQUN0QixZQUFZLElBQUk7Q0FDaEIsZ0JBQWdCLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztDQUMzQixhQUFhO0NBQ2IsWUFBWSxPQUFPLE1BQU0sRUFBRSxHQUFHO0NBQzlCLFlBQVksTUFBTSxLQUFLLENBQUM7Q0FDeEIsU0FBUztDQUNULEtBQUs7Q0FDTCxJQUFJLE1BQU0seUJBQXlCLEdBQUc7Q0FDdEMsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLDZCQUE2QixDQUFDLENBQUM7Q0FDcEQsUUFBUSxPQUFPO0NBQ2YsWUFBWSxVQUFVLEVBQUUsZ0JBQWdCO0NBQ3hDLFNBQVMsQ0FBQztDQUNWLEtBQUs7Q0FDTCxJQUFJLEdBQUcsQ0FBQyxFQUFFLFNBQVMsRUFBRSxhQUFhLEVBQUUsYUFBYSxFQUFFLGNBQWMsRUFBRSxjQUFjLEVBQUUsVUFBVSxFQUFFLGtCQUFrQixFQUFFLGtCQUFrQixFQUFFLHNCQUFzQixFQUFFLHVCQUF1QixFQUFFLEVBQUU7Q0FDMUwsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0NBQzlCLFFBQVEsSUFBSSxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUM7Q0FDcEMsUUFBUSxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksV0FBVyxDQUFDLFNBQVMsQ0FBQztDQUNwRCxZQUFZLGFBQWE7Q0FDekIsWUFBWSxhQUFhO0NBQ3pCLFlBQVksY0FBYztDQUMxQixZQUFZLGNBQWM7Q0FDMUIsWUFBWSxLQUFLLEVBQUUsSUFBSTtDQUN2QixTQUFTLENBQUMsQ0FBQztDQUNYLFFBQVEsSUFBSSxDQUFDLDJCQUEyQjtDQUN4QyxZQUFZO0NBQ1osZ0JBQWdCLEtBQUssRUFBRSxJQUFJLENBQUMsdUJBQXVCLENBQUMsT0FBTyxFQUFFLHVCQUF1QixDQUFDO0NBQ3JGLGdCQUFnQixLQUFLLEVBQUUsSUFBSSxDQUFDLHVCQUF1QixDQUFDLE9BQU8sRUFBRSx1QkFBdUIsQ0FBQztDQUNyRixhQUFhLENBQUM7Q0FDZCxRQUFRLElBQUksQ0FBQyxpQ0FBaUM7Q0FDOUMsWUFBWTtDQUNaLGdCQUFnQixLQUFLLEVBQUUsSUFBSSxDQUFDLDZCQUE2QixDQUFDLE9BQU8sRUFBRSx1QkFBdUIsQ0FBQztDQUMzRixnQkFBZ0IsS0FBSyxFQUFFLElBQUksQ0FBQyw2QkFBNkIsQ0FBQyxPQUFPLEVBQUUsdUJBQXVCLENBQUM7Q0FDM0YsYUFBYSxDQUFDO0NBQ2QsUUFBUSxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksaUJBQWlCLENBQUM7Q0FDekMsWUFBWSxVQUFVLEVBQUUsVUFBVSxJQUFJLEVBQUU7Q0FDeEMsWUFBWSxrQkFBa0IsRUFBRSxrQkFBa0IsSUFBSSxLQUFLO0NBQzNELFlBQVksWUFBWSxFQUFFLFlBQVk7Q0FDdEMsWUFBWSxhQUFhLEVBQUUsU0FBUztDQUNwQyxZQUFZLFlBQVksRUFBRSxRQUFRO0NBQ2xDLFlBQVksR0FBRyxrQkFBa0I7Q0FDakMsU0FBUyxFQUFFLHNCQUFzQixDQUFDLENBQUM7Q0FDbkM7Q0FDQSxRQUFRLElBQUksQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsMEJBQTBCLEVBQUUsTUFBTTtDQUNwRSxZQUFZLFFBQVEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxrQkFBa0I7Q0FDL0MsZ0JBQWdCLEtBQUssVUFBVTtDQUMvQixvQkFBb0IsSUFBSSxDQUFDLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxZQUFZLENBQUMsQ0FBQztDQUN0RSxvQkFBb0IsTUFBTTtDQUMxQixnQkFBZ0IsS0FBSyxXQUFXLENBQUM7Q0FDakMsZ0JBQWdCLEtBQUssV0FBVztDQUNoQyxvQkFBb0IsSUFBSSxDQUFDLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxXQUFXLENBQUMsQ0FBQztDQUNyRSxvQkFBb0IsTUFBTTtDQUMxQixnQkFBZ0IsS0FBSyxRQUFRO0NBQzdCLG9CQUFvQixJQUFJLENBQUMsSUFBSSxDQUFDLHdCQUF3QixFQUFFLFFBQVEsQ0FBQyxDQUFDO0NBQ2xFLG9CQUFvQixNQUFNO0NBQzFCLGdCQUFnQixLQUFLLGNBQWM7Q0FDbkMsb0JBQW9CLElBQUksQ0FBQyxJQUFJLENBQUMsd0JBQXdCLEVBQUUsY0FBYyxDQUFDLENBQUM7Q0FDeEUsb0JBQW9CLE1BQU07Q0FDMUIsZ0JBQWdCLEtBQUssUUFBUTtDQUM3QixvQkFBb0IsSUFBSSxDQUFDLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxRQUFRLENBQUMsQ0FBQztDQUNsRSxvQkFBb0IsTUFBTTtDQUMxQixhQUFhO0NBQ2IsU0FBUyxDQUFDLENBQUM7Q0FDWCxLQUFLO0NBQ0wsSUFBSSxNQUFNLGdCQUFnQixDQUFDLFVBQVUsRUFBRTtDQUN2QyxRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQztDQUMzQyxRQUFRLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztDQUMxRCxRQUFRLGFBQWEsQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO0NBQzlDLFFBQVEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLENBQUMsQ0FBQztDQUNqRCxLQUFLO0NBQ0wsSUFBSSxNQUFNLFVBQVUsQ0FBQyxhQUFhLEVBQUU7Q0FDcEMsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0NBQ3JDO0NBQ0EsUUFBUSxJQUFJLENBQUMsVUFBVSxDQUFDLG1CQUFtQixDQUFDLGFBQWEsQ0FBQyxDQUFDO0NBQzNELFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlO0NBQ2pDLFlBQVksT0FBTztDQUNuQixRQUFRLElBQUksSUFBSSxDQUFDLFVBQVUsS0FBSyxNQUFNLEVBQUU7Q0FDeEMsWUFBWSxNQUFNLEtBQUssR0FBRyxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7Q0FDM0UsWUFBWSxNQUFNLENBQUMsS0FBSyxDQUFDLDREQUE0RCxFQUFFLEtBQUssQ0FBQyxDQUFDO0NBQzlGLFlBQVksTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDO0NBQ3RELFlBQVksTUFBTSxNQUFNLEdBQUcsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUM7Q0FDN0UsWUFBWSxNQUFNLENBQUMsS0FBSyxDQUFDLDhEQUE4RCxFQUFFLE1BQU0sQ0FBQyxDQUFDO0NBQ2pHLFlBQVksTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0NBQ3hELFNBQVM7Q0FDVCxhQUFhO0NBQ2IsWUFBWSxNQUFNLEtBQUssR0FBRyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQztDQUMzRSxZQUFZLE1BQU0sQ0FBQyxLQUFLLENBQUMsNkRBQTZELEVBQUUsS0FBSyxDQUFDLENBQUM7Q0FDL0YsWUFBWSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDdkQsWUFBWSxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUM7Q0FDekQsWUFBWSxNQUFNLENBQUMsS0FBSyxDQUFDLDZEQUE2RCxFQUFFLE1BQU0sQ0FBQyxDQUFDO0NBQ2hHLFlBQVksTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0NBQ3ZELFNBQVM7Q0FDVCxLQUFLO0NBQ0wsSUFBSSxNQUFNLGlCQUFpQixHQUFHO0NBQzlCLFFBQVEsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDO0NBQ25DLEtBQUs7Q0FDTCxJQUFJLE1BQU0sSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLEVBQUU7Q0FDMUQsUUFBUSxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztDQUNwQyxRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsK0JBQStCLEVBQUUsS0FBSyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7Q0FDNUUsUUFBUSxJQUFJLEtBQUssRUFBRTtDQUNuQixZQUFZLE1BQU0sQ0FBQyxJQUFJLENBQUMseURBQXlELEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0NBQzlGLFNBQVM7Q0FDVCxRQUFRLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0NBQ3pDLFFBQVEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztDQUNuRCxRQUFRLElBQUksS0FBSyxHQUFHLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztDQUNqRCxRQUFRLElBQUksY0FBYyxHQUFHRCxLQUFZLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUMzRCxRQUFRLElBQUksZ0JBQWdCLENBQUM7Q0FDN0IsUUFBUSxNQUFNLG9CQUFvQixHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLDJCQUEyQixDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0NBQy9GLFFBQVEsb0JBQW9CLENBQUMsTUFBTTtDQUNuQyxZQUFZLElBQUksQ0FBQyxZQUFZLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLENBQUM7Q0FDM0QsUUFBUSxNQUFNLDBCQUEwQixHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGlDQUFpQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0NBQzNHLFFBQVEsMEJBQTBCLENBQUMsTUFBTTtDQUN6QyxZQUFZLElBQUksQ0FBQyxZQUFZLENBQUMsMEJBQTBCLENBQUMsTUFBTSxDQUFDLENBQUM7Q0FDakUsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWU7Q0FDakMsWUFBWSxNQUFNLElBQUksQ0FBQyxlQUFlLENBQUMsRUFBRSxhQUFhLEVBQUUsUUFBUSxFQUFFLGNBQWMsRUFBRSxDQUFDLENBQUM7Q0FDcEYsUUFBUSxJQUFJLEtBQUssQ0FBQyxJQUFJLEtBQUssT0FBTyxJQUFJLFNBQVMsSUFBSSxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtDQUN6RSxZQUFZLE1BQU0sQ0FBQyxLQUFLLENBQUMsNkJBQTZCLENBQUMsQ0FBQztDQUN4RCxZQUFZLGNBQWMsR0FBR0EsS0FBWSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDM0QsWUFBWSxnQkFBZ0IsR0FBRyxjQUFjLENBQUMsS0FBSztDQUNuRCxpQkFBaUIsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLEtBQUssT0FBTyxDQUFDLENBQUM7Q0FDakQsWUFBWUksVUFBYSxDQUFDLGtCQUFrQixDQUFDO0NBQzdDLGdCQUFnQixnQkFBZ0I7Q0FDaEMsZ0JBQWdCLEtBQUs7Q0FDckIsZ0JBQWdCLFVBQVUsRUFBRSxTQUFTLENBQUMsTUFBTTtDQUM1QyxhQUFhLENBQUMsQ0FBQztDQUNmLFlBQVksS0FBSyxHQUFHLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUVKLEtBQVksQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQztDQUMvRSxTQUFTO0NBQ1QsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLHNEQUFzRCxFQUFFLEtBQUssQ0FBQyxDQUFDO0NBQ3BGLFFBQVEsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDO0NBQ2xELFFBQVEsY0FBYyxHQUFHQSxLQUFZLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDM0UsUUFBUSxnQkFBZ0IsR0FBRyxjQUFjLENBQUMsS0FBSztDQUMvQyxhQUFhLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxLQUFLLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztDQUNoRDtDQUNBLFFBQVEsb0JBQW9CLENBQUMsSUFBSSxDQUFDLEtBQUs7Q0FDdkMsWUFBWUMsV0FBYyxDQUFDLFFBQVEsQ0FBQyxFQUFFLGdCQUFnQixFQUFFLENBQUMsQ0FBQztDQUMxRDtDQUNBLFFBQVEsb0JBQW9CLENBQUMsU0FBUztDQUN0QyxZQUFZRyxVQUFhLENBQUMsZUFBZSxDQUFDLEVBQUUsZ0JBQWdCLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztDQUN2RTtDQUNBLFFBQVEsSUFBSSxTQUFTLEVBQUU7Q0FDdkIsWUFBWSxLQUFLLElBQUksR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsb0JBQW9CLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxFQUFFLEdBQUcsRUFBRTtDQUNsRixnQkFBZ0IsSUFBSSxTQUFTLENBQUMsR0FBRyxDQUFDO0NBQ2xDLG9CQUFvQixNQUFNLENBQUMsTUFBTSxDQUFDLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRSxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztDQUN2RixhQUFhO0NBQ2IsU0FBUztDQUNUO0NBQ0E7Q0FDQSxRQUFRLElBQUksb0JBQW9CLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDO0NBQ3JELFlBQVksb0JBQW9CLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsS0FBSyxXQUFXLEVBQUU7Q0FDbkYsWUFBWSxLQUFLLE1BQU0sUUFBUSxJQUFJLG9CQUFvQixDQUFDLFNBQVMsRUFBRTtDQUNuRSxnQkFBZ0IsUUFBUSxDQUFDLGVBQWUsR0FBRyxNQUFNLENBQUM7Q0FDbEQsYUFBYTtDQUNiLFNBQVM7Q0FDVCxRQUFRLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDO0NBQzdCLFlBQVksZ0JBQWdCO0NBQzVCLFlBQVksa0JBQWtCLEVBQUUsb0JBQW9CO0NBQ3BELFlBQVksbUJBQW1CLEVBQUUsMEJBQTBCO0NBQzNELFlBQVksWUFBWTtDQUN4QixTQUFTLENBQUMsQ0FBQztDQUNYLFFBQVEsTUFBTSxNQUFNLEdBQUcsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUM7Q0FDekUsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLHdEQUF3RCxFQUFFLE1BQU0sQ0FBQyxDQUFDO0NBQ3ZGLFFBQVEsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0NBQ3BELFFBQVEsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0NBQ3RELFFBQVEsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7Q0FDaEMsUUFBUSxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRTtDQUMvQyxhQUFhLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxLQUFLLEtBQUssQ0FBQyxDQUFDO0NBQzVDO0NBQ0EsUUFBUSxJQUFJLENBQUMsd0JBQXdCLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQztDQUM5RCxRQUFRLE9BQU87Q0FDZixZQUFZLE9BQU8sRUFBRSxPQUFPO0NBQzVCLFlBQVksYUFBYSxFQUFFLG9CQUFvQjtDQUMvQyxZQUFZLFNBQVM7Q0FDckIsU0FBUyxDQUFDO0NBQ1YsS0FBSztDQUNMLElBQUksTUFBTSxXQUFXLENBQUMsT0FBTyxFQUFFO0NBQy9CLFFBQVEsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7Q0FDcEMsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLDRCQUE0QixFQUFFLE9BQU8sQ0FBQyxDQUFDO0NBQzVELFFBQVEsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLHdCQUF3QixDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztDQUNyRSxRQUFRLElBQUksQ0FBQyxTQUFTO0NBQ3RCLFlBQVksTUFBTSxJQUFJLEtBQUssQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO0NBQ2pFLFFBQVEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7Q0FDeEMsUUFBUSxJQUFJLFNBQVMsQ0FBQyxLQUFLO0NBQzNCLFlBQVksSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO0NBQzFELFFBQVEsSUFBSSxDQUFDLHdCQUF3QixDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztDQUN0RCxRQUFRLE1BQU0sS0FBSyxHQUFHLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztDQUNuRCxRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsNkRBQTZELEVBQUUsS0FBSyxDQUFDLENBQUM7Q0FDM0YsUUFBUSxJQUFJO0NBQ1osWUFBWSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDdEQsU0FBUztDQUNULFFBQVEsT0FBTyxLQUFLLEVBQUU7Q0FDdEI7Q0FDQTtDQUNBLFlBQVksSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7Q0FDM0QsZ0JBQWdCLE1BQU0sQ0FBQyxJQUFJLENBQUMsbUVBQW1FLEVBQUUsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7Q0FDbkgsZ0JBQWdCLE9BQU87Q0FDdkIsYUFBYTtDQUNiLFlBQVksTUFBTSxLQUFLLENBQUM7Q0FDeEIsU0FBUztDQUNULFFBQVEsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLGNBQWMsS0FBSyxRQUFRO0NBQ2hELFlBQVksT0FBTztDQUNuQixRQUFRLE1BQU0sTUFBTSxHQUFHLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDO0NBQ3pFLFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQywrREFBK0QsRUFBRSxNQUFNLENBQUMsQ0FBQztDQUM5RixRQUFRLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztDQUNwRCxLQUFLO0NBQ0wsSUFBSSxNQUFNLFlBQVksQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFO0NBQ3ZDLFFBQVEsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7Q0FDcEMsUUFBUSxJQUFJLEtBQUssRUFBRTtDQUNuQixZQUFZLE1BQU0sQ0FBQyxLQUFLLENBQUMsMENBQTBDLEVBQUUsT0FBTyxFQUFFLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztDQUN4RixTQUFTO0NBQ1QsYUFBYTtDQUNiLFlBQVksTUFBTSxDQUFDLEtBQUssQ0FBQyx1Q0FBdUMsRUFBRSxPQUFPLENBQUMsQ0FBQztDQUMzRSxTQUFTO0NBQ1QsUUFBUSxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsd0JBQXdCLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0NBQ3JFLFFBQVEsSUFBSSxDQUFDLFNBQVM7Q0FDdEIsWUFBWSxNQUFNLElBQUksS0FBSyxDQUFDLG1DQUFtQyxDQUFDLENBQUM7Q0FDakUsUUFBUSxNQUFNLFFBQVEsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDO0NBQ3pDLFFBQVEsTUFBTSxTQUFTLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO0NBQzVDO0NBQ0EsUUFBUSxJQUFJLFFBQVE7Q0FDcEIsWUFBWSxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztDQUNuRDtDQUNBLFFBQVEsSUFBSSxLQUFLO0NBQ2pCLFlBQVksSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDN0MsS0FBSztDQUNMLElBQUksTUFBTSxrQkFBa0IsQ0FBQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0NBQ3BELFFBQVEsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7Q0FDcEMsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLG9EQUFvRCxFQUFFLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQztDQUNsRyxRQUFRLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7Q0FDckUsUUFBUSxJQUFJLENBQUMsU0FBUztDQUN0QixZQUFZLE1BQU0sSUFBSSxLQUFLLENBQUMsbUNBQW1DLENBQUMsQ0FBQztDQUNqRSxRQUFRLE1BQU0sVUFBVSxHQUFHLFNBQVMsQ0FBQyxhQUFhLEVBQUUsQ0FBQztDQUNyRCxRQUFRLFVBQVUsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxFQUFFLEdBQUcsS0FBSztDQUN4RCxZQUFZLElBQUksR0FBRyxJQUFJLFlBQVk7Q0FDbkMsZ0JBQWdCLFFBQVEsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO0NBQ3ZDO0NBQ0EsZ0JBQWdCLFFBQVEsQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO0NBQ3hDLFNBQVMsQ0FBQyxDQUFDO0NBQ1gsUUFBUSxNQUFNLFNBQVMsQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUM7Q0FDbEQsS0FBSztDQUNMLElBQUksTUFBTSx3QkFBd0IsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFO0NBQ3BELFFBQVEsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7Q0FDcEMsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLG9EQUFvRCxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztDQUM1RixRQUFRLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7Q0FDckUsUUFBUSxJQUFJLENBQUMsU0FBUztDQUN0QixZQUFZLE1BQU0sSUFBSSxLQUFLLENBQUMsbUNBQW1DLENBQUMsQ0FBQztDQUNqRSxRQUFRLE1BQU0sVUFBVSxHQUFHLFNBQVMsQ0FBQyxhQUFhLEVBQUUsQ0FBQztDQUNyRCxRQUFRLFVBQVUsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxFQUFFLEdBQUcsS0FBSztDQUN4RCxZQUFZLFVBQVUsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLFFBQVEsRUFBRSxHQUFHLE1BQU0sRUFBRSxDQUFDO0NBQ25FLFNBQVMsQ0FBQyxDQUFDO0NBQ1gsUUFBUSxNQUFNLFNBQVMsQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUM7Q0FDbEQsS0FBSztDQUNMLElBQUksTUFBTSxjQUFjLENBQUMsT0FBTyxFQUFFO0NBQ2xDLFFBQVEsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7Q0FDcEMsUUFBUSxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsd0JBQXdCLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0NBQ3JFLFFBQVEsSUFBSSxDQUFDLFNBQVM7Q0FDdEIsWUFBWSxNQUFNLElBQUksS0FBSyxDQUFDLG1DQUFtQyxDQUFDLENBQUM7Q0FDakUsUUFBUSxPQUFPLFNBQVMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztDQUNwQyxLQUFLO0NBQ0wsSUFBSSxNQUFNLGVBQWUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsRUFBRTtDQUNyRyxRQUFRLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO0NBQ3BDLFFBQVEsTUFBTSxPQUFPLEdBQUc7Q0FDeEIsWUFBWSxVQUFVLEVBQUUsSUFBSTtDQUM1QixZQUFZLEVBQUUsRUFBRSxJQUFJLENBQUMscUJBQXFCO0NBQzFDLFlBQVksT0FBTztDQUNuQixZQUFZLGlCQUFpQjtDQUM3QixZQUFZLGlCQUFpQixFQUFFLGlCQUFpQjtDQUNoRCxZQUFZLGNBQWM7Q0FDMUIsWUFBWSxRQUFRO0NBQ3BCLFlBQVksUUFBUTtDQUNwQixTQUFTLENBQUM7Q0FDVixRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLEVBQUUsT0FBTyxDQUFDLENBQUM7Q0FDaEUsUUFBUSxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztDQUN2RTtDQUNBLFFBQVEsSUFBSSxDQUFDLHFCQUFxQjtDQUNsQyxZQUFZLEVBQUUsSUFBSSxDQUFDLHFCQUFxQixHQUFHLGdCQUFnQixDQUFDLEdBQUcsQ0FBQztDQUNoRTtDQUNBO0NBQ0EsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLDJCQUEyQixFQUFFO0NBQy9DLFlBQVksTUFBTSxLQUFLLEdBQUcsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO0NBQ3ZELFlBQVksTUFBTSxjQUFjLEdBQUdKLEtBQVksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQ2pFLFlBQVksTUFBTSxnQkFBZ0IsR0FBRyxjQUFjLENBQUMsS0FBSztDQUN6RCxpQkFBaUIsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLEtBQUssYUFBYSxDQUFDLENBQUM7Q0FDdkQsWUFBWSxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWU7Q0FDckMsZ0JBQWdCLE1BQU0sSUFBSSxDQUFDLGVBQWUsQ0FBQyxFQUFFLGFBQWEsRUFBRSxRQUFRLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztDQUN4RixZQUFZLE1BQU0sQ0FBQyxLQUFLLENBQUMsaUVBQWlFLEVBQUUsS0FBSyxDQUFDLENBQUM7Q0FDbkcsWUFBWSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDdEQsWUFBWSxJQUFJLENBQUMsVUFBVSxDQUFDLG1CQUFtQixDQUFDLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDO0NBQ3RFLFlBQVksTUFBTSxNQUFNLEdBQUcsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUM7Q0FDN0UsWUFBWSxNQUFNLENBQUMsS0FBSyxDQUFDLG1FQUFtRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0NBQ3RHLFlBQVksTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0NBQ3hELFlBQVksSUFBSSxDQUFDLDJCQUEyQixHQUFHLElBQUksQ0FBQztDQUNwRCxTQUFTO0NBQ1QsUUFBUSxNQUFNLG9CQUFvQixHQUFHO0NBQ3JDLFlBQVksUUFBUSxFQUFFLE9BQU8sQ0FBQyxFQUFFO0NBQ2hDLFlBQVksT0FBTyxFQUFFLE9BQU8sQ0FBQyxPQUFPO0NBQ3BDLFlBQVksaUJBQWlCLEVBQUUsT0FBTyxDQUFDLGlCQUFpQjtDQUN4RCxZQUFZLGNBQWMsRUFBRSxPQUFPLENBQUMsY0FBYztDQUNsRCxTQUFTLENBQUM7Q0FDVixRQUFRLE9BQU8sRUFBRSxXQUFXLEVBQUUsb0JBQW9CLEVBQUUsQ0FBQztDQUNyRCxLQUFLO0NBQ0wsSUFBSSxNQUFNLE9BQU8sQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsYUFBYSxFQUFFLEVBQUU7Q0FDcEQsUUFBUSxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztDQUNwQyxRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsaUNBQWlDLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0NBQ3ZFLFFBQVEsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDO0NBQ2hDLFFBQVEsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDO0NBQ3pCLFFBQVEsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUM7Q0FDaEMsWUFBWSxHQUFHO0NBQ2YsWUFBWSxJQUFJO0NBQ2hCLFlBQVksa0JBQWtCLEVBQUUsYUFBYTtDQUM3QyxZQUFZLFFBQVEsRUFBRSxhQUFhLENBQUMsSUFBSSxDQUFDLEtBQUs7Q0FDOUMsWUFBWSxPQUFPO0NBQ25CLFNBQVMsQ0FBQyxDQUFDO0NBQ1gsUUFBUSxNQUFNLEtBQUssR0FBRyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQztDQUN2RSxRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsMERBQTBELEVBQUUsS0FBSyxDQUFDLENBQUM7Q0FDeEYsUUFBUSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDbkQsUUFBUSxJQUFJLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUM7Q0FDbkQsUUFBUSxNQUFNLGNBQWMsR0FBR0EsS0FBWSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDOUQsUUFBUSxNQUFNLGlCQUFpQixHQUFHLGNBQWMsQ0FBQyxLQUFLO0NBQ3RELGFBQWEsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7Q0FDaEQ7Q0FDQTtDQUNBLFFBQVFDLFdBQWMsQ0FBQyxvQkFBb0IsQ0FBQztDQUM1QyxZQUFZLGtCQUFrQixFQUFFLGFBQWE7Q0FDN0MsWUFBWSxpQkFBaUI7Q0FDN0IsU0FBUyxDQUFDLENBQUM7Q0FDWCxRQUFRLE1BQU0sR0FBRyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFRCxLQUFZLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUM7Q0FDN0UsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWU7Q0FDakMsWUFBWSxNQUFNLElBQUksQ0FBQyxlQUFlLENBQUMsRUFBRSxhQUFhLEVBQUUsUUFBUSxFQUFFLGNBQWMsRUFBRSxDQUFDLENBQUM7Q0FDcEYsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLDBEQUEwRCxFQUFFLE1BQU0sQ0FBQyxDQUFDO0NBQ3pGLFFBQVEsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0NBQ25ELFFBQVEsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUU7Q0FDbkQsYUFBYSxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUUsS0FBSyxPQUFPLENBQUMsQ0FBQztDQUM1RCxRQUFRLElBQUksQ0FBQyxXQUFXO0NBQ3hCLFlBQVksTUFBTSxJQUFJLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0NBQ3REO0NBQ0EsUUFBUSxJQUFJLENBQUMsbUJBQW1CLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxFQUFFLEdBQUcsRUFBRSxhQUFhLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBQztDQUNuRixRQUFRLE9BQU87Q0FDZixZQUFZLE9BQU87Q0FDbkIsWUFBWSxLQUFLLEVBQUUsV0FBVyxDQUFDLEtBQUs7Q0FDcEMsWUFBWSxXQUFXO0NBQ3ZCLFNBQVMsQ0FBQztDQUNWLEtBQUs7Q0FDTCxJQUFJLE1BQU0sYUFBYSxDQUFDLE9BQU8sRUFBRTtDQUNqQyxRQUFRLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO0NBQ3BDLFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyw4QkFBOEIsRUFBRSxPQUFPLENBQUMsQ0FBQztDQUM5RCxRQUFRLE1BQU0sRUFBRSxHQUFHLEVBQUUsYUFBYSxFQUFFLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7Q0FDbkY7Q0FDQSxRQUFRLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7Q0FDakQsUUFBUSxJQUFJLENBQUMsVUFBVSxDQUFDLGtCQUFrQixDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxrQkFBa0IsRUFBRSxhQUFhLEVBQUUsQ0FBQyxDQUFDO0NBQzVGLFFBQVEsTUFBTSxLQUFLLEdBQUcsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUM7Q0FDdkUsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLGdFQUFnRSxFQUFFLEtBQUssQ0FBQyxDQUFDO0NBQzlGLFFBQVEsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxDQUFDO0NBQ25ELFFBQVEsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxDQUFDO0NBQ3JELFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyxnRUFBZ0UsRUFBRSxNQUFNLENBQUMsQ0FBQztDQUMvRixRQUFRLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztDQUNuRCxLQUFLO0NBQ0wsSUFBSSxNQUFNLGdCQUFnQixDQUFDLE9BQU8sRUFBRTtDQUNwQyxRQUFRLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO0NBQ3BDLFFBQVEsTUFBTSxFQUFFLFdBQVcsRUFBRSxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO0NBQzVFLFFBQVEsSUFBSSxDQUFDLFdBQVc7Q0FDeEIsWUFBWSxNQUFNLElBQUksS0FBSyxDQUFDLHFDQUFxQyxDQUFDLENBQUM7Q0FDbkUsUUFBUSxPQUFPLFdBQVcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztDQUN0QyxLQUFLO0NBQ0wsSUFBSSxNQUFNLGtCQUFrQixDQUFDLEVBQUUsb0JBQW9CLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxFQUFFO0NBQ3hFLFFBQVEsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7Q0FDcEMsUUFBUSxNQUFNLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxjQUFjLEVBQUUsR0FBRyxvQkFBb0IsQ0FBQztDQUM5RixRQUFRLE1BQU0sT0FBTyxHQUFHO0NBQ3hCLFlBQVksVUFBVSxFQUFFLElBQUk7Q0FDNUIsWUFBWSxFQUFFLEVBQUUsUUFBUTtDQUN4QixZQUFZLE9BQU87Q0FDbkIsWUFBWSxpQkFBaUI7Q0FDN0IsWUFBWSxpQkFBaUIsRUFBRSxpQkFBaUI7Q0FDaEQsWUFBWSxjQUFjO0NBQzFCLFlBQVksUUFBUTtDQUNwQixTQUFTLENBQUM7Q0FDVixRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsbUNBQW1DLEVBQUUsT0FBTyxDQUFDLENBQUM7Q0FDbkUsUUFBUSxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztDQUN2RTtDQUNBO0NBQ0EsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLDJCQUEyQixFQUFFO0NBQy9DLFlBQVksSUFBSSxDQUFDLFVBQVUsQ0FBQyxzQkFBc0IsQ0FBQyxFQUFFLGtCQUFrQixFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7Q0FDakYsWUFBWSxNQUFNLEtBQUssR0FBRyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQztDQUMzRSxZQUFZLE1BQU0sQ0FBQyxLQUFLLENBQUMscUVBQXFFLEVBQUUsS0FBSyxDQUFDLENBQUM7Q0FDdkcsWUFBWSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDdkQsWUFBWSxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUM7Q0FDekQsWUFBWSxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRTtDQUN2QyxnQkFBZ0IsTUFBTSxjQUFjLEdBQUdBLEtBQVksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQ3RFLGdCQUFnQixNQUFNLElBQUksQ0FBQyxlQUFlLENBQUMsRUFBRSxhQUFhLEVBQUUsUUFBUSxFQUFFLGNBQWMsRUFBRSxDQUFDLENBQUM7Q0FDeEYsYUFBYTtDQUNiLFlBQVksTUFBTSxDQUFDLEtBQUssQ0FBQyxzRUFBc0UsRUFBRSxNQUFNLENBQUMsQ0FBQztDQUN6RyxZQUFZLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztDQUN2RCxZQUFZLElBQUksQ0FBQywyQkFBMkIsR0FBRyxJQUFJLENBQUM7Q0FDcEQsU0FBUztDQUNULFFBQVEsT0FBTyxFQUFFLFdBQVcsRUFBRSxDQUFDO0NBQy9CLEtBQUs7Q0FDTCxJQUFJLE1BQU0sZUFBZSxDQUFDLEVBQUUsYUFBYSxFQUFFLGNBQWMsRUFBRSxFQUFFO0NBQzdELFFBQVEsSUFBSSxDQUFDLGNBQWM7Q0FDM0IsWUFBWSxjQUFjLEdBQUdBLEtBQVksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUMvRTtDQUNBLFFBQVEsTUFBTSxjQUFjLEdBQUdDLFdBQWMsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLFNBQVMsRUFBRSxjQUFjLEVBQUUsQ0FBQyxDQUFDO0NBQ25HO0NBQ0EsUUFBUSxjQUFjLENBQUMsSUFBSSxHQUFHLGFBQWEsQ0FBQztDQUM1QztDQUNBLFFBQVEsSUFBSSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsYUFBYSxLQUFLLFFBQVEsR0FBRyxRQUFRLEdBQUcsUUFBUSxDQUFDLENBQUM7Q0FDekY7Q0FDQSxRQUFRLE1BQU0sSUFBSSxDQUFDLGlCQUFpQixDQUFDLFVBQVUsRUFBRSxFQUFFLGNBQWMsRUFBRSxDQUFDLENBQUM7Q0FDckUsUUFBUSxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQztDQUNwQyxLQUFLO0NBQ0wsSUFBSSxvQkFBb0IsR0FBRztDQUMzQixRQUFRLElBQUksSUFBSSxDQUFDLFVBQVUsS0FBSyxNQUFNLEVBQUU7Q0FDeEMsWUFBWSxNQUFNLElBQUksS0FBSyxDQUFDLDhEQUE4RCxDQUFDLENBQUM7Q0FDNUYsU0FBUztDQUNULEtBQUs7Q0FDTCxJQUFJLG9CQUFvQixHQUFHO0NBQzNCLFFBQVEsSUFBSSxJQUFJLENBQUMsVUFBVSxLQUFLLE1BQU0sRUFBRTtDQUN4QyxZQUFZLE1BQU0sSUFBSSxLQUFLLENBQUMsOERBQThELENBQUMsQ0FBQztDQUM1RixTQUFTO0NBQ1QsS0FBSztDQUNMLENBQUM7Q0FDRCxnQkFBZ0IsR0FBRyxRQUFROzs7Ozs7O0FDM2UzQixDQUNBLE1BQU0sQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQ2hCO0FBQ1I7QUFDQTtBQUNKO0FBQ0Y7QUFDb0I7QUFDRjtBQUNPO0FBQ1Y7Q0FDL0MsTUFBTSxNQUFNLEdBQUcsSUFBSSxRQUFRLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0NBQy9DLE1BQU0sZ0JBQWdCLEdBQUcsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsQ0FBQztDQUNqRCxNQUFNLFFBQVEsU0FBUyxrQkFBa0IsQ0FBQyxnQkFBZ0IsQ0FBQztDQUMzRCxJQUFJLFdBQVcsR0FBRztDQUNsQixRQUFRLEtBQUssRUFBRSxDQUFDO0NBQ2hCO0NBQ0EsUUFBUSxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksV0FBVyxFQUFFLENBQUM7Q0FDN0M7Q0FDQSxRQUFRLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO0NBQzlDO0NBQ0EsUUFBUSxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsQ0FBQyxDQUFDO0NBQ2xDO0NBQ0E7Q0FDQSxRQUFRLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO0NBQzdDO0NBQ0EsUUFBUSxJQUFJLENBQUMsMkJBQTJCLEdBQUcsS0FBSyxDQUFDO0NBQ2pEO0NBQ0EsUUFBUSxJQUFJLENBQUMscUJBQXFCLEdBQUcsQ0FBQyxDQUFDO0NBQ3ZDO0NBQ0EsUUFBUSxJQUFJLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQztDQUNyQyxLQUFLO0NBQ0w7Q0FDQTtDQUNBO0NBQ0EsSUFBSSxPQUFPLGFBQWEsR0FBRztDQUMzQixRQUFRLE9BQU8sTUFBTSxJQUFJLFFBQVEsRUFBRSxDQUFDO0NBQ3BDLEtBQUs7Q0FDTCxJQUFJLElBQUksSUFBSSxHQUFHO0NBQ2YsUUFBUSxPQUFPLFVBQVUsQ0FBQztDQUMxQixLQUFLO0NBQ0wsSUFBSSxLQUFLLEdBQUc7Q0FDWixRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7Q0FDaEM7Q0FDQSxRQUFRLElBQUksSUFBSSxDQUFDLEdBQUcsRUFBRTtDQUN0QixZQUFZLElBQUk7Q0FDaEIsZ0JBQWdCLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7Q0FDakMsYUFBYTtDQUNiLFlBQVksT0FBTyxLQUFLLEVBQUUsR0FBRztDQUM3QixTQUFTO0NBQ1QsS0FBSztDQUNMLElBQUksTUFBTSx3QkFBd0IsR0FBRztDQUNyQyxRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsNEJBQTRCLENBQUMsQ0FBQztDQUNuRCxRQUFRLE1BQU0sRUFBRSxHQUFHLElBQUksaUJBQWlCLENBQUM7Q0FDekMsWUFBWSxVQUFVLEVBQUUsRUFBRTtDQUMxQixZQUFZLGtCQUFrQixFQUFFLEtBQUs7Q0FDckMsWUFBWSxZQUFZLEVBQUUsWUFBWTtDQUN0QyxZQUFZLGFBQWEsRUFBRSxTQUFTO0NBQ3BDLFlBQVksWUFBWSxFQUFFLFFBQVE7Q0FDbEMsU0FBUyxDQUFDLENBQUM7Q0FDWCxRQUFRLElBQUk7Q0FDWixZQUFZLE1BQU0sS0FBSyxHQUFHLE1BQU0sRUFBRSxDQUFDLFdBQVcsQ0FBQztDQUMvQyxnQkFBZ0IsbUJBQW1CLEVBQUUsSUFBSTtDQUN6QyxnQkFBZ0IsbUJBQW1CLEVBQUUsSUFBSTtDQUN6QyxhQUFhLENBQUMsQ0FBQztDQUNmLFlBQVksSUFBSTtDQUNoQixnQkFBZ0IsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0NBQzNCLGFBQWE7Q0FDYixZQUFZLE9BQU8sS0FBSyxFQUFFLEdBQUc7Q0FDN0IsWUFBWSxNQUFNLFNBQVMsR0FBR0QsS0FBWSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDNUQsWUFBWSxNQUFNLHFCQUFxQixHQUFHQyxXQUFjLENBQUMsc0JBQXNCLENBQUMsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDO0NBQy9GLFlBQVksT0FBTyxxQkFBcUIsQ0FBQztDQUN6QyxTQUFTO0NBQ1QsUUFBUSxPQUFPLEtBQUssRUFBRTtDQUN0QixZQUFZLElBQUk7Q0FDaEIsZ0JBQWdCLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztDQUMzQixhQUFhO0NBQ2IsWUFBWSxPQUFPLE1BQU0sRUFBRSxHQUFHO0NBQzlCLFlBQVksTUFBTSxLQUFLLENBQUM7Q0FDeEIsU0FBUztDQUNULEtBQUs7Q0FDTCxJQUFJLE1BQU0seUJBQXlCLEdBQUc7Q0FDdEMsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLDZCQUE2QixDQUFDLENBQUM7Q0FDcEQsUUFBUSxPQUFPO0NBQ2YsWUFBWSxVQUFVLEVBQUUsZ0JBQWdCO0NBQ3hDLFNBQVMsQ0FBQztDQUNWLEtBQUs7Q0FDTCxJQUFJLEdBQUcsQ0FBQyxFQUFFLFNBQVMsRUFBRSxhQUFhLEVBQUUsYUFBYSxFQUFFLGNBQWMsRUFBRSxjQUFjLEVBQUUsVUFBVSxFQUFFLGtCQUFrQixFQUFFLGtCQUFrQixFQUFFLHNCQUFzQixFQUFFLHVCQUF1QixFQUFFLEVBQUU7Q0FDMUwsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0NBQzlCLFFBQVEsSUFBSSxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUM7Q0FDcEMsUUFBUSxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksV0FBVyxDQUFDLFNBQVMsQ0FBQztDQUNwRCxZQUFZLGFBQWE7Q0FDekIsWUFBWSxhQUFhO0NBQ3pCLFlBQVksY0FBYztDQUMxQixZQUFZLGNBQWM7Q0FDMUIsWUFBWSxLQUFLLEVBQUUsSUFBSTtDQUN2QixTQUFTLENBQUMsQ0FBQztDQUNYLFFBQVEsSUFBSSxDQUFDLDJCQUEyQjtDQUN4QyxZQUFZO0NBQ1osZ0JBQWdCLEtBQUssRUFBRSxJQUFJLENBQUMsdUJBQXVCLENBQUMsT0FBTyxFQUFFLHVCQUF1QixDQUFDO0NBQ3JGLGdCQUFnQixLQUFLLEVBQUUsSUFBSSxDQUFDLHVCQUF1QixDQUFDLE9BQU8sRUFBRSx1QkFBdUIsQ0FBQztDQUNyRixhQUFhLENBQUM7Q0FDZCxRQUFRLElBQUksQ0FBQyxpQ0FBaUM7Q0FDOUMsWUFBWTtDQUNaLGdCQUFnQixLQUFLLEVBQUUsSUFBSSxDQUFDLDZCQUE2QixDQUFDLE9BQU8sRUFBRSx1QkFBdUIsQ0FBQztDQUMzRixnQkFBZ0IsS0FBSyxFQUFFLElBQUksQ0FBQyw2QkFBNkIsQ0FBQyxPQUFPLEVBQUUsdUJBQXVCLENBQUM7Q0FDM0YsYUFBYSxDQUFDO0NBQ2QsUUFBUSxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksaUJBQWlCLENBQUM7Q0FDekMsWUFBWSxVQUFVLEVBQUUsVUFBVSxJQUFJLEVBQUU7Q0FDeEMsWUFBWSxrQkFBa0IsRUFBRSxrQkFBa0IsSUFBSSxLQUFLO0NBQzNELFlBQVksWUFBWSxFQUFFLFlBQVk7Q0FDdEMsWUFBWSxhQUFhLEVBQUUsU0FBUztDQUNwQyxZQUFZLFlBQVksRUFBRSxRQUFRO0NBQ2xDLFlBQVksR0FBRyxrQkFBa0I7Q0FDakMsU0FBUyxFQUFFLHNCQUFzQixDQUFDLENBQUM7Q0FDbkM7Q0FDQSxRQUFRLElBQUksQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsMEJBQTBCLEVBQUUsTUFBTTtDQUNwRSxZQUFZLFFBQVEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxrQkFBa0I7Q0FDL0MsZ0JBQWdCLEtBQUssVUFBVTtDQUMvQixvQkFBb0IsSUFBSSxDQUFDLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxZQUFZLENBQUMsQ0FBQztDQUN0RSxvQkFBb0IsTUFBTTtDQUMxQixnQkFBZ0IsS0FBSyxXQUFXLENBQUM7Q0FDakMsZ0JBQWdCLEtBQUssV0FBVztDQUNoQyxvQkFBb0IsSUFBSSxDQUFDLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxXQUFXLENBQUMsQ0FBQztDQUNyRSxvQkFBb0IsTUFBTTtDQUMxQixnQkFBZ0IsS0FBSyxRQUFRO0NBQzdCLG9CQUFvQixJQUFJLENBQUMsSUFBSSxDQUFDLHdCQUF3QixFQUFFLFFBQVEsQ0FBQyxDQUFDO0NBQ2xFLG9CQUFvQixNQUFNO0NBQzFCLGdCQUFnQixLQUFLLGNBQWM7Q0FDbkMsb0JBQW9CLElBQUksQ0FBQyxJQUFJLENBQUMsd0JBQXdCLEVBQUUsY0FBYyxDQUFDLENBQUM7Q0FDeEUsb0JBQW9CLE1BQU07Q0FDMUIsZ0JBQWdCLEtBQUssUUFBUTtDQUM3QixvQkFBb0IsSUFBSSxDQUFDLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxRQUFRLENBQUMsQ0FBQztDQUNsRSxvQkFBb0IsTUFBTTtDQUMxQixhQUFhO0NBQ2IsU0FBUyxDQUFDLENBQUM7Q0FDWCxLQUFLO0NBQ0wsSUFBSSxNQUFNLGdCQUFnQixDQUFDLFVBQVUsRUFBRTtDQUN2QyxRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQztDQUMzQyxRQUFRLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztDQUMxRCxRQUFRLGFBQWEsQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO0NBQzlDLFFBQVEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLENBQUMsQ0FBQztDQUNqRCxLQUFLO0NBQ0wsSUFBSSxNQUFNLFVBQVUsQ0FBQyxhQUFhLEVBQUU7Q0FDcEMsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0NBQ3JDO0NBQ0EsUUFBUSxJQUFJLENBQUMsVUFBVSxDQUFDLG1CQUFtQixDQUFDLGFBQWEsQ0FBQyxDQUFDO0NBQzNELFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlO0NBQ2pDLFlBQVksT0FBTztDQUNuQixRQUFRLElBQUksSUFBSSxDQUFDLFVBQVUsS0FBSyxNQUFNLEVBQUU7Q0FDeEMsWUFBWSxNQUFNLEtBQUssR0FBRyxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7Q0FDM0UsWUFBWSxNQUFNLENBQUMsS0FBSyxDQUFDLDREQUE0RCxFQUFFLEtBQUssQ0FBQyxDQUFDO0NBQzlGLFlBQVksTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDO0NBQ3RELFlBQVksTUFBTSxNQUFNLEdBQUcsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUM7Q0FDN0UsWUFBWSxNQUFNLENBQUMsS0FBSyxDQUFDLDhEQUE4RCxFQUFFLE1BQU0sQ0FBQyxDQUFDO0NBQ2pHLFlBQVksTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0NBQ3hELFNBQVM7Q0FDVCxhQUFhO0NBQ2IsWUFBWSxNQUFNLEtBQUssR0FBRyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQztDQUMzRSxZQUFZLE1BQU0sQ0FBQyxLQUFLLENBQUMsNkRBQTZELEVBQUUsS0FBSyxDQUFDLENBQUM7Q0FDL0YsWUFBWSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDdkQsWUFBWSxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUM7Q0FDekQsWUFBWSxNQUFNLENBQUMsS0FBSyxDQUFDLDZEQUE2RCxFQUFFLE1BQU0sQ0FBQyxDQUFDO0NBQ2hHLFlBQVksTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0NBQ3ZELFNBQVM7Q0FDVCxLQUFLO0NBQ0wsSUFBSSxNQUFNLGlCQUFpQixHQUFHO0NBQzlCLFFBQVEsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDO0NBQ25DLEtBQUs7Q0FDTCxJQUFJLE1BQU0sSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLEVBQUU7Q0FDMUQsUUFBUSxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztDQUNwQyxRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsK0JBQStCLEVBQUUsS0FBSyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7Q0FDNUUsUUFBUSxJQUFJLEtBQUssRUFBRTtDQUNuQixZQUFZLE1BQU0sQ0FBQyxJQUFJLENBQUMseURBQXlELEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0NBQzlGLFNBQVM7Q0FDVCxRQUFRLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0NBQ3pDLFFBQVEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0NBQzdDLFFBQVEsSUFBSSxLQUFLLEdBQUcsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO0NBQ2pELFFBQVEsSUFBSSxjQUFjLEdBQUdELEtBQVksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQzNELFFBQVEsSUFBSSxnQkFBZ0IsQ0FBQztDQUM3QixRQUFRLE1BQU0sb0JBQW9CLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsMkJBQTJCLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7Q0FDL0YsUUFBUSxvQkFBb0IsQ0FBQyxNQUFNO0NBQ25DLFlBQVksSUFBSSxDQUFDLFlBQVksQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztDQUMzRCxRQUFRLE1BQU0sMEJBQTBCLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsaUNBQWlDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7Q0FDM0csUUFBUSwwQkFBMEIsQ0FBQyxNQUFNO0NBQ3pDLFlBQVksSUFBSSxDQUFDLFlBQVksQ0FBQywwQkFBMEIsQ0FBQyxNQUFNLENBQUMsQ0FBQztDQUNqRSxRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZTtDQUNqQyxZQUFZLE1BQU0sSUFBSSxDQUFDLGVBQWUsQ0FBQyxFQUFFLGFBQWEsRUFBRSxRQUFRLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztDQUNwRixRQUFRLElBQUksS0FBSyxDQUFDLElBQUksS0FBSyxPQUFPLElBQUksU0FBUyxJQUFJLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0NBQ3pFLFlBQVksTUFBTSxDQUFDLEtBQUssQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO0NBQ3hELFlBQVksY0FBYyxHQUFHQSxLQUFZLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUMzRCxZQUFZLGdCQUFnQixHQUFHLGNBQWMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLEtBQUssT0FBTyxDQUFDLENBQUM7Q0FDcEYsWUFBWUksVUFBYSxDQUFDLGtCQUFrQixDQUFDO0NBQzdDLGdCQUFnQixnQkFBZ0I7Q0FDaEMsZ0JBQWdCLEtBQUs7Q0FDckIsZ0JBQWdCLFVBQVUsRUFBRSxTQUFTLENBQUMsTUFBTTtDQUM1QyxhQUFhLENBQUMsQ0FBQztDQUNmLFlBQVksS0FBSyxHQUFHLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUVKLEtBQVksQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQztDQUMvRSxTQUFTO0NBQ1QsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLHNEQUFzRCxFQUFFLEtBQUssQ0FBQyxDQUFDO0NBQ3BGLFFBQVEsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDO0NBQ2xELFFBQVEsY0FBYyxHQUFHQSxLQUFZLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDM0UsUUFBUSxnQkFBZ0IsR0FBRyxjQUFjLENBQUMsS0FBSztDQUMvQyxhQUFhLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxLQUFLLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztDQUNoRDtDQUNBLFFBQVEsb0JBQW9CLENBQUMsSUFBSSxDQUFDLEtBQUs7Q0FDdkMsWUFBWUMsV0FBYyxDQUFDLFFBQVEsQ0FBQyxFQUFFLGdCQUFnQixFQUFFLENBQUMsQ0FBQztDQUMxRDtDQUNBLFFBQVEsb0JBQW9CLENBQUMsU0FBUztDQUN0QyxZQUFZRyxVQUFhLENBQUMsZUFBZSxDQUFDLEVBQUUsZ0JBQWdCLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztDQUN2RTtDQUNBLFFBQVEsSUFBSSxTQUFTLEVBQUU7Q0FDdkIsWUFBWSxLQUFLLElBQUksR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsb0JBQW9CLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxFQUFFLEdBQUcsRUFBRTtDQUNsRixnQkFBZ0IsSUFBSSxTQUFTLENBQUMsR0FBRyxDQUFDO0NBQ2xDLG9CQUFvQixNQUFNLENBQUMsTUFBTSxDQUFDLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRSxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztDQUN2RixhQUFhO0NBQ2IsU0FBUztDQUNUO0NBQ0E7Q0FDQSxRQUFRLElBQUksb0JBQW9CLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDO0NBQ3JELFlBQVksb0JBQW9CLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsS0FBSyxXQUFXLEVBQUU7Q0FDbkYsWUFBWSxLQUFLLE1BQU0sUUFBUSxJQUFJLG9CQUFvQixDQUFDLFNBQVMsRUFBRTtDQUNuRSxnQkFBZ0IsUUFBUSxDQUFDLGVBQWUsR0FBRyxNQUFNLENBQUM7Q0FDbEQsYUFBYTtDQUNiLFNBQVM7Q0FDVCxRQUFRLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDO0NBQzdCLFlBQVksZ0JBQWdCO0NBQzVCLFlBQVksa0JBQWtCLEVBQUUsb0JBQW9CO0NBQ3BELFlBQVksbUJBQW1CLEVBQUUsMEJBQTBCO0NBQzNELFlBQVksWUFBWTtDQUN4QixTQUFTLENBQUMsQ0FBQztDQUNYLFFBQVEsTUFBTSxNQUFNLEdBQUcsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUM7Q0FDekUsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLHdEQUF3RCxFQUFFLE1BQU0sQ0FBQyxDQUFDO0NBQ3ZGLFFBQVEsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0NBQ3BELFFBQVEsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0NBQ3RELFFBQVEsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7Q0FDaEM7Q0FDQSxRQUFRLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO0NBQ3RELFFBQVEsT0FBTztDQUNmLFlBQVksT0FBTyxFQUFFLE9BQU87Q0FDNUIsWUFBWSxhQUFhLEVBQUUsb0JBQW9CO0NBQy9DLFNBQVMsQ0FBQztDQUNWLEtBQUs7Q0FDTCxJQUFJLE1BQU0sV0FBVyxDQUFDLE9BQU8sRUFBRTtDQUMvQixRQUFRLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO0NBQ3BDLFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyw0QkFBNEIsRUFBRSxPQUFPLENBQUMsQ0FBQztDQUM1RCxRQUFRLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7Q0FDN0QsUUFBUSxJQUFJLENBQUMsS0FBSztDQUNsQixZQUFZLE1BQU0sSUFBSSxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQztDQUMvQyxRQUFRLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7Q0FDbEQsUUFBUSxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztDQUM1QyxRQUFRLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztDQUM3QyxRQUFRLE1BQU0sS0FBSyxHQUFHLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztDQUNuRCxRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsNkRBQTZELEVBQUUsS0FBSyxDQUFDLENBQUM7Q0FDM0YsUUFBUSxJQUFJO0NBQ1osWUFBWSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDdEQsU0FBUztDQUNULFFBQVEsT0FBTyxLQUFLLEVBQUU7Q0FDdEI7Q0FDQTtDQUNBLFlBQVksSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7Q0FDM0QsZ0JBQWdCLE1BQU0sQ0FBQyxJQUFJLENBQUMsbUVBQW1FLEVBQUUsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7Q0FDbkgsZ0JBQWdCLE9BQU87Q0FDdkIsYUFBYTtDQUNiLFlBQVksTUFBTSxLQUFLLENBQUM7Q0FDeEIsU0FBUztDQUNULFFBQVEsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLGNBQWMsS0FBSyxRQUFRO0NBQ2hELFlBQVksT0FBTztDQUNuQixRQUFRLE1BQU0sTUFBTSxHQUFHLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDO0NBQ3pFLFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQywrREFBK0QsRUFBRSxNQUFNLENBQUMsQ0FBQztDQUM5RixRQUFRLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztDQUNwRCxLQUFLO0NBQ0wsSUFBSSxNQUFNLFlBQVk7Q0FDdEI7Q0FDQSxJQUFJLE9BQU8sRUFBRSxLQUFLLEVBQUU7Q0FDcEIsUUFBUSxNQUFNLElBQUlQLE1BQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0NBQy9ELEtBQUs7Q0FDTDtDQUNBLElBQUksTUFBTSxrQkFBa0IsQ0FBQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0NBQ3BELFFBQVEsTUFBTSxJQUFJQSxNQUFRLENBQUMsZ0JBQWdCLENBQUMsa0JBQWtCLENBQUMsQ0FBQztDQUNoRSxLQUFLO0NBQ0w7Q0FDQSxJQUFJLE1BQU0sd0JBQXdCLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRTtDQUNwRCxRQUFRLE1BQU0sSUFBSUEsTUFBUSxDQUFDLGdCQUFnQixDQUFDLGVBQWUsQ0FBQyxDQUFDO0NBQzdELEtBQUs7Q0FDTDtDQUNBLElBQUksTUFBTSxjQUFjLENBQUMsT0FBTyxFQUFFO0NBQ2xDLFFBQVEsTUFBTSxJQUFJQSxNQUFRLENBQUMsZ0JBQWdCLENBQUMsaUJBQWlCLENBQUMsQ0FBQztDQUMvRCxLQUFLO0NBQ0wsSUFBSSxNQUFNLGVBQWUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsRUFBRTtDQUNyRyxRQUFRLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO0NBQ3BDLFFBQVEsTUFBTSxPQUFPLEdBQUc7Q0FDeEIsWUFBWSxVQUFVLEVBQUUsSUFBSTtDQUM1QixZQUFZLEVBQUUsRUFBRSxJQUFJLENBQUMscUJBQXFCO0NBQzFDLFlBQVksT0FBTztDQUNuQixZQUFZLGlCQUFpQjtDQUM3QixZQUFZLGlCQUFpQixFQUFFLGlCQUFpQjtDQUNoRCxZQUFZLGNBQWM7Q0FDMUIsWUFBWSxRQUFRO0NBQ3BCLFlBQVksUUFBUTtDQUNwQixTQUFTLENBQUM7Q0FDVixRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLEVBQUUsT0FBTyxDQUFDLENBQUM7Q0FDaEUsUUFBUSxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztDQUN2RTtDQUNBLFFBQVEsSUFBSSxDQUFDLHFCQUFxQjtDQUNsQyxZQUFZLEVBQUUsSUFBSSxDQUFDLHFCQUFxQixHQUFHLGdCQUFnQixDQUFDLEdBQUcsQ0FBQztDQUNoRTtDQUNBO0NBQ0EsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLDJCQUEyQixFQUFFO0NBQy9DLFlBQVksTUFBTSxLQUFLLEdBQUcsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO0NBQ3ZELFlBQVksTUFBTSxjQUFjLEdBQUdHLEtBQVksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQ2pFLFlBQVksTUFBTSxnQkFBZ0IsR0FBRyxjQUFjLENBQUMsS0FBSztDQUN6RCxpQkFBaUIsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLEtBQUssYUFBYSxDQUFDLENBQUM7Q0FDdkQsWUFBWSxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWU7Q0FDckMsZ0JBQWdCLE1BQU0sSUFBSSxDQUFDLGVBQWUsQ0FBQyxFQUFFLGFBQWEsRUFBRSxRQUFRLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztDQUN4RixZQUFZLE1BQU0sQ0FBQyxLQUFLLENBQUMsaUVBQWlFLEVBQUUsS0FBSyxDQUFDLENBQUM7Q0FDbkcsWUFBWSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDdEQsWUFBWSxJQUFJLENBQUMsVUFBVSxDQUFDLG1CQUFtQixDQUFDLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDO0NBQ3RFLFlBQVksTUFBTSxNQUFNLEdBQUcsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUM7Q0FDN0UsWUFBWSxNQUFNLENBQUMsS0FBSyxDQUFDLG1FQUFtRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0NBQ3RHLFlBQVksTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0NBQ3hELFlBQVksSUFBSSxDQUFDLDJCQUEyQixHQUFHLElBQUksQ0FBQztDQUNwRCxTQUFTO0NBQ1QsUUFBUSxNQUFNLG9CQUFvQixHQUFHO0NBQ3JDLFlBQVksUUFBUSxFQUFFLE9BQU8sQ0FBQyxFQUFFO0NBQ2hDLFlBQVksT0FBTyxFQUFFLE9BQU8sQ0FBQyxPQUFPO0NBQ3BDLFlBQVksaUJBQWlCLEVBQUUsT0FBTyxDQUFDLGlCQUFpQjtDQUN4RCxZQUFZLGNBQWMsRUFBRSxPQUFPLENBQUMsY0FBYztDQUNsRCxTQUFTLENBQUM7Q0FDVixRQUFRLE9BQU8sRUFBRSxXQUFXLEVBQUUsb0JBQW9CLEVBQUUsQ0FBQztDQUNyRCxLQUFLO0NBQ0wsSUFBSSxNQUFNLE9BQU8sQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsYUFBYSxFQUFFLEVBQUU7Q0FDcEQsUUFBUSxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztDQUNwQyxRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsaUNBQWlDLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0NBQ3ZFLFFBQVEsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDO0NBQ2hDLFFBQVEsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDO0NBQ3pCLFFBQVEsTUFBTSxRQUFRLEdBQUcsYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7Q0FDbEQsUUFBUSxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQztDQUNoQyxZQUFZLEdBQUc7Q0FDZixZQUFZLElBQUk7Q0FDaEIsWUFBWSxrQkFBa0IsRUFBRSxhQUFhO0NBQzdDLFlBQVksUUFBUTtDQUNwQixZQUFZLE9BQU87Q0FDbkIsU0FBUyxDQUFDLENBQUM7Q0FDWCxRQUFRLE1BQU0sS0FBSyxHQUFHLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDO0NBQ3ZFLFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQywwREFBMEQsRUFBRSxLQUFLLENBQUMsQ0FBQztDQUN4RixRQUFRLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztDQUNuRCxRQUFRLElBQUksTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsQ0FBQztDQUNuRCxRQUFRLE1BQU0sY0FBYyxHQUFHQSxLQUFZLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUM5RCxRQUFRLE1BQU0saUJBQWlCLEdBQUcsY0FBYyxDQUFDLEtBQUs7Q0FDdEQsYUFBYSxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztDQUNoRDtDQUNBO0NBQ0EsUUFBUUMsV0FBYyxDQUFDLG9CQUFvQixDQUFDO0NBQzVDLFlBQVksa0JBQWtCLEVBQUUsYUFBYTtDQUM3QyxZQUFZLGlCQUFpQjtDQUM3QixTQUFTLENBQUMsQ0FBQztDQUNYLFFBQVEsTUFBTSxHQUFHLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUVELEtBQVksQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQztDQUM3RSxRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZTtDQUNqQyxZQUFZLE1BQU0sSUFBSSxDQUFDLGVBQWUsQ0FBQyxFQUFFLGFBQWEsRUFBRSxRQUFRLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztDQUNwRixRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsMERBQTBELEVBQUUsTUFBTSxDQUFDLENBQUM7Q0FDekYsUUFBUSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsTUFBTSxDQUFDLENBQUM7Q0FDbkQsUUFBUSxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFO0NBQ2xELGFBQWEsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEtBQUssUUFBUSxDQUFDLENBQUM7Q0FDNUMsUUFBUSxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0NBQ25ELFFBQVEsSUFBSSxDQUFDLEtBQUs7Q0FDbEIsWUFBWSxNQUFNLElBQUksS0FBSyxDQUFDLHdCQUF3QixDQUFDLENBQUM7Q0FDdEQ7Q0FDQSxRQUFRLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLEVBQUUsR0FBRyxFQUFFLGFBQWEsRUFBRSxDQUFDLENBQUM7Q0FDdEUsUUFBUSxPQUFPLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxDQUFDO0NBQ2xDLEtBQUs7Q0FDTCxJQUFJLE1BQU0sYUFBYSxDQUFDLE9BQU8sRUFBRTtDQUNqQyxRQUFRLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO0NBQ3BDLFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyw4QkFBOEIsRUFBRSxPQUFPLENBQUMsQ0FBQztDQUM5RCxRQUFRLE1BQU0sRUFBRSxHQUFHLEVBQUUsYUFBYSxFQUFFLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7Q0FDbkY7Q0FDQSxRQUFRLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7Q0FDakQsUUFBUSxJQUFJLENBQUMsVUFBVSxDQUFDLGtCQUFrQixDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxrQkFBa0IsRUFBRSxhQUFhLEVBQUUsQ0FBQyxDQUFDO0NBQzVGLFFBQVEsTUFBTSxLQUFLLEdBQUcsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUM7Q0FDdkUsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLGdFQUFnRSxFQUFFLEtBQUssQ0FBQyxDQUFDO0NBQzlGLFFBQVEsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxDQUFDO0NBQ25ELFFBQVEsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxDQUFDO0NBQ3JELFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyxnRUFBZ0UsRUFBRSxNQUFNLENBQUMsQ0FBQztDQUMvRixRQUFRLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztDQUNuRCxLQUFLO0NBQ0w7Q0FDQSxJQUFJLE1BQU0sZ0JBQWdCLENBQUMsT0FBTyxFQUFFO0NBQ3BDLFFBQVEsTUFBTSxJQUFJSCxNQUFRLENBQUMsZ0JBQWdCLENBQUMsaUJBQWlCLENBQUMsQ0FBQztDQUMvRCxLQUFLO0NBQ0wsSUFBSSxNQUFNLGtCQUFrQixDQUFDLEVBQUUsb0JBQW9CLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxFQUFFO0NBQ3hFLFFBQVEsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7Q0FDcEMsUUFBUSxNQUFNLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxjQUFjLEVBQUUsR0FBRyxvQkFBb0IsQ0FBQztDQUM5RixRQUFRLE1BQU0sT0FBTyxHQUFHO0NBQ3hCLFlBQVksVUFBVSxFQUFFLElBQUk7Q0FDNUIsWUFBWSxFQUFFLEVBQUUsUUFBUTtDQUN4QixZQUFZLE9BQU87Q0FDbkIsWUFBWSxpQkFBaUI7Q0FDN0IsWUFBWSxpQkFBaUIsRUFBRSxpQkFBaUI7Q0FDaEQsWUFBWSxjQUFjO0NBQzFCLFlBQVksUUFBUTtDQUNwQixTQUFTLENBQUM7Q0FDVixRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsbUNBQW1DLEVBQUUsT0FBTyxDQUFDLENBQUM7Q0FDbkUsUUFBUSxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztDQUN2RTtDQUNBO0NBQ0EsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLDJCQUEyQixFQUFFO0NBQy9DLFlBQVksSUFBSSxDQUFDLFVBQVUsQ0FBQyxzQkFBc0IsQ0FBQyxFQUFFLGtCQUFrQixFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7Q0FDakYsWUFBWSxNQUFNLEtBQUssR0FBRyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQztDQUMzRSxZQUFZLE1BQU0sQ0FBQyxLQUFLLENBQUMscUVBQXFFLEVBQUUsS0FBSyxDQUFDLENBQUM7Q0FDdkcsWUFBWSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDdkQsWUFBWSxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUM7Q0FDekQsWUFBWSxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRTtDQUN2QyxnQkFBZ0IsTUFBTSxjQUFjLEdBQUdHLEtBQVksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQ3RFLGdCQUFnQixNQUFNLElBQUksQ0FBQyxlQUFlLENBQUMsRUFBRSxhQUFhLEVBQUUsUUFBUSxFQUFFLGNBQWMsRUFBRSxDQUFDLENBQUM7Q0FDeEYsYUFBYTtDQUNiLFlBQVksTUFBTSxDQUFDLEtBQUssQ0FBQyxzRUFBc0UsRUFBRSxNQUFNLENBQUMsQ0FBQztDQUN6RyxZQUFZLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztDQUN2RCxZQUFZLElBQUksQ0FBQywyQkFBMkIsR0FBRyxJQUFJLENBQUM7Q0FDcEQsU0FBUztDQUNULFFBQVEsT0FBTyxFQUFFLFdBQVcsRUFBRSxDQUFDO0NBQy9CLEtBQUs7Q0FDTCxJQUFJLE1BQU0sZUFBZSxDQUFDLEVBQUUsYUFBYSxFQUFFLGNBQWMsRUFBRSxFQUFFO0NBQzdELFFBQVEsSUFBSSxDQUFDLGNBQWM7Q0FDM0IsWUFBWSxjQUFjLEdBQUdBLEtBQVksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUMvRTtDQUNBLFFBQVEsTUFBTSxjQUFjLEdBQUdDLFdBQWMsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLFNBQVMsRUFBRSxjQUFjLEVBQUUsQ0FBQyxDQUFDO0NBQ25HO0NBQ0EsUUFBUSxjQUFjLENBQUMsSUFBSSxHQUFHLGFBQWEsQ0FBQztDQUM1QztDQUNBLFFBQVEsSUFBSSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsYUFBYSxLQUFLLFFBQVEsR0FBRyxRQUFRLEdBQUcsUUFBUSxDQUFDLENBQUM7Q0FDekY7Q0FDQSxRQUFRLE1BQU0sSUFBSSxDQUFDLGlCQUFpQixDQUFDLFVBQVUsRUFBRSxFQUFFLGNBQWMsRUFBRSxDQUFDLENBQUM7Q0FDckUsUUFBUSxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQztDQUNwQyxLQUFLO0NBQ0wsSUFBSSxvQkFBb0IsR0FBRztDQUMzQixRQUFRLElBQUksSUFBSSxDQUFDLFVBQVUsS0FBSyxNQUFNLEVBQUU7Q0FDeEMsWUFBWSxNQUFNLElBQUksS0FBSyxDQUFDLDhEQUE4RCxDQUFDLENBQUM7Q0FDNUYsU0FBUztDQUNULEtBQUs7Q0FDTCxJQUFJLG9CQUFvQixHQUFHO0NBQzNCLFFBQVEsSUFBSSxJQUFJLENBQUMsVUFBVSxLQUFLLE1BQU0sRUFBRTtDQUN4QyxZQUFZLE1BQU0sSUFBSSxLQUFLLENBQUMsOERBQThELENBQUMsQ0FBQztDQUM1RixTQUFTO0NBQ1QsS0FBSztDQUNMLENBQUM7Q0FDRCxnQkFBZ0IsR0FBRyxRQUFROzs7Ozs7O0FDN2IzQixDQUNBLE1BQU0sQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQ2hCO0FBQ1I7QUFDQTtBQUNKO0FBQ0Y7QUFDb0I7QUFDVTtBQUNMO0FBQ1Y7Q0FDL0MsTUFBTSxNQUFNLEdBQUcsSUFBSSxRQUFRLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0NBQ2hELE1BQU0sZ0JBQWdCLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsQ0FBQztDQUMvQyxNQUFNLFNBQVMsU0FBUyxrQkFBa0IsQ0FBQyxnQkFBZ0IsQ0FBQztDQUM1RCxJQUFJLFdBQVcsR0FBRztDQUNsQixRQUFRLEtBQUssRUFBRSxDQUFDO0NBQ2hCO0NBQ0EsUUFBUSxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQztDQUM1QztDQUNBLFFBQVEsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDO0NBQzdDO0NBQ0EsUUFBUSxJQUFJLENBQUMsMkJBQTJCLEdBQUcsS0FBSyxDQUFDO0NBQ2pEO0NBQ0EsUUFBUSxJQUFJLENBQUMscUJBQXFCLEdBQUcsQ0FBQyxDQUFDO0NBQ3ZDO0NBQ0EsUUFBUSxJQUFJLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQztDQUNyQyxLQUFLO0NBQ0w7Q0FDQTtDQUNBO0NBQ0EsSUFBSSxPQUFPLGFBQWEsR0FBRztDQUMzQixRQUFRLE9BQU8sTUFBTSxJQUFJLFNBQVMsRUFBRSxDQUFDO0NBQ3JDLEtBQUs7Q0FDTCxJQUFJLElBQUksSUFBSSxHQUFHO0NBQ2YsUUFBUSxPQUFPLFdBQVcsQ0FBQztDQUMzQixLQUFLO0NBQ0wsSUFBSSxLQUFLLEdBQUc7Q0FDWixRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7Q0FDaEM7Q0FDQSxRQUFRLElBQUksSUFBSSxDQUFDLEdBQUcsRUFBRTtDQUN0QixZQUFZLElBQUk7Q0FDaEIsZ0JBQWdCLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7Q0FDakMsYUFBYTtDQUNiLFlBQVksT0FBTyxLQUFLLEVBQUUsR0FBRztDQUM3QixTQUFTO0NBQ1QsS0FBSztDQUNMLElBQUksTUFBTSx3QkFBd0IsR0FBRztDQUNyQyxRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsNEJBQTRCLENBQUMsQ0FBQztDQUNuRCxRQUFRLE1BQU0sRUFBRSxHQUFHLElBQUksaUJBQWlCLENBQUM7Q0FDekMsWUFBWSxVQUFVLEVBQUUsRUFBRTtDQUMxQixZQUFZLGtCQUFrQixFQUFFLEtBQUs7Q0FDckMsWUFBWSxZQUFZLEVBQUUsWUFBWTtDQUN0QyxZQUFZLGFBQWEsRUFBRSxTQUFTO0NBQ3BDLFNBQVMsQ0FBQyxDQUFDO0NBQ1g7Q0FDQSxRQUFRLE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7Q0FDeEQ7Q0FDQSxRQUFRLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7Q0FDaEMsUUFBUSxNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsYUFBYSxFQUFFLENBQUM7Q0FDbEQsUUFBUSxNQUFNLGNBQWMsR0FBRyxVQUFVLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDOUQsUUFBUSxJQUFJO0NBQ1osWUFBWSxFQUFFLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDO0NBQ2xFLFlBQVksTUFBTSxnQkFBZ0IsR0FBRyxFQUFFLENBQUMsY0FBYyxDQUFDLGNBQWMsRUFBRSxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDO0NBQ2xHLFlBQVksTUFBTSxVQUFVLEdBQUcsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLGFBQWEsRUFBRSxDQUFDO0NBQ3ZFLFlBQVksTUFBTSxTQUFTLEdBQUc7Q0FDOUIsZ0JBQWdCLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFO0NBQ2pELGdCQUFnQixFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRTtDQUNqRCxhQUFhLENBQUM7Q0FDZCxZQUFZLFVBQVUsQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO0NBQzdDLFlBQVksTUFBTSxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0NBQ3BFLFlBQVksTUFBTSxLQUFLLEdBQUcsTUFBTSxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUM7Q0FDakQsWUFBWSxJQUFJO0NBQ2hCLGdCQUFnQixNQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7Q0FDaEMsYUFBYTtDQUNiLFlBQVksT0FBTyxLQUFLLEVBQUUsR0FBRztDQUM3QixZQUFZLElBQUk7Q0FDaEIsZ0JBQWdCLGNBQWMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztDQUN0QyxhQUFhO0NBQ2IsWUFBWSxPQUFPLEtBQUssRUFBRSxHQUFHO0NBQzdCLFlBQVksSUFBSTtDQUNoQixnQkFBZ0IsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0NBQzNCLGFBQWE7Q0FDYixZQUFZLE9BQU8sS0FBSyxFQUFFLEdBQUc7Q0FDN0IsWUFBWSxNQUFNLFNBQVMsR0FBR0QsS0FBWSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDNUQsWUFBWSxNQUFNLHFCQUFxQixHQUFHQyxXQUFjLENBQUMsc0JBQXNCLENBQUMsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDO0NBQy9GLFlBQVksT0FBTyxxQkFBcUIsQ0FBQztDQUN6QyxTQUFTO0NBQ1QsUUFBUSxPQUFPLEtBQUssRUFBRTtDQUN0QixZQUFZLElBQUk7Q0FDaEIsZ0JBQWdCLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztDQUNoQyxhQUFhO0NBQ2IsWUFBWSxPQUFPLE1BQU0sRUFBRSxHQUFHO0NBQzlCLFlBQVksSUFBSTtDQUNoQixnQkFBZ0IsY0FBYyxDQUFDLElBQUksRUFBRSxDQUFDO0NBQ3RDLGFBQWE7Q0FDYixZQUFZLE9BQU8sTUFBTSxFQUFFLEdBQUc7Q0FDOUIsWUFBWSxJQUFJO0NBQ2hCLGdCQUFnQixFQUFFLENBQUMsS0FBSyxFQUFFLENBQUM7Q0FDM0IsYUFBYTtDQUNiLFlBQVksT0FBTyxNQUFNLEVBQUUsR0FBRztDQUM5QixZQUFZLE1BQU0sS0FBSyxDQUFDO0NBQ3hCLFNBQVM7Q0FDVCxLQUFLO0NBQ0wsSUFBSSxNQUFNLHlCQUF5QixHQUFHO0NBQ3RDLFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO0NBQ3BELFFBQVEsT0FBTztDQUNmLFlBQVksVUFBVSxFQUFFLGdCQUFnQjtDQUN4QyxTQUFTLENBQUM7Q0FDVixLQUFLO0NBQ0wsSUFBSSxHQUFHLENBQUMsRUFBRSxTQUFTLEVBQUUsYUFBYSxFQUFFLGFBQWEsRUFBRSxjQUFjLEVBQUUsY0FBYyxFQUFFLFVBQVUsRUFBRSxrQkFBa0IsRUFBRSxrQkFBa0IsRUFBRSxzQkFBc0IsRUFBRSx1QkFBdUIsRUFBRSxFQUFFO0NBQzFMLFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztDQUM5QixRQUFRLElBQUksQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDO0NBQ3BDLFFBQVEsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLFdBQVcsQ0FBQyxTQUFTLENBQUM7Q0FDcEQsWUFBWSxhQUFhO0NBQ3pCLFlBQVksYUFBYTtDQUN6QixZQUFZLGNBQWM7Q0FDMUIsWUFBWSxjQUFjO0NBQzFCLFNBQVMsQ0FBQyxDQUFDO0NBQ1gsUUFBUSxJQUFJLENBQUMsMkJBQTJCO0NBQ3hDLFlBQVk7Q0FDWixnQkFBZ0IsS0FBSyxFQUFFLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxPQUFPLEVBQUUsdUJBQXVCLENBQUM7Q0FDckYsZ0JBQWdCLEtBQUssRUFBRSxJQUFJLENBQUMsdUJBQXVCLENBQUMsT0FBTyxFQUFFLHVCQUF1QixDQUFDO0NBQ3JGLGFBQWEsQ0FBQztDQUNkLFFBQVEsSUFBSSxDQUFDLGlDQUFpQztDQUM5QyxZQUFZO0NBQ1osZ0JBQWdCLEtBQUssRUFBRSxJQUFJLENBQUMsNkJBQTZCLENBQUMsT0FBTyxFQUFFLHVCQUF1QixDQUFDO0NBQzNGLGdCQUFnQixLQUFLLEVBQUUsSUFBSSxDQUFDLDZCQUE2QixDQUFDLE9BQU8sRUFBRSx1QkFBdUIsQ0FBQztDQUMzRixhQUFhLENBQUM7Q0FDZCxRQUFRLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxpQkFBaUIsQ0FBQztDQUN6QyxZQUFZLFVBQVUsRUFBRSxVQUFVLElBQUksRUFBRTtDQUN4QyxZQUFZLGtCQUFrQixFQUFFLGtCQUFrQixJQUFJLEtBQUs7Q0FDM0QsWUFBWSxZQUFZLEVBQUUsWUFBWTtDQUN0QyxZQUFZLGFBQWEsRUFBRSxTQUFTO0NBQ3BDLFlBQVksR0FBRyxrQkFBa0I7Q0FDakMsU0FBUyxFQUFFLHNCQUFzQixDQUFDLENBQUM7Q0FDbkM7Q0FDQSxRQUFRLElBQUksQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsMEJBQTBCLEVBQUUsTUFBTTtDQUNwRSxZQUFZLFFBQVEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxrQkFBa0I7Q0FDL0MsZ0JBQWdCLEtBQUssVUFBVTtDQUMvQixvQkFBb0IsSUFBSSxDQUFDLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxZQUFZLENBQUMsQ0FBQztDQUN0RSxvQkFBb0IsTUFBTTtDQUMxQixnQkFBZ0IsS0FBSyxXQUFXLENBQUM7Q0FDakMsZ0JBQWdCLEtBQUssV0FBVztDQUNoQyxvQkFBb0IsSUFBSSxDQUFDLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxXQUFXLENBQUMsQ0FBQztDQUNyRSxvQkFBb0IsTUFBTTtDQUMxQixnQkFBZ0IsS0FBSyxRQUFRO0NBQzdCLG9CQUFvQixJQUFJLENBQUMsSUFBSSxDQUFDLHdCQUF3QixFQUFFLFFBQVEsQ0FBQyxDQUFDO0NBQ2xFLG9CQUFvQixNQUFNO0NBQzFCLGdCQUFnQixLQUFLLGNBQWM7Q0FDbkMsb0JBQW9CLElBQUksQ0FBQyxJQUFJLENBQUMsd0JBQXdCLEVBQUUsY0FBYyxDQUFDLENBQUM7Q0FDeEUsb0JBQW9CLE1BQU07Q0FDMUIsZ0JBQWdCLEtBQUssUUFBUTtDQUM3QixvQkFBb0IsSUFBSSxDQUFDLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxRQUFRLENBQUMsQ0FBQztDQUNsRSxvQkFBb0IsTUFBTTtDQUMxQixhQUFhO0NBQ2IsU0FBUyxDQUFDLENBQUM7Q0FDWCxLQUFLO0NBQ0w7Q0FDQSxJQUFJLE1BQU0sZ0JBQWdCLENBQUMsVUFBVSxFQUFFO0NBQ3ZDO0NBQ0EsUUFBUSxNQUFNLElBQUlKLE1BQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxlQUFlLENBQUMsQ0FBQztDQUM3RCxLQUFLO0NBQ0wsSUFBSSxNQUFNLFVBQVUsQ0FBQyxhQUFhLEVBQUU7Q0FDcEMsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0NBQ3JDO0NBQ0EsUUFBUSxJQUFJLENBQUMsVUFBVSxDQUFDLG1CQUFtQixDQUFDLGFBQWEsQ0FBQyxDQUFDO0NBQzNELFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlO0NBQ2pDLFlBQVksT0FBTztDQUNuQixRQUFRLElBQUksSUFBSSxDQUFDLFVBQVUsS0FBSyxNQUFNLEVBQUU7Q0FDeEMsWUFBWSxNQUFNLEtBQUssR0FBRyxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7Q0FDM0UsWUFBWSxNQUFNLENBQUMsS0FBSyxDQUFDLDREQUE0RCxFQUFFLEtBQUssQ0FBQyxDQUFDO0NBQzlGLFlBQVksTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDO0NBQ3RELFlBQVksTUFBTSxNQUFNLEdBQUcsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUM7Q0FDN0UsWUFBWSxNQUFNLENBQUMsS0FBSyxDQUFDLDhEQUE4RCxFQUFFLE1BQU0sQ0FBQyxDQUFDO0NBQ2pHLFlBQVksTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0NBQ3hELFNBQVM7Q0FDVCxhQUFhO0NBQ2IsWUFBWSxNQUFNLEtBQUssR0FBRyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQztDQUMzRSxZQUFZLE1BQU0sQ0FBQyxLQUFLLENBQUMsNkRBQTZELEVBQUUsS0FBSyxDQUFDLENBQUM7Q0FDL0YsWUFBWSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDdkQsWUFBWSxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUM7Q0FDekQsWUFBWSxNQUFNLENBQUMsS0FBSyxDQUFDLDZEQUE2RCxFQUFFLE1BQU0sQ0FBQyxDQUFDO0NBQ2hHLFlBQVksTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0NBQ3ZELFNBQVM7Q0FDVCxLQUFLO0NBQ0wsSUFBSSxNQUFNLGlCQUFpQixHQUFHO0NBQzlCLFFBQVEsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDO0NBQ25DLEtBQUs7Q0FDTCxJQUFJLE1BQU0sSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLEVBQUU7Q0FDMUQsUUFBUSxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztDQUNwQyxRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsK0JBQStCLEVBQUUsS0FBSyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7Q0FDNUUsUUFBUSxJQUFJLGdCQUFnQixDQUFDO0NBQzdCLFFBQVEsSUFBSSxTQUFTLElBQUksU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7Q0FDL0MsWUFBWSxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxFQUFFLEdBQUcsS0FBSztDQUNqRCxnQkFBZ0IsUUFBUSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO0NBQ3pDLGFBQWEsQ0FBQyxDQUFDO0NBQ2Y7Q0FDQTtDQUNBLFlBQVksZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztDQUNoRSxTQUFTO0NBQ1QsUUFBUSxNQUFNLG9CQUFvQixHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLDJCQUEyQixDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0NBQy9GO0NBQ0EsUUFBUSxvQkFBb0IsQ0FBQyxNQUFNO0NBQ25DLFlBQVksSUFBSSxDQUFDLFlBQVksQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7Q0FDbEUsUUFBUSxNQUFNLDBCQUEwQixHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGlDQUFpQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0NBQzNHO0NBQ0EsUUFBUSwwQkFBMEIsQ0FBQyxNQUFNO0NBQ3pDLFlBQVksSUFBSSxDQUFDLFlBQVksQ0FBQywwQkFBMEIsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7Q0FDeEU7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLFFBQVEsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0NBQ25IO0NBQ0E7Q0FDQSxRQUFRLElBQUksZ0JBQWdCLEVBQUU7Q0FDOUIsWUFBWSxNQUFNLFVBQVUsR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLGFBQWEsRUFBRSxDQUFDO0NBQ2xFLFlBQVksVUFBVSxDQUFDLFNBQVMsR0FBRyxnQkFBZ0IsQ0FBQztDQUNwRCxZQUFZLE1BQU0sV0FBVyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUM7Q0FDL0QsU0FBUztDQUNULFFBQVEsTUFBTSxLQUFLLEdBQUcsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO0NBQ25ELFFBQVEsSUFBSSxjQUFjLEdBQUdHLEtBQVksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQzNEO0NBQ0E7Q0FDQSxRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZTtDQUNqQyxZQUFZLE1BQU0sSUFBSSxDQUFDLGVBQWUsQ0FBQyxFQUFFLGFBQWEsRUFBRSxRQUFRLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztDQUNwRixRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsc0RBQXNELEVBQUUsS0FBSyxDQUFDLENBQUM7Q0FDcEYsUUFBUSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDbEQ7Q0FDQSxRQUFRLE1BQU0sT0FBTyxHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUM7Q0FDeEM7Q0FDQSxRQUFRLG9CQUFvQixDQUFDLEdBQUcsR0FBRyxPQUFPLENBQUM7Q0FDM0MsUUFBUSxjQUFjLEdBQUdBLEtBQVksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUMzRSxRQUFRLE1BQU0sZ0JBQWdCLEdBQUcsY0FBYyxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztDQUN2RjtDQUNBLFFBQVEsb0JBQW9CLENBQUMsSUFBSSxDQUFDLEtBQUs7Q0FDdkMsWUFBWUMsV0FBYyxDQUFDLFFBQVEsQ0FBQyxFQUFFLGdCQUFnQixFQUFFLENBQUMsQ0FBQztDQUMxRDtDQUNBLFFBQVEsSUFBSSxDQUFDLFNBQVMsRUFBRTtDQUN4QixZQUFZLG9CQUFvQixDQUFDLFNBQVM7Q0FDMUMsZ0JBQWdCRSxnQkFBbUIsQ0FBQyxlQUFlLENBQUMsRUFBRSxnQkFBZ0IsRUFBRSxDQUFDLENBQUM7Q0FDMUUsU0FBUztDQUNUO0NBQ0E7Q0FDQSxhQUFhLElBQUksU0FBUyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7Q0FDekMsWUFBWSxNQUFNLFlBQVksR0FBR0EsZ0JBQW1CLENBQUMsZUFBZSxDQUFDLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDO0NBQzNGLFlBQVksTUFBTSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDekQsWUFBWSxvQkFBb0IsQ0FBQyxTQUFTLEdBQUcsWUFBWSxDQUFDO0NBQzFELFNBQVM7Q0FDVDtDQUNBLGFBQWE7Q0FDYixZQUFZLG9CQUFvQixDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7Q0FDdkQsU0FBUztDQUNUO0NBQ0E7Q0FDQSxRQUFRLElBQUksb0JBQW9CLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDO0NBQ3JELGFBQWEsb0JBQW9CLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsS0FBSyxXQUFXO0NBQ2xGLGdCQUFnQixvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxLQUFLLFlBQVksQ0FBQyxFQUFFO0NBQ3pGLFlBQVksS0FBSyxNQUFNLFFBQVEsSUFBSSxvQkFBb0IsQ0FBQyxTQUFTLEVBQUU7Q0FDbkUsZ0JBQWdCLFFBQVEsQ0FBQyxlQUFlLEdBQUcsTUFBTSxDQUFDO0NBQ2xELGFBQWE7Q0FDYixTQUFTO0NBQ1QsUUFBUSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQztDQUM3QixZQUFZLGdCQUFnQjtDQUM1QixZQUFZLGtCQUFrQixFQUFFLG9CQUFvQjtDQUNwRCxZQUFZLG1CQUFtQixFQUFFLDBCQUEwQjtDQUMzRCxZQUFZLFlBQVk7Q0FDeEIsWUFBWSxnQkFBZ0IsRUFBRSxJQUFJO0NBQ2xDLFNBQVMsQ0FBQyxDQUFDO0NBQ1gsUUFBUSxNQUFNLE1BQU0sR0FBRyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQztDQUN6RSxRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsd0RBQXdELEVBQUUsTUFBTSxDQUFDLENBQUM7Q0FDdkYsUUFBUSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLENBQUM7Q0FDcEQ7Q0FDQSxRQUFRLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0NBQzFELFFBQVEsT0FBTztDQUNmLFlBQVksT0FBTztDQUNuQixZQUFZLGFBQWEsRUFBRSxvQkFBb0I7Q0FDL0MsWUFBWSxTQUFTLEVBQUUsV0FBVyxDQUFDLE1BQU07Q0FDekMsU0FBUyxDQUFDO0NBQ1YsS0FBSztDQUNMLElBQUksTUFBTSxXQUFXLENBQUMsT0FBTyxFQUFFO0NBQy9CLFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyw0QkFBNEIsRUFBRSxPQUFPLENBQUMsQ0FBQztDQUM1RCxRQUFRLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7Q0FDakUsUUFBUSxJQUFJLENBQUMsV0FBVztDQUN4QixZQUFZLE1BQU0sSUFBSSxLQUFLLENBQUMsa0NBQWtDLENBQUMsQ0FBQztDQUNoRSxRQUFRLFdBQVcsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO0NBQzlDLFFBQVEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0NBQ2pEO0NBQ0E7Q0FDQTtDQUNBLFFBQVEsSUFBSSxDQUFDLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDN0QsUUFBUSxNQUFNLEtBQUssR0FBRyxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7Q0FDbkQsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLDZEQUE2RCxFQUFFLEtBQUssQ0FBQyxDQUFDO0NBQzNGLFFBQVEsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDO0NBQ2xELFFBQVEsTUFBTSxNQUFNLEdBQUcsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUM7Q0FDekUsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLCtEQUErRCxFQUFFLE1BQU0sQ0FBQyxDQUFDO0NBQzlGLFFBQVEsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0NBQ3BELEtBQUs7Q0FDTCxJQUFJLE1BQU0sWUFBWSxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUU7Q0FDdkMsUUFBUSxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztDQUNwQyxRQUFRLElBQUksS0FBSyxFQUFFO0NBQ25CLFlBQVksTUFBTSxDQUFDLEtBQUssQ0FBQywwQ0FBMEMsRUFBRSxPQUFPLEVBQUUsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0NBQ3hGLFNBQVM7Q0FDVCxhQUFhO0NBQ2IsWUFBWSxNQUFNLENBQUMsS0FBSyxDQUFDLHVDQUF1QyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0NBQzNFLFNBQVM7Q0FDVCxRQUFRLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7Q0FDakUsUUFBUSxJQUFJLENBQUMsV0FBVztDQUN4QixZQUFZLE1BQU0sSUFBSSxLQUFLLENBQUMsd0NBQXdDLENBQUMsQ0FBQztDQUN0RSxRQUFRLE1BQU0sV0FBVyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDckQsS0FBSztDQUNMLElBQUksTUFBTSxrQkFBa0IsQ0FBQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0NBQ3BELFFBQVEsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7Q0FDcEMsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLG9EQUFvRCxFQUFFLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQztDQUNsRyxRQUFRLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7Q0FDakUsUUFBUSxJQUFJLENBQUMsV0FBVztDQUN4QixZQUFZLE1BQU0sSUFBSSxLQUFLLENBQUMsa0NBQWtDLENBQUMsQ0FBQztDQUNoRSxRQUFRLE1BQU0sVUFBVSxHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQUMsYUFBYSxFQUFFLENBQUM7Q0FDOUQ7Q0FDQTtDQUNBLFFBQVEsWUFBWSxHQUFHLFVBQVUsQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsR0FBRyxZQUFZLENBQUM7Q0FDdEUsUUFBUSxVQUFVLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsRUFBRSxHQUFHLEtBQUs7Q0FDeEQsWUFBWSxJQUFJLEdBQUcsSUFBSSxZQUFZO0NBQ25DLGdCQUFnQixRQUFRLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztDQUN2QztDQUNBLGdCQUFnQixRQUFRLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztDQUN4QyxTQUFTLENBQUMsQ0FBQztDQUNYLFFBQVEsTUFBTSxXQUFXLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQztDQUMzRCxLQUFLO0NBQ0wsSUFBSSxNQUFNLHdCQUF3QixDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUU7Q0FDcEQsUUFBUSxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztDQUNwQyxRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsb0RBQW9ELEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0NBQzVGLFFBQVEsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztDQUNqRSxRQUFRLElBQUksQ0FBQyxXQUFXO0NBQ3hCLFlBQVksTUFBTSxJQUFJLEtBQUssQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDO0NBQ3RFLFFBQVEsTUFBTSxVQUFVLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsQ0FBQztDQUM5RCxRQUFRLFVBQVUsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxFQUFFLEdBQUcsS0FBSztDQUN4RCxZQUFZLFVBQVUsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLFFBQVEsRUFBRSxHQUFHLE1BQU0sRUFBRSxDQUFDO0NBQ25FLFNBQVMsQ0FBQyxDQUFDO0NBQ1gsUUFBUSxNQUFNLFdBQVcsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0NBQzNELEtBQUs7Q0FDTCxJQUFJLE1BQU0sY0FBYyxDQUFDLE9BQU8sRUFBRTtDQUNsQyxRQUFRLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO0NBQ3BDLFFBQVEsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztDQUNqRSxRQUFRLElBQUksQ0FBQyxXQUFXO0NBQ3hCLFlBQVksTUFBTSxJQUFJLEtBQUssQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDO0NBQ3RFLFFBQVEsT0FBTyxXQUFXLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO0NBQzdDLEtBQUs7Q0FDTCxJQUFJLE1BQU0sZUFBZSxDQUFDLEVBQUUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLGNBQWMsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxFQUFFO0NBQ3JHLFFBQVEsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7Q0FDcEMsUUFBUSxNQUFNLE9BQU8sR0FBRztDQUN4QixZQUFZLFVBQVUsRUFBRSxJQUFJO0NBQzVCLFlBQVksRUFBRSxFQUFFLElBQUksQ0FBQyxxQkFBcUI7Q0FDMUMsWUFBWSxPQUFPO0NBQ25CLFlBQVksaUJBQWlCO0NBQzdCLFlBQVksY0FBYztDQUMxQixZQUFZLFFBQVE7Q0FDcEIsWUFBWSxRQUFRO0NBQ3BCLFNBQVMsQ0FBQztDQUNWLFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsRUFBRSxPQUFPLENBQUMsQ0FBQztDQUNoRSxRQUFRLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0NBQ3ZFO0NBQ0EsUUFBUSxJQUFJLENBQUMscUJBQXFCO0NBQ2xDLFlBQVksRUFBRSxJQUFJLENBQUMscUJBQXFCLEdBQUcsZ0JBQWdCLENBQUMsR0FBRyxDQUFDO0NBQ2hFO0NBQ0E7Q0FDQSxRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsMkJBQTJCLEVBQUU7Q0FDL0MsWUFBWSxNQUFNLEtBQUssR0FBRyxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7Q0FDdkQsWUFBWSxNQUFNLGNBQWMsR0FBR0gsS0FBWSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDakUsWUFBWSxNQUFNLGdCQUFnQixHQUFHLGNBQWMsQ0FBQyxLQUFLO0NBQ3pELGlCQUFpQixJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksS0FBSyxhQUFhLENBQUMsQ0FBQztDQUN2RCxZQUFZLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZTtDQUNyQyxnQkFBZ0IsTUFBTSxJQUFJLENBQUMsZUFBZSxDQUFDLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRSxjQUFjLEVBQUUsQ0FBQyxDQUFDO0NBQ3hGLFlBQVksTUFBTSxDQUFDLEtBQUssQ0FBQyxpRUFBaUUsRUFBRSxLQUFLLENBQUMsQ0FBQztDQUNuRyxZQUFZLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztDQUN0RCxZQUFZLElBQUksQ0FBQyxVQUFVLENBQUMsbUJBQW1CLENBQUMsRUFBRSxnQkFBZ0IsRUFBRSxDQUFDLENBQUM7Q0FDdEUsWUFBWSxNQUFNLE1BQU0sR0FBRyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQztDQUM3RSxZQUFZLE1BQU0sQ0FBQyxLQUFLLENBQUMsbUVBQW1FLEVBQUUsTUFBTSxDQUFDLENBQUM7Q0FDdEcsWUFBWSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLENBQUM7Q0FDeEQsWUFBWSxJQUFJLENBQUMsMkJBQTJCLEdBQUcsSUFBSSxDQUFDO0NBQ3BELFNBQVM7Q0FDVCxRQUFRLE1BQU0sb0JBQW9CLEdBQUc7Q0FDckMsWUFBWSxRQUFRLEVBQUUsT0FBTyxDQUFDLEVBQUU7Q0FDaEMsWUFBWSxPQUFPLEVBQUUsT0FBTyxDQUFDLE9BQU87Q0FDcEMsWUFBWSxpQkFBaUIsRUFBRSxPQUFPLENBQUMsaUJBQWlCO0NBQ3hELFlBQVksY0FBYyxFQUFFLE9BQU8sQ0FBQyxjQUFjO0NBQ2xELFNBQVMsQ0FBQztDQUNWLFFBQVEsT0FBTyxFQUFFLFdBQVcsRUFBRSxvQkFBb0IsRUFBRSxDQUFDO0NBQ3JELEtBQUs7Q0FDTCxJQUFJLE1BQU0sT0FBTyxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxhQUFhLEVBQUUsRUFBRTtDQUNwRCxRQUFRLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO0NBQ3BDLFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyxpQ0FBaUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7Q0FDdkUsUUFBUSxNQUFNLE9BQU8sR0FBRyxhQUFhLENBQUMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUM7Q0FDbEYsUUFBUSxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQztDQUNoQyxZQUFZLEdBQUcsRUFBRSxPQUFPO0NBQ3hCLFlBQVksSUFBSTtDQUNoQixZQUFZLGtCQUFrQixFQUFFLGFBQWE7Q0FDN0MsWUFBWSxRQUFRLEVBQUUsYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLO0NBQzlDLFlBQVksT0FBTztDQUNuQixTQUFTLENBQUMsQ0FBQztDQUNYLFFBQVEsTUFBTSxLQUFLLEdBQUcsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUM7Q0FDdkUsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLDBEQUEwRCxFQUFFLEtBQUssQ0FBQyxDQUFDO0NBQ3hGLFFBQVEsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxDQUFDO0NBQ25ELFFBQVEsSUFBSSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxDQUFDO0NBQ25ELFFBQVEsTUFBTSxjQUFjLEdBQUdBLEtBQVksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQzlELFFBQVEsTUFBTSxpQkFBaUIsR0FBRyxjQUFjLENBQUMsS0FBSztDQUN0RCxhQUFhLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLE9BQU8sQ0FBQyxDQUFDO0NBQ3BEO0NBQ0E7Q0FDQSxRQUFRQyxXQUFjLENBQUMsb0JBQW9CLENBQUM7Q0FDNUMsWUFBWSxrQkFBa0IsRUFBRSxhQUFhO0NBQzdDLFlBQVksaUJBQWlCO0NBQzdCLFNBQVMsQ0FBQyxDQUFDO0NBQ1gsUUFBUSxNQUFNLEdBQUcsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRUQsS0FBWSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDO0NBQzdFLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlO0NBQ2pDLFlBQVksTUFBTSxJQUFJLENBQUMsZUFBZSxDQUFDLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRSxjQUFjLEVBQUUsQ0FBQyxDQUFDO0NBQ3BGLFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQywwREFBMEQsRUFBRSxNQUFNLENBQUMsQ0FBQztDQUN6RixRQUFRLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztDQUNuRCxRQUFRLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFO0NBQ3RELGFBQWEsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLEtBQUssT0FBTyxDQUFDLENBQUM7Q0FDNUMsUUFBUSxJQUFJLENBQUMsV0FBVztDQUN4QixZQUFZLE1BQU0sSUFBSSxLQUFLLENBQUMsaUNBQWlDLENBQUMsQ0FBQztDQUMvRDtDQUNBLFFBQVEsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxDQUFDLENBQUM7Q0FDMUQsUUFBUSxPQUFPO0NBQ2YsWUFBWSxPQUFPO0NBQ25CLFlBQVksS0FBSyxFQUFFLFdBQVcsQ0FBQyxRQUFRLENBQUMsS0FBSztDQUM3QyxZQUFZLFdBQVcsRUFBRSxXQUFXLENBQUMsUUFBUTtDQUM3QyxTQUFTLENBQUM7Q0FDVixLQUFLO0NBQ0wsSUFBSSxNQUFNLGFBQWEsQ0FBQyxPQUFPLEVBQUU7Q0FDakMsUUFBUSxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztDQUNwQyxRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsOEJBQThCLEVBQUUsT0FBTyxDQUFDLENBQUM7Q0FDOUQsUUFBUSxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0NBQ2pFLFFBQVEsSUFBSSxDQUFDLFdBQVc7Q0FDeEIsWUFBWSxNQUFNLElBQUksS0FBSyxDQUFDLHdDQUF3QyxDQUFDLENBQUM7Q0FDdEUsUUFBUSxJQUFJLENBQUMsVUFBVSxDQUFDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUMzRCxRQUFRLE1BQU0sS0FBSyxHQUFHLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDO0NBQ3ZFLFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyxnRUFBZ0UsRUFBRSxLQUFLLENBQUMsQ0FBQztDQUM5RixRQUFRLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztDQUNuRCxRQUFRLE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsQ0FBQztDQUNyRCxRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsZ0VBQWdFLEVBQUUsTUFBTSxDQUFDLENBQUM7Q0FDL0YsUUFBUSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsTUFBTSxDQUFDLENBQUM7Q0FDbkQsS0FBSztDQUNMLElBQUksTUFBTSxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUU7Q0FDcEMsUUFBUSxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztDQUNwQyxRQUFRLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7Q0FDakUsUUFBUSxJQUFJLENBQUMsV0FBVztDQUN4QixZQUFZLE1BQU0sSUFBSSxLQUFLLENBQUMsd0NBQXdDLENBQUMsQ0FBQztDQUN0RSxRQUFRLE9BQU8sV0FBVyxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztDQUMvQyxLQUFLO0NBQ0wsSUFBSSxNQUFNLGtCQUFrQixDQUFDLEVBQUUsb0JBQW9CLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxFQUFFO0NBQ3hFLFFBQVEsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7Q0FDcEMsUUFBUSxNQUFNLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxjQUFjLEVBQUUsR0FBRyxvQkFBb0IsQ0FBQztDQUM5RixRQUFRLE1BQU0sT0FBTyxHQUFHO0NBQ3hCLFlBQVksVUFBVSxFQUFFLElBQUk7Q0FDNUIsWUFBWSxFQUFFLEVBQUUsUUFBUTtDQUN4QixZQUFZLE9BQU87Q0FDbkIsWUFBWSxpQkFBaUI7Q0FDN0IsWUFBWSxjQUFjO0NBQzFCLFlBQVksUUFBUTtDQUNwQixTQUFTLENBQUM7Q0FDVixRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsbUNBQW1DLEVBQUUsT0FBTyxDQUFDLENBQUM7Q0FDbkUsUUFBUSxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztDQUN2RTtDQUNBO0NBQ0EsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLDJCQUEyQixFQUFFO0NBQy9DLFlBQVksSUFBSSxDQUFDLFVBQVUsQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO0NBQ3JELFlBQVksTUFBTSxLQUFLLEdBQUcsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUM7Q0FDM0UsWUFBWSxNQUFNLENBQUMsS0FBSyxDQUFDLHFFQUFxRSxFQUFFLEtBQUssQ0FBQyxDQUFDO0NBQ3ZHLFlBQVksTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxDQUFDO0NBQ3ZELFlBQVksTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxDQUFDO0NBQ3pELFlBQVksSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUU7Q0FDdkMsZ0JBQWdCLE1BQU0sY0FBYyxHQUFHQSxLQUFZLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUN0RSxnQkFBZ0IsTUFBTSxJQUFJLENBQUMsZUFBZSxDQUFDLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRSxjQUFjLEVBQUUsQ0FBQyxDQUFDO0NBQ3hGLGFBQWE7Q0FDYixZQUFZLE1BQU0sQ0FBQyxLQUFLLENBQUMsc0VBQXNFLEVBQUUsTUFBTSxDQUFDLENBQUM7Q0FDekcsWUFBWSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsTUFBTSxDQUFDLENBQUM7Q0FDdkQsWUFBWSxJQUFJLENBQUMsMkJBQTJCLEdBQUcsSUFBSSxDQUFDO0NBQ3BELFNBQVM7Q0FDVCxRQUFRLE9BQU8sRUFBRSxXQUFXLEVBQUUsQ0FBQztDQUMvQixLQUFLO0NBQ0wsSUFBSSxNQUFNLGVBQWUsQ0FBQyxFQUFFLGFBQWEsRUFBRSxjQUFjLEVBQUUsRUFBRTtDQUM3RCxRQUFRLElBQUksQ0FBQyxjQUFjO0NBQzNCLFlBQVksY0FBYyxHQUFHQSxLQUFZLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDL0U7Q0FDQSxRQUFRLE1BQU0sY0FBYyxHQUFHQyxXQUFjLENBQUMscUJBQXFCLENBQUMsRUFBRSxTQUFTLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztDQUNuRztDQUNBLFFBQVEsY0FBYyxDQUFDLElBQUksR0FBRyxhQUFhLENBQUM7Q0FDNUM7Q0FDQSxRQUFRLElBQUksQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLGFBQWEsS0FBSyxRQUFRLEdBQUcsUUFBUSxHQUFHLFFBQVEsQ0FBQyxDQUFDO0NBQ3pGO0NBQ0EsUUFBUSxNQUFNLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLEVBQUUsRUFBRSxjQUFjLEVBQUUsQ0FBQyxDQUFDO0NBQ3JFLFFBQVEsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7Q0FDcEMsS0FBSztDQUNMLElBQUksb0JBQW9CLEdBQUc7Q0FDM0IsUUFBUSxJQUFJLElBQUksQ0FBQyxVQUFVLEtBQUssTUFBTSxFQUFFO0NBQ3hDLFlBQVksTUFBTSxJQUFJLEtBQUssQ0FBQyw4REFBOEQsQ0FBQyxDQUFDO0NBQzVGLFNBQVM7Q0FDVCxLQUFLO0NBQ0wsSUFBSSxvQkFBb0IsR0FBRztDQUMzQixRQUFRLElBQUksSUFBSSxDQUFDLFVBQVUsS0FBSyxNQUFNLEVBQUU7Q0FDeEMsWUFBWSxNQUFNLElBQUksS0FBSyxDQUFDLDhEQUE4RCxDQUFDLENBQUM7Q0FDNUYsU0FBUztDQUNULEtBQUs7Q0FDTCxDQUFDO0NBQ0QsaUJBQWlCLEdBQUcsU0FBUzs7Ozs7OztBQzNmN0IsQ0FDQSxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUNoQjtBQUNSO0FBQ0o7QUFDRjtBQUNvQjtBQUNVO0FBQ0w7QUFDVjtDQUMvQyxNQUFNLE1BQU0sR0FBRyxJQUFJLFFBQVEsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7Q0FDL0MsTUFBTSxnQkFBZ0IsR0FBRyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxDQUFDO0NBQ2pELE1BQU0sUUFBUSxTQUFTLGtCQUFrQixDQUFDLGdCQUFnQixDQUFDO0NBQzNELElBQUksV0FBVyxHQUFHO0NBQ2xCLFFBQVEsS0FBSyxFQUFFLENBQUM7Q0FDaEI7Q0FDQSxRQUFRLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO0NBQzVDO0NBQ0EsUUFBUSxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksV0FBVyxFQUFFLENBQUM7Q0FDN0M7Q0FDQSxRQUFRLElBQUksQ0FBQywyQkFBMkIsR0FBRyxLQUFLLENBQUM7Q0FDakQ7Q0FDQSxRQUFRLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxDQUFDLENBQUM7Q0FDdkM7Q0FDQSxRQUFRLElBQUksQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDO0NBQ3JDLEtBQUs7Q0FDTDtDQUNBO0NBQ0E7Q0FDQSxJQUFJLE9BQU8sYUFBYSxHQUFHO0NBQzNCLFFBQVEsT0FBTyxNQUFNLElBQUksUUFBUSxFQUFFLENBQUM7Q0FDcEMsS0FBSztDQUNMLElBQUksSUFBSSxJQUFJLEdBQUc7Q0FDZixRQUFRLE9BQU8sVUFBVSxDQUFDO0NBQzFCLEtBQUs7Q0FDTCxJQUFJLEtBQUssR0FBRztDQUNaLFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQztDQUNoQztDQUNBLFFBQVEsSUFBSSxJQUFJLENBQUMsR0FBRyxFQUFFO0NBQ3RCLFlBQVksSUFBSTtDQUNoQixnQkFBZ0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztDQUNqQyxhQUFhO0NBQ2IsWUFBWSxPQUFPLEtBQUssRUFBRSxHQUFHO0NBQzdCLFNBQVM7Q0FDVCxLQUFLO0NBQ0wsSUFBSSxNQUFNLHdCQUF3QixHQUFHO0NBQ3JDLFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO0NBQ25ELFFBQVEsTUFBTSxFQUFFLEdBQUcsSUFBSSxpQkFBaUIsQ0FBQztDQUN6QyxZQUFZLFVBQVUsRUFBRSxFQUFFO0NBQzFCLFlBQVksa0JBQWtCLEVBQUUsS0FBSztDQUNyQyxZQUFZLFlBQVksRUFBRSxZQUFZO0NBQ3RDLFlBQVksYUFBYSxFQUFFLFNBQVM7Q0FDcEMsU0FBUyxDQUFDLENBQUM7Q0FDWCxRQUFRLElBQUk7Q0FDWixZQUFZLEVBQUUsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUM7Q0FDdkMsWUFBWSxFQUFFLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0NBQ3ZDLFlBQVksTUFBTSxLQUFLLEdBQUcsTUFBTSxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUM7Q0FDakQsWUFBWSxJQUFJO0NBQ2hCLGdCQUFnQixFQUFFLENBQUMsS0FBSyxFQUFFLENBQUM7Q0FDM0IsYUFBYTtDQUNiLFlBQVksT0FBTyxLQUFLLEVBQUUsR0FBRztDQUM3QixZQUFZLE1BQU0sU0FBUyxHQUFHRCxLQUFZLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUM1RCxZQUFZLE1BQU0scUJBQXFCLEdBQUdDLFdBQWMsQ0FBQyxzQkFBc0IsQ0FBQyxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUM7Q0FDL0YsWUFBWSxPQUFPLHFCQUFxQixDQUFDO0NBQ3pDLFNBQVM7Q0FDVCxRQUFRLE9BQU8sS0FBSyxFQUFFO0NBQ3RCLFlBQVksSUFBSTtDQUNoQixnQkFBZ0IsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0NBQzNCLGFBQWE7Q0FDYixZQUFZLE9BQU8sTUFBTSxFQUFFLEdBQUc7Q0FDOUIsWUFBWSxNQUFNLEtBQUssQ0FBQztDQUN4QixTQUFTO0NBQ1QsS0FBSztDQUNMLElBQUksTUFBTSx5QkFBeUIsR0FBRztDQUN0QyxRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsNkJBQTZCLENBQUMsQ0FBQztDQUNwRCxRQUFRLE9BQU87Q0FDZixZQUFZLFVBQVUsRUFBRSxnQkFBZ0I7Q0FDeEMsU0FBUyxDQUFDO0NBQ1YsS0FBSztDQUNMLElBQUksR0FBRyxDQUFDLEVBQUUsU0FBUyxFQUFFLGFBQWEsRUFBRSxhQUFhLEVBQUUsY0FBYyxFQUFFLGNBQWMsRUFBRSxVQUFVLEVBQUUsa0JBQWtCLEVBQUUsa0JBQWtCLEVBQUUsc0JBQXNCLEVBQUUsdUJBQXVCLEVBQUUsRUFBRTtDQUMxTCxRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7Q0FDOUIsUUFBUSxJQUFJLENBQUMsVUFBVSxHQUFHLFNBQVMsQ0FBQztDQUNwQyxRQUFRLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxXQUFXLENBQUMsU0FBUyxDQUFDO0NBQ3BELFlBQVksYUFBYTtDQUN6QixZQUFZLGFBQWE7Q0FDekIsWUFBWSxjQUFjO0NBQzFCLFlBQVksY0FBYztDQUMxQixTQUFTLENBQUMsQ0FBQztDQUNYLFFBQVEsSUFBSSxDQUFDLDJCQUEyQjtDQUN4QyxZQUFZO0NBQ1osZ0JBQWdCLEtBQUssRUFBRSxJQUFJLENBQUMsdUJBQXVCLENBQUMsT0FBTyxFQUFFLHVCQUF1QixDQUFDO0NBQ3JGLGdCQUFnQixLQUFLLEVBQUUsSUFBSSxDQUFDLHVCQUF1QixDQUFDLE9BQU8sRUFBRSx1QkFBdUIsQ0FBQztDQUNyRixhQUFhLENBQUM7Q0FDZCxRQUFRLElBQUksQ0FBQyxpQ0FBaUM7Q0FDOUMsWUFBWTtDQUNaLGdCQUFnQixLQUFLLEVBQUUsSUFBSSxDQUFDLDZCQUE2QixDQUFDLE9BQU8sRUFBRSx1QkFBdUIsQ0FBQztDQUMzRixnQkFBZ0IsS0FBSyxFQUFFLElBQUksQ0FBQyw2QkFBNkIsQ0FBQyxPQUFPLEVBQUUsdUJBQXVCLENBQUM7Q0FDM0YsYUFBYSxDQUFDO0NBQ2QsUUFBUSxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksaUJBQWlCLENBQUM7Q0FDekMsWUFBWSxVQUFVLEVBQUUsVUFBVSxJQUFJLEVBQUU7Q0FDeEMsWUFBWSxrQkFBa0IsRUFBRSxrQkFBa0IsSUFBSSxLQUFLO0NBQzNELFlBQVksWUFBWSxFQUFFLFlBQVk7Q0FDdEMsWUFBWSxhQUFhLEVBQUUsU0FBUztDQUNwQyxZQUFZLEdBQUcsa0JBQWtCO0NBQ2pDLFNBQVMsRUFBRSxzQkFBc0IsQ0FBQyxDQUFDO0NBQ25DO0NBQ0EsUUFBUSxJQUFJLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLDBCQUEwQixFQUFFLE1BQU07Q0FDcEUsWUFBWSxRQUFRLElBQUksQ0FBQyxHQUFHLENBQUMsa0JBQWtCO0NBQy9DLGdCQUFnQixLQUFLLFVBQVU7Q0FDL0Isb0JBQW9CLElBQUksQ0FBQyxJQUFJLENBQUMsd0JBQXdCLEVBQUUsWUFBWSxDQUFDLENBQUM7Q0FDdEUsb0JBQW9CLE1BQU07Q0FDMUIsZ0JBQWdCLEtBQUssV0FBVyxDQUFDO0NBQ2pDLGdCQUFnQixLQUFLLFdBQVc7Q0FDaEMsb0JBQW9CLElBQUksQ0FBQyxJQUFJLENBQUMsd0JBQXdCLEVBQUUsV0FBVyxDQUFDLENBQUM7Q0FDckUsb0JBQW9CLE1BQU07Q0FDMUIsZ0JBQWdCLEtBQUssUUFBUTtDQUM3QixvQkFBb0IsSUFBSSxDQUFDLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxRQUFRLENBQUMsQ0FBQztDQUNsRSxvQkFBb0IsTUFBTTtDQUMxQixnQkFBZ0IsS0FBSyxjQUFjO0NBQ25DLG9CQUFvQixJQUFJLENBQUMsSUFBSSxDQUFDLHdCQUF3QixFQUFFLGNBQWMsQ0FBQyxDQUFDO0NBQ3hFLG9CQUFvQixNQUFNO0NBQzFCLGdCQUFnQixLQUFLLFFBQVE7Q0FDN0Isb0JBQW9CLElBQUksQ0FBQyxJQUFJLENBQUMsd0JBQXdCLEVBQUUsUUFBUSxDQUFDLENBQUM7Q0FDbEUsb0JBQW9CLE1BQU07Q0FDMUIsYUFBYTtDQUNiLFNBQVMsQ0FBQyxDQUFDO0NBQ1gsS0FBSztDQUNMLElBQUksTUFBTSxnQkFBZ0IsQ0FBQyxVQUFVLEVBQUU7Q0FDdkMsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLG9CQUFvQixDQUFDLENBQUM7Q0FDM0MsUUFBUSxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLENBQUM7Q0FDMUQsUUFBUSxhQUFhLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztDQUM5QyxRQUFRLElBQUksQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxDQUFDLENBQUM7Q0FDakQsS0FBSztDQUNMLElBQUksTUFBTSxVQUFVLENBQUMsYUFBYSxFQUFFO0NBQ3BDLFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQztDQUNyQztDQUNBLFFBQVEsSUFBSSxDQUFDLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxhQUFhLENBQUMsQ0FBQztDQUMzRCxRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZTtDQUNqQyxZQUFZLE9BQU87Q0FDbkIsUUFBUSxJQUFJLElBQUksQ0FBQyxVQUFVLEtBQUssTUFBTSxFQUFFO0NBQ3hDLFlBQVksTUFBTSxLQUFLLEdBQUcsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0NBQzNFLFlBQVksTUFBTSxDQUFDLEtBQUssQ0FBQyw0REFBNEQsRUFBRSxLQUFLLENBQUMsQ0FBQztDQUM5RixZQUFZLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztDQUN0RCxZQUFZLE1BQU0sTUFBTSxHQUFHLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDO0NBQzdFLFlBQVksTUFBTSxDQUFDLEtBQUssQ0FBQyw4REFBOEQsRUFBRSxNQUFNLENBQUMsQ0FBQztDQUNqRyxZQUFZLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztDQUN4RCxTQUFTO0NBQ1QsYUFBYTtDQUNiLFlBQVksTUFBTSxLQUFLLEdBQUcsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUM7Q0FDM0UsWUFBWSxNQUFNLENBQUMsS0FBSyxDQUFDLDZEQUE2RCxFQUFFLEtBQUssQ0FBQyxDQUFDO0NBQy9GLFlBQVksTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxDQUFDO0NBQ3ZELFlBQVksTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxDQUFDO0NBQ3pELFlBQVksTUFBTSxDQUFDLEtBQUssQ0FBQyw2REFBNkQsRUFBRSxNQUFNLENBQUMsQ0FBQztDQUNoRyxZQUFZLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztDQUN2RCxTQUFTO0NBQ1QsS0FBSztDQUNMLElBQUksTUFBTSxpQkFBaUIsR0FBRztDQUM5QixRQUFRLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztDQUNuQyxLQUFLO0NBQ0wsSUFBSSxNQUFNLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxFQUFFO0NBQzFELFFBQVEsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7Q0FDcEMsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLCtCQUErQixFQUFFLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0NBQzVFLFFBQVEsTUFBTSxvQkFBb0IsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztDQUMvRjtDQUNBLFFBQVEsb0JBQW9CLENBQUMsTUFBTTtDQUNuQyxZQUFZLElBQUksQ0FBQyxZQUFZLENBQUMsb0JBQW9CLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO0NBQ2xFLFFBQVEsTUFBTSwwQkFBMEIsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxpQ0FBaUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztDQUMzRztDQUNBLFFBQVEsMEJBQTBCLENBQUMsTUFBTTtDQUN6QyxZQUFZLElBQUksQ0FBQyxZQUFZLENBQUMsMEJBQTBCLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO0NBQ3hFLFFBQVEsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO0NBQ3pFLFFBQVEsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0NBQ25ILFFBQVEsSUFBSSxLQUFLLEdBQUcsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO0NBQ2pELFFBQVEsSUFBSSxjQUFjLEdBQUdELEtBQVksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQzNELFFBQVEsSUFBSSxnQkFBZ0IsQ0FBQztDQUM3QixRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZTtDQUNqQyxZQUFZLE1BQU0sSUFBSSxDQUFDLGVBQWUsQ0FBQyxFQUFFLGFBQWEsRUFBRSxRQUFRLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztDQUNwRixRQUFRLElBQUksU0FBUyxJQUFJLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0NBQy9DLFlBQVksTUFBTSxDQUFDLEtBQUssQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO0NBQy9ELFlBQVksY0FBYyxHQUFHQSxLQUFZLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUMzRCxZQUFZLGdCQUFnQixHQUFHLGNBQWMsQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQ3pFLFlBQVlHLGdCQUFtQixDQUFDLGtCQUFrQixDQUFDO0NBQ25ELGdCQUFnQixnQkFBZ0I7Q0FDaEMsZ0JBQWdCLFVBQVUsRUFBRSxTQUFTLENBQUMsTUFBTTtDQUM1QyxhQUFhLENBQUMsQ0FBQztDQUNmLFlBQVksS0FBSyxHQUFHLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUVILEtBQVksQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQztDQUMvRSxTQUFTO0NBQ1QsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLHNEQUFzRCxFQUFFLEtBQUssQ0FBQyxDQUFDO0NBQ3BGLFFBQVEsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDO0NBQ2xEO0NBQ0EsUUFBUSxNQUFNLE9BQU8sR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFDO0NBQ3hDO0NBQ0EsUUFBUSxvQkFBb0IsQ0FBQyxHQUFHLEdBQUcsT0FBTyxDQUFDO0NBQzNDLFFBQVEsY0FBYyxHQUFHQSxLQUFZLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDM0UsUUFBUSxnQkFBZ0IsR0FBRyxjQUFjLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUNyRTtDQUNBLFFBQVEsb0JBQW9CLENBQUMsSUFBSSxDQUFDLEtBQUs7Q0FDdkMsWUFBWUMsV0FBYyxDQUFDLFFBQVEsQ0FBQyxFQUFFLGdCQUFnQixFQUFFLENBQUMsQ0FBQztDQUMxRDtDQUNBLFFBQVEsb0JBQW9CLENBQUMsU0FBUztDQUN0QyxZQUFZRSxnQkFBbUIsQ0FBQyxlQUFlLENBQUMsRUFBRSxnQkFBZ0IsRUFBRSxDQUFDLENBQUM7Q0FDdEU7Q0FDQSxRQUFRLElBQUksU0FBUyxFQUFFO0NBQ3ZCLFlBQVksS0FBSyxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxHQUFHLEVBQUU7Q0FDbEYsZ0JBQWdCLElBQUksU0FBUyxDQUFDLEdBQUcsQ0FBQztDQUNsQyxvQkFBb0IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Q0FDdkYsYUFBYTtDQUNiLFNBQVM7Q0FDVDtDQUNBO0NBQ0EsUUFBUSxJQUFJLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQztDQUNyRCxhQUFhLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLEtBQUssV0FBVztDQUNsRixnQkFBZ0Isb0JBQW9CLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsS0FBSyxZQUFZLENBQUMsRUFBRTtDQUN6RixZQUFZLEtBQUssTUFBTSxRQUFRLElBQUksb0JBQW9CLENBQUMsU0FBUyxFQUFFO0NBQ25FLGdCQUFnQixRQUFRLENBQUMsZUFBZSxHQUFHLE1BQU0sQ0FBQztDQUNsRCxhQUFhO0NBQ2IsU0FBUztDQUNULFFBQVEsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUM7Q0FDN0IsWUFBWSxnQkFBZ0I7Q0FDNUIsWUFBWSxRQUFRLEVBQUUsZUFBZSxDQUFDLFFBQVE7Q0FDOUMsWUFBWSxrQkFBa0IsRUFBRSxvQkFBb0I7Q0FDcEQsWUFBWSxtQkFBbUIsRUFBRSwwQkFBMEI7Q0FDM0QsWUFBWSxZQUFZO0NBQ3hCLFNBQVMsQ0FBQyxDQUFDO0NBQ1gsUUFBUSxNQUFNLE1BQU0sR0FBRyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQztDQUN6RSxRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsd0RBQXdELEVBQUUsTUFBTSxDQUFDLENBQUM7Q0FDdkYsUUFBUSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLENBQUM7Q0FDcEQ7Q0FDQSxRQUFRLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0NBQzFELFFBQVEsT0FBTztDQUNmLFlBQVksT0FBTztDQUNuQixZQUFZLGFBQWEsRUFBRSxvQkFBb0I7Q0FDL0MsWUFBWSxTQUFTLEVBQUUsV0FBVyxDQUFDLE1BQU07Q0FDekMsU0FBUyxDQUFDO0NBQ1YsS0FBSztDQUNMLElBQUksTUFBTSxXQUFXLENBQUMsT0FBTyxFQUFFO0NBQy9CLFFBQVEsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7Q0FDcEMsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLDRCQUE0QixFQUFFLE9BQU8sQ0FBQyxDQUFDO0NBQzVELFFBQVEsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztDQUNqRSxRQUFRLElBQUksQ0FBQyxXQUFXO0NBQ3hCLFlBQVksTUFBTSxJQUFJLEtBQUssQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDO0NBQ3RFLFFBQVEsV0FBVyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7Q0FDOUMsUUFBUSxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7Q0FDakQsUUFBUSxJQUFJLENBQUMsVUFBVSxDQUFDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUMzRCxRQUFRLE1BQU0sS0FBSyxHQUFHLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztDQUNuRCxRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsNkRBQTZELEVBQUUsS0FBSyxDQUFDLENBQUM7Q0FDM0YsUUFBUSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDbEQsUUFBUSxNQUFNLE1BQU0sR0FBRyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQztDQUN6RSxRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsK0RBQStELEVBQUUsTUFBTSxDQUFDLENBQUM7Q0FDOUYsUUFBUSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLENBQUM7Q0FDcEQsS0FBSztDQUNMLElBQUksTUFBTSxZQUFZLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRTtDQUN2QyxRQUFRLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO0NBQ3BDLFFBQVEsSUFBSSxLQUFLLEVBQUU7Q0FDbkIsWUFBWSxNQUFNLENBQUMsS0FBSyxDQUFDLDBDQUEwQyxFQUFFLE9BQU8sRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7Q0FDeEYsU0FBUztDQUNULGFBQWE7Q0FDYixZQUFZLE1BQU0sQ0FBQyxLQUFLLENBQUMsdUNBQXVDLEVBQUUsT0FBTyxDQUFDLENBQUM7Q0FDM0UsU0FBUztDQUNULFFBQVEsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztDQUNqRSxRQUFRLElBQUksQ0FBQyxXQUFXO0NBQ3hCLFlBQVksTUFBTSxJQUFJLEtBQUssQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDO0NBQ3RFLFFBQVEsTUFBTSxXQUFXLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztDQUNyRCxLQUFLO0NBQ0wsSUFBSSxNQUFNLGtCQUFrQixDQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUU7Q0FDcEQsUUFBUSxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztDQUNwQyxRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsb0RBQW9ELEVBQUUsT0FBTyxFQUFFLFlBQVksQ0FBQyxDQUFDO0NBQ2xHLFFBQVEsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztDQUNqRSxRQUFRLElBQUksQ0FBQyxXQUFXO0NBQ3hCLFlBQVksTUFBTSxJQUFJLEtBQUssQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDO0NBQ3RFLFFBQVEsTUFBTSxVQUFVLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsQ0FBQztDQUM5RCxRQUFRLFVBQVUsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxFQUFFLEdBQUcsS0FBSztDQUN4RCxZQUFZLElBQUksR0FBRyxJQUFJLFlBQVk7Q0FDbkMsZ0JBQWdCLFFBQVEsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO0NBQ3ZDO0NBQ0EsZ0JBQWdCLFFBQVEsQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO0NBQ3hDLFNBQVMsQ0FBQyxDQUFDO0NBQ1gsUUFBUSxNQUFNLFdBQVcsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0NBQzNELEtBQUs7Q0FDTCxJQUFJLE1BQU0sd0JBQXdCLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRTtDQUNwRCxRQUFRLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO0NBQ3BDLFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyxvREFBb0QsRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7Q0FDNUYsUUFBUSxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0NBQ2pFLFFBQVEsSUFBSSxDQUFDLFdBQVc7Q0FDeEIsWUFBWSxNQUFNLElBQUksS0FBSyxDQUFDLHdDQUF3QyxDQUFDLENBQUM7Q0FDdEUsUUFBUSxNQUFNLFVBQVUsR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLGFBQWEsRUFBRSxDQUFDO0NBQzlELFFBQVEsVUFBVSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFRLEVBQUUsR0FBRyxLQUFLO0NBQ3hELFlBQVksVUFBVSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsUUFBUSxFQUFFLEdBQUcsTUFBTSxFQUFFLENBQUM7Q0FDbkUsU0FBUyxDQUFDLENBQUM7Q0FDWCxRQUFRLE1BQU0sV0FBVyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUM7Q0FDM0QsS0FBSztDQUNMLElBQUksTUFBTSxjQUFjLENBQUMsT0FBTyxFQUFFO0NBQ2xDLFFBQVEsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7Q0FDcEMsUUFBUSxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0NBQ2pFLFFBQVEsSUFBSSxDQUFDLFdBQVc7Q0FDeEIsWUFBWSxNQUFNLElBQUksS0FBSyxDQUFDLHdDQUF3QyxDQUFDLENBQUM7Q0FDdEUsUUFBUSxPQUFPLFdBQVcsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7Q0FDN0MsS0FBSztDQUNMLElBQUksTUFBTSxlQUFlLENBQUMsRUFBRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsY0FBYyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLEVBQUU7Q0FDckcsUUFBUSxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztDQUNwQyxRQUFRLE1BQU0sT0FBTyxHQUFHO0NBQ3hCLFlBQVksVUFBVSxFQUFFLElBQUk7Q0FDNUIsWUFBWSxFQUFFLEVBQUUsSUFBSSxDQUFDLHFCQUFxQjtDQUMxQyxZQUFZLE9BQU87Q0FDbkIsWUFBWSxpQkFBaUI7Q0FDN0IsWUFBWSxjQUFjO0NBQzFCLFlBQVksUUFBUTtDQUNwQixZQUFZLFFBQVE7Q0FDcEIsU0FBUyxDQUFDO0NBQ1YsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0NBQ2hFLFFBQVEsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7Q0FDdkU7Q0FDQSxRQUFRLElBQUksQ0FBQyxxQkFBcUI7Q0FDbEMsWUFBWSxFQUFFLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUM7Q0FDaEU7Q0FDQTtDQUNBLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQywyQkFBMkIsRUFBRTtDQUMvQyxZQUFZLE1BQU0sS0FBSyxHQUFHLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztDQUN2RCxZQUFZLE1BQU0sY0FBYyxHQUFHSCxLQUFZLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUNqRSxZQUFZLE1BQU0sZ0JBQWdCLEdBQUcsY0FBYyxDQUFDLEtBQUs7Q0FDekQsaUJBQWlCLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxLQUFLLGFBQWEsQ0FBQyxDQUFDO0NBQ3ZELFlBQVksSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlO0NBQ3JDLGdCQUFnQixNQUFNLElBQUksQ0FBQyxlQUFlLENBQUMsRUFBRSxhQUFhLEVBQUUsUUFBUSxFQUFFLGNBQWMsRUFBRSxDQUFDLENBQUM7Q0FDeEYsWUFBWSxNQUFNLENBQUMsS0FBSyxDQUFDLGlFQUFpRSxFQUFFLEtBQUssQ0FBQyxDQUFDO0NBQ25HLFlBQVksTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDO0NBQ3RELFlBQVksSUFBSSxDQUFDLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFLGdCQUFnQixFQUFFLENBQUMsQ0FBQztDQUN0RSxZQUFZLE1BQU0sTUFBTSxHQUFHLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDO0NBQzdFLFlBQVksTUFBTSxDQUFDLEtBQUssQ0FBQyxtRUFBbUUsRUFBRSxNQUFNLENBQUMsQ0FBQztDQUN0RyxZQUFZLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztDQUN4RCxZQUFZLElBQUksQ0FBQywyQkFBMkIsR0FBRyxJQUFJLENBQUM7Q0FDcEQsU0FBUztDQUNULFFBQVEsTUFBTSxvQkFBb0IsR0FBRztDQUNyQyxZQUFZLFFBQVEsRUFBRSxPQUFPLENBQUMsRUFBRTtDQUNoQyxZQUFZLE9BQU8sRUFBRSxPQUFPLENBQUMsT0FBTztDQUNwQyxZQUFZLGlCQUFpQixFQUFFLE9BQU8sQ0FBQyxpQkFBaUI7Q0FDeEQsWUFBWSxjQUFjLEVBQUUsT0FBTyxDQUFDLGNBQWM7Q0FDbEQsU0FBUyxDQUFDO0NBQ1YsUUFBUSxPQUFPLEVBQUUsV0FBVyxFQUFFLG9CQUFvQixFQUFFLENBQUM7Q0FDckQsS0FBSztDQUNMLElBQUksTUFBTSxPQUFPLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLGFBQWEsRUFBRSxFQUFFO0NBQ3BELFFBQVEsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7Q0FDcEMsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLGlDQUFpQyxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztDQUN2RSxRQUFRLE1BQU0sT0FBTyxHQUFHLGFBQWEsQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztDQUNsRixRQUFRLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDO0NBQ2hDLFlBQVksR0FBRyxFQUFFLE9BQU87Q0FDeEIsWUFBWSxJQUFJO0NBQ2hCLFlBQVksa0JBQWtCLEVBQUUsYUFBYTtDQUM3QyxZQUFZLFFBQVEsRUFBRSxhQUFhLENBQUMsSUFBSSxDQUFDLEtBQUs7Q0FDOUMsWUFBWSxPQUFPO0NBQ25CLFNBQVMsQ0FBQyxDQUFDO0NBQ1gsUUFBUSxNQUFNLEtBQUssR0FBRyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQztDQUN2RSxRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsMERBQTBELEVBQUUsS0FBSyxDQUFDLENBQUM7Q0FDeEYsUUFBUSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDbkQsUUFBUSxJQUFJLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUM7Q0FDbkQsUUFBUSxNQUFNLGNBQWMsR0FBR0EsS0FBWSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDOUQsUUFBUSxNQUFNLGlCQUFpQixHQUFHLGNBQWMsQ0FBQyxLQUFLO0NBQ3RELGFBQWEsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssT0FBTyxDQUFDLENBQUM7Q0FDcEQ7Q0FDQTtDQUNBLFFBQVFDLFdBQWMsQ0FBQyxvQkFBb0IsQ0FBQztDQUM1QyxZQUFZLGtCQUFrQixFQUFFLGFBQWE7Q0FDN0MsWUFBWSxpQkFBaUI7Q0FDN0IsU0FBUyxDQUFDLENBQUM7Q0FDWCxRQUFRLE1BQU0sR0FBRyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFRCxLQUFZLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUM7Q0FDN0UsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWU7Q0FDakMsWUFBWSxNQUFNLElBQUksQ0FBQyxlQUFlLENBQUMsRUFBRSxhQUFhLEVBQUUsUUFBUSxFQUFFLGNBQWMsRUFBRSxDQUFDLENBQUM7Q0FDcEYsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLDBEQUEwRCxFQUFFLE1BQU0sQ0FBQyxDQUFDO0NBQ3pGLFFBQVEsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0NBQ25ELFFBQVEsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUU7Q0FDdEQsYUFBYSxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsS0FBSyxPQUFPLENBQUMsQ0FBQztDQUM1QyxRQUFRLElBQUksQ0FBQyxXQUFXO0NBQ3hCLFlBQVksTUFBTSxJQUFJLEtBQUssQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDO0NBQy9EO0NBQ0EsUUFBUSxJQUFJLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxXQUFXLENBQUMsQ0FBQztDQUMxRCxRQUFRLE9BQU87Q0FDZixZQUFZLE9BQU87Q0FDbkIsWUFBWSxLQUFLLEVBQUUsV0FBVyxDQUFDLFFBQVEsQ0FBQyxLQUFLO0NBQzdDLFlBQVksV0FBVyxFQUFFLFdBQVcsQ0FBQyxRQUFRO0NBQzdDLFNBQVMsQ0FBQztDQUNWLEtBQUs7Q0FDTCxJQUFJLE1BQU0sYUFBYSxDQUFDLE9BQU8sRUFBRTtDQUNqQyxRQUFRLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO0NBQ3BDLFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyw4QkFBOEIsRUFBRSxPQUFPLENBQUMsQ0FBQztDQUM5RCxRQUFRLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7Q0FDakUsUUFBUSxJQUFJLENBQUMsV0FBVztDQUN4QixZQUFZLE1BQU0sSUFBSSxLQUFLLENBQUMsd0NBQXdDLENBQUMsQ0FBQztDQUN0RSxRQUFRLElBQUksQ0FBQyxVQUFVLENBQUMsaUJBQWlCLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQzNELFFBQVEsTUFBTSxLQUFLLEdBQUcsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUM7Q0FDdkUsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLGdFQUFnRSxFQUFFLEtBQUssQ0FBQyxDQUFDO0NBQzlGLFFBQVEsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxDQUFDO0NBQ25ELFFBQVEsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxDQUFDO0NBQ3JELFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyxnRUFBZ0UsRUFBRSxNQUFNLENBQUMsQ0FBQztDQUMvRixRQUFRLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztDQUNuRCxLQUFLO0NBQ0wsSUFBSSxNQUFNLGdCQUFnQixDQUFDLE9BQU8sRUFBRTtDQUNwQyxRQUFRLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO0NBQ3BDLFFBQVEsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztDQUNqRSxRQUFRLElBQUksQ0FBQyxXQUFXO0NBQ3hCLFlBQVksTUFBTSxJQUFJLEtBQUssQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDO0NBQ3RFLFFBQVEsT0FBTyxXQUFXLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO0NBQy9DLEtBQUs7Q0FDTCxJQUFJLE1BQU0sa0JBQWtCLENBQUMsRUFBRSxvQkFBb0IsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLEVBQUU7Q0FDeEUsUUFBUSxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztDQUNwQyxRQUFRLE1BQU0sRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLGNBQWMsRUFBRSxHQUFHLG9CQUFvQixDQUFDO0NBQzlGLFFBQVEsTUFBTSxPQUFPLEdBQUc7Q0FDeEIsWUFBWSxVQUFVLEVBQUUsSUFBSTtDQUM1QixZQUFZLEVBQUUsRUFBRSxRQUFRO0NBQ3hCLFlBQVksT0FBTztDQUNuQixZQUFZLGlCQUFpQjtDQUM3QixZQUFZLGNBQWM7Q0FDMUIsWUFBWSxRQUFRO0NBQ3BCLFNBQVMsQ0FBQztDQUNWLFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyxtQ0FBbUMsRUFBRSxPQUFPLENBQUMsQ0FBQztDQUNuRSxRQUFRLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0NBQ3ZFO0NBQ0E7Q0FDQSxRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsMkJBQTJCLEVBQUU7Q0FDL0MsWUFBWSxJQUFJLENBQUMsVUFBVSxDQUFDLHNCQUFzQixFQUFFLENBQUM7Q0FDckQsWUFBWSxNQUFNLEtBQUssR0FBRyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQztDQUMzRSxZQUFZLE1BQU0sQ0FBQyxLQUFLLENBQUMscUVBQXFFLEVBQUUsS0FBSyxDQUFDLENBQUM7Q0FDdkcsWUFBWSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDdkQsWUFBWSxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUM7Q0FDekQsWUFBWSxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRTtDQUN2QyxnQkFBZ0IsTUFBTSxjQUFjLEdBQUdBLEtBQVksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQ3RFLGdCQUFnQixNQUFNLElBQUksQ0FBQyxlQUFlLENBQUMsRUFBRSxhQUFhLEVBQUUsUUFBUSxFQUFFLGNBQWMsRUFBRSxDQUFDLENBQUM7Q0FDeEYsYUFBYTtDQUNiLFlBQVksTUFBTSxDQUFDLEtBQUssQ0FBQyxzRUFBc0UsRUFBRSxNQUFNLENBQUMsQ0FBQztDQUN6RyxZQUFZLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztDQUN2RCxZQUFZLElBQUksQ0FBQywyQkFBMkIsR0FBRyxJQUFJLENBQUM7Q0FDcEQsU0FBUztDQUNULFFBQVEsT0FBTyxFQUFFLFdBQVcsRUFBRSxDQUFDO0NBQy9CLEtBQUs7Q0FDTCxJQUFJLE1BQU0sZUFBZSxDQUFDLEVBQUUsYUFBYSxFQUFFLGNBQWMsRUFBRSxFQUFFO0NBQzdELFFBQVEsSUFBSSxDQUFDLGNBQWM7Q0FDM0IsWUFBWSxjQUFjLEdBQUdBLEtBQVksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUMvRTtDQUNBLFFBQVEsTUFBTSxjQUFjLEdBQUdDLFdBQWMsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLFNBQVMsRUFBRSxjQUFjLEVBQUUsQ0FBQyxDQUFDO0NBQ25HO0NBQ0EsUUFBUSxjQUFjLENBQUMsSUFBSSxHQUFHLGFBQWEsQ0FBQztDQUM1QztDQUNBLFFBQVEsSUFBSSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsYUFBYSxLQUFLLFFBQVEsR0FBRyxRQUFRLEdBQUcsUUFBUSxDQUFDLENBQUM7Q0FDekY7Q0FDQSxRQUFRLE1BQU0sSUFBSSxDQUFDLGlCQUFpQixDQUFDLFVBQVUsRUFBRSxFQUFFLGNBQWMsRUFBRSxDQUFDLENBQUM7Q0FDckUsUUFBUSxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQztDQUNwQyxLQUFLO0NBQ0wsSUFBSSxvQkFBb0IsR0FBRztDQUMzQixRQUFRLElBQUksSUFBSSxDQUFDLFVBQVUsS0FBSyxNQUFNLEVBQUU7Q0FDeEMsWUFBWSxNQUFNLElBQUksS0FBSyxDQUFDLDhEQUE4RCxDQUFDLENBQUM7Q0FDNUYsU0FBUztDQUNULEtBQUs7Q0FDTCxJQUFJLG9CQUFvQixHQUFHO0NBQzNCLFFBQVEsSUFBSSxJQUFJLENBQUMsVUFBVSxLQUFLLE1BQU0sRUFBRTtDQUN4QyxZQUFZLE1BQU0sSUFBSSxLQUFLLENBQUMsOERBQThELENBQUMsQ0FBQztDQUM1RixTQUFTO0NBQ1QsS0FBSztDQUNMLENBQUM7Q0FDRCxnQkFBZ0IsR0FBRyxRQUFROzs7Ozs7O0FDeGMzQixDQUNBLE1BQU0sQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQ2hCO0FBQ1I7QUFDSjtBQUNGO0FBQ29CO0FBQ0Y7QUFDTztBQUNWO0NBQy9DLE1BQU0sTUFBTSxHQUFHLElBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztDQUMvQyxNQUFNLGdCQUFnQixHQUFHLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUM7Q0FDakQsTUFBTSxRQUFRLFNBQVMsa0JBQWtCLENBQUMsZ0JBQWdCLENBQUM7Q0FDM0QsSUFBSSxXQUFXLEdBQUc7Q0FDbEIsUUFBUSxLQUFLLEVBQUUsQ0FBQztDQUNoQjtDQUNBLFFBQVEsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDO0NBQzdDO0NBQ0EsUUFBUSxJQUFJLENBQUMsd0JBQXdCLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQztDQUNsRDtDQUNBLFFBQVEsSUFBSSxDQUFDLGdCQUFnQixHQUFHLENBQUMsQ0FBQztDQUNsQztDQUNBO0NBQ0EsUUFBUSxJQUFJLENBQUMsbUJBQW1CLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQztDQUM3QztDQUNBLFFBQVEsSUFBSSxDQUFDLDJCQUEyQixHQUFHLEtBQUssQ0FBQztDQUNqRDtDQUNBLFFBQVEsSUFBSSxDQUFDLHFCQUFxQixHQUFHLENBQUMsQ0FBQztDQUN2QztDQUNBLFFBQVEsSUFBSSxDQUFDLGVBQWUsR0FBRyxLQUFLLENBQUM7Q0FDckMsS0FBSztDQUNMO0NBQ0E7Q0FDQTtDQUNBLElBQUksT0FBTyxhQUFhLEdBQUc7Q0FDM0IsUUFBUSxPQUFPLE1BQU0sSUFBSSxRQUFRLEVBQUUsQ0FBQztDQUNwQyxLQUFLO0NBQ0wsSUFBSSxJQUFJLElBQUksR0FBRztDQUNmLFFBQVEsT0FBTyxVQUFVLENBQUM7Q0FDMUIsS0FBSztDQUNMLElBQUksS0FBSyxHQUFHO0NBQ1osUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0NBQ2hDO0NBQ0EsUUFBUSxJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUU7Q0FDdEIsWUFBWSxJQUFJO0NBQ2hCLGdCQUFnQixJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO0NBQ2pDLGFBQWE7Q0FDYixZQUFZLE9BQU8sS0FBSyxFQUFFLEdBQUc7Q0FDN0IsU0FBUztDQUNULEtBQUs7Q0FDTCxJQUFJLE1BQU0sd0JBQXdCLEdBQUc7Q0FDckMsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLDRCQUE0QixDQUFDLENBQUM7Q0FDbkQsUUFBUSxNQUFNLEVBQUUsR0FBRyxJQUFJLGlCQUFpQixDQUFDO0NBQ3pDLFlBQVksVUFBVSxFQUFFLEVBQUU7Q0FDMUIsWUFBWSxrQkFBa0IsRUFBRSxLQUFLO0NBQ3JDLFlBQVksWUFBWSxFQUFFLFlBQVk7Q0FDdEMsWUFBWSxhQUFhLEVBQUUsU0FBUztDQUNwQyxZQUFZLFlBQVksRUFBRSxRQUFRO0NBQ2xDLFNBQVMsQ0FBQyxDQUFDO0NBQ1gsUUFBUSxJQUFJO0NBQ1osWUFBWSxNQUFNLEtBQUssR0FBRyxNQUFNLEVBQUUsQ0FBQyxXQUFXLENBQUM7Q0FDL0MsZ0JBQWdCLG1CQUFtQixFQUFFLElBQUk7Q0FDekMsZ0JBQWdCLG1CQUFtQixFQUFFLElBQUk7Q0FDekMsYUFBYSxDQUFDLENBQUM7Q0FDZixZQUFZLElBQUk7Q0FDaEIsZ0JBQWdCLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztDQUMzQixhQUFhO0NBQ2IsWUFBWSxPQUFPLEtBQUssRUFBRSxHQUFHO0NBQzdCLFlBQVksTUFBTSxTQUFTLEdBQUdELEtBQVksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQzVELFlBQVksTUFBTSxxQkFBcUIsR0FBR0MsV0FBYyxDQUFDLHNCQUFzQixDQUFDLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQztDQUMvRixZQUFZLE9BQU8scUJBQXFCLENBQUM7Q0FDekMsU0FBUztDQUNULFFBQVEsT0FBTyxLQUFLLEVBQUU7Q0FDdEIsWUFBWSxJQUFJO0NBQ2hCLGdCQUFnQixFQUFFLENBQUMsS0FBSyxFQUFFLENBQUM7Q0FDM0IsYUFBYTtDQUNiLFlBQVksT0FBTyxNQUFNLEVBQUUsR0FBRztDQUM5QixZQUFZLE1BQU0sS0FBSyxDQUFDO0NBQ3hCLFNBQVM7Q0FDVCxLQUFLO0NBQ0wsSUFBSSxNQUFNLHlCQUF5QixHQUFHO0NBQ3RDLFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO0NBQ3BELFFBQVEsT0FBTztDQUNmLFlBQVksVUFBVSxFQUFFLGdCQUFnQjtDQUN4QyxTQUFTLENBQUM7Q0FDVixLQUFLO0NBQ0wsSUFBSSxHQUFHLENBQUMsRUFBRSxTQUFTLEVBQUUsYUFBYSxFQUFFLGFBQWEsRUFBRSxjQUFjLEVBQUUsY0FBYyxFQUFFLFVBQVUsRUFBRSxrQkFBa0IsRUFBRSxrQkFBa0IsRUFBRSxzQkFBc0IsRUFBRSx1QkFBdUIsRUFBRSxFQUFFO0NBQzFMLFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztDQUM5QixRQUFRLElBQUksQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDO0NBQ3BDLFFBQVEsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLFdBQVcsQ0FBQyxTQUFTLENBQUM7Q0FDcEQsWUFBWSxhQUFhO0NBQ3pCLFlBQVksYUFBYTtDQUN6QixZQUFZLGNBQWM7Q0FDMUIsWUFBWSxjQUFjO0NBQzFCLFlBQVksS0FBSyxFQUFFLElBQUk7Q0FDdkIsU0FBUyxDQUFDLENBQUM7Q0FDWCxRQUFRLElBQUksQ0FBQywyQkFBMkI7Q0FDeEMsWUFBWTtDQUNaLGdCQUFnQixLQUFLLEVBQUUsSUFBSSxDQUFDLHVCQUF1QixDQUFDLE9BQU8sRUFBRSx1QkFBdUIsQ0FBQztDQUNyRixnQkFBZ0IsS0FBSyxFQUFFLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxPQUFPLEVBQUUsdUJBQXVCLENBQUM7Q0FDckYsYUFBYSxDQUFDO0NBQ2QsUUFBUSxJQUFJLENBQUMsaUNBQWlDO0NBQzlDLFlBQVk7Q0FDWixnQkFBZ0IsS0FBSyxFQUFFLElBQUksQ0FBQyw2QkFBNkIsQ0FBQyxPQUFPLEVBQUUsdUJBQXVCLENBQUM7Q0FDM0YsZ0JBQWdCLEtBQUssRUFBRSxJQUFJLENBQUMsNkJBQTZCLENBQUMsT0FBTyxFQUFFLHVCQUF1QixDQUFDO0NBQzNGLGFBQWEsQ0FBQztDQUNkLFFBQVEsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLGlCQUFpQixDQUFDO0NBQ3pDLFlBQVksVUFBVSxFQUFFLFVBQVUsSUFBSSxFQUFFO0NBQ3hDLFlBQVksa0JBQWtCLEVBQUUsa0JBQWtCLElBQUksS0FBSztDQUMzRCxZQUFZLFlBQVksRUFBRSxZQUFZO0NBQ3RDLFlBQVksYUFBYSxFQUFFLFNBQVM7Q0FDcEMsWUFBWSxHQUFHLGtCQUFrQjtDQUNqQyxTQUFTLEVBQUUsc0JBQXNCLENBQUMsQ0FBQztDQUNuQztDQUNBLFFBQVEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQywwQkFBMEIsRUFBRSxNQUFNO0NBQ3BFLFlBQVksUUFBUSxJQUFJLENBQUMsR0FBRyxDQUFDLGtCQUFrQjtDQUMvQyxnQkFBZ0IsS0FBSyxVQUFVO0NBQy9CLG9CQUFvQixJQUFJLENBQUMsSUFBSSxDQUFDLHdCQUF3QixFQUFFLFlBQVksQ0FBQyxDQUFDO0NBQ3RFLG9CQUFvQixNQUFNO0NBQzFCLGdCQUFnQixLQUFLLFdBQVcsQ0FBQztDQUNqQyxnQkFBZ0IsS0FBSyxXQUFXO0NBQ2hDLG9CQUFvQixJQUFJLENBQUMsSUFBSSxDQUFDLHdCQUF3QixFQUFFLFdBQVcsQ0FBQyxDQUFDO0NBQ3JFLG9CQUFvQixNQUFNO0NBQzFCLGdCQUFnQixLQUFLLFFBQVE7Q0FDN0Isb0JBQW9CLElBQUksQ0FBQyxJQUFJLENBQUMsd0JBQXdCLEVBQUUsUUFBUSxDQUFDLENBQUM7Q0FDbEUsb0JBQW9CLE1BQU07Q0FDMUIsZ0JBQWdCLEtBQUssY0FBYztDQUNuQyxvQkFBb0IsSUFBSSxDQUFDLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxjQUFjLENBQUMsQ0FBQztDQUN4RSxvQkFBb0IsTUFBTTtDQUMxQixnQkFBZ0IsS0FBSyxRQUFRO0NBQzdCLG9CQUFvQixJQUFJLENBQUMsSUFBSSxDQUFDLHdCQUF3QixFQUFFLFFBQVEsQ0FBQyxDQUFDO0NBQ2xFLG9CQUFvQixNQUFNO0NBQzFCLGFBQWE7Q0FDYixTQUFTLENBQUMsQ0FBQztDQUNYLEtBQUs7Q0FDTCxJQUFJLE1BQU0sZ0JBQWdCLENBQUMsVUFBVSxFQUFFO0NBQ3ZDLFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0NBQzNDLFFBQVEsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0NBQzFELFFBQVEsYUFBYSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7Q0FDOUMsUUFBUSxJQUFJLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLGFBQWEsQ0FBQyxDQUFDO0NBQ2pELEtBQUs7Q0FDTCxJQUFJLE1BQU0sVUFBVSxDQUFDLGFBQWEsRUFBRTtDQUNwQyxRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUM7Q0FDckM7Q0FDQSxRQUFRLElBQUksQ0FBQyxVQUFVLENBQUMsbUJBQW1CLENBQUMsYUFBYSxDQUFDLENBQUM7Q0FDM0QsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWU7Q0FDakMsWUFBWSxPQUFPO0NBQ25CLFFBQVEsSUFBSSxJQUFJLENBQUMsVUFBVSxLQUFLLE1BQU0sRUFBRTtDQUN4QyxZQUFZLE1BQU0sS0FBSyxHQUFHLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztDQUMzRSxZQUFZLE1BQU0sQ0FBQyxLQUFLLENBQUMsNERBQTRELEVBQUUsS0FBSyxDQUFDLENBQUM7Q0FDOUYsWUFBWSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDdEQsWUFBWSxNQUFNLE1BQU0sR0FBRyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQztDQUM3RSxZQUFZLE1BQU0sQ0FBQyxLQUFLLENBQUMsOERBQThELEVBQUUsTUFBTSxDQUFDLENBQUM7Q0FDakcsWUFBWSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLENBQUM7Q0FDeEQsU0FBUztDQUNULGFBQWE7Q0FDYixZQUFZLE1BQU0sS0FBSyxHQUFHLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDO0NBQzNFLFlBQVksTUFBTSxDQUFDLEtBQUssQ0FBQyw2REFBNkQsRUFBRSxLQUFLLENBQUMsQ0FBQztDQUMvRixZQUFZLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztDQUN2RCxZQUFZLE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsQ0FBQztDQUN6RCxZQUFZLE1BQU0sQ0FBQyxLQUFLLENBQUMsNkRBQTZELEVBQUUsTUFBTSxDQUFDLENBQUM7Q0FDaEcsWUFBWSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsTUFBTSxDQUFDLENBQUM7Q0FDdkQsU0FBUztDQUNULEtBQUs7Q0FDTCxJQUFJLE1BQU0saUJBQWlCLEdBQUc7Q0FDOUIsUUFBUSxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUM7Q0FDbkMsS0FBSztDQUNMLElBQUksTUFBTSxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsRUFBRTtDQUMxRCxRQUFRLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO0NBQ3BDLFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQywrQkFBK0IsRUFBRSxLQUFLLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztDQUM1RSxRQUFRLElBQUksS0FBSyxFQUFFO0NBQ25CLFlBQVksTUFBTSxDQUFDLElBQUksQ0FBQyx5REFBeUQsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7Q0FDOUYsU0FBUztDQUNULFFBQVEsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDekMsUUFBUSxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0NBQ25ELFFBQVEsSUFBSSxLQUFLLEdBQUcsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO0NBQ2pELFFBQVEsSUFBSSxjQUFjLEdBQUdELEtBQVksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQzNELFFBQVEsSUFBSSxnQkFBZ0IsQ0FBQztDQUM3QixRQUFRLE1BQU0sb0JBQW9CLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsMkJBQTJCLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7Q0FDL0YsUUFBUSxvQkFBb0IsQ0FBQyxNQUFNO0NBQ25DLFlBQVksSUFBSSxDQUFDLFlBQVksQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztDQUMzRCxRQUFRLE1BQU0sMEJBQTBCLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsaUNBQWlDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7Q0FDM0csUUFBUSwwQkFBMEIsQ0FBQyxNQUFNO0NBQ3pDLFlBQVksSUFBSSxDQUFDLFlBQVksQ0FBQywwQkFBMEIsQ0FBQyxNQUFNLENBQUMsQ0FBQztDQUNqRSxRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZTtDQUNqQyxZQUFZLE1BQU0sSUFBSSxDQUFDLGVBQWUsQ0FBQyxFQUFFLGFBQWEsRUFBRSxRQUFRLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztDQUNwRixRQUFRLElBQUksS0FBSyxDQUFDLElBQUksS0FBSyxPQUFPLElBQUksU0FBUyxJQUFJLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0NBQ3pFLFlBQVksTUFBTSxDQUFDLEtBQUssQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO0NBQ3hELFlBQVksY0FBYyxHQUFHQSxLQUFZLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUMzRCxZQUFZLGdCQUFnQixHQUFHLGNBQWMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLEtBQUssT0FBTyxDQUFDLENBQUM7Q0FDcEYsWUFBWUksVUFBYSxDQUFDLGtCQUFrQixDQUFDO0NBQzdDLGdCQUFnQixnQkFBZ0I7Q0FDaEMsZ0JBQWdCLEtBQUs7Q0FDckIsZ0JBQWdCLFVBQVUsRUFBRSxTQUFTLENBQUMsTUFBTTtDQUM1QyxhQUFhLENBQUMsQ0FBQztDQUNmLFlBQVksS0FBSyxHQUFHLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUVKLEtBQVksQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQztDQUMvRSxTQUFTO0NBQ1QsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLHNEQUFzRCxFQUFFLEtBQUssQ0FBQyxDQUFDO0NBQ3BGLFFBQVEsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDO0NBQ2xELFFBQVEsY0FBYyxHQUFHQSxLQUFZLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDM0UsUUFBUSxnQkFBZ0IsR0FBRyxjQUFjLENBQUMsS0FBSztDQUMvQyxhQUFhLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxLQUFLLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztDQUNoRDtDQUNBLFFBQVEsb0JBQW9CLENBQUMsSUFBSSxDQUFDLEtBQUs7Q0FDdkMsWUFBWUMsV0FBYyxDQUFDLFFBQVEsQ0FBQyxFQUFFLGdCQUFnQixFQUFFLENBQUMsQ0FBQztDQUMxRDtDQUNBLFFBQVEsb0JBQW9CLENBQUMsU0FBUztDQUN0QyxZQUFZRyxVQUFhLENBQUMsZUFBZSxDQUFDLEVBQUUsZ0JBQWdCLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztDQUN2RTtDQUNBLFFBQVEsSUFBSSxTQUFTLEVBQUU7Q0FDdkIsWUFBWSxLQUFLLElBQUksR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsb0JBQW9CLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxFQUFFLEdBQUcsRUFBRTtDQUNsRixnQkFBZ0IsSUFBSSxTQUFTLENBQUMsR0FBRyxDQUFDO0NBQ2xDLG9CQUFvQixNQUFNLENBQUMsTUFBTSxDQUFDLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRSxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztDQUN2RixhQUFhO0NBQ2IsU0FBUztDQUNUO0NBQ0E7Q0FDQSxRQUFRLElBQUksb0JBQW9CLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDO0NBQ3JELFlBQVksb0JBQW9CLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsS0FBSyxXQUFXLEVBQUU7Q0FDbkYsWUFBWSxLQUFLLE1BQU0sUUFBUSxJQUFJLG9CQUFvQixDQUFDLFNBQVMsRUFBRTtDQUNuRSxnQkFBZ0IsUUFBUSxDQUFDLGVBQWUsR0FBRyxNQUFNLENBQUM7Q0FDbEQsYUFBYTtDQUNiLFNBQVM7Q0FDVCxRQUFRLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDO0NBQzdCLFlBQVksZ0JBQWdCO0NBQzVCLFlBQVksa0JBQWtCLEVBQUUsb0JBQW9CO0NBQ3BELFlBQVksbUJBQW1CLEVBQUUsMEJBQTBCO0NBQzNELFlBQVksWUFBWTtDQUN4QixTQUFTLENBQUMsQ0FBQztDQUNYLFFBQVEsTUFBTSxNQUFNLEdBQUcsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUM7Q0FDekUsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLHdEQUF3RCxFQUFFLE1BQU0sQ0FBQyxDQUFDO0NBQ3ZGLFFBQVEsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0NBQ3BELFFBQVEsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0NBQ3RELFFBQVEsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7Q0FDaEMsUUFBUSxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRTtDQUMvQyxhQUFhLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxLQUFLLEtBQUssQ0FBQyxDQUFDO0NBQzVDO0NBQ0EsUUFBUSxJQUFJLENBQUMsd0JBQXdCLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQztDQUM5RCxRQUFRLE9BQU87Q0FDZixZQUFZLE9BQU8sRUFBRSxPQUFPO0NBQzVCLFlBQVksYUFBYSxFQUFFLG9CQUFvQjtDQUMvQyxZQUFZLFNBQVM7Q0FDckIsU0FBUyxDQUFDO0NBQ1YsS0FBSztDQUNMLElBQUksTUFBTSxXQUFXLENBQUMsT0FBTyxFQUFFO0NBQy9CLFFBQVEsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7Q0FDcEMsUUFBUSxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsd0JBQXdCLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0NBQ3JFLFFBQVEsSUFBSSxDQUFDLFNBQVM7Q0FDdEIsWUFBWSxNQUFNLElBQUksS0FBSyxDQUFDLG1DQUFtQyxDQUFDLENBQUM7Q0FDakUsUUFBUSxJQUFJLFNBQVMsQ0FBQyxLQUFLO0NBQzNCLFlBQVksSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO0NBQzFELFFBQVEsSUFBSSxDQUFDLHdCQUF3QixDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztDQUN0RCxRQUFRLE1BQU0sS0FBSyxHQUFHLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztDQUNuRCxRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsNkRBQTZELEVBQUUsS0FBSyxDQUFDLENBQUM7Q0FDM0YsUUFBUSxJQUFJO0NBQ1osWUFBWSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDdEQsU0FBUztDQUNULFFBQVEsT0FBTyxLQUFLLEVBQUU7Q0FDdEI7Q0FDQTtDQUNBLFlBQVksSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7Q0FDM0QsZ0JBQWdCLE1BQU0sQ0FBQyxJQUFJLENBQUMsbUVBQW1FLEVBQUUsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7Q0FDbkgsZ0JBQWdCLE9BQU87Q0FDdkIsYUFBYTtDQUNiLFlBQVksTUFBTSxLQUFLLENBQUM7Q0FDeEIsU0FBUztDQUNULFFBQVEsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLGNBQWMsS0FBSyxRQUFRO0NBQ2hELFlBQVksT0FBTztDQUNuQixRQUFRLE1BQU0sTUFBTSxHQUFHLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDO0NBQ3pFLFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQywrREFBK0QsRUFBRSxNQUFNLENBQUMsQ0FBQztDQUM5RixRQUFRLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztDQUNwRCxLQUFLO0NBQ0wsSUFBSSxNQUFNLFlBQVksQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFO0NBQ3ZDLFFBQVEsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7Q0FDcEMsUUFBUSxJQUFJLEtBQUssRUFBRTtDQUNuQixZQUFZLE1BQU0sQ0FBQyxLQUFLLENBQUMsMENBQTBDLEVBQUUsT0FBTyxFQUFFLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztDQUN4RixTQUFTO0NBQ1QsYUFBYTtDQUNiLFlBQVksTUFBTSxDQUFDLEtBQUssQ0FBQyx1Q0FBdUMsRUFBRSxPQUFPLENBQUMsQ0FBQztDQUMzRSxTQUFTO0NBQ1QsUUFBUSxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsd0JBQXdCLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0NBQ3JFLFFBQVEsSUFBSSxDQUFDLFNBQVM7Q0FDdEIsWUFBWSxNQUFNLElBQUksS0FBSyxDQUFDLG1DQUFtQyxDQUFDLENBQUM7Q0FDakUsUUFBUSxNQUFNLFFBQVEsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDO0NBQ3pDLFFBQVEsTUFBTSxTQUFTLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO0NBQzVDO0NBQ0EsUUFBUSxJQUFJLFFBQVE7Q0FDcEIsWUFBWSxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztDQUNuRDtDQUNBLFFBQVEsSUFBSSxLQUFLO0NBQ2pCLFlBQVksSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDN0MsS0FBSztDQUNMLElBQUksTUFBTSxrQkFBa0IsQ0FBQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0NBQ3BELFFBQVEsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7Q0FDcEMsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLG9EQUFvRCxFQUFFLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQztDQUNsRyxRQUFRLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7Q0FDckUsUUFBUSxJQUFJLENBQUMsU0FBUztDQUN0QixZQUFZLE1BQU0sSUFBSSxLQUFLLENBQUMsbUNBQW1DLENBQUMsQ0FBQztDQUNqRSxRQUFRLE1BQU0sVUFBVSxHQUFHLFNBQVMsQ0FBQyxhQUFhLEVBQUUsQ0FBQztDQUNyRCxRQUFRLFVBQVUsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxFQUFFLEdBQUcsS0FBSztDQUN4RCxZQUFZLElBQUksR0FBRyxJQUFJLFlBQVk7Q0FDbkMsZ0JBQWdCLFFBQVEsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO0NBQ3ZDO0NBQ0EsZ0JBQWdCLFFBQVEsQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO0NBQ3hDLFNBQVMsQ0FBQyxDQUFDO0NBQ1gsUUFBUSxNQUFNLFNBQVMsQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUM7Q0FDbEQsS0FBSztDQUNMLElBQUksTUFBTSx3QkFBd0IsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFO0NBQ3BELFFBQVEsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7Q0FDcEMsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLG9EQUFvRCxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztDQUM1RixRQUFRLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7Q0FDckUsUUFBUSxJQUFJLENBQUMsU0FBUztDQUN0QixZQUFZLE1BQU0sSUFBSSxLQUFLLENBQUMsbUNBQW1DLENBQUMsQ0FBQztDQUNqRSxRQUFRLE1BQU0sVUFBVSxHQUFHLFNBQVMsQ0FBQyxhQUFhLEVBQUUsQ0FBQztDQUNyRCxRQUFRLFVBQVUsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxFQUFFLEdBQUcsS0FBSztDQUN4RCxZQUFZLFVBQVUsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLFFBQVEsRUFBRSxHQUFHLE1BQU0sRUFBRSxDQUFDO0NBQ25FLFNBQVMsQ0FBQyxDQUFDO0NBQ1gsUUFBUSxNQUFNLFNBQVMsQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUM7Q0FDbEQsS0FBSztDQUNMLElBQUksTUFBTSxjQUFjLENBQUMsT0FBTyxFQUFFO0NBQ2xDLFFBQVEsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7Q0FDcEMsUUFBUSxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsd0JBQXdCLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0NBQ3JFLFFBQVEsSUFBSSxDQUFDLFNBQVM7Q0FDdEIsWUFBWSxNQUFNLElBQUksS0FBSyxDQUFDLG1DQUFtQyxDQUFDLENBQUM7Q0FDakUsUUFBUSxPQUFPLFNBQVMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztDQUNwQyxLQUFLO0NBQ0wsSUFBSSxNQUFNLGVBQWUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsRUFBRTtDQUNyRyxRQUFRLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO0NBQ3BDLFFBQVEsTUFBTSxPQUFPLEdBQUc7Q0FDeEIsWUFBWSxVQUFVLEVBQUUsSUFBSTtDQUM1QixZQUFZLEVBQUUsRUFBRSxJQUFJLENBQUMscUJBQXFCO0NBQzFDLFlBQVksT0FBTztDQUNuQixZQUFZLGlCQUFpQjtDQUM3QixZQUFZLGNBQWM7Q0FDMUIsWUFBWSxRQUFRO0NBQ3BCLFlBQVksUUFBUTtDQUNwQixTQUFTLENBQUM7Q0FDVixRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLEVBQUUsT0FBTyxDQUFDLENBQUM7Q0FDaEUsUUFBUSxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztDQUN2RTtDQUNBLFFBQVEsSUFBSSxDQUFDLHFCQUFxQjtDQUNsQyxZQUFZLEVBQUUsSUFBSSxDQUFDLHFCQUFxQixHQUFHLGdCQUFnQixDQUFDLEdBQUcsQ0FBQztDQUNoRTtDQUNBO0NBQ0EsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLDJCQUEyQixFQUFFO0NBQy9DLFlBQVksTUFBTSxLQUFLLEdBQUcsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO0NBQ3ZELFlBQVksTUFBTSxjQUFjLEdBQUdKLEtBQVksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQ2pFLFlBQVksTUFBTSxnQkFBZ0IsR0FBRyxjQUFjLENBQUMsS0FBSztDQUN6RCxpQkFBaUIsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLEtBQUssYUFBYSxDQUFDLENBQUM7Q0FDdkQsWUFBWSxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWU7Q0FDckMsZ0JBQWdCLE1BQU0sSUFBSSxDQUFDLGVBQWUsQ0FBQyxFQUFFLGFBQWEsRUFBRSxRQUFRLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztDQUN4RixZQUFZLE1BQU0sQ0FBQyxLQUFLLENBQUMsaUVBQWlFLEVBQUUsS0FBSyxDQUFDLENBQUM7Q0FDbkcsWUFBWSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDdEQsWUFBWSxJQUFJLENBQUMsVUFBVSxDQUFDLG1CQUFtQixDQUFDLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDO0NBQ3RFLFlBQVksTUFBTSxNQUFNLEdBQUcsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUM7Q0FDN0UsWUFBWSxNQUFNLENBQUMsS0FBSyxDQUFDLG1FQUFtRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0NBQ3RHLFlBQVksTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0NBQ3hELFlBQVksSUFBSSxDQUFDLDJCQUEyQixHQUFHLElBQUksQ0FBQztDQUNwRCxTQUFTO0NBQ1QsUUFBUSxNQUFNLG9CQUFvQixHQUFHO0NBQ3JDLFlBQVksUUFBUSxFQUFFLE9BQU8sQ0FBQyxFQUFFO0NBQ2hDLFlBQVksT0FBTyxFQUFFLE9BQU8sQ0FBQyxPQUFPO0NBQ3BDLFlBQVksaUJBQWlCLEVBQUUsT0FBTyxDQUFDLGlCQUFpQjtDQUN4RCxZQUFZLGNBQWMsRUFBRSxPQUFPLENBQUMsY0FBYztDQUNsRCxTQUFTLENBQUM7Q0FDVixRQUFRLE9BQU8sRUFBRSxXQUFXLEVBQUUsb0JBQW9CLEVBQUUsQ0FBQztDQUNyRCxLQUFLO0NBQ0wsSUFBSSxNQUFNLE9BQU8sQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsYUFBYSxFQUFFLEVBQUU7Q0FDcEQsUUFBUSxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztDQUNwQyxRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsaUNBQWlDLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0NBQ3ZFLFFBQVEsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDO0NBQ2hDLFFBQVEsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDO0NBQ3pCLFFBQVEsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUM7Q0FDaEMsWUFBWSxHQUFHO0NBQ2YsWUFBWSxJQUFJO0NBQ2hCLFlBQVksa0JBQWtCLEVBQUUsYUFBYTtDQUM3QyxZQUFZLFFBQVEsRUFBRSxhQUFhLENBQUMsSUFBSSxDQUFDLEtBQUs7Q0FDOUMsWUFBWSxPQUFPO0NBQ25CLFNBQVMsQ0FBQyxDQUFDO0NBQ1gsUUFBUSxNQUFNLEtBQUssR0FBRyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQztDQUN2RSxRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsMERBQTBELEVBQUUsS0FBSyxDQUFDLENBQUM7Q0FDeEYsUUFBUSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDbkQsUUFBUSxJQUFJLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUM7Q0FDbkQsUUFBUSxNQUFNLGNBQWMsR0FBR0EsS0FBWSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDOUQsUUFBUSxNQUFNLGlCQUFpQixHQUFHLGNBQWMsQ0FBQyxLQUFLO0NBQ3RELGFBQWEsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7Q0FDaEQ7Q0FDQTtDQUNBLFFBQVFDLFdBQWMsQ0FBQyxvQkFBb0IsQ0FBQztDQUM1QyxZQUFZLGtCQUFrQixFQUFFLGFBQWE7Q0FDN0MsWUFBWSxpQkFBaUI7Q0FDN0IsU0FBUyxDQUFDLENBQUM7Q0FDWCxRQUFRLE1BQU0sR0FBRyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFRCxLQUFZLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUM7Q0FDN0UsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWU7Q0FDakMsWUFBWSxNQUFNLElBQUksQ0FBQyxlQUFlLENBQUMsRUFBRSxhQUFhLEVBQUUsUUFBUSxFQUFFLGNBQWMsRUFBRSxDQUFDLENBQUM7Q0FDcEYsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLDBEQUEwRCxFQUFFLE1BQU0sQ0FBQyxDQUFDO0NBQ3pGLFFBQVEsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0NBQ25ELFFBQVEsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUU7Q0FDbkQsYUFBYSxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUUsS0FBSyxPQUFPLENBQUMsQ0FBQztDQUM1RCxRQUFRLElBQUksQ0FBQyxXQUFXO0NBQ3hCLFlBQVksTUFBTSxJQUFJLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0NBQ3REO0NBQ0EsUUFBUSxJQUFJLENBQUMsbUJBQW1CLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxFQUFFLEdBQUcsRUFBRSxhQUFhLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBQztDQUNuRixRQUFRLE9BQU87Q0FDZixZQUFZLE9BQU87Q0FDbkIsWUFBWSxLQUFLLEVBQUUsV0FBVyxDQUFDLEtBQUs7Q0FDcEMsWUFBWSxXQUFXO0NBQ3ZCLFNBQVMsQ0FBQztDQUNWLEtBQUs7Q0FDTCxJQUFJLE1BQU0sYUFBYSxDQUFDLE9BQU8sRUFBRTtDQUNqQyxRQUFRLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO0NBQ3BDLFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyw4QkFBOEIsRUFBRSxPQUFPLENBQUMsQ0FBQztDQUM5RCxRQUFRLE1BQU0sRUFBRSxHQUFHLEVBQUUsYUFBYSxFQUFFLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7Q0FDbkY7Q0FDQSxRQUFRLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7Q0FDakQsUUFBUSxJQUFJLENBQUMsVUFBVSxDQUFDLGtCQUFrQixDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxrQkFBa0IsRUFBRSxhQUFhLEVBQUUsQ0FBQyxDQUFDO0NBQzVGLFFBQVEsTUFBTSxLQUFLLEdBQUcsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUM7Q0FDdkUsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLGdFQUFnRSxFQUFFLEtBQUssQ0FBQyxDQUFDO0NBQzlGLFFBQVEsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxDQUFDO0NBQ25ELFFBQVEsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxDQUFDO0NBQ3JELFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyxnRUFBZ0UsRUFBRSxNQUFNLENBQUMsQ0FBQztDQUMvRixRQUFRLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztDQUNuRCxLQUFLO0NBQ0wsSUFBSSxNQUFNLGdCQUFnQixDQUFDLE9BQU8sRUFBRTtDQUNwQyxRQUFRLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO0NBQ3BDLFFBQVEsTUFBTSxFQUFFLFdBQVcsRUFBRSxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO0NBQzVFLFFBQVEsSUFBSSxDQUFDLFdBQVc7Q0FDeEIsWUFBWSxNQUFNLElBQUksS0FBSyxDQUFDLHFDQUFxQyxDQUFDLENBQUM7Q0FDbkUsUUFBUSxPQUFPLFdBQVcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztDQUN0QyxLQUFLO0NBQ0wsSUFBSSxNQUFNLGtCQUFrQixDQUFDLEVBQUUsb0JBQW9CLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxFQUFFO0NBQ3hFLFFBQVEsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7Q0FDcEMsUUFBUSxNQUFNLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxjQUFjLEVBQUUsR0FBRyxvQkFBb0IsQ0FBQztDQUM5RixRQUFRLE1BQU0sT0FBTyxHQUFHO0NBQ3hCLFlBQVksVUFBVSxFQUFFLElBQUk7Q0FDNUIsWUFBWSxFQUFFLEVBQUUsUUFBUTtDQUN4QixZQUFZLE9BQU87Q0FDbkIsWUFBWSxpQkFBaUI7Q0FDN0IsWUFBWSxjQUFjO0NBQzFCLFlBQVksUUFBUTtDQUNwQixTQUFTLENBQUM7Q0FDVixRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsbUNBQW1DLEVBQUUsT0FBTyxDQUFDLENBQUM7Q0FDbkUsUUFBUSxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztDQUN2RTtDQUNBO0NBQ0EsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLDJCQUEyQixFQUFFO0NBQy9DLFlBQVksSUFBSSxDQUFDLFVBQVUsQ0FBQyxzQkFBc0IsQ0FBQyxFQUFFLGtCQUFrQixFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7Q0FDakYsWUFBWSxNQUFNLEtBQUssR0FBRyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQztDQUMzRSxZQUFZLE1BQU0sQ0FBQyxLQUFLLENBQUMscUVBQXFFLEVBQUUsS0FBSyxDQUFDLENBQUM7Q0FDdkcsWUFBWSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDdkQsWUFBWSxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUM7Q0FDekQsWUFBWSxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRTtDQUN2QyxnQkFBZ0IsTUFBTSxjQUFjLEdBQUdBLEtBQVksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQ3RFLGdCQUFnQixNQUFNLElBQUksQ0FBQyxlQUFlLENBQUMsRUFBRSxhQUFhLEVBQUUsUUFBUSxFQUFFLGNBQWMsRUFBRSxDQUFDLENBQUM7Q0FDeEYsYUFBYTtDQUNiLFlBQVksTUFBTSxDQUFDLEtBQUssQ0FBQyxzRUFBc0UsRUFBRSxNQUFNLENBQUMsQ0FBQztDQUN6RyxZQUFZLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztDQUN2RCxZQUFZLElBQUksQ0FBQywyQkFBMkIsR0FBRyxJQUFJLENBQUM7Q0FDcEQsU0FBUztDQUNULFFBQVEsT0FBTyxFQUFFLFdBQVcsRUFBRSxDQUFDO0NBQy9CLEtBQUs7Q0FDTCxJQUFJLE1BQU0sZUFBZSxDQUFDLEVBQUUsYUFBYSxFQUFFLGNBQWMsRUFBRSxFQUFFO0NBQzdELFFBQVEsSUFBSSxDQUFDLGNBQWM7Q0FDM0IsWUFBWSxjQUFjLEdBQUdBLEtBQVksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUMvRTtDQUNBLFFBQVEsTUFBTSxjQUFjLEdBQUdDLFdBQWMsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLFNBQVMsRUFBRSxjQUFjLEVBQUUsQ0FBQyxDQUFDO0NBQ25HO0NBQ0EsUUFBUSxjQUFjLENBQUMsSUFBSSxHQUFHLGFBQWEsQ0FBQztDQUM1QztDQUNBLFFBQVEsSUFBSSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsYUFBYSxLQUFLLFFBQVEsR0FBRyxRQUFRLEdBQUcsUUFBUSxDQUFDLENBQUM7Q0FDekY7Q0FDQSxRQUFRLE1BQU0sSUFBSSxDQUFDLGlCQUFpQixDQUFDLFVBQVUsRUFBRSxFQUFFLGNBQWMsRUFBRSxDQUFDLENBQUM7Q0FDckUsUUFBUSxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQztDQUNwQyxLQUFLO0NBQ0wsSUFBSSxvQkFBb0IsR0FBRztDQUMzQixRQUFRLElBQUksSUFBSSxDQUFDLFVBQVUsS0FBSyxNQUFNLEVBQUU7Q0FDeEMsWUFBWSxNQUFNLElBQUksS0FBSyxDQUFDLDhEQUE4RCxDQUFDLENBQUM7Q0FDNUYsU0FBUztDQUNULEtBQUs7Q0FDTCxJQUFJLG9CQUFvQixHQUFHO0NBQzNCLFFBQVEsSUFBSSxJQUFJLENBQUMsVUFBVSxLQUFLLE1BQU0sRUFBRTtDQUN4QyxZQUFZLE1BQU0sSUFBSSxLQUFLLENBQUMsOERBQThELENBQUMsQ0FBQztDQUM1RixTQUFTO0NBQ1QsS0FBSztDQUNMLENBQUM7Q0FDRCxnQkFBZ0IsR0FBRyxRQUFROzs7Ozs7O0FDcmUzQixDQUNBLE1BQU0sQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQ3pCO0NBQ3JDO0NBQ0E7Q0FDQTtDQUNBO0NBQ0EsU0FBUyxlQUFlLEdBQUc7Q0FDM0IsSUFBSSxNQUFNLFVBQVUsR0FBRyxjQUFjLENBQUMsZUFBZSxFQUFFLENBQUM7Q0FDeEQsSUFBSSxNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0NBQ3pDLElBQUksS0FBSyxNQUFNLEtBQUssSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO0NBQ3JDO0NBQ0EsUUFBUSxLQUFLLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUM7Q0FDM0MsUUFBUSxPQUFPLEtBQUssQ0FBQyxXQUFXLENBQUM7Q0FDakM7Q0FDQSxRQUFRLEtBQUssQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsSUFBSSxDQUFDLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7Q0FDekU7Q0FDQSxRQUFRLElBQUksS0FBSyxDQUFDLFVBQVUsRUFBRTtDQUM5QixZQUFZLE1BQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUM7Q0FDaEQsWUFBWSxJQUFJLFVBQVUsQ0FBQyxHQUFHO0NBQzlCLGdCQUFnQixVQUFVLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDeEQsWUFBWSxJQUFJLFVBQVUsQ0FBQyxvQkFBb0IsQ0FBQztDQUNoRCxnQkFBZ0IsVUFBVSxDQUFDLG9CQUFvQixDQUFDLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUM7Q0FDNUYsU0FBUztDQUNUO0NBQ0EsUUFBUSxLQUFLLE1BQU0sUUFBUSxJQUFJLEtBQUssQ0FBQyxZQUFZLElBQUksRUFBRSxFQUFFO0NBQ3pELFlBQVksSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTO0NBQ25DLGdCQUFnQixRQUFRLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztDQUN4QyxTQUFTO0NBQ1QsS0FBSztDQUNMLElBQUksT0FBTyxJQUFJLENBQUM7Q0FDaEIsQ0FBQztDQUNELHVCQUF1QixHQUFHLGVBQWUsQ0FBQztDQUMxQztDQUNBO0NBQ0E7Q0FDQSxTQUFTLG1CQUFtQixDQUFDLGFBQWEsRUFBRTtDQUM1QyxJQUFJLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7Q0FDOUM7Q0FDQSxJQUFJLElBQUksTUFBTSxDQUFDLEdBQUcsRUFBRTtDQUNwQixRQUFRLE1BQU0sQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQztDQUNsQyxRQUFRLE9BQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQztDQUMxQixLQUFLO0NBQ0wsSUFBSSxLQUFLLE1BQU0sS0FBSyxJQUFJLE1BQU0sQ0FBQyxNQUFNLEVBQUU7Q0FDdkM7Q0FDQSxRQUFRLElBQUksS0FBSyxDQUFDLFFBQVEsRUFBRTtDQUM1QixZQUFZLEtBQUssQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQztDQUMvQyxZQUFZLE9BQU8sS0FBSyxDQUFDLFFBQVEsQ0FBQztDQUNsQyxTQUFTO0NBQ1Q7Q0FDQSxRQUFRLElBQUksS0FBSyxDQUFDLFFBQVEsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJO0NBQ3pDLFlBQVksS0FBSyxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUN0RDtDQUNBLFFBQVEsT0FBTyxLQUFLLENBQUMsUUFBUSxDQUFDO0NBQzlCLEtBQUs7Q0FDTCxJQUFJLE9BQU8sTUFBTSxDQUFDO0NBQ2xCLENBQUM7Q0FDRCwyQkFBMkIsR0FBRyxtQkFBbUI7Ozs7Ozs7O0FDekRqRCxDQUNBLE1BQU0sQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQ3hCO0FBQ0E7QUFDSjtBQUNGO0FBQ2M7QUFDVztDQUN6RCxNQUFNLE1BQU0sR0FBRyxJQUFJLFFBQVEsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7Q0FDN0MsTUFBTSxNQUFNLFNBQVMsa0JBQWtCLENBQUMsZ0JBQWdCLENBQUM7Q0FDekQsSUFBSSxXQUFXLEdBQUc7Q0FDbEIsUUFBUSxLQUFLLEVBQUUsQ0FBQztDQUNoQjtDQUNBLFFBQVEsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO0NBQ3JDO0NBQ0EsUUFBUSxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7Q0FDdkM7Q0FDQSxRQUFRLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxDQUFDLENBQUM7Q0FDbEM7Q0FDQSxRQUFRLElBQUksQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDO0NBQ3JDLEtBQUs7Q0FDTDtDQUNBO0NBQ0E7Q0FDQSxJQUFJLE9BQU8sYUFBYSxHQUFHO0NBQzNCLFFBQVEsT0FBTyxNQUFNLElBQUksTUFBTSxFQUFFLENBQUM7Q0FDbEMsS0FBSztDQUNMLElBQUksSUFBSSxJQUFJLEdBQUc7Q0FDZixRQUFRLE9BQU8sUUFBUSxDQUFDO0NBQ3hCLEtBQUs7Q0FDTCxJQUFJLEtBQUssR0FBRztDQUNaLFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQztDQUNoQztDQUNBO0NBQ0EsUUFBUSxJQUFJO0NBQ1osWUFBWSxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxDQUFDO0NBQ3RDLFNBQVM7Q0FDVCxRQUFRLE9BQU8sS0FBSyxFQUFFLEdBQUc7Q0FDekI7Q0FDQSxRQUFRLElBQUk7Q0FDWixZQUFZLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLENBQUM7Q0FDdEMsU0FBUztDQUNULFFBQVEsT0FBTyxLQUFLLEVBQUUsR0FBRztDQUN6QjtDQUNBLFFBQVEsSUFBSTtDQUNaLFlBQVksSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztDQUN2QyxTQUFTO0NBQ1QsUUFBUSxPQUFPLEtBQUssRUFBRSxHQUFHO0NBQ3pCO0NBQ0EsUUFBUSxLQUFLLE1BQU0sU0FBUyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLEVBQUU7Q0FDM0QsWUFBWSxJQUFJO0NBQ2hCLGdCQUFnQixTQUFTLENBQUMsSUFBSSxFQUFFLENBQUM7Q0FDakMsYUFBYTtDQUNiLFlBQVksT0FBTyxLQUFLLEVBQUUsR0FBRztDQUM3QixTQUFTO0NBQ1Q7Q0FDQSxRQUFRLEtBQUssTUFBTSxXQUFXLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsRUFBRTtDQUMvRCxZQUFZLElBQUk7Q0FDaEIsZ0JBQWdCLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztDQUNuQyxhQUFhO0NBQ2IsWUFBWSxPQUFPLEtBQUssRUFBRSxHQUFHO0NBQzdCLFNBQVM7Q0FDVCxLQUFLO0NBQ0wsSUFBSSxNQUFNLHdCQUF3QixHQUFHO0NBQ3JDLFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO0NBQ25ELFFBQVEsT0FBTyxTQUFTLENBQUMsZUFBZSxFQUFFLENBQUM7Q0FDM0MsS0FBSztDQUNMLElBQUksTUFBTSx5QkFBeUIsR0FBRztDQUN0QyxRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsNkJBQTZCLENBQUMsQ0FBQztDQUNwRCxRQUFRLE9BQU87Q0FDZixZQUFZLFVBQVUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRTtDQUN6QyxTQUFTLENBQUM7Q0FDVixLQUFLO0NBQ0wsSUFBSSxHQUFHLENBQUMsRUFBRSxTQUFTO0NBQ25CLElBQUksYUFBYSxFQUFFLGFBQWEsRUFBRSxjQUFjLEVBQUUsY0FBYztDQUNoRSxJQUFJLFVBQVUsRUFBRSxrQkFBa0IsRUFBRSxrQkFBa0I7Q0FDdEQsSUFBSSxzQkFBc0I7Q0FDMUIsSUFBSSx1QkFBdUIsRUFBRSxFQUFFO0NBQy9CLFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztDQUM5QixRQUFRLElBQUksQ0FBQywyQkFBMkI7Q0FDeEMsWUFBWTtDQUNaLGdCQUFnQixLQUFLLEVBQUUsSUFBSSxDQUFDLHVCQUF1QixDQUFDLE9BQU8sRUFBRSx1QkFBdUIsQ0FBQztDQUNyRixnQkFBZ0IsS0FBSyxFQUFFLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxPQUFPLEVBQUUsdUJBQXVCLENBQUM7Q0FDckYsYUFBYSxDQUFDO0NBQ2QsUUFBUSxJQUFJLENBQUMsb0JBQW9CLEdBQUcsYUFBYSxDQUFDO0NBQ2xELFFBQVEsSUFBSSxDQUFDLG9CQUFvQixHQUFHLGFBQWEsQ0FBQztDQUNsRCxRQUFRLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxjQUFjLENBQUM7Q0FDcEQsUUFBUSxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxvQkFBb0IsRUFBRSxDQUFDLENBQUMsQ0FBQztDQUM5RCxRQUFRLElBQUksQ0FBQyxlQUFlLENBQUMsRUFBRSxVQUFVLEVBQUUsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDO0NBQ2pFLFFBQVEsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7Q0FDaEMsUUFBUSxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztDQUNqQyxLQUFLO0NBQ0w7Q0FDQSxJQUFJLE1BQU0sZ0JBQWdCLENBQUMsVUFBVSxFQUFFO0NBQ3ZDO0NBQ0EsUUFBUSxNQUFNLElBQUlKLE1BQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxlQUFlLENBQUMsQ0FBQztDQUM3RCxLQUFLO0NBQ0wsSUFBSSxNQUFNLFVBQVUsQ0FBQyxhQUFhLEVBQUU7Q0FDcEMsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0NBQ3JDLFFBQVEsSUFBSSxDQUFDLG9CQUFvQixHQUFHLGFBQWEsQ0FBQztDQUNsRCxRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZTtDQUNqQyxZQUFZLE9BQU87Q0FDbkIsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLDZDQUE2QyxDQUFDLENBQUM7Q0FDcEUsUUFBUSxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLGFBQWEsRUFBRSxhQUFhLENBQUMsQ0FBQztDQUNsRixRQUFRLEtBQUssTUFBTSxTQUFTLElBQUksSUFBSSxDQUFDLG9CQUFvQixFQUFFO0NBQzNELFlBQVksSUFBSSxDQUFDLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQyxTQUFTLENBQUMsQ0FBQztDQUM3RCxTQUFTO0NBQ1QsUUFBUSxJQUFJLENBQUMsYUFBYSxDQUFDLGtCQUFrQixDQUFDLEVBQUUsQ0FBQyxDQUFDO0NBQ2xELEtBQUs7Q0FDTCxJQUFJLE1BQU0saUJBQWlCLEdBQUc7Q0FDOUIsUUFBUSxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFFLENBQUM7Q0FDN0MsS0FBSztDQUNMLElBQUksTUFBTSxJQUFJO0NBQ2Q7Q0FDQSxJQUFJLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLEVBQUU7Q0FDL0MsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLCtCQUErQixFQUFFLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0NBQzVFLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlO0NBQ2pDLFlBQVksTUFBTSxJQUFJLENBQUMsZUFBZSxDQUFDLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7Q0FDcEUsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLHFDQUFxQyxDQUFDLENBQUM7Q0FDNUQsUUFBUSxNQUFNLFNBQVMsR0FBRyxJQUFJLFlBQVksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0NBQ3ZFLFFBQVEsTUFBTSxhQUFhLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsMkJBQTJCLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7Q0FDeEYsUUFBUSxhQUFhLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztDQUM5RSxRQUFRLE1BQU0sTUFBTSxHQUFHLGFBQWEsQ0FBQyxNQUFNO0NBQzNDLGFBQWEsSUFBSSxDQUFDLENBQUMsTUFBTSxLQUFLLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7Q0FDakUsUUFBUSxJQUFJLENBQUMsU0FBUztDQUN0QixZQUFZLFNBQVMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0NBQzdCLFFBQVEsS0FBSyxNQUFNLFFBQVEsSUFBSSxTQUFTLEVBQUU7Q0FDMUMsWUFBWSxRQUFRLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO0NBQ3pELFlBQVksSUFBSSxNQUFNO0NBQ3RCLGdCQUFnQixRQUFRLENBQUMsR0FBRyxHQUFHLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxvQkFBb0IsRUFBRSxFQUFFLENBQUM7Q0FDdEUsU0FBUztDQUNULFFBQVEsYUFBYSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7Q0FDNUM7Q0FDQSxRQUFRLGFBQWEsQ0FBQyxJQUFJO0NBQzFCLFlBQVk7Q0FDWixnQkFBZ0IsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNO0NBQ2xDLGdCQUFnQixXQUFXLEVBQUUsSUFBSTtDQUNqQyxnQkFBZ0IsR0FBRyxFQUFFLElBQUk7Q0FDekIsYUFBYSxDQUFDO0NBQ2Q7Q0FDQTtDQUNBLFFBQVEsTUFBTSxpQkFBaUIsR0FBRyxTQUFTLENBQUMsbUJBQW1CLENBQUMsYUFBYSxDQUFDLENBQUM7Q0FDL0UsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLCtDQUErQyxFQUFFLGlCQUFpQixDQUFDLENBQUM7Q0FDekYsUUFBUSxNQUFNLFNBQVMsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztDQUNoRCxRQUFRLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztDQUN0RCxRQUFRLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0NBQ2hDO0NBQ0EsUUFBUSxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUM7Q0FDakQsUUFBUSxPQUFPLEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxTQUFTLEVBQUUsQ0FBQztDQUNyRCxLQUFLO0NBQ0wsSUFBSSxNQUFNLFdBQVcsQ0FBQyxPQUFPLEVBQUU7Q0FDL0IsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLDRCQUE0QixFQUFFLE9BQU8sQ0FBQyxDQUFDO0NBQzVELFFBQVEsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7Q0FDeEQsUUFBUSxJQUFJLENBQUMsU0FBUztDQUN0QixZQUFZLE1BQU0sSUFBSSxLQUFLLENBQUMsd0JBQXdCLENBQUMsQ0FBQztDQUN0RCxRQUFRLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0NBQ3pDLFFBQVEsSUFBSTtDQUNaLFlBQVksTUFBTSxDQUFDLEtBQUssQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDO0NBQ3JFLFlBQVksU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDO0NBQzdCLFNBQVM7Q0FDVCxRQUFRLE9BQU8sS0FBSyxFQUFFO0NBQ3RCLFlBQVksTUFBTSxDQUFDLElBQUksQ0FBQyw0Q0FBNEMsRUFBRSxLQUFLLENBQUMsQ0FBQztDQUM3RSxZQUFZLE1BQU0sS0FBSyxDQUFDO0NBQ3hCLFNBQVM7Q0FDVCxLQUFLO0NBQ0wsSUFBSSxNQUFNLFlBQVksQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFO0NBQ3ZDLFFBQVEsSUFBSSxLQUFLLEVBQUU7Q0FDbkIsWUFBWSxNQUFNLENBQUMsS0FBSyxDQUFDLDBDQUEwQyxFQUFFLE9BQU8sRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7Q0FDeEYsU0FBUztDQUNULGFBQWE7Q0FDYixZQUFZLE1BQU0sQ0FBQyxLQUFLLENBQUMsdUNBQXVDLEVBQUUsT0FBTyxDQUFDLENBQUM7Q0FDM0UsU0FBUztDQUNULFFBQVEsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7Q0FDeEQsUUFBUSxJQUFJLENBQUMsU0FBUztDQUN0QixZQUFZLE1BQU0sSUFBSSxLQUFLLENBQUMsd0JBQXdCLENBQUMsQ0FBQztDQUN0RCxRQUFRLFNBQVMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDbEMsS0FBSztDQUNMLElBQUksTUFBTSxrQkFBa0IsQ0FBQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0NBQ3BELFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyxvREFBb0QsRUFBRSxPQUFPLEVBQUUsWUFBWSxDQUFDLENBQUM7Q0FDbEcsUUFBUSxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztDQUN4RCxRQUFRLElBQUksQ0FBQyxTQUFTO0NBQ3RCLFlBQVksTUFBTSxJQUFJLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0NBQ3RELFFBQVEsTUFBTSxVQUFVLEdBQUcsU0FBUyxDQUFDLGFBQWEsRUFBRSxDQUFDO0NBQ3JELFFBQVEsVUFBVSxDQUFDLFNBQVM7Q0FDNUIsYUFBYSxPQUFPLENBQUMsQ0FBQyxRQUFRLEVBQUUsR0FBRyxLQUFLO0NBQ3hDLFlBQVksSUFBSSxHQUFHLElBQUksWUFBWTtDQUNuQyxnQkFBZ0IsUUFBUSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7Q0FDdkM7Q0FDQSxnQkFBZ0IsUUFBUSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7Q0FDeEMsU0FBUyxDQUFDLENBQUM7Q0FDWCxRQUFRLE1BQU0sU0FBUyxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQztDQUNsRCxLQUFLO0NBQ0wsSUFBSSxNQUFNLHdCQUF3QixDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUU7Q0FDcEQsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLG9EQUFvRCxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztDQUM1RixRQUFRLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0NBQ3hELFFBQVEsSUFBSSxDQUFDLFNBQVM7Q0FDdEIsWUFBWSxNQUFNLElBQUksS0FBSyxDQUFDLHdCQUF3QixDQUFDLENBQUM7Q0FDdEQsUUFBUSxNQUFNLFVBQVUsR0FBRyxTQUFTLENBQUMsYUFBYSxFQUFFLENBQUM7Q0FDckQsUUFBUSxVQUFVLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsRUFBRSxHQUFHLEtBQUs7Q0FDeEQsWUFBWSxVQUFVLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxRQUFRLEVBQUUsR0FBRyxNQUFNLEVBQUUsQ0FBQztDQUNuRSxTQUFTLENBQUMsQ0FBQztDQUNYLFFBQVEsTUFBTSxTQUFTLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0NBQ2xELEtBQUs7Q0FDTCxJQUFJLE1BQU0sY0FBYyxDQUFDLE9BQU8sRUFBRTtDQUNsQyxRQUFRLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0NBQ3hELFFBQVEsSUFBSSxDQUFDLFNBQVM7Q0FDdEIsWUFBWSxNQUFNLElBQUksS0FBSyxDQUFDLHdCQUF3QixDQUFDLENBQUM7Q0FDdEQsUUFBUSxPQUFPLFNBQVMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztDQUNwQyxLQUFLO0NBQ0wsSUFBSSxNQUFNLGVBQWU7Q0FDekI7Q0FDQSxJQUFJLE9BQU8sRUFBRTtDQUNiLFFBQVEsTUFBTSxJQUFJQSxNQUFRLENBQUMsZ0JBQWdCLENBQUMsaUJBQWlCLENBQUMsQ0FBQztDQUMvRCxLQUFLO0NBQ0wsSUFBSSxNQUFNLE9BQU8sQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsYUFBYSxFQUFFLEVBQUU7Q0FDcEQsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLGlDQUFpQyxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztDQUN2RSxRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZTtDQUNqQyxZQUFZLE1BQU0sSUFBSSxDQUFDLGVBQWUsQ0FBQyxFQUFFLGFBQWEsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO0NBQ3BFLFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDO0NBQ2pFLFFBQVEsTUFBTSxXQUFXLEdBQUcsSUFBSSxjQUFjLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsQ0FBQztDQUMxRSxRQUFRLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLEtBQUs7Q0FDekQsWUFBWSxNQUFNLENBQUMsS0FBSyxDQUFDLHNDQUFzQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0NBQ3hFLFNBQVMsQ0FBQyxDQUFDO0NBQ1g7Q0FDQTtDQUNBLFFBQVEsTUFBTSxpQkFBaUIsR0FBRyxTQUFTLENBQUMsbUJBQW1CLENBQUMsYUFBYSxDQUFDLENBQUM7Q0FDL0UsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLHVEQUF1RCxFQUFFLGlCQUFpQixDQUFDLENBQUM7Q0FDakcsUUFBUSxNQUFNLFdBQVcsQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQztDQUNyRCxRQUFRLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQztDQUNoQztDQUNBLFFBQVEsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0NBQ3JELFFBQVEsT0FBTztDQUNmLFlBQVksT0FBTztDQUNuQixZQUFZLEtBQUssRUFBRSxXQUFXLENBQUMsS0FBSztDQUNwQyxZQUFZLFdBQVc7Q0FDdkIsU0FBUyxDQUFDO0NBQ1YsS0FBSztDQUNMLElBQUksTUFBTSxhQUFhLENBQUMsT0FBTyxFQUFFO0NBQ2pDLFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyw4QkFBOEIsRUFBRSxPQUFPLENBQUMsQ0FBQztDQUM5RCxRQUFRLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0NBQzVELFFBQVEsSUFBSSxDQUFDLFdBQVc7Q0FDeEIsWUFBWSxNQUFNLElBQUksS0FBSyxDQUFDLDBCQUEwQixDQUFDLENBQUM7Q0FDeEQsUUFBUSxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztDQUMzQyxRQUFRLElBQUk7Q0FDWixZQUFZLE1BQU0sQ0FBQyxLQUFLLENBQUMsOENBQThDLENBQUMsQ0FBQztDQUN6RSxZQUFZLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztDQUMvQixTQUFTO0NBQ1QsUUFBUSxPQUFPLEtBQUssRUFBRTtDQUN0QixZQUFZLE1BQU0sQ0FBQyxJQUFJLENBQUMsZ0RBQWdELEVBQUUsS0FBSyxDQUFDLENBQUM7Q0FDakYsU0FBUztDQUNULEtBQUs7Q0FDTCxJQUFJLE1BQU0sZ0JBQWdCLENBQUMsT0FBTyxFQUFFO0NBQ3BDLFFBQVEsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7Q0FDNUQsUUFBUSxJQUFJLENBQUMsV0FBVztDQUN4QixZQUFZLE1BQU0sSUFBSSxLQUFLLENBQUMsMEJBQTBCLENBQUMsQ0FBQztDQUN4RCxRQUFRLE9BQU8sV0FBVyxDQUFDLFFBQVEsRUFBRSxDQUFDO0NBQ3RDLEtBQUs7Q0FDTCxJQUFJLE1BQU0sa0JBQWtCO0NBQzVCO0NBQ0EsSUFBSSxPQUFPLEVBQUU7Q0FDYixRQUFRLE1BQU0sSUFBSUEsTUFBUSxDQUFDLGdCQUFnQixDQUFDLGlCQUFpQixDQUFDLENBQUM7Q0FDL0QsS0FBSztDQUNMLElBQUksZUFBZSxDQUFDLEVBQUUsVUFBVSxFQUFFLGtCQUFrQixFQUFFLEVBQUU7Q0FDeEQsUUFBUSxNQUFNLFdBQVcsR0FBRyxJQUFJLGNBQWMsQ0FBQztDQUMvQyxZQUFZLFVBQVUsRUFBRSxVQUFVLElBQUksRUFBRTtDQUN4QyxZQUFZLFlBQVksRUFBRSxrQkFBa0IsSUFBSSxLQUFLO0NBQ3JELFNBQVMsQ0FBQyxDQUFDO0NBQ1gsUUFBUSxXQUFXLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLENBQUMsS0FBSyxLQUFLO0NBQ3pELFlBQVksTUFBTSxDQUFDLEtBQUssQ0FBQyxzQ0FBc0MsRUFBRSxLQUFLLENBQUMsQ0FBQztDQUN4RSxTQUFTLENBQUMsQ0FBQztDQUNYO0NBQ0EsUUFBUSxJQUFJO0NBQ1osWUFBWSxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUM7Q0FDakMsU0FBUztDQUNULFFBQVEsT0FBTyxLQUFLLEVBQUU7Q0FDdEIsWUFBWSxNQUFNLENBQUMsS0FBSyxDQUFDLHFEQUFxRCxFQUFFLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0NBQ2xHLFNBQVM7Q0FDVCxRQUFRLElBQUksQ0FBQyxZQUFZLEdBQUcsV0FBVyxDQUFDO0NBQ3hDLEtBQUs7Q0FDTCxJQUFJLGdCQUFnQixHQUFHO0NBQ3ZCLFFBQVEsTUFBTSxZQUFZLEdBQUcsSUFBSSxlQUFlLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0NBQ3BFO0NBQ0EsUUFBUSxZQUFZLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxFQUFFLE1BQU07Q0FDM0QsWUFBWSxRQUFRLFlBQVksQ0FBQyxLQUFLO0NBQ3RDLGdCQUFnQixLQUFLLFVBQVU7Q0FDL0Isb0JBQW9CLElBQUksQ0FBQyxJQUFJLENBQUMsd0JBQXdCLEVBQUUsWUFBWSxDQUFDLENBQUM7Q0FDdEUsb0JBQW9CLE1BQU07Q0FDMUIsZ0JBQWdCLEtBQUssV0FBVyxDQUFDO0NBQ2pDLGdCQUFnQixLQUFLLFdBQVc7Q0FDaEMsb0JBQW9CLElBQUksQ0FBQyxJQUFJLENBQUMsd0JBQXdCLEVBQUUsV0FBVyxDQUFDLENBQUM7Q0FDckUsb0JBQW9CLE1BQU07Q0FDMUIsZ0JBQWdCLEtBQUssUUFBUTtDQUM3QixvQkFBb0IsSUFBSSxDQUFDLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxRQUFRLENBQUMsQ0FBQztDQUNsRSxvQkFBb0IsTUFBTTtDQUMxQixnQkFBZ0IsS0FBSyxjQUFjO0NBQ25DLG9CQUFvQixJQUFJLENBQUMsSUFBSSxDQUFDLHdCQUF3QixFQUFFLGNBQWMsQ0FBQyxDQUFDO0NBQ3hFLG9CQUFvQixNQUFNO0NBQzFCLGdCQUFnQixLQUFLLFFBQVE7Q0FDN0Isb0JBQW9CLElBQUksQ0FBQyxJQUFJLENBQUMsd0JBQXdCLEVBQUUsUUFBUSxDQUFDLENBQUM7Q0FDbEUsb0JBQW9CLE1BQU07Q0FDMUIsYUFBYTtDQUNiLFNBQVMsQ0FBQyxDQUFDO0NBQ1g7Q0FDQSxRQUFRLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxnQkFBZ0IsRUFBRSxNQUFNO0NBQzlELFlBQVksUUFBUSxZQUFZLENBQUMsS0FBSztDQUN0QyxnQkFBZ0IsS0FBSyxVQUFVO0NBQy9CLG9CQUFvQixJQUFJLENBQUMsSUFBSSxDQUFDLHdCQUF3QixFQUFFLFlBQVksQ0FBQyxDQUFDO0NBQ3RFLG9CQUFvQixNQUFNO0NBQzFCLGdCQUFnQixLQUFLLFdBQVcsQ0FBQztDQUNqQyxnQkFBZ0IsS0FBSyxXQUFXO0NBQ2hDLG9CQUFvQixJQUFJLENBQUMsSUFBSSxDQUFDLHdCQUF3QixFQUFFLFdBQVcsQ0FBQyxDQUFDO0NBQ3JFLG9CQUFvQixNQUFNO0NBQzFCLGdCQUFnQixLQUFLLFFBQVE7Q0FDN0Isb0JBQW9CLElBQUksQ0FBQyxJQUFJLENBQUMsd0JBQXdCLEVBQUUsUUFBUSxDQUFDLENBQUM7Q0FDbEUsb0JBQW9CLE1BQU07Q0FDMUIsZ0JBQWdCLEtBQUssY0FBYztDQUNuQyxvQkFBb0IsSUFBSSxDQUFDLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxjQUFjLENBQUMsQ0FBQztDQUN4RSxvQkFBb0IsTUFBTTtDQUMxQixnQkFBZ0IsS0FBSyxRQUFRO0NBQzdCLG9CQUFvQixJQUFJLENBQUMsSUFBSSxDQUFDLHdCQUF3QixFQUFFLFFBQVEsQ0FBQyxDQUFDO0NBQ2xFLG9CQUFvQixNQUFNO0NBQzFCLGFBQWE7Q0FDYixTQUFTLENBQUMsQ0FBQztDQUNYLFFBQVEsWUFBWSxDQUFDLGdCQUFnQixDQUFDLHFCQUFxQixFQUFFLENBQUMsS0FBSyxLQUFLO0NBQ3hFLFlBQVksTUFBTSxDQUFDLEtBQUssQ0FBQyxvREFBb0QsRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7Q0FDM0YsU0FBUyxDQUFDLENBQUM7Q0FDWCxRQUFRLElBQUksQ0FBQyxhQUFhLEdBQUcsWUFBWSxDQUFDO0NBQzFDLEtBQUs7Q0FDTCxJQUFJLGlCQUFpQixHQUFHO0NBQ3hCLFFBQVEsTUFBTSxhQUFhLEdBQUcsSUFBSSxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7Q0FDdkU7Q0FDQSxRQUFRLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLEVBQUUsTUFBTTtDQUM1RCxZQUFZLE1BQU0sQ0FBQyxLQUFLLENBQUMsOENBQThDLEVBQUUsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO0NBQzlGLFNBQVMsQ0FBQyxDQUFDO0NBQ1g7Q0FDQSxRQUFRLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxpQkFBaUIsRUFBRSxNQUFNO0NBQ2hFLFlBQVksTUFBTSxDQUFDLEtBQUssQ0FBQyxrREFBa0QsRUFBRSxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDbEcsWUFBWSxJQUFJLGFBQWEsQ0FBQyxLQUFLLEtBQUssUUFBUTtDQUNoRCxnQkFBZ0IsSUFBSSxDQUFDLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxRQUFRLENBQUMsQ0FBQztDQUM5RCxTQUFTLENBQUMsQ0FBQztDQUNYLFFBQVEsYUFBYSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQUssS0FBSztDQUMzRCxZQUFZLE1BQU0sQ0FBQyxLQUFLLENBQUMsd0NBQXdDLEVBQUUsS0FBSyxDQUFDLENBQUM7Q0FDMUUsU0FBUyxDQUFDLENBQUM7Q0FDWCxRQUFRLElBQUksQ0FBQyxjQUFjLEdBQUcsYUFBYSxDQUFDO0NBQzVDLEtBQUs7Q0FDTCxJQUFJLE1BQU0sZUFBZSxDQUFDLEVBQUUsYUFBYSxFQUFFLEVBQUU7Q0FDN0MsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLG1CQUFtQixDQUFDLENBQUM7Q0FDMUM7Q0FDQSxRQUFRLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztDQUN4RSxRQUFRLGNBQWMsQ0FBQyxJQUFJLEdBQUcsYUFBYSxDQUFDO0NBQzVDO0NBQ0EsUUFBUSxNQUFNLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLEVBQUUsRUFBRSxjQUFjLEVBQUUsQ0FBQyxDQUFDO0NBQ3JFO0NBQ0EsUUFBUSxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxhQUFhLENBQUMsQ0FBQztDQUM5RjtDQUNBLFFBQVEsS0FBSyxNQUFNLFNBQVMsSUFBSSxJQUFJLENBQUMsb0JBQW9CLEVBQUU7Q0FDM0QsWUFBWSxJQUFJLENBQUMsYUFBYSxDQUFDLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxDQUFDO0NBQzdELFNBQVM7Q0FDVDtDQUNBO0NBQ0E7Q0FDQTtDQUNBLFFBQVEsSUFBSSxDQUFDLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztDQUNsRDtDQUNBLFFBQVEsSUFBSSxDQUFDLHFCQUFxQixDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMscUJBQXFCLENBQUMsWUFBWTtDQUN6RixhQUFhLE1BQU0sQ0FBQyxDQUFDLFdBQVcsS0FBSztDQUNyQyxZQUFZLFFBQVEsV0FBVyxDQUFDLFNBQVMsS0FBSyxTQUFTO0NBQ3ZELGdCQUFnQixXQUFXLENBQUMsU0FBUyxLQUFLLFNBQVM7Q0FDbkQsZ0JBQWdCLFdBQVcsQ0FBQyxTQUFTLEtBQUssU0FBUyxFQUFFO0NBQ3JELFNBQVMsQ0FBQyxDQUFDO0NBQ1g7Q0FDQSxRQUFRLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0NBQzlELFFBQVEsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7Q0FDcEMsS0FBSztDQUNMLENBQUM7Q0FDRCxjQUFjLEdBQUcsTUFBTTs7Ozs7OztBQ3ZYdkIsQ0FDQSxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUNoQjtBQUNSO0FBQ0E7QUFDSjtBQUNGO0FBQ29CO0FBQ0Y7QUFDTztBQUNWO0NBQy9DLE1BQU0sTUFBTSxHQUFHLElBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQztDQUNsRCxNQUFNLGdCQUFnQixHQUFHLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUM7Q0FDakQsTUFBTSxXQUFXLFNBQVMsa0JBQWtCLENBQUMsZ0JBQWdCLENBQUM7Q0FDOUQsSUFBSSxXQUFXLEdBQUc7Q0FDbEIsUUFBUSxLQUFLLEVBQUUsQ0FBQztDQUNoQjtDQUNBLFFBQVEsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDO0NBQzdDO0NBQ0EsUUFBUSxJQUFJLENBQUMsb0JBQW9CLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQztDQUM5QztDQUNBLFFBQVEsSUFBSSxDQUFDLGdCQUFnQixHQUFHLENBQUMsQ0FBQztDQUNsQztDQUNBO0NBQ0EsUUFBUSxJQUFJLENBQUMsbUJBQW1CLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQztDQUM3QztDQUNBLFFBQVEsSUFBSSxDQUFDLDJCQUEyQixHQUFHLEtBQUssQ0FBQztDQUNqRDtDQUNBLFFBQVEsSUFBSSxDQUFDLHFCQUFxQixHQUFHLENBQUMsQ0FBQztDQUN2QztDQUNBLFFBQVEsSUFBSSxDQUFDLGVBQWUsR0FBRyxLQUFLLENBQUM7Q0FDckMsS0FBSztDQUNMO0NBQ0E7Q0FDQTtDQUNBLElBQUksT0FBTyxhQUFhLEdBQUc7Q0FDM0IsUUFBUSxPQUFPLE1BQU0sSUFBSSxXQUFXLEVBQUUsQ0FBQztDQUN2QyxLQUFLO0NBQ0wsSUFBSSxJQUFJLElBQUksR0FBRztDQUNmLFFBQVEsT0FBTyxhQUFhLENBQUM7Q0FDN0IsS0FBSztDQUNMLElBQUksS0FBSyxHQUFHO0NBQ1osUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0NBQ2hDO0NBQ0EsUUFBUSxJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUU7Q0FDdEIsWUFBWSxJQUFJO0NBQ2hCLGdCQUFnQixJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO0NBQ2pDLGFBQWE7Q0FDYixZQUFZLE9BQU8sS0FBSyxFQUFFLEdBQUc7Q0FDN0IsU0FBUztDQUNULEtBQUs7Q0FDTCxJQUFJLE1BQU0sd0JBQXdCLEdBQUc7Q0FDckMsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLDRCQUE0QixDQUFDLENBQUM7Q0FDbkQsUUFBUSxNQUFNLEVBQUUsR0FBRyxJQUFJLGlCQUFpQixDQUFDO0NBQ3pDLFlBQVksVUFBVSxFQUFFLEVBQUU7Q0FDMUIsWUFBWSxrQkFBa0IsRUFBRSxLQUFLO0NBQ3JDLFlBQVksWUFBWSxFQUFFLFlBQVk7Q0FDdEMsWUFBWSxhQUFhLEVBQUUsU0FBUztDQUNwQyxZQUFZLFlBQVksRUFBRSxRQUFRO0NBQ2xDLFNBQVMsQ0FBQyxDQUFDO0NBQ1gsUUFBUSxJQUFJO0NBQ1osWUFBWSxNQUFNLEtBQUssR0FBRyxNQUFNLEVBQUUsQ0FBQyxXQUFXLENBQUM7Q0FDL0MsZ0JBQWdCLG1CQUFtQixFQUFFLElBQUk7Q0FDekMsZ0JBQWdCLG1CQUFtQixFQUFFLElBQUk7Q0FDekMsYUFBYSxDQUFDLENBQUM7Q0FDZixZQUFZLElBQUk7Q0FDaEIsZ0JBQWdCLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztDQUMzQixhQUFhO0NBQ2IsWUFBWSxPQUFPLEtBQUssRUFBRSxHQUFHO0NBQzdCLFlBQVksTUFBTSxTQUFTLEdBQUdHLEtBQVksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQzVELFlBQVksTUFBTSxxQkFBcUIsR0FBR0MsV0FBYyxDQUFDLHNCQUFzQixDQUFDLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQztDQUMvRixZQUFZLE9BQU8scUJBQXFCLENBQUM7Q0FDekMsU0FBUztDQUNULFFBQVEsT0FBTyxLQUFLLEVBQUU7Q0FDdEIsWUFBWSxJQUFJO0NBQ2hCLGdCQUFnQixFQUFFLENBQUMsS0FBSyxFQUFFLENBQUM7Q0FDM0IsYUFBYTtDQUNiLFlBQVksT0FBTyxNQUFNLEVBQUUsR0FBRztDQUM5QixZQUFZLE1BQU0sS0FBSyxDQUFDO0NBQ3hCLFNBQVM7Q0FDVCxLQUFLO0NBQ0wsSUFBSSxNQUFNLHlCQUF5QixHQUFHO0NBQ3RDLFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO0NBQ3BELFFBQVEsT0FBTztDQUNmLFlBQVksVUFBVSxFQUFFLGdCQUFnQjtDQUN4QyxTQUFTLENBQUM7Q0FDVixLQUFLO0NBQ0wsSUFBSSxHQUFHLENBQUMsRUFBRSxTQUFTLEVBQUUsYUFBYSxFQUFFLGFBQWEsRUFBRSxjQUFjLEVBQUUsY0FBYyxFQUFFLFVBQVUsRUFBRSxrQkFBa0IsRUFBRSxrQkFBa0IsRUFBRSxzQkFBc0IsRUFBRSx1QkFBdUIsRUFBRSxFQUFFO0NBQzFMLFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztDQUM5QixRQUFRLElBQUksQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDO0NBQ3BDLFFBQVEsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLFdBQVcsQ0FBQyxTQUFTLENBQUM7Q0FDcEQsWUFBWSxhQUFhO0NBQ3pCLFlBQVksYUFBYTtDQUN6QixZQUFZLGNBQWM7Q0FDMUIsWUFBWSxjQUFjO0NBQzFCLFlBQVksS0FBSyxFQUFFLElBQUk7Q0FDdkIsU0FBUyxDQUFDLENBQUM7Q0FDWCxRQUFRLElBQUksQ0FBQywyQkFBMkI7Q0FDeEMsWUFBWTtDQUNaLGdCQUFnQixLQUFLLEVBQUUsSUFBSSxDQUFDLHVCQUF1QixDQUFDLE9BQU8sRUFBRSx1QkFBdUIsQ0FBQztDQUNyRixnQkFBZ0IsS0FBSyxFQUFFLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxPQUFPLEVBQUUsdUJBQXVCLENBQUM7Q0FDckYsYUFBYSxDQUFDO0NBQ2QsUUFBUSxJQUFJLENBQUMsaUNBQWlDO0NBQzlDLFlBQVk7Q0FDWixnQkFBZ0IsS0FBSyxFQUFFLElBQUksQ0FBQyw2QkFBNkIsQ0FBQyxPQUFPLEVBQUUsdUJBQXVCLENBQUM7Q0FDM0YsZ0JBQWdCLEtBQUssRUFBRSxJQUFJLENBQUMsNkJBQTZCLENBQUMsT0FBTyxFQUFFLHVCQUF1QixDQUFDO0NBQzNGLGFBQWEsQ0FBQztDQUNkLFFBQVEsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLGlCQUFpQixDQUFDO0NBQ3pDLFlBQVksVUFBVSxFQUFFLFVBQVUsSUFBSSxFQUFFO0NBQ3hDLFlBQVksa0JBQWtCLEVBQUUsa0JBQWtCLElBQUksS0FBSztDQUMzRCxZQUFZLFlBQVksRUFBRSxZQUFZO0NBQ3RDLFlBQVksYUFBYSxFQUFFLFNBQVM7Q0FDcEMsWUFBWSxZQUFZLEVBQUUsUUFBUTtDQUNsQyxZQUFZLEdBQUcsa0JBQWtCO0NBQ2pDLFNBQVMsRUFBRSxzQkFBc0IsQ0FBQyxDQUFDO0NBQ25DO0NBQ0EsUUFBUSxJQUFJLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLDBCQUEwQixFQUFFLE1BQU07Q0FDcEUsWUFBWSxRQUFRLElBQUksQ0FBQyxHQUFHLENBQUMsa0JBQWtCO0NBQy9DLGdCQUFnQixLQUFLLFVBQVU7Q0FDL0Isb0JBQW9CLElBQUksQ0FBQyxJQUFJLENBQUMsd0JBQXdCLEVBQUUsWUFBWSxDQUFDLENBQUM7Q0FDdEUsb0JBQW9CLE1BQU07Q0FDMUIsZ0JBQWdCLEtBQUssV0FBVyxDQUFDO0NBQ2pDLGdCQUFnQixLQUFLLFdBQVc7Q0FDaEMsb0JBQW9CLElBQUksQ0FBQyxJQUFJLENBQUMsd0JBQXdCLEVBQUUsV0FBVyxDQUFDLENBQUM7Q0FDckUsb0JBQW9CLE1BQU07Q0FDMUIsZ0JBQWdCLEtBQUssUUFBUTtDQUM3QixvQkFBb0IsSUFBSSxDQUFDLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxRQUFRLENBQUMsQ0FBQztDQUNsRSxvQkFBb0IsTUFBTTtDQUMxQixnQkFBZ0IsS0FBSyxjQUFjO0NBQ25DLG9CQUFvQixJQUFJLENBQUMsSUFBSSxDQUFDLHdCQUF3QixFQUFFLGNBQWMsQ0FBQyxDQUFDO0NBQ3hFLG9CQUFvQixNQUFNO0NBQzFCLGdCQUFnQixLQUFLLFFBQVE7Q0FDN0Isb0JBQW9CLElBQUksQ0FBQyxJQUFJLENBQUMsd0JBQXdCLEVBQUUsUUFBUSxDQUFDLENBQUM7Q0FDbEUsb0JBQW9CLE1BQU07Q0FDMUIsYUFBYTtDQUNiLFNBQVMsQ0FBQyxDQUFDO0NBQ1gsS0FBSztDQUNMLElBQUksTUFBTSxnQkFBZ0IsQ0FBQyxVQUFVLEVBQUU7Q0FDdkMsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLG9CQUFvQixDQUFDLENBQUM7Q0FDM0MsUUFBUSxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLENBQUM7Q0FDMUQsUUFBUSxhQUFhLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztDQUM5QyxRQUFRLElBQUksQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxDQUFDLENBQUM7Q0FDakQsS0FBSztDQUNMLElBQUksTUFBTSxVQUFVLENBQUMsYUFBYSxFQUFFO0NBQ3BDLFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQztDQUNyQztDQUNBLFFBQVEsSUFBSSxDQUFDLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxhQUFhLENBQUMsQ0FBQztDQUMzRCxRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZTtDQUNqQyxZQUFZLE9BQU87Q0FDbkIsUUFBUSxJQUFJLElBQUksQ0FBQyxVQUFVLEtBQUssTUFBTSxFQUFFO0NBQ3hDLFlBQVksTUFBTSxLQUFLLEdBQUcsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0NBQzNFLFlBQVksTUFBTSxDQUFDLEtBQUssQ0FBQyw0REFBNEQsRUFBRSxLQUFLLENBQUMsQ0FBQztDQUM5RixZQUFZLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztDQUN0RCxZQUFZLE1BQU0sTUFBTSxHQUFHLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDO0NBQzdFLFlBQVksTUFBTSxDQUFDLEtBQUssQ0FBQyw4REFBOEQsRUFBRSxNQUFNLENBQUMsQ0FBQztDQUNqRyxZQUFZLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztDQUN4RCxTQUFTO0NBQ1QsYUFBYTtDQUNiLFlBQVksTUFBTSxLQUFLLEdBQUcsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUM7Q0FDM0UsWUFBWSxNQUFNLENBQUMsS0FBSyxDQUFDLDZEQUE2RCxFQUFFLEtBQUssQ0FBQyxDQUFDO0NBQy9GLFlBQVksTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxDQUFDO0NBQ3ZELFlBQVksTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxDQUFDO0NBQ3pELFlBQVksTUFBTSxDQUFDLEtBQUssQ0FBQyw2REFBNkQsRUFBRSxNQUFNLENBQUMsQ0FBQztDQUNoRyxZQUFZLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztDQUN2RCxTQUFTO0NBQ1QsS0FBSztDQUNMLElBQUksTUFBTSxpQkFBaUIsR0FBRztDQUM5QixRQUFRLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztDQUNuQyxLQUFLO0NBQ0wsSUFBSSxNQUFNLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxFQUFFO0NBQzFELFFBQVEsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7Q0FDcEMsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLCtCQUErQixFQUFFLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0NBQzVFLFFBQVEsSUFBSSxLQUFLLEVBQUU7Q0FDbkIsWUFBWSxNQUFNLENBQUMsSUFBSSxDQUFDLHlEQUF5RCxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztDQUM5RixTQUFTO0NBQ1QsUUFBUSxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztDQUN6QyxRQUFRLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztDQUM3QyxRQUFRLElBQUksS0FBSyxHQUFHLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztDQUNqRCxRQUFRLElBQUksY0FBYyxHQUFHRCxLQUFZLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUMzRCxRQUFRLElBQUksZ0JBQWdCLENBQUM7Q0FDN0IsUUFBUSxNQUFNLG9CQUFvQixHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLDJCQUEyQixDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0NBQy9GLFFBQVEsb0JBQW9CLENBQUMsTUFBTTtDQUNuQyxZQUFZLElBQUksQ0FBQyxZQUFZLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLENBQUM7Q0FDM0QsUUFBUSxNQUFNLDBCQUEwQixHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGlDQUFpQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0NBQzNHLFFBQVEsMEJBQTBCLENBQUMsTUFBTTtDQUN6QyxZQUFZLElBQUksQ0FBQyxZQUFZLENBQUMsMEJBQTBCLENBQUMsTUFBTSxDQUFDLENBQUM7Q0FDakUsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWU7Q0FDakMsWUFBWSxNQUFNLElBQUksQ0FBQyxlQUFlLENBQUMsRUFBRSxhQUFhLEVBQUUsUUFBUSxFQUFFLGNBQWMsRUFBRSxDQUFDLENBQUM7Q0FDcEYsUUFBUSxJQUFJLEtBQUssQ0FBQyxJQUFJLEtBQUssT0FBTyxJQUFJLFNBQVMsSUFBSSxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtDQUN6RSxZQUFZLE1BQU0sQ0FBQyxLQUFLLENBQUMsNkJBQTZCLENBQUMsQ0FBQztDQUN4RCxZQUFZLGNBQWMsR0FBR0EsS0FBWSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDM0QsWUFBWSxnQkFBZ0IsR0FBRyxjQUFjLENBQUMsS0FBSztDQUNuRCxpQkFBaUIsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLEtBQUssT0FBTyxDQUFDLENBQUM7Q0FDakQsWUFBWUksVUFBYSxDQUFDLGtCQUFrQixDQUFDO0NBQzdDLGdCQUFnQixnQkFBZ0I7Q0FDaEMsZ0JBQWdCLEtBQUs7Q0FDckIsZ0JBQWdCLFVBQVUsRUFBRSxTQUFTLENBQUMsTUFBTTtDQUM1QyxhQUFhLENBQUMsQ0FBQztDQUNmLFlBQVksS0FBSyxHQUFHLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUVKLEtBQVksQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQztDQUMvRSxTQUFTO0NBQ1QsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLHNEQUFzRCxFQUFFLEtBQUssQ0FBQyxDQUFDO0NBQ3BGLFFBQVEsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDO0NBQ2xELFFBQVEsY0FBYyxHQUFHQSxLQUFZLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDM0UsUUFBUSxnQkFBZ0IsR0FBRyxjQUFjLENBQUMsS0FBSztDQUMvQyxhQUFhLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxLQUFLLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztDQUNoRDtDQUNBLFFBQVEsb0JBQW9CLENBQUMsSUFBSSxDQUFDLEtBQUs7Q0FDdkMsWUFBWUMsV0FBYyxDQUFDLFFBQVEsQ0FBQyxFQUFFLGdCQUFnQixFQUFFLENBQUMsQ0FBQztDQUMxRDtDQUNBLFFBQVEsb0JBQW9CLENBQUMsU0FBUztDQUN0QyxZQUFZRyxVQUFhLENBQUMsZUFBZSxDQUFDLEVBQUUsZ0JBQWdCLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztDQUN2RTtDQUNBLFFBQVEsSUFBSSxTQUFTLEVBQUU7Q0FDdkIsWUFBWSxLQUFLLElBQUksR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsb0JBQW9CLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxFQUFFLEdBQUcsRUFBRTtDQUNsRixnQkFBZ0IsSUFBSSxTQUFTLENBQUMsR0FBRyxDQUFDO0NBQ2xDLG9CQUFvQixNQUFNLENBQUMsTUFBTSxDQUFDLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRSxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztDQUN2RixhQUFhO0NBQ2IsU0FBUztDQUNUO0NBQ0E7Q0FDQSxRQUFRLElBQUksb0JBQW9CLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDO0NBQ3JELGFBQWEsb0JBQW9CLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsS0FBSyxXQUFXO0NBQ2xGLGdCQUFnQixvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxLQUFLLFlBQVksQ0FBQyxFQUFFO0NBQ3pGLFlBQVksS0FBSyxNQUFNLFFBQVEsSUFBSSxvQkFBb0IsQ0FBQyxTQUFTLEVBQUU7Q0FDbkUsZ0JBQWdCLFFBQVEsQ0FBQyxlQUFlLEdBQUcsTUFBTSxDQUFDO0NBQ2xELGFBQWE7Q0FDYixTQUFTO0NBQ1QsUUFBUSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQztDQUM3QixZQUFZLGdCQUFnQjtDQUM1QixZQUFZLGtCQUFrQixFQUFFLG9CQUFvQjtDQUNwRCxZQUFZLG1CQUFtQixFQUFFLDBCQUEwQjtDQUMzRCxZQUFZLFlBQVk7Q0FDeEIsU0FBUyxDQUFDLENBQUM7Q0FDWCxRQUFRLE1BQU0sTUFBTSxHQUFHLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDO0NBQ3pFLFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyx3REFBd0QsRUFBRSxNQUFNLENBQUMsQ0FBQztDQUN2RixRQUFRLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztDQUNwRCxRQUFRLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztDQUN0RCxRQUFRLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0NBQ2hDO0NBQ0EsUUFBUSxJQUFJLENBQUMsb0JBQW9CLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztDQUN0RCxRQUFRLE9BQU87Q0FDZixZQUFZLE9BQU8sRUFBRSxPQUFPO0NBQzVCLFlBQVksYUFBYSxFQUFFLG9CQUFvQjtDQUMvQyxTQUFTLENBQUM7Q0FDVixLQUFLO0NBQ0wsSUFBSSxNQUFNLFdBQVcsQ0FBQyxPQUFPLEVBQUU7Q0FDL0IsUUFBUSxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztDQUNwQyxRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsNEJBQTRCLEVBQUUsT0FBTyxDQUFDLENBQUM7Q0FDNUQsUUFBUSxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0NBQzdELFFBQVEsSUFBSSxDQUFDLEtBQUs7Q0FDbEIsWUFBWSxNQUFNLElBQUksS0FBSyxDQUFDLGlCQUFpQixDQUFDLENBQUM7Q0FDL0MsUUFBUSxJQUFJLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0NBQ2xELFFBQVEsSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDNUMsUUFBUSxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7Q0FDN0MsUUFBUSxNQUFNLEtBQUssR0FBRyxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7Q0FDbkQsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLDZEQUE2RCxFQUFFLEtBQUssQ0FBQyxDQUFDO0NBQzNGLFFBQVEsSUFBSTtDQUNaLFlBQVksTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDO0NBQ3RELFNBQVM7Q0FDVCxRQUFRLE9BQU8sS0FBSyxFQUFFO0NBQ3RCO0NBQ0E7Q0FDQSxZQUFZLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO0NBQzNELGdCQUFnQixNQUFNLENBQUMsSUFBSSxDQUFDLG1FQUFtRSxFQUFFLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0NBQ25ILGdCQUFnQixPQUFPO0NBQ3ZCLGFBQWE7Q0FDYixZQUFZLE1BQU0sS0FBSyxDQUFDO0NBQ3hCLFNBQVM7Q0FDVCxRQUFRLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxjQUFjLEtBQUssUUFBUTtDQUNoRCxZQUFZLE9BQU87Q0FDbkIsUUFBUSxNQUFNLE1BQU0sR0FBRyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQztDQUN6RSxRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsK0RBQStELEVBQUUsTUFBTSxDQUFDLENBQUM7Q0FDOUYsUUFBUSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLENBQUM7Q0FDcEQsS0FBSztDQUNMLElBQUksTUFBTSxZQUFZO0NBQ3RCO0NBQ0EsSUFBSSxPQUFPLEVBQUUsS0FBSyxFQUFFO0NBQ3BCLFFBQVEsTUFBTSxJQUFJUCxNQUFRLENBQUMsZ0JBQWdCLENBQUMsaUJBQWlCLENBQUMsQ0FBQztDQUMvRCxLQUFLO0NBQ0w7Q0FDQSxJQUFJLE1BQU0sa0JBQWtCLENBQUMsT0FBTyxFQUFFLFlBQVksRUFBRTtDQUNwRCxRQUFRLE1BQU0sSUFBSUEsTUFBUSxDQUFDLGdCQUFnQixDQUFDLGlCQUFpQixDQUFDLENBQUM7Q0FDL0QsS0FBSztDQUNMO0NBQ0EsSUFBSSxNQUFNLHdCQUF3QixDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUU7Q0FDcEQsUUFBUSxNQUFNLElBQUlBLE1BQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0NBQy9ELEtBQUs7Q0FDTDtDQUNBLElBQUksTUFBTSxjQUFjLENBQUMsT0FBTyxFQUFFO0NBQ2xDLFFBQVEsTUFBTSxJQUFJQSxNQUFRLENBQUMsZ0JBQWdCLENBQUMsaUJBQWlCLENBQUMsQ0FBQztDQUMvRCxLQUFLO0NBQ0wsSUFBSSxNQUFNLGVBQWUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsRUFBRTtDQUNyRyxRQUFRLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO0NBQ3BDLFFBQVEsTUFBTSxPQUFPLEdBQUc7Q0FDeEIsWUFBWSxVQUFVLEVBQUUsSUFBSTtDQUM1QixZQUFZLEVBQUUsRUFBRSxJQUFJLENBQUMscUJBQXFCO0NBQzFDLFlBQVksT0FBTztDQUNuQixZQUFZLGlCQUFpQjtDQUM3QixZQUFZLGlCQUFpQixFQUFFLGlCQUFpQjtDQUNoRCxZQUFZLGNBQWM7Q0FDMUIsWUFBWSxRQUFRO0NBQ3BCLFlBQVksUUFBUTtDQUNwQixTQUFTLENBQUM7Q0FDVixRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLEVBQUUsT0FBTyxDQUFDLENBQUM7Q0FDaEUsUUFBUSxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztDQUN2RTtDQUNBLFFBQVEsSUFBSSxDQUFDLHFCQUFxQjtDQUNsQyxZQUFZLEVBQUUsSUFBSSxDQUFDLHFCQUFxQixHQUFHLGdCQUFnQixDQUFDLEdBQUcsQ0FBQztDQUNoRTtDQUNBO0NBQ0EsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLDJCQUEyQixFQUFFO0NBQy9DLFlBQVksTUFBTSxLQUFLLEdBQUcsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO0NBQ3ZELFlBQVksTUFBTSxjQUFjLEdBQUdHLEtBQVksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQ2pFLFlBQVksTUFBTSxnQkFBZ0IsR0FBRyxjQUFjLENBQUMsS0FBSztDQUN6RCxpQkFBaUIsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLEtBQUssYUFBYSxDQUFDLENBQUM7Q0FDdkQsWUFBWSxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWU7Q0FDckMsZ0JBQWdCLE1BQU0sSUFBSSxDQUFDLGVBQWUsQ0FBQyxFQUFFLGFBQWEsRUFBRSxRQUFRLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztDQUN4RixZQUFZLE1BQU0sQ0FBQyxLQUFLLENBQUMsaUVBQWlFLEVBQUUsS0FBSyxDQUFDLENBQUM7Q0FDbkcsWUFBWSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDdEQsWUFBWSxJQUFJLENBQUMsVUFBVSxDQUFDLG1CQUFtQixDQUFDLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDO0NBQ3RFLFlBQVksTUFBTSxNQUFNLEdBQUcsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUM7Q0FDN0UsWUFBWSxNQUFNLENBQUMsS0FBSyxDQUFDLG1FQUFtRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0NBQ3RHLFlBQVksTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0NBQ3hELFlBQVksSUFBSSxDQUFDLDJCQUEyQixHQUFHLElBQUksQ0FBQztDQUNwRCxTQUFTO0NBQ1QsUUFBUSxNQUFNLG9CQUFvQixHQUFHO0NBQ3JDLFlBQVksUUFBUSxFQUFFLE9BQU8sQ0FBQyxFQUFFO0NBQ2hDLFlBQVksT0FBTyxFQUFFLE9BQU8sQ0FBQyxPQUFPO0NBQ3BDLFlBQVksaUJBQWlCLEVBQUUsT0FBTyxDQUFDLGlCQUFpQjtDQUN4RCxZQUFZLGNBQWMsRUFBRSxPQUFPLENBQUMsY0FBYztDQUNsRCxTQUFTLENBQUM7Q0FDVixRQUFRLE9BQU8sRUFBRSxXQUFXLEVBQUUsb0JBQW9CLEVBQUUsQ0FBQztDQUNyRCxLQUFLO0NBQ0wsSUFBSSxNQUFNLE9BQU8sQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsYUFBYSxFQUFFLEVBQUU7Q0FDcEQsUUFBUSxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztDQUNwQyxRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsaUNBQWlDLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0NBQ3ZFLFFBQVEsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDO0NBQ2hDLFFBQVEsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDO0NBQ3pCLFFBQVEsSUFBSSxRQUFRLEdBQUcsYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7Q0FDaEQ7Q0FDQTtDQUNBO0NBQ0E7Q0FDQSxRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsNkZBQTZGLENBQUMsQ0FBQztDQUNwSCxRQUFRLFFBQVEsSUFBSSxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsb0JBQW9CLEVBQUUsQ0FBQyxDQUFDLENBQUM7Q0FDNUQsUUFBUSxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQztDQUNoQyxZQUFZLEdBQUc7Q0FDZixZQUFZLElBQUk7Q0FDaEIsWUFBWSxrQkFBa0IsRUFBRSxhQUFhO0NBQzdDLFlBQVksUUFBUTtDQUNwQixZQUFZLE9BQU87Q0FDbkIsU0FBUyxDQUFDLENBQUM7Q0FDWCxRQUFRLE1BQU0sS0FBSyxHQUFHLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDO0NBQ3ZFLFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQywwREFBMEQsRUFBRSxLQUFLLENBQUMsQ0FBQztDQUN4RixRQUFRLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztDQUNuRCxRQUFRLElBQUksTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsQ0FBQztDQUNuRCxRQUFRLE1BQU0sY0FBYyxHQUFHQSxLQUFZLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUM5RCxRQUFRLE1BQU0saUJBQWlCLEdBQUcsY0FBYyxDQUFDLEtBQUs7Q0FDdEQsYUFBYSxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztDQUNoRDtDQUNBO0NBQ0EsUUFBUUMsV0FBYyxDQUFDLG9CQUFvQixDQUFDO0NBQzVDLFlBQVksa0JBQWtCLEVBQUUsYUFBYTtDQUM3QyxZQUFZLGlCQUFpQjtDQUM3QixTQUFTLENBQUMsQ0FBQztDQUNYLFFBQVEsTUFBTSxHQUFHLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUVELEtBQVksQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQztDQUM3RSxRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZTtDQUNqQyxZQUFZLE1BQU0sSUFBSSxDQUFDLGVBQWUsQ0FBQyxFQUFFLGFBQWEsRUFBRSxRQUFRLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztDQUNwRixRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsMERBQTBELEVBQUUsTUFBTSxDQUFDLENBQUM7Q0FDekYsUUFBUSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsTUFBTSxDQUFDLENBQUM7Q0FDbkQsUUFBUSxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFO0NBQ2xELGFBQWEsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEtBQUssUUFBUSxDQUFDLENBQUM7Q0FDNUMsUUFBUSxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0NBQ25ELFFBQVEsSUFBSSxDQUFDLEtBQUs7Q0FDbEIsWUFBWSxNQUFNLElBQUksS0FBSyxDQUFDLHdCQUF3QixDQUFDLENBQUM7Q0FDdEQ7Q0FDQSxRQUFRLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLEVBQUUsR0FBRyxFQUFFLGFBQWEsRUFBRSxDQUFDLENBQUM7Q0FDdEUsUUFBUSxPQUFPLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxDQUFDO0NBQ2xDLEtBQUs7Q0FDTCxJQUFJLE1BQU0sYUFBYSxDQUFDLE9BQU8sRUFBRTtDQUNqQyxRQUFRLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO0NBQ3BDLFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyw4QkFBOEIsRUFBRSxPQUFPLENBQUMsQ0FBQztDQUM5RCxRQUFRLE1BQU0sRUFBRSxHQUFHLEVBQUUsYUFBYSxFQUFFLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7Q0FDbkY7Q0FDQSxRQUFRLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7Q0FDakQsUUFBUSxJQUFJLENBQUMsVUFBVSxDQUFDLGtCQUFrQixDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxrQkFBa0IsRUFBRSxhQUFhLEVBQUUsQ0FBQyxDQUFDO0NBQzVGLFFBQVEsTUFBTSxLQUFLLEdBQUcsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUM7Q0FDdkUsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLGdFQUFnRSxFQUFFLEtBQUssQ0FBQyxDQUFDO0NBQzlGLFFBQVEsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxDQUFDO0NBQ25ELFFBQVEsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxDQUFDO0NBQ3JELFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyxnRUFBZ0UsRUFBRSxNQUFNLENBQUMsQ0FBQztDQUMvRixRQUFRLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztDQUNuRCxLQUFLO0NBQ0w7Q0FDQSxJQUFJLE1BQU0sZ0JBQWdCLENBQUMsT0FBTyxFQUFFO0NBQ3BDLFFBQVEsTUFBTSxJQUFJSCxNQUFRLENBQUMsZ0JBQWdCLENBQUMsaUJBQWlCLENBQUMsQ0FBQztDQUMvRCxLQUFLO0NBQ0wsSUFBSSxNQUFNLGtCQUFrQixDQUFDLEVBQUUsb0JBQW9CLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxFQUFFO0NBQ3hFLFFBQVEsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7Q0FDcEMsUUFBUSxNQUFNLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxjQUFjLEVBQUUsR0FBRyxvQkFBb0IsQ0FBQztDQUM5RixRQUFRLE1BQU0sT0FBTyxHQUFHO0NBQ3hCLFlBQVksVUFBVSxFQUFFLElBQUk7Q0FDNUIsWUFBWSxFQUFFLEVBQUUsUUFBUTtDQUN4QixZQUFZLE9BQU87Q0FDbkIsWUFBWSxpQkFBaUI7Q0FDN0IsWUFBWSxpQkFBaUIsRUFBRSxpQkFBaUI7Q0FDaEQsWUFBWSxjQUFjO0NBQzFCLFlBQVksUUFBUTtDQUNwQixTQUFTLENBQUM7Q0FDVixRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsbUNBQW1DLEVBQUUsT0FBTyxDQUFDLENBQUM7Q0FDbkUsUUFBUSxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztDQUN2RTtDQUNBO0NBQ0EsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLDJCQUEyQixFQUFFO0NBQy9DLFlBQVksSUFBSSxDQUFDLFVBQVUsQ0FBQyxzQkFBc0IsQ0FBQyxFQUFFLGtCQUFrQixFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7Q0FDakYsWUFBWSxNQUFNLEtBQUssR0FBRyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQztDQUMzRSxZQUFZLE1BQU0sQ0FBQyxLQUFLLENBQUMscUVBQXFFLEVBQUUsS0FBSyxDQUFDLENBQUM7Q0FDdkcsWUFBWSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDdkQsWUFBWSxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUM7Q0FDekQsWUFBWSxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRTtDQUN2QyxnQkFBZ0IsTUFBTSxjQUFjLEdBQUdHLEtBQVksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQ3RFLGdCQUFnQixNQUFNLElBQUksQ0FBQyxlQUFlLENBQUMsRUFBRSxhQUFhLEVBQUUsUUFBUSxFQUFFLGNBQWMsRUFBRSxDQUFDLENBQUM7Q0FDeEYsYUFBYTtDQUNiLFlBQVksTUFBTSxDQUFDLEtBQUssQ0FBQyxzRUFBc0UsRUFBRSxNQUFNLENBQUMsQ0FBQztDQUN6RyxZQUFZLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztDQUN2RCxZQUFZLElBQUksQ0FBQywyQkFBMkIsR0FBRyxJQUFJLENBQUM7Q0FDcEQsU0FBUztDQUNULFFBQVEsT0FBTyxFQUFFLFdBQVcsRUFBRSxDQUFDO0NBQy9CLEtBQUs7Q0FDTCxJQUFJLE1BQU0sZUFBZSxDQUFDLEVBQUUsYUFBYSxFQUFFLGNBQWMsRUFBRSxFQUFFO0NBQzdELFFBQVEsSUFBSSxDQUFDLGNBQWM7Q0FDM0IsWUFBWSxjQUFjLEdBQUdBLEtBQVksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUMvRTtDQUNBLFFBQVEsTUFBTSxjQUFjLEdBQUdDLFdBQWMsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLFNBQVMsRUFBRSxjQUFjLEVBQUUsQ0FBQyxDQUFDO0NBQ25HO0NBQ0EsUUFBUSxjQUFjLENBQUMsSUFBSSxHQUFHLGFBQWEsQ0FBQztDQUM1QztDQUNBLFFBQVEsSUFBSSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsYUFBYSxLQUFLLFFBQVEsR0FBRyxRQUFRLEdBQUcsUUFBUSxDQUFDLENBQUM7Q0FDekY7Q0FDQSxRQUFRLE1BQU0sSUFBSSxDQUFDLGlCQUFpQixDQUFDLFVBQVUsRUFBRSxFQUFFLGNBQWMsRUFBRSxDQUFDLENBQUM7Q0FDckUsUUFBUSxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQztDQUNwQyxLQUFLO0NBQ0wsSUFBSSxvQkFBb0IsR0FBRztDQUMzQixRQUFRLElBQUksSUFBSSxDQUFDLFVBQVUsS0FBSyxNQUFNLEVBQUU7Q0FDeEMsWUFBWSxNQUFNLElBQUksS0FBSyxDQUFDLDhEQUE4RCxDQUFDLENBQUM7Q0FDNUYsU0FBUztDQUNULEtBQUs7Q0FDTCxJQUFJLG9CQUFvQixHQUFHO0NBQzNCLFFBQVEsSUFBSSxJQUFJLENBQUMsVUFBVSxLQUFLLE1BQU0sRUFBRTtDQUN4QyxZQUFZLE1BQU0sSUFBSSxLQUFLLENBQUMsOERBQThELENBQUMsQ0FBQztDQUM1RixTQUFTO0NBQ1QsS0FBSztDQUNMLENBQUM7Q0FDRCxtQkFBbUIsR0FBRyxXQUFXOzs7Ozs7O0FDcmNqQyxDQUNBO0NBQ0EsTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7QUFDN0I7QUFDSTtBQUNBO0FBQ047QUFDWTtBQUNPO0FBQ0E7QUFDQTtBQUNBO0FBQ0U7QUFDRjtBQUNBO0FBQ0o7QUFDVTtDQUN4RCxNQUFNLE1BQU0sR0FBRyxJQUFJLFFBQVEsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7Q0FDN0MsU0FBUyxZQUFZLEdBQUc7Q0FDeEI7Q0FDQTtDQUNBLElBQUksSUFBSSxPQUFPLFNBQVMsS0FBSyxRQUFRLElBQUksU0FBUyxDQUFDLE9BQU8sS0FBSyxhQUFhLEVBQUU7Q0FDOUUsUUFBUSxJQUFJLE9BQU8saUJBQWlCLEtBQUssV0FBVyxFQUFFO0NBQ3RELFlBQVksTUFBTSxDQUFDLElBQUksQ0FBQywwRUFBMEUsQ0FBQyxDQUFDO0NBQ3BHLFlBQVksT0FBTyxTQUFTLENBQUM7Q0FDN0IsU0FBUztDQUNULFFBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyxtREFBbUQsQ0FBQyxDQUFDO0NBQzFFLFFBQVEsT0FBTyxhQUFhLENBQUM7Q0FDN0IsS0FBSztDQUNMO0NBQ0EsU0FBUyxJQUFJLE9BQU8sU0FBUyxLQUFLLFFBQVEsSUFBSSxPQUFPLFNBQVMsQ0FBQyxTQUFTLEtBQUssUUFBUSxFQUFFO0NBQ3ZGLFFBQVEsTUFBTSxFQUFFLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQztDQUN2QyxRQUFRLE1BQU0sT0FBTyxHQUFHSSxHQUFNLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0NBQzdDLFFBQVEsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLFNBQVMsRUFBRSxDQUFDO0NBQzNDO0NBQ0EsUUFBUSxJQUFJLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFO0NBQ3JFLFlBQVksT0FBTyxVQUFVLENBQUM7Q0FDOUIsU0FBUztDQUNULGFBQWEsSUFBSSxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRTtDQUMxRSxZQUFZLE9BQU8sVUFBVSxDQUFDO0NBQzlCLFNBQVM7Q0FDVCxhQUFhLElBQUksT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUU7Q0FDMUUsWUFBWSxPQUFPLFVBQVUsQ0FBQztDQUM5QixTQUFTO0NBQ1QsYUFBYSxJQUFJLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFO0NBQzFFLFlBQVksT0FBTyxVQUFVLENBQUM7Q0FDOUIsU0FBUztDQUNUO0NBQ0EsYUFBYSxJQUFJLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRTtDQUN6RCxZQUFZLE9BQU8sV0FBVyxDQUFDO0NBQy9CLFNBQVM7Q0FDVDtDQUNBLGFBQWEsSUFBSSxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxDQUFDO0NBQ3hELFlBQVksT0FBTyxpQkFBaUIsS0FBSyxXQUFXO0NBQ3BELFlBQVksaUJBQWlCLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFO0NBQzVFLFlBQVksT0FBTyxVQUFVLENBQUM7Q0FDOUIsU0FBUztDQUNUO0NBQ0EsYUFBYSxJQUFJLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRTtDQUN4RCxZQUFZLE9BQU8sVUFBVSxDQUFDO0NBQzlCLFNBQVM7Q0FDVDtDQUNBLGFBQWEsSUFBSSxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxFQUFFLENBQUM7Q0FDaEUsWUFBWSxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRTtDQUM3RCxZQUFZLE9BQU8sUUFBUSxDQUFDO0NBQzVCLFNBQVM7Q0FDVDtDQUNBLGFBQWEsSUFBSSxNQUFNLENBQUMsSUFBSSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEtBQUssT0FBTyxFQUFFO0NBQ3ZFLFlBQVksTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO0NBQ3hFLFlBQVksSUFBSSxLQUFLLEVBQUU7Q0FDdkIsZ0JBQWdCLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUNqRCxnQkFBZ0IsSUFBSSxPQUFPLElBQUksRUFBRSxFQUFFO0NBQ25DLG9CQUFvQixPQUFPLFVBQVUsQ0FBQztDQUN0QyxpQkFBaUI7Q0FDakIscUJBQXFCLElBQUksT0FBTyxJQUFJLEVBQUUsRUFBRTtDQUN4QyxvQkFBb0IsT0FBTyxVQUFVLENBQUM7Q0FDdEMsaUJBQWlCO0NBQ2pCLHFCQUFxQixJQUFJLE9BQU8sSUFBSSxFQUFFLEVBQUU7Q0FDeEMsb0JBQW9CLE9BQU8sVUFBVSxDQUFDO0NBQ3RDLGlCQUFpQjtDQUNqQixxQkFBcUI7Q0FDckIsb0JBQW9CLE9BQU8sVUFBVSxDQUFDO0NBQ3RDLGlCQUFpQjtDQUNqQixhQUFhO0NBQ2IsaUJBQWlCO0NBQ2pCLGdCQUFnQixPQUFPLFVBQVUsQ0FBQztDQUNsQyxhQUFhO0NBQ2IsU0FBUztDQUNUO0NBQ0EsYUFBYTtDQUNiLFlBQVksTUFBTSxDQUFDLElBQUksQ0FBQyxvRUFBb0UsRUFBRSxPQUFPLENBQUMsY0FBYyxFQUFFLEVBQUUsT0FBTyxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQztDQUNySixZQUFZLE9BQU8sU0FBUyxDQUFDO0NBQzdCLFNBQVM7Q0FDVCxLQUFLO0NBQ0w7Q0FDQSxTQUFTO0NBQ1QsUUFBUSxNQUFNLENBQUMsSUFBSSxDQUFDLHVDQUF1QyxDQUFDLENBQUM7Q0FDN0QsUUFBUSxPQUFPLFNBQVMsQ0FBQztDQUN6QixLQUFLO0NBQ0wsQ0FBQztDQUNELG9CQUFvQixHQUFHLFlBQVksQ0FBQztDQUNwQyxNQUFNLE1BQU0sQ0FBQztDQUNiO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQSxJQUFJLFdBQVcsQ0FBQyxFQUFFLFdBQVcsRUFBRSxjQUFjLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxFQUFFO0NBQy9EO0NBQ0EsUUFBUSxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztDQUM3QixRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUM7Q0FDdEM7Q0FDQSxRQUFRLElBQUksT0FBTyxFQUFFO0NBQ3JCLFlBQVksTUFBTSxDQUFDLElBQUksQ0FBQyx5RkFBeUYsQ0FBQyxDQUFDO0NBQ25ILFlBQVksSUFBSSxPQUFPLE9BQU8sS0FBSyxRQUFRO0NBQzNDLGdCQUFnQixXQUFXLEdBQUcsT0FBTyxDQUFDO0NBQ3RDO0NBQ0EsZ0JBQWdCLE1BQU0sSUFBSSxTQUFTLENBQUMsMkVBQTJFLENBQUMsQ0FBQztDQUNqSCxTQUFTO0NBQ1QsUUFBUSxJQUFJLFdBQVcsSUFBSSxjQUFjLEVBQUU7Q0FDM0MsWUFBWSxNQUFNLElBQUksU0FBUyxDQUFDLDBEQUEwRCxDQUFDLENBQUM7Q0FDNUYsU0FBUztDQUNULFFBQVEsSUFBSSxjQUFjLEVBQUU7Q0FDNUIsWUFBWSxJQUFJLENBQUMsZUFBZSxHQUFHLGNBQWMsQ0FBQztDQUNsRCxTQUFTO0NBQ1QsYUFBYTtDQUNiLFlBQVksSUFBSSxXQUFXLEVBQUU7Q0FDN0IsZ0JBQWdCLE1BQU0sQ0FBQyxLQUFLLENBQUMsbUNBQW1DLEVBQUUsV0FBVyxDQUFDLENBQUM7Q0FDL0UsYUFBYTtDQUNiLGlCQUFpQjtDQUNqQixnQkFBZ0IsV0FBVyxHQUFHLFlBQVksRUFBRSxDQUFDO0NBQzdDLGdCQUFnQixJQUFJLFdBQVc7Q0FDL0Isb0JBQW9CLE1BQU0sQ0FBQyxLQUFLLENBQUMsc0NBQXNDLEVBQUUsV0FBVyxDQUFDLENBQUM7Q0FDdEY7Q0FDQSxvQkFBb0IsTUFBTSxJQUFJUixNQUFRLENBQUMsZ0JBQWdCLENBQUMsc0JBQXNCLENBQUMsQ0FBQztDQUNoRixhQUFhO0NBQ2IsWUFBWSxRQUFRLFdBQVc7Q0FDL0IsZ0JBQWdCLEtBQUssVUFBVTtDQUMvQixvQkFBb0IsSUFBSSxDQUFDLGVBQWUsR0FBRyxVQUFVLENBQUMsUUFBUSxDQUFDLGFBQWEsRUFBRSxDQUFDO0NBQy9FLG9CQUFvQixNQUFNO0NBQzFCLGdCQUFnQixLQUFLLFVBQVU7Q0FDL0Isb0JBQW9CLElBQUksQ0FBQyxlQUFlLEdBQUcsVUFBVSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUUsQ0FBQztDQUMvRSxvQkFBb0IsTUFBTTtDQUMxQixnQkFBZ0IsS0FBSyxVQUFVO0NBQy9CLG9CQUFvQixJQUFJLENBQUMsZUFBZSxHQUFHLFVBQVUsQ0FBQyxRQUFRLENBQUMsYUFBYSxFQUFFLENBQUM7Q0FDL0Usb0JBQW9CLE1BQU07Q0FDMUIsZ0JBQWdCLEtBQUssVUFBVTtDQUMvQixvQkFBb0IsSUFBSSxDQUFDLGVBQWUsR0FBRyxVQUFVLENBQUMsUUFBUSxDQUFDLGFBQWEsRUFBRSxDQUFDO0NBQy9FLG9CQUFvQixNQUFNO0NBQzFCLGdCQUFnQixLQUFLLFdBQVc7Q0FDaEMsb0JBQW9CLElBQUksQ0FBQyxlQUFlLEdBQUcsV0FBVyxDQUFDLFNBQVMsQ0FBQyxhQUFhLEVBQUUsQ0FBQztDQUNqRixvQkFBb0IsTUFBTTtDQUMxQixnQkFBZ0IsS0FBSyxVQUFVO0NBQy9CLG9CQUFvQixJQUFJLENBQUMsZUFBZSxHQUFHLFVBQVUsQ0FBQyxRQUFRLENBQUMsYUFBYSxFQUFFLENBQUM7Q0FDL0Usb0JBQW9CLE1BQU07Q0FDMUIsZ0JBQWdCLEtBQUssVUFBVTtDQUMvQixvQkFBb0IsSUFBSSxDQUFDLGVBQWUsR0FBRyxVQUFVLENBQUMsUUFBUSxDQUFDLGFBQWEsRUFBRSxDQUFDO0NBQy9FLG9CQUFvQixNQUFNO0NBQzFCLGdCQUFnQixLQUFLLFFBQVE7Q0FDN0Isb0JBQW9CLElBQUksQ0FBQyxlQUFlLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsQ0FBQztDQUMzRSxvQkFBb0IsTUFBTTtDQUMxQixnQkFBZ0IsS0FBSyxhQUFhO0NBQ2xDLG9CQUFvQixJQUFJLENBQUMsZUFBZSxHQUFHLGFBQWEsQ0FBQyxXQUFXLENBQUMsYUFBYSxFQUFFLENBQUM7Q0FDckYsb0JBQW9CLE1BQU07Q0FDMUIsZ0JBQWdCO0NBQ2hCLG9CQUFvQixNQUFNLElBQUksU0FBUyxDQUFDLENBQUMscUJBQXFCLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDaEYsYUFBYTtDQUNiLFNBQVM7Q0FDVDtDQUNBLFFBQVEsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO0NBQy9DLFFBQVEsSUFBSSxDQUFDLFlBQVksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDO0NBQ3pDLFFBQVEsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO0NBQ3hCLFFBQVEsSUFBSSxDQUFDLHdCQUF3QixHQUFHLFNBQVMsQ0FBQztDQUNsRCxRQUFRLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxTQUFTLENBQUM7Q0FDOUMsUUFBUSxJQUFJLENBQUMsaUJBQWlCO0NBQzlCLFlBQVk7Q0FDWixnQkFBZ0IsS0FBSyxFQUFFLEtBQUs7Q0FDNUIsZ0JBQWdCLEtBQUssRUFBRSxLQUFLO0NBQzVCLGFBQWEsQ0FBQztDQUNkLFFBQVEsSUFBSSxDQUFDLGlCQUFpQixHQUFHLFNBQVMsQ0FBQztDQUMzQyxLQUFLO0NBQ0w7Q0FDQTtDQUNBO0NBQ0EsSUFBSSxJQUFJLFdBQVcsR0FBRztDQUN0QixRQUFRLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztDQUNqQyxLQUFLO0NBQ0w7Q0FDQTtDQUNBO0NBQ0EsSUFBSSxJQUFJLE1BQU0sR0FBRztDQUNqQixRQUFRLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztDQUM1QixLQUFLO0NBQ0w7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLElBQUksSUFBSSxlQUFlLEdBQUc7Q0FDMUIsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU87Q0FDekIsWUFBWSxNQUFNLElBQUlBLE1BQVEsQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLENBQUMsQ0FBQztDQUMvRCxRQUFRLE9BQU8sSUFBSSxDQUFDLG9CQUFvQixDQUFDO0NBQ3pDLEtBQUs7Q0FDTDtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0EsSUFBSSxJQUFJLGdCQUFnQixHQUFHO0NBQzNCLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPO0NBQ3pCLFlBQVksTUFBTSxJQUFJQSxNQUFRLENBQUMsaUJBQWlCLENBQUMsWUFBWSxDQUFDLENBQUM7Q0FDL0QsUUFBUSxPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztDQUN0QyxLQUFLO0NBQ0w7Q0FDQTtDQUNBO0NBQ0EsSUFBSSxNQUFNLElBQUksQ0FBQyxFQUFFLHFCQUFxQixFQUFFLEVBQUU7Q0FDMUMsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLG1DQUFtQyxFQUFFLHFCQUFxQixDQUFDLENBQUM7Q0FDakY7Q0FDQSxRQUFRLElBQUksT0FBTyxDQUFDO0NBQ3BCLFFBQVEsSUFBSTtDQUNaLFlBQVksSUFBSSxJQUFJLENBQUMsT0FBTztDQUM1QixnQkFBZ0IsTUFBTSxJQUFJQSxNQUFRLENBQUMsaUJBQWlCLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztDQUN2RTtDQUNBLFlBQVksSUFBSSxDQUFDLHVCQUF1QixDQUFDLHFCQUFxQixDQUFDLENBQUM7Q0FDaEUsWUFBWSxPQUFPLEdBQUcsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO0NBQzdDLFlBQVksTUFBTSxxQkFBcUIsR0FBRyxNQUFNLE9BQU8sQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO0NBQ25GLFlBQVksTUFBTSxDQUFDLEtBQUssQ0FBQyx5Q0FBeUMsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO0NBQzNGO0NBQ0EsWUFBWSxJQUFJLENBQUMsdUJBQXVCLENBQUMscUJBQXFCLENBQUMsQ0FBQztDQUNoRTtDQUNBLFlBQVksSUFBSSxDQUFDLHdCQUF3QixHQUFHLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxxQkFBcUIsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO0NBQzFILFlBQVksTUFBTSxDQUFDLEtBQUssQ0FBQywyQ0FBMkMsRUFBRSxJQUFJLENBQUMsd0JBQXdCLENBQUMsQ0FBQztDQUNyRztDQUNBLFlBQVksSUFBSSxDQUFDLGlCQUFpQixDQUFDLEtBQUs7Q0FDeEMsZ0JBQWdCLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0NBQ3JFLFlBQVksSUFBSSxDQUFDLGlCQUFpQixDQUFDLEtBQUs7Q0FDeEMsZ0JBQWdCLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0NBQ3JFO0NBQ0EsWUFBWSxJQUFJLENBQUMsb0JBQW9CO0NBQ3JDLGdCQUFnQixJQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLHdCQUF3QixDQUFDLENBQUM7Q0FDM0U7Q0FDQSxZQUFZLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQztDQUNwRSxZQUFZLE1BQU0sQ0FBQyxLQUFLLENBQUMsNENBQTRDLEVBQUUsSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQUM7Q0FDbEc7Q0FDQSxZQUFZLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxNQUFNLE9BQU8sQ0FBQyx5QkFBeUIsRUFBRSxDQUFDO0NBQy9FLFlBQVksTUFBTSxDQUFDLEtBQUssQ0FBQywwQ0FBMEMsRUFBRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztDQUM3RjtDQUNBLFlBQVksSUFBSSxDQUFDLHdCQUF3QixDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0NBQ2xFLFlBQVksTUFBTSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0NBQzdDLFlBQVksSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7Q0FDaEMsWUFBWSxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7Q0FDNUIsU0FBUztDQUNULFFBQVEsT0FBTyxLQUFLLEVBQUU7Q0FDdEIsWUFBWSxJQUFJLE9BQU87Q0FDdkIsZ0JBQWdCLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQztDQUNoQyxZQUFZLE1BQU0sS0FBSyxDQUFDO0NBQ3hCLFNBQVM7Q0FDVCxLQUFLO0NBQ0w7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0EsSUFBSSxVQUFVLENBQUMsSUFBSSxFQUFFO0NBQ3JCLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPO0NBQ3pCLFlBQVksTUFBTSxJQUFJQSxNQUFRLENBQUMsaUJBQWlCLENBQUMsWUFBWSxDQUFDLENBQUM7Q0FDL0QsYUFBYSxJQUFJLElBQUksS0FBSyxPQUFPLElBQUksSUFBSSxLQUFLLE9BQU87Q0FDckQsWUFBWSxNQUFNLElBQUksU0FBUyxDQUFDLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQzFELFFBQVEsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLENBQUM7Q0FDNUMsS0FBSztDQUNMO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLElBQUksbUJBQW1CLENBQUMsRUFBRSxFQUFFLEVBQUUsYUFBYSxFQUFFLGFBQWEsRUFBRSxjQUFjLEVBQUUsY0FBYyxFQUFFLFVBQVUsRUFBRSxrQkFBa0IsRUFBRSxrQkFBa0IsRUFBRSxzQkFBc0IsRUFBRSxPQUFPLEdBQUcsRUFBRSxFQUFFLEVBQUU7Q0FDeEwsUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLHVCQUF1QixDQUFDLENBQUM7Q0FDOUMsUUFBUSxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztDQUNyQyxZQUFZLFNBQVMsRUFBRSxNQUFNO0NBQzdCLFlBQVksRUFBRSxFQUFFLEVBQUU7Q0FDbEIsWUFBWSxhQUFhLEVBQUUsYUFBYTtDQUN4QyxZQUFZLGFBQWEsRUFBRSxhQUFhO0NBQ3hDLFlBQVksY0FBYyxFQUFFLGNBQWM7Q0FDMUMsWUFBWSxjQUFjLEVBQUUsY0FBYztDQUMxQyxZQUFZLFVBQVUsRUFBRSxVQUFVO0NBQ2xDLFlBQVksa0JBQWtCLEVBQUUsa0JBQWtCO0NBQ2xELFlBQVksa0JBQWtCLEVBQUUsa0JBQWtCO0NBQ2xELFlBQVksc0JBQXNCLEVBQUUsc0JBQXNCO0NBQzFELFlBQVksT0FBTyxFQUFFLE9BQU87Q0FDNUIsU0FBUyxDQUFDLENBQUM7Q0FDWCxLQUFLO0NBQ0w7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0EsSUFBSSxtQkFBbUIsQ0FBQyxFQUFFLEVBQUUsRUFBRSxhQUFhLEVBQUUsYUFBYSxFQUFFLGNBQWMsRUFBRSxjQUFjLEVBQUUsVUFBVSxFQUFFLGtCQUFrQixFQUFFLGtCQUFrQixFQUFFLHNCQUFzQixFQUFFLE9BQU8sR0FBRyxFQUFFLEVBQUUsRUFBRTtDQUN4TCxRQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQztDQUM5QyxRQUFRLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDO0NBQ3JDLFlBQVksU0FBUyxFQUFFLE1BQU07Q0FDN0IsWUFBWSxFQUFFLEVBQUUsRUFBRTtDQUNsQixZQUFZLGFBQWEsRUFBRSxhQUFhO0NBQ3hDLFlBQVksYUFBYSxFQUFFLGFBQWE7Q0FDeEMsWUFBWSxjQUFjLEVBQUUsY0FBYztDQUMxQyxZQUFZLGNBQWMsRUFBRSxjQUFjO0NBQzFDLFlBQVksVUFBVSxFQUFFLFVBQVU7Q0FDbEMsWUFBWSxrQkFBa0IsRUFBRSxrQkFBa0I7Q0FDbEQsWUFBWSxrQkFBa0IsRUFBRSxrQkFBa0I7Q0FDbEQsWUFBWSxzQkFBc0IsRUFBRSxzQkFBc0I7Q0FDMUQsWUFBWSxPQUFPLEVBQUUsT0FBTztDQUM1QixTQUFTLENBQUMsQ0FBQztDQUNYLEtBQUs7Q0FDTCxJQUFJLGdCQUFnQixDQUFDLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRSxhQUFhLEVBQUUsYUFBYSxFQUFFLGNBQWMsRUFBRSxjQUFjLEVBQUUsVUFBVSxFQUFFLGtCQUFrQixFQUFFLGtCQUFrQixFQUFFLHNCQUFzQixFQUFFLE9BQU8sR0FBRyxFQUFFLEVBQUUsRUFBRTtDQUNoTSxRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTztDQUN6QixZQUFZLE1BQU0sSUFBSUEsTUFBUSxDQUFDLGlCQUFpQixDQUFDLFlBQVksQ0FBQyxDQUFDO0NBQy9ELGFBQWEsSUFBSSxPQUFPLEVBQUUsS0FBSyxRQUFRO0NBQ3ZDLFlBQVksTUFBTSxJQUFJLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQztDQUM5QyxhQUFhLElBQUksT0FBTyxhQUFhLEtBQUssUUFBUTtDQUNsRCxZQUFZLE1BQU0sSUFBSSxTQUFTLENBQUMsdUJBQXVCLENBQUMsQ0FBQztDQUN6RCxhQUFhLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQztDQUM5QyxZQUFZLE1BQU0sSUFBSSxTQUFTLENBQUMsdUJBQXVCLENBQUMsQ0FBQztDQUN6RCxhQUFhLElBQUksT0FBTyxjQUFjLEtBQUssUUFBUTtDQUNuRCxZQUFZLE1BQU0sSUFBSSxTQUFTLENBQUMsd0JBQXdCLENBQUMsQ0FBQztDQUMxRCxhQUFhLElBQUksY0FBYyxJQUFJLE9BQU8sY0FBYyxLQUFLLFFBQVE7Q0FDckUsWUFBWSxNQUFNLElBQUksU0FBUyxDQUFDLHNCQUFzQixDQUFDLENBQUM7Q0FDeEQsYUFBYSxJQUFJLE9BQU8sSUFBSSxPQUFPLE9BQU8sS0FBSyxRQUFRO0NBQ3ZELFlBQVksTUFBTSxJQUFJLFNBQVMsQ0FBQyxxQ0FBcUMsQ0FBQyxDQUFDO0NBQ3ZFO0NBQ0EsUUFBUSxNQUFNLFNBQVMsR0FBRyxJQUFJLFdBQVcsQ0FBQyxTQUFTLENBQUM7Q0FDcEQsWUFBWSxTQUFTO0NBQ3JCLFlBQVksRUFBRTtDQUNkLFlBQVksYUFBYTtDQUN6QixZQUFZLGFBQWE7Q0FDekIsWUFBWSxjQUFjO0NBQzFCLFlBQVksY0FBYztDQUMxQixZQUFZLFVBQVU7Q0FDdEIsWUFBWSxrQkFBa0I7Q0FDOUIsWUFBWSxrQkFBa0I7Q0FDOUIsWUFBWSxzQkFBc0I7Q0FDbEMsWUFBWSxPQUFPO0NBQ25CLFlBQVksY0FBYyxFQUFFLElBQUksQ0FBQyxlQUFlO0NBQ2hELFlBQVksdUJBQXVCLEVBQUUsSUFBSSxDQUFDLHdCQUF3QjtDQUNsRSxZQUFZLGdCQUFnQixFQUFFLElBQUksQ0FBQyxpQkFBaUI7Q0FDcEQsU0FBUyxDQUFDLENBQUM7Q0FDWCxRQUFRLE9BQU8sU0FBUyxDQUFDO0NBQ3pCLEtBQUs7Q0FDTCxDQUFDO0NBQ0QsY0FBYyxHQUFHLE1BQU07Ozs7Ozs7O0FDL1Z2QixDQUNBLFNBQVMsUUFBUSxDQUFDLENBQUMsRUFBRTtDQUNyQixJQUFJLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDdkUsQ0FBQztDQUNELE1BQU0sQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0NBQzlELFFBQVEsQ0FBQ2hCLFFBQW1CLENBQUMsQ0FBQztDQUM5QixRQUFRLENBQUN5QixXQUFzQixDQUFDLENBQUM7Q0FDakMsUUFBUSxDQUFDQyxVQUFxQixDQUFDLENBQUM7Q0FDaEMsUUFBUSxDQUFDQyxVQUFxQixDQUFDLENBQUM7Q0FDaEMsUUFBUSxDQUFDQyxjQUF5QixDQUFDLENBQUM7Q0FDcEMsUUFBUSxDQUFDQyxjQUF5QixDQUFDLENBQUM7Q0FDcEMsUUFBUSxDQUFDQyxrQkFBc0MsQ0FBQyxDQUFDO0NBQ2pELFFBQVEsQ0FBQ0MsTUFBbUIsQ0FBQzs7Ozs7O0FDWjdCLENBQ0EsTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7QUFDekI7Q0FDckMsY0FBYyxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUM7Q0FDakMsb0JBQW9CLEdBQUcsUUFBUSxDQUFDLFlBQVksQ0FBQztBQUNaO0NBQ2pDLGFBQWEsR0FBRyxLQUFLLENBQUM7Q0FDdEI7Q0FDQTtDQUNBO0NBQ0EsZUFBZSxHQUFHLFFBQVEsQ0FBQztDQUMzQjtDQUNBO0NBQ0E7QUFDdUQ7Q0FDdkQsNEJBQTRCLEdBQUdWLGdCQUFrQixDQUFDLEtBQUs7Ozs7Ozs7Ozs7Q0NidkQsSUFBSSxLQUFLLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUM7QUFDdEM7Q0FDQSxlQUFjLEdBQUcsU0FBUyxXQUFXLENBQUMsS0FBSyxFQUFFO0NBQzdDLENBQUMsSUFBSSxHQUFHLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztDQUM3QixDQUFDLElBQUksTUFBTSxHQUFHLEdBQUcsS0FBSyxvQkFBb0IsQ0FBQztDQUMzQyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7Q0FDZCxFQUFFLE1BQU0sR0FBRyxHQUFHLEtBQUssZ0JBQWdCO0NBQ25DLEdBQUcsS0FBSyxLQUFLLElBQUk7Q0FDakIsR0FBRyxPQUFPLEtBQUssS0FBSyxRQUFRO0NBQzVCLEdBQUcsT0FBTyxLQUFLLENBQUMsTUFBTSxLQUFLLFFBQVE7Q0FDbkMsR0FBRyxLQUFLLENBQUMsTUFBTSxJQUFJLENBQUM7Q0FDcEIsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxtQkFBbUIsQ0FBQztDQUNwRCxFQUFFO0NBQ0YsQ0FBQyxPQUFPLE1BQU0sQ0FBQztDQUNmLENBQUM7O0NDZEQsSUFBSSxRQUFRLENBQUM7Q0FDYixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRTtDQUNsQjtDQUNBLENBQUMsSUFBSSxHQUFHLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUM7Q0FDM0MsQ0FBQyxJQUFJVyxPQUFLLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUM7Q0FDdkMsQ0FBQyxJQUFJLE1BQU0sR0FBR2hDLFdBQXdCLENBQUM7Q0FDdkMsQ0FBQyxJQUFJLFlBQVksR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLG9CQUFvQixDQUFDO0NBQzFELENBQUMsSUFBSSxjQUFjLEdBQUcsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0NBQ3pFLENBQUMsSUFBSSxlQUFlLEdBQUcsWUFBWSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsRUFBRSxXQUFXLENBQUMsQ0FBQztDQUN0RSxDQUFDLElBQUksU0FBUyxHQUFHO0NBQ2pCLEVBQUUsVUFBVTtDQUNaLEVBQUUsZ0JBQWdCO0NBQ2xCLEVBQUUsU0FBUztDQUNYLEVBQUUsZ0JBQWdCO0NBQ2xCLEVBQUUsZUFBZTtDQUNqQixFQUFFLHNCQUFzQjtDQUN4QixFQUFFLGFBQWE7Q0FDZixFQUFFLENBQUM7Q0FDSCxDQUFDLElBQUksMEJBQTBCLEdBQUcsVUFBVSxDQUFDLEVBQUU7Q0FDL0MsRUFBRSxJQUFJLElBQUksR0FBRyxDQUFDLENBQUMsV0FBVyxDQUFDO0NBQzNCLEVBQUUsT0FBTyxJQUFJLElBQUksSUFBSSxDQUFDLFNBQVMsS0FBSyxDQUFDLENBQUM7Q0FDdEMsRUFBRSxDQUFDO0NBQ0gsQ0FBQyxJQUFJLFlBQVksR0FBRztDQUNwQixFQUFFLGlCQUFpQixFQUFFLElBQUk7Q0FDekIsRUFBRSxRQUFRLEVBQUUsSUFBSTtDQUNoQixFQUFFLFNBQVMsRUFBRSxJQUFJO0NBQ2pCLEVBQUUsTUFBTSxFQUFFLElBQUk7Q0FDZCxFQUFFLGFBQWEsRUFBRSxJQUFJO0NBQ3JCLEVBQUUsT0FBTyxFQUFFLElBQUk7Q0FDZixFQUFFLFlBQVksRUFBRSxJQUFJO0NBQ3BCLEVBQUUsV0FBVyxFQUFFLElBQUk7Q0FDbkIsRUFBRSxzQkFBc0IsRUFBRSxJQUFJO0NBQzlCLEVBQUUscUJBQXFCLEVBQUUsSUFBSTtDQUM3QixFQUFFLFlBQVksRUFBRSxJQUFJO0NBQ3BCLEVBQUUsV0FBVyxFQUFFLElBQUk7Q0FDbkIsRUFBRSxZQUFZLEVBQUUsSUFBSTtDQUNwQixFQUFFLFlBQVksRUFBRSxJQUFJO0NBQ3BCLEVBQUUsT0FBTyxFQUFFLElBQUk7Q0FDZixFQUFFLFdBQVcsRUFBRSxJQUFJO0NBQ25CLEVBQUUsVUFBVSxFQUFFLElBQUk7Q0FDbEIsRUFBRSxRQUFRLEVBQUUsSUFBSTtDQUNoQixFQUFFLFFBQVEsRUFBRSxJQUFJO0NBQ2hCLEVBQUUsS0FBSyxFQUFFLElBQUk7Q0FDYixFQUFFLGdCQUFnQixFQUFFLElBQUk7Q0FDeEIsRUFBRSxrQkFBa0IsRUFBRSxJQUFJO0NBQzFCLEVBQUUsT0FBTyxFQUFFLElBQUk7Q0FDZixFQUFFLENBQUM7Q0FDSCxDQUFDLElBQUksd0JBQXdCLElBQUksWUFBWTtDQUM3QztDQUNBLEVBQUUsSUFBSSxPQUFPLE1BQU0sS0FBSyxXQUFXLEVBQUUsRUFBRSxPQUFPLEtBQUssQ0FBQyxFQUFFO0NBQ3RELEVBQUUsS0FBSyxJQUFJLENBQUMsSUFBSSxNQUFNLEVBQUU7Q0FDeEIsR0FBRyxJQUFJO0NBQ1AsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxJQUFJLE9BQU8sTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVEsRUFBRTtDQUM5RyxLQUFLLElBQUk7Q0FDVCxNQUFNLDBCQUEwQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQzVDLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRTtDQUNqQixNQUFNLE9BQU8sSUFBSSxDQUFDO0NBQ2xCLE1BQU07Q0FDTixLQUFLO0NBQ0wsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFO0NBQ2YsSUFBSSxPQUFPLElBQUksQ0FBQztDQUNoQixJQUFJO0NBQ0osR0FBRztDQUNILEVBQUUsT0FBTyxLQUFLLENBQUM7Q0FDZixFQUFFLEVBQUUsQ0FBQyxDQUFDO0NBQ04sQ0FBQyxJQUFJLG9DQUFvQyxHQUFHLFVBQVUsQ0FBQyxFQUFFO0NBQ3pEO0NBQ0EsRUFBRSxJQUFJLE9BQU8sTUFBTSxLQUFLLFdBQVcsSUFBSSxDQUFDLHdCQUF3QixFQUFFO0NBQ2xFLEdBQUcsT0FBTywwQkFBMEIsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUN4QyxHQUFHO0NBQ0gsRUFBRSxJQUFJO0NBQ04sR0FBRyxPQUFPLDBCQUEwQixDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ3hDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRTtDQUNkLEdBQUcsT0FBTyxLQUFLLENBQUM7Q0FDaEIsR0FBRztDQUNILEVBQUUsQ0FBQztBQUNIO0NBQ0EsQ0FBQyxRQUFRLEdBQUcsU0FBUyxJQUFJLENBQUMsTUFBTSxFQUFFO0NBQ2xDLEVBQUUsSUFBSSxRQUFRLEdBQUcsTUFBTSxLQUFLLElBQUksSUFBSSxPQUFPLE1BQU0sS0FBSyxRQUFRLENBQUM7Q0FDL0QsRUFBRSxJQUFJLFVBQVUsR0FBR2dDLE9BQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssbUJBQW1CLENBQUM7Q0FDOUQsRUFBRSxJQUFJLFdBQVcsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7Q0FDbkMsRUFBRSxJQUFJLFFBQVEsR0FBRyxRQUFRLElBQUlBLE9BQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssaUJBQWlCLENBQUM7Q0FDdEUsRUFBRSxJQUFJLE9BQU8sR0FBRyxFQUFFLENBQUM7QUFDbkI7Q0FDQSxFQUFFLElBQUksQ0FBQyxRQUFRLElBQUksQ0FBQyxVQUFVLElBQUksQ0FBQyxXQUFXLEVBQUU7Q0FDaEQsR0FBRyxNQUFNLElBQUksU0FBUyxDQUFDLG9DQUFvQyxDQUFDLENBQUM7Q0FDN0QsR0FBRztBQUNIO0NBQ0EsRUFBRSxJQUFJLFNBQVMsR0FBRyxlQUFlLElBQUksVUFBVSxDQUFDO0NBQ2hELEVBQUUsSUFBSSxRQUFRLElBQUksTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsRUFBRTtDQUM3RCxHQUFHLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFO0NBQzNDLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUM1QixJQUFJO0NBQ0osR0FBRztBQUNIO0NBQ0EsRUFBRSxJQUFJLFdBQVcsSUFBSSxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtDQUN4QyxHQUFHLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFO0NBQzNDLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUM1QixJQUFJO0NBQ0osR0FBRyxNQUFNO0NBQ1QsR0FBRyxLQUFLLElBQUksSUFBSSxJQUFJLE1BQU0sRUFBRTtDQUM1QixJQUFJLElBQUksRUFBRSxTQUFTLElBQUksSUFBSSxLQUFLLFdBQVcsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxFQUFFO0NBQ3hFLEtBQUssT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztDQUNoQyxLQUFLO0NBQ0wsSUFBSTtDQUNKLEdBQUc7QUFDSDtDQUNBLEVBQUUsSUFBSSxjQUFjLEVBQUU7Q0FDdEIsR0FBRyxJQUFJLGVBQWUsR0FBRyxvQ0FBb0MsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN0RTtDQUNBLEdBQUcsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUU7Q0FDOUMsSUFBSSxJQUFJLEVBQUUsZUFBZSxJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsS0FBSyxhQUFhLENBQUMsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtDQUNoRyxLQUFLLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDaEMsS0FBSztDQUNMLElBQUk7Q0FDSixHQUFHO0NBQ0gsRUFBRSxPQUFPLE9BQU8sQ0FBQztDQUNqQixFQUFFLENBQUM7Q0FDSCxDQUFDO0NBQ0Qsa0JBQWMsR0FBRyxRQUFROztDQ3ZIekIsSUFBSSxLQUFLLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUM7QUFDSTtBQUN0QztDQUNBLElBQUksUUFBUSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7Q0FDM0IsSUFBSUMsVUFBUSxHQUFHLFFBQVEsR0FBRyxTQUFTLElBQUksQ0FBQyxDQUFDLEVBQUUsRUFBRSxPQUFPLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUdqQyxjQUEyQixDQUFDO0FBQ2pHO0NBQ0EsSUFBSSxZQUFZLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQztBQUMvQjtBQUNBaUMsV0FBUSxDQUFDLElBQUksR0FBRyxTQUFTLGNBQWMsR0FBRztDQUMxQyxDQUFDLElBQUksTUFBTSxDQUFDLElBQUksRUFBRTtDQUNsQixFQUFFLElBQUksc0JBQXNCLElBQUksWUFBWTtDQUM1QztDQUNBLEdBQUcsSUFBSSxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztDQUNyQyxHQUFHLE9BQU8sSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssU0FBUyxDQUFDLE1BQU0sQ0FBQztDQUNuRCxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDWCxFQUFFLElBQUksQ0FBQyxzQkFBc0IsRUFBRTtDQUMvQixHQUFHLE1BQU0sQ0FBQyxJQUFJLEdBQUcsU0FBUyxJQUFJLENBQUMsTUFBTSxFQUFFO0NBQ3ZDLElBQUksSUFBSUMsV0FBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFO0NBQ3hCLEtBQUssT0FBTyxZQUFZLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0NBQzdDLEtBQUs7Q0FDTCxJQUFJLE9BQU8sWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0NBQ2hDLElBQUksQ0FBQztDQUNMLEdBQUc7Q0FDSCxFQUFFLE1BQU07Q0FDUixFQUFFLE1BQU0sQ0FBQyxJQUFJLEdBQUdELFVBQVEsQ0FBQztDQUN6QixFQUFFO0NBQ0YsQ0FBQyxPQUFPLE1BQU0sQ0FBQyxJQUFJLElBQUlBLFVBQVEsQ0FBQztDQUNoQyxDQUFDLENBQUM7QUFDRjtDQUNBLGNBQWMsR0FBR0EsVUFBUTs7Q0M3QnpCLElBQUksY0FBYyxHQUFHLE9BQU8sTUFBTSxLQUFLLFVBQVUsSUFBSSxPQUFPLE1BQU0sQ0FBQyxXQUFXLEtBQUssUUFBUSxDQUFDO0NBQzVGLElBQUlELE9BQUssR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQztBQUN0QztDQUNBLElBQUksbUJBQW1CLEdBQUcsU0FBUyxXQUFXLENBQUMsS0FBSyxFQUFFO0NBQ3RELENBQUMsSUFBSSxjQUFjLElBQUksS0FBSyxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsSUFBSSxNQUFNLENBQUMsV0FBVyxJQUFJLEtBQUssRUFBRTtDQUMxRixFQUFFLE9BQU8sS0FBSyxDQUFDO0NBQ2YsRUFBRTtDQUNGLENBQUMsT0FBT0EsT0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxvQkFBb0IsQ0FBQztDQUNuRCxDQUFDLENBQUM7QUFDRjtDQUNBLElBQUksaUJBQWlCLEdBQUcsU0FBUyxXQUFXLENBQUMsS0FBSyxFQUFFO0NBQ3BELENBQUMsSUFBSSxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsRUFBRTtDQUNqQyxFQUFFLE9BQU8sSUFBSSxDQUFDO0NBQ2QsRUFBRTtDQUNGLENBQUMsT0FBTyxLQUFLLEtBQUssSUFBSTtDQUN0QixFQUFFLE9BQU8sS0FBSyxLQUFLLFFBQVE7Q0FDM0IsRUFBRSxPQUFPLEtBQUssQ0FBQyxNQUFNLEtBQUssUUFBUTtDQUNsQyxFQUFFLEtBQUssQ0FBQyxNQUFNLElBQUksQ0FBQztDQUNuQixFQUFFQSxPQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLGdCQUFnQjtDQUN4QyxFQUFFQSxPQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxtQkFBbUIsQ0FBQztDQUNuRCxDQUFDLENBQUM7QUFDRjtDQUNBLElBQUkseUJBQXlCLElBQUksWUFBWTtDQUM3QyxDQUFDLE9BQU8sbUJBQW1CLENBQUMsU0FBUyxDQUFDLENBQUM7Q0FDdkMsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNMO0NBQ0EsbUJBQW1CLENBQUMsaUJBQWlCLEdBQUcsaUJBQWlCLENBQUM7QUFDMUQ7Q0FDQSxpQkFBYyxHQUFHLHlCQUF5QixHQUFHLG1CQUFtQixHQUFHLGlCQUFpQjs7Q0MzQnBGLElBQUksVUFBVSxHQUFHLE9BQU8sTUFBTSxLQUFLLFVBQVUsSUFBSSxPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxRQUFRLENBQUM7QUFDbkY7Q0FDQSxJQUFJQSxPQUFLLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUM7Q0FDdEMsSUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUM7Q0FDcEMsSUFBSSxrQkFBa0IsR0FBRyxNQUFNLENBQUMsY0FBYyxDQUFDO0FBQy9DO0NBQ0EsSUFBSSxVQUFVLEdBQUcsVUFBVSxFQUFFLEVBQUU7Q0FDL0IsQ0FBQyxPQUFPLE9BQU8sRUFBRSxLQUFLLFVBQVUsSUFBSUEsT0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxtQkFBbUIsQ0FBQztDQUMzRSxDQUFDLENBQUM7QUFDRjtDQUNBLElBQUksK0JBQStCLEdBQUcsWUFBWTtDQUNsRCxDQUFDLElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQztDQUNkLENBQUMsSUFBSTtDQUNMLEVBQUUsa0JBQWtCLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7Q0FDbEU7Q0FDQSxFQUFFLEtBQUssSUFBSSxDQUFDLElBQUksR0FBRyxFQUFFO0NBQ3JCLEdBQUcsT0FBTyxLQUFLLENBQUM7Q0FDaEIsR0FBRztDQUNILEVBQUUsT0FBTyxHQUFHLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQztDQUN2QixFQUFFLENBQUMsT0FBTyxDQUFDLEVBQUU7Q0FDYixFQUFFLE9BQU8sS0FBSyxDQUFDO0NBQ2YsRUFBRTtDQUNGLENBQUMsQ0FBQztDQUNGLElBQUksbUJBQW1CLEdBQUcsa0JBQWtCLElBQUksK0JBQStCLEVBQUUsQ0FBQztBQUNsRjtDQUNBLElBQUksY0FBYyxHQUFHLFVBQVUsTUFBTSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFO0NBQy9ELENBQUMsSUFBSSxJQUFJLElBQUksTUFBTSxLQUFLLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsRUFBRTtDQUNqRSxFQUFFLE9BQU87Q0FDVCxFQUFFO0NBQ0YsQ0FBQyxJQUFJLG1CQUFtQixFQUFFO0NBQzFCLEVBQUUsa0JBQWtCLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRTtDQUNuQyxHQUFHLFlBQVksRUFBRSxJQUFJO0NBQ3JCLEdBQUcsVUFBVSxFQUFFLEtBQUs7Q0FDcEIsR0FBRyxLQUFLLEVBQUUsS0FBSztDQUNmLEdBQUcsUUFBUSxFQUFFLElBQUk7Q0FDakIsR0FBRyxDQUFDLENBQUM7Q0FDTCxFQUFFLE1BQU07Q0FDUixFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUM7Q0FDdkIsRUFBRTtDQUNGLENBQUMsQ0FBQztBQUNGO0NBQ0EsSUFBSSxnQkFBZ0IsR0FBRyxVQUFVLE1BQU0sRUFBRSxHQUFHLEVBQUU7Q0FDOUMsQ0FBQyxJQUFJLFVBQVUsR0FBRyxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO0NBQzNELENBQUMsSUFBSSxLQUFLLEdBQUdHLFVBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUN2QixDQUFDLElBQUksVUFBVSxFQUFFO0NBQ2pCLEVBQUUsS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0NBQ2hFLEVBQUU7Q0FDRixDQUFDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUU7Q0FDM0MsRUFBRSxjQUFjLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDeEUsRUFBRTtDQUNGLENBQUMsQ0FBQztBQUNGO0NBQ0EsZ0JBQWdCLENBQUMsbUJBQW1CLEdBQUcsQ0FBQyxDQUFDLG1CQUFtQixDQUFDO0FBQzdEO0NBQ0Esc0JBQWMsR0FBRyxnQkFBZ0I7O0NDdkRqQztBQUNBO0NBQ0EsSUFBSSxhQUFhLEdBQUcsaURBQWlELENBQUM7Q0FDdEUsSUFBSUMsT0FBSyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDO0NBQ2xDLElBQUlKLE9BQUssR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQztDQUN0QyxJQUFJLFFBQVEsR0FBRyxtQkFBbUIsQ0FBQztBQUNuQztDQUNBLG9CQUFjLEdBQUcsU0FBUyxJQUFJLENBQUMsSUFBSSxFQUFFO0NBQ3JDLElBQUksSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDO0NBQ3RCLElBQUksSUFBSSxPQUFPLE1BQU0sS0FBSyxVQUFVLElBQUlBLE9BQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssUUFBUSxFQUFFO0NBQ3pFLFFBQVEsTUFBTSxJQUFJLFNBQVMsQ0FBQyxhQUFhLEdBQUcsTUFBTSxDQUFDLENBQUM7Q0FDcEQsS0FBSztDQUNMLElBQUksSUFBSSxJQUFJLEdBQUdJLE9BQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3hDO0NBQ0EsSUFBSSxJQUFJLEtBQUssQ0FBQztDQUNkLElBQUksSUFBSSxNQUFNLEdBQUcsWUFBWTtDQUM3QixRQUFRLElBQUksSUFBSSxZQUFZLEtBQUssRUFBRTtDQUNuQyxZQUFZLElBQUksTUFBTSxHQUFHLE1BQU0sQ0FBQyxLQUFLO0NBQ3JDLGdCQUFnQixJQUFJO0NBQ3BCLGdCQUFnQixJQUFJLENBQUMsTUFBTSxDQUFDQSxPQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0NBQ2xELGFBQWEsQ0FBQztDQUNkLFlBQVksSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssTUFBTSxFQUFFO0NBQzNDLGdCQUFnQixPQUFPLE1BQU0sQ0FBQztDQUM5QixhQUFhO0NBQ2IsWUFBWSxPQUFPLElBQUksQ0FBQztDQUN4QixTQUFTLE1BQU07Q0FDZixZQUFZLE9BQU8sTUFBTSxDQUFDLEtBQUs7Q0FDL0IsZ0JBQWdCLElBQUk7Q0FDcEIsZ0JBQWdCLElBQUksQ0FBQyxNQUFNLENBQUNBLE9BQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7Q0FDbEQsYUFBYSxDQUFDO0NBQ2QsU0FBUztDQUNULEtBQUssQ0FBQztBQUNOO0NBQ0EsSUFBSSxJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztDQUMvRCxJQUFJLElBQUksU0FBUyxHQUFHLEVBQUUsQ0FBQztDQUN2QixJQUFJLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxXQUFXLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Q0FDMUMsUUFBUSxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQztDQUNoQyxLQUFLO0FBQ0w7Q0FDQSxJQUFJLEtBQUssR0FBRyxRQUFRLENBQUMsUUFBUSxFQUFFLG1CQUFtQixHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsMkNBQTJDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNoSTtDQUNBLElBQUksSUFBSSxNQUFNLENBQUMsU0FBUyxFQUFFO0NBQzFCLFFBQVEsSUFBSSxLQUFLLEdBQUcsU0FBUyxLQUFLLEdBQUcsRUFBRSxDQUFDO0NBQ3hDLFFBQVEsS0FBSyxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDO0NBQzNDLFFBQVEsS0FBSyxDQUFDLFNBQVMsR0FBRyxJQUFJLEtBQUssRUFBRSxDQUFDO0NBQ3RDLFFBQVEsS0FBSyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7Q0FDL0IsS0FBSztBQUNMO0NBQ0EsSUFBSSxPQUFPLEtBQUssQ0FBQztDQUNqQixDQUFDOztDQy9DRCxnQkFBYyxHQUFHLFFBQVEsQ0FBQyxTQUFTLENBQUMsSUFBSSxJQUFJQyxnQkFBYzs7Q0NGMUQ7Q0FDQSxTQUFjLEdBQUcsU0FBUyxVQUFVLEdBQUc7Q0FDdkMsQ0FBQyxJQUFJLE9BQU8sTUFBTSxLQUFLLFVBQVUsSUFBSSxPQUFPLE1BQU0sQ0FBQyxxQkFBcUIsS0FBSyxVQUFVLEVBQUUsRUFBRSxPQUFPLEtBQUssQ0FBQyxFQUFFO0NBQzFHLENBQUMsSUFBSSxPQUFPLE1BQU0sQ0FBQyxRQUFRLEtBQUssUUFBUSxFQUFFLEVBQUUsT0FBTyxJQUFJLENBQUMsRUFBRTtBQUMxRDtDQUNBLENBQUMsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDO0NBQ2QsQ0FBQyxJQUFJLEdBQUcsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7Q0FDMUIsQ0FBQyxJQUFJLE1BQU0sR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDMUIsQ0FBQyxJQUFJLE9BQU8sR0FBRyxLQUFLLFFBQVEsRUFBRSxFQUFFLE9BQU8sS0FBSyxDQUFDLEVBQUU7QUFDL0M7Q0FDQSxDQUFDLElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLGlCQUFpQixFQUFFLEVBQUUsT0FBTyxLQUFLLENBQUMsRUFBRTtDQUNqRixDQUFDLElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLGlCQUFpQixFQUFFLEVBQUUsT0FBTyxLQUFLLENBQUMsRUFBRTtBQUNwRjtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0FBQ0E7Q0FDQTtDQUNBO0FBQ0E7Q0FDQSxDQUFDLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQztDQUNqQixDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUM7Q0FDbkIsQ0FBQyxLQUFLLEdBQUcsSUFBSSxHQUFHLEVBQUUsRUFBRSxPQUFPLEtBQUssQ0FBQyxFQUFFO0NBQ25DLENBQUMsSUFBSSxPQUFPLE1BQU0sQ0FBQyxJQUFJLEtBQUssVUFBVSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRSxFQUFFLE9BQU8sS0FBSyxDQUFDLEVBQUU7QUFDMUY7Q0FDQSxDQUFDLElBQUksT0FBTyxNQUFNLENBQUMsbUJBQW1CLEtBQUssVUFBVSxJQUFJLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFLEVBQUUsT0FBTyxLQUFLLENBQUMsRUFBRTtBQUN4SDtDQUNBLENBQUMsSUFBSSxJQUFJLEdBQUcsTUFBTSxDQUFDLHFCQUFxQixDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQzlDLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxFQUFFLEVBQUUsT0FBTyxLQUFLLENBQUMsRUFBRTtBQUM1RDtDQUNBLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsRUFBRSxFQUFFLE9BQU8sS0FBSyxDQUFDLEVBQUU7QUFDN0U7Q0FDQSxDQUFDLElBQUksT0FBTyxNQUFNLENBQUMsd0JBQXdCLEtBQUssVUFBVSxFQUFFO0NBQzVELEVBQUUsSUFBSSxVQUFVLEdBQUcsTUFBTSxDQUFDLHdCQUF3QixDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztDQUM3RCxFQUFFLElBQUksVUFBVSxDQUFDLEtBQUssS0FBSyxNQUFNLElBQUksVUFBVSxDQUFDLFVBQVUsS0FBSyxJQUFJLEVBQUUsRUFBRSxPQUFPLEtBQUssQ0FBQyxFQUFFO0NBQ3RGLEVBQUU7QUFDRjtDQUNBLENBQUMsT0FBTyxJQUFJLENBQUM7Q0FDYixDQUFDOztDQ3ZDRCxJQUFJLFVBQVUsR0FBR0MsY0FBTSxDQUFDLE1BQU0sQ0FBQztBQUNRO0FBQ3ZDO0NBQ0EsZ0JBQWMsR0FBRyxTQUFTLGdCQUFnQixHQUFHO0NBQzdDLENBQUMsSUFBSSxPQUFPLFVBQVUsS0FBSyxVQUFVLEVBQUUsRUFBRSxPQUFPLEtBQUssQ0FBQyxFQUFFO0NBQ3hELENBQUMsSUFBSSxPQUFPLE1BQU0sS0FBSyxVQUFVLEVBQUUsRUFBRSxPQUFPLEtBQUssQ0FBQyxFQUFFO0NBQ3BELENBQUMsSUFBSSxPQUFPLFVBQVUsQ0FBQyxLQUFLLENBQUMsS0FBSyxRQUFRLEVBQUUsRUFBRSxPQUFPLEtBQUssQ0FBQyxFQUFFO0NBQzdELENBQUMsSUFBSSxPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxRQUFRLEVBQUUsRUFBRSxPQUFPLEtBQUssQ0FBQyxFQUFFO0FBQ3pEO0NBQ0EsQ0FBQyxPQUFPQyxLQUFhLEVBQUUsQ0FBQztDQUN4QixDQUFDOztDQ1ZEO0NBQ0E7Q0FDQTtDQUNBO0FBQ0E7Q0FDQSxJQUFJQyxXQUFTLENBQUM7QUFDZDtDQUNBLElBQUksVUFBVSxHQUFHLFNBQVMsQ0FBQztBQUMzQjtDQUNBLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQztDQUM1QyxJQUFJLEtBQUssRUFBRTtDQUNYLENBQUMsSUFBSTtDQUNMLEVBQUUsS0FBSyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztDQUNoQixFQUFFLENBQUMsT0FBTyxDQUFDLEVBQUU7Q0FDYixFQUFFLEtBQUssR0FBRyxJQUFJLENBQUM7Q0FDZixFQUFFO0NBQ0YsQ0FBQztBQUNEO0NBQ0EsSUFBSSxjQUFjLEdBQUcsWUFBWSxFQUFFLE1BQU0sSUFBSSxVQUFVLEVBQUUsQ0FBQyxFQUFFLENBQUM7Q0FDN0QsSUFBSSxjQUFjLEdBQUcsS0FBSztDQUMxQixJQUFJLFlBQVk7Q0FDaEIsRUFBRSxJQUFJO0NBQ047Q0FDQSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUM7Q0FDcEIsR0FBRyxPQUFPLGNBQWMsQ0FBQztDQUN6QixHQUFHLENBQUMsT0FBTyxZQUFZLEVBQUU7Q0FDekIsR0FBRyxJQUFJO0NBQ1A7Q0FDQSxJQUFJLE9BQU8sS0FBSyxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQyxHQUFHLENBQUM7Q0FDMUMsSUFBSSxDQUFDLE9BQU8sVUFBVSxFQUFFO0NBQ3hCLElBQUksT0FBTyxjQUFjLENBQUM7Q0FDMUIsSUFBSTtDQUNKLEdBQUc7Q0FDSCxFQUFFLEVBQUU7Q0FDSixHQUFHLGNBQWMsQ0FBQztBQUNsQjtDQUNBLElBQUlDLFlBQVUsR0FBR3pDLFlBQXNCLEVBQUUsQ0FBQztBQUMxQztDQUNBLElBQUksUUFBUSxHQUFHLE1BQU0sQ0FBQyxjQUFjLElBQUksVUFBVSxDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDO0FBQzdFLENBRUEsSUFBSSxpQkFBaUIsR0FBRyxDQUFrQ3dDLFdBQVMsQ0FBQztBQUNwRSxDQUNBLElBQUksYUFBYSxHQUFHLENBQWdDQSxXQUFTLENBQUM7QUFDOUQsQ0FDQSxJQUFJLGdCQUFnQixHQUFHLENBQWdDQSxXQUFTLENBQUM7QUFDakUsQUFDQTtDQUNBLElBQUksVUFBVSxHQUFHLE9BQU8sVUFBVSxLQUFLLFdBQVcsR0FBR0EsV0FBUyxHQUFHLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUN0RjtDQUNBLElBQUksVUFBVSxHQUFHO0NBQ2pCLENBQUMsU0FBUyxFQUFFLEtBQUs7Q0FDakIsQ0FBQyxlQUFlLEVBQUUsT0FBTyxXQUFXLEtBQUssV0FBVyxHQUFHQSxXQUFTLEdBQUcsV0FBVztDQUM5RSxDQUFDLHdCQUF3QixFQUFFLE9BQU8sV0FBVyxLQUFLLFdBQVcsR0FBR0EsV0FBUyxHQUFHLFdBQVcsQ0FBQyxTQUFTO0NBQ2pHLENBQUMsMEJBQTBCLEVBQUVDLFlBQVUsR0FBRyxRQUFRLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLEdBQUdELFdBQVM7Q0FDckYsQ0FBQyxrQkFBa0IsRUFBRSxLQUFLLENBQUMsU0FBUztDQUNwQyxDQUFDLHNCQUFzQixFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsT0FBTztDQUNoRCxDQUFDLHNCQUFzQixFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsT0FBTztDQUNoRCxDQUFDLG1CQUFtQixFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSTtDQUMxQyxDQUFDLHFCQUFxQixFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsTUFBTTtDQUM5QyxDQUFDLGtDQUFrQyxFQUFFQSxXQUFTO0NBQzlDLENBQUMsaUJBQWlCLEVBQUUsYUFBYTtDQUNqQyxDQUFDLDBCQUEwQixFQUFFLENBQTBDQSxXQUFTO0NBQ2hGLENBQUMsa0JBQWtCLEVBQUUsQ0FBd0NBLFdBQVM7Q0FDdEUsQ0FBQywwQkFBMEIsRUFBRSxnQkFBZ0I7Q0FDN0MsQ0FBQywyQkFBMkIsRUFBRSxDQUFnREEsV0FBUztDQUN2RixDQUFDLDBCQUEwQixFQUFFLENBQW9HQSxXQUFTO0NBQzFJLENBQUMsV0FBVyxFQUFFLE9BQU8sT0FBTyxLQUFLLFdBQVcsR0FBR0EsV0FBUyxHQUFHLE9BQU87Q0FDbEUsQ0FBQyxXQUFXLEVBQUUsT0FBTztDQUNyQixDQUFDLG9CQUFvQixFQUFFLE9BQU8sQ0FBQyxTQUFTO0NBQ3hDLENBQUMsWUFBWSxFQUFFLE9BQU8sUUFBUSxLQUFLLFdBQVcsR0FBR0EsV0FBUyxHQUFHLFFBQVE7Q0FDckUsQ0FBQyxxQkFBcUIsRUFBRSxPQUFPLFFBQVEsS0FBSyxXQUFXLEdBQUdBLFdBQVMsR0FBRyxRQUFRLENBQUMsU0FBUztDQUN4RixDQUFDLFFBQVEsRUFBRSxJQUFJO0NBQ2YsQ0FBQyxpQkFBaUIsRUFBRSxJQUFJLENBQUMsU0FBUztDQUNsQyxDQUFDLGFBQWEsRUFBRSxTQUFTO0NBQ3pCLENBQUMsc0JBQXNCLEVBQUUsa0JBQWtCO0NBQzNDLENBQUMsYUFBYSxFQUFFLFNBQVM7Q0FDekIsQ0FBQyxzQkFBc0IsRUFBRSxrQkFBa0I7Q0FDM0MsQ0FBQyxTQUFTLEVBQUUsS0FBSztDQUNqQixDQUFDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxTQUFTO0NBQ3BDLENBQUMsUUFBUSxFQUFFLElBQUk7Q0FDZixDQUFDLGFBQWEsRUFBRSxTQUFTO0NBQ3pCLENBQUMsc0JBQXNCLEVBQUUsU0FBUyxDQUFDLFNBQVM7Q0FDNUMsQ0FBQyxnQkFBZ0IsRUFBRSxPQUFPLFlBQVksS0FBSyxXQUFXLEdBQUdBLFdBQVMsR0FBRyxZQUFZO0NBQ2pGLENBQUMseUJBQXlCLEVBQUUsT0FBTyxZQUFZLEtBQUssV0FBVyxHQUFHQSxXQUFTLEdBQUcsWUFBWSxDQUFDLFNBQVM7Q0FDcEcsQ0FBQyxnQkFBZ0IsRUFBRSxPQUFPLFlBQVksS0FBSyxXQUFXLEdBQUdBLFdBQVMsR0FBRyxZQUFZO0NBQ2pGLENBQUMseUJBQXlCLEVBQUUsT0FBTyxZQUFZLEtBQUssV0FBVyxHQUFHQSxXQUFTLEdBQUcsWUFBWSxDQUFDLFNBQVM7Q0FDcEcsQ0FBQyxZQUFZLEVBQUUsUUFBUTtDQUN2QixDQUFDLHFCQUFxQixFQUFFLFFBQVEsQ0FBQyxTQUFTO0NBQzFDLENBQUMsYUFBYSxFQUFFLENBQW9DQSxXQUFTO0NBQzdELENBQUMscUJBQXFCLEVBQUUsaUJBQWlCO0NBQ3pDLENBQUMsc0JBQXNCLEVBQUUsQ0FBa0RBLFdBQVM7Q0FDcEYsQ0FBQyxhQUFhLEVBQUUsT0FBTyxTQUFTLEtBQUssV0FBVyxHQUFHQSxXQUFTLEdBQUcsU0FBUztDQUN4RSxDQUFDLHNCQUFzQixFQUFFLE9BQU8sU0FBUyxLQUFLLFdBQVcsR0FBR0EsV0FBUyxHQUFHLFNBQVMsQ0FBQyxTQUFTO0NBQzNGLENBQUMsY0FBYyxFQUFFLE9BQU8sVUFBVSxLQUFLLFdBQVcsR0FBR0EsV0FBUyxHQUFHLFVBQVU7Q0FDM0UsQ0FBQyx1QkFBdUIsRUFBRSxPQUFPLFVBQVUsS0FBSyxXQUFXLEdBQUdBLFdBQVMsR0FBRyxTQUFTLENBQUMsU0FBUztDQUM3RixDQUFDLGNBQWMsRUFBRSxPQUFPLFVBQVUsS0FBSyxXQUFXLEdBQUdBLFdBQVMsR0FBRyxVQUFVO0NBQzNFLENBQUMsdUJBQXVCLEVBQUUsT0FBTyxVQUFVLEtBQUssV0FBVyxHQUFHQSxXQUFTLEdBQUcsVUFBVSxDQUFDLFNBQVM7Q0FDOUYsQ0FBQyxZQUFZLEVBQUUsUUFBUTtDQUN2QixDQUFDLFNBQVMsRUFBRSxLQUFLO0NBQ2pCLENBQUMscUJBQXFCLEVBQUVDLFlBQVUsR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUdELFdBQVM7Q0FDMUYsQ0FBQyxRQUFRLEVBQUUsT0FBTyxJQUFJLEtBQUssUUFBUSxHQUFHLElBQUksR0FBR0EsV0FBUztDQUN0RCxDQUFDLGFBQWEsRUFBRSxPQUFPLElBQUksS0FBSyxRQUFRLEdBQUcsSUFBSSxDQUFDLEtBQUssR0FBR0EsV0FBUztDQUNqRSxDQUFDLE9BQU8sRUFBRSxPQUFPLEdBQUcsS0FBSyxXQUFXLEdBQUdBLFdBQVMsR0FBRyxHQUFHO0NBQ3RELENBQUMsd0JBQXdCLEVBQUUsT0FBTyxHQUFHLEtBQUssV0FBVyxJQUFJLENBQUNDLFlBQVUsR0FBR0QsV0FBUyxHQUFHLFFBQVEsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO0NBQ3pILENBQUMsZ0JBQWdCLEVBQUUsT0FBTyxHQUFHLEtBQUssV0FBVyxHQUFHQSxXQUFTLEdBQUcsR0FBRyxDQUFDLFNBQVM7Q0FDekUsQ0FBQyxRQUFRLEVBQUUsSUFBSTtDQUNmLENBQUMsVUFBVSxFQUFFLE1BQU07Q0FDbkIsQ0FBQyxtQkFBbUIsRUFBRSxNQUFNLENBQUMsU0FBUztDQUN0QyxDQUFDLFVBQVUsRUFBRSxNQUFNO0NBQ25CLENBQUMsbUJBQW1CLEVBQUUsTUFBTSxDQUFDLFNBQVM7Q0FDdEMsQ0FBQyxxQkFBcUIsRUFBRSxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVE7Q0FDakQsQ0FBQyxvQkFBb0IsRUFBRSxNQUFNLENBQUMsU0FBUyxDQUFDLE9BQU87Q0FDL0MsQ0FBQyxjQUFjLEVBQUUsVUFBVTtDQUMzQixDQUFDLFlBQVksRUFBRSxRQUFRO0NBQ3ZCLENBQUMsV0FBVyxFQUFFLE9BQU8sT0FBTyxLQUFLLFdBQVcsR0FBR0EsV0FBUyxHQUFHLE9BQU87Q0FDbEUsQ0FBQyxvQkFBb0IsRUFBRSxPQUFPLE9BQU8sS0FBSyxXQUFXLEdBQUdBLFdBQVMsR0FBRyxPQUFPLENBQUMsU0FBUztDQUNyRixDQUFDLHFCQUFxQixFQUFFLE9BQU8sT0FBTyxLQUFLLFdBQVcsR0FBR0EsV0FBUyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSTtDQUMzRixDQUFDLGVBQWUsRUFBRSxPQUFPLE9BQU8sS0FBSyxXQUFXLEdBQUdBLFdBQVMsR0FBRyxPQUFPLENBQUMsR0FBRztDQUMxRSxDQUFDLGtCQUFrQixFQUFFLE9BQU8sT0FBTyxLQUFLLFdBQVcsR0FBR0EsV0FBUyxHQUFHLE9BQU8sQ0FBQyxNQUFNO0NBQ2hGLENBQUMsbUJBQW1CLEVBQUUsT0FBTyxPQUFPLEtBQUssV0FBVyxHQUFHQSxXQUFTLEdBQUcsT0FBTyxDQUFDLE9BQU87Q0FDbEYsQ0FBQyxTQUFTLEVBQUUsT0FBTyxLQUFLLEtBQUssV0FBVyxHQUFHQSxXQUFTLEdBQUcsS0FBSztDQUM1RCxDQUFDLGNBQWMsRUFBRSxVQUFVO0NBQzNCLENBQUMsdUJBQXVCLEVBQUUsVUFBVSxDQUFDLFNBQVM7Q0FDOUMsQ0FBQyxrQkFBa0IsRUFBRSxjQUFjO0NBQ25DLENBQUMsMkJBQTJCLEVBQUUsY0FBYyxDQUFDLFNBQVM7Q0FDdEQsQ0FBQyxXQUFXLEVBQUUsT0FBTyxPQUFPLEtBQUssV0FBVyxHQUFHQSxXQUFTLEdBQUcsT0FBTztDQUNsRSxDQUFDLFVBQVUsRUFBRSxNQUFNO0NBQ25CLENBQUMsbUJBQW1CLEVBQUUsTUFBTSxDQUFDLFNBQVM7Q0FDdEMsQ0FBQyxPQUFPLEVBQUUsT0FBTyxHQUFHLEtBQUssV0FBVyxHQUFHQSxXQUFTLEdBQUcsR0FBRztDQUN0RCxDQUFDLHdCQUF3QixFQUFFLE9BQU8sR0FBRyxLQUFLLFdBQVcsSUFBSSxDQUFDQyxZQUFVLEdBQUdELFdBQVMsR0FBRyxRQUFRLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztDQUN6SCxDQUFDLGdCQUFnQixFQUFFLE9BQU8sR0FBRyxLQUFLLFdBQVcsR0FBR0EsV0FBUyxHQUFHLEdBQUcsQ0FBQyxTQUFTO0NBQ3pFLENBQUMscUJBQXFCLEVBQUUsT0FBTyxpQkFBaUIsS0FBSyxXQUFXLEdBQUdBLFdBQVMsR0FBRyxpQkFBaUI7Q0FDaEcsQ0FBQyw4QkFBOEIsRUFBRSxPQUFPLGlCQUFpQixLQUFLLFdBQVcsR0FBR0EsV0FBUyxHQUFHLGlCQUFpQixDQUFDLFNBQVM7Q0FDbkgsQ0FBQyxVQUFVLEVBQUUsTUFBTTtDQUNuQixDQUFDLDJCQUEyQixFQUFFQyxZQUFVLEdBQUcsUUFBUSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxHQUFHRCxXQUFTO0NBQ3RGLENBQUMsbUJBQW1CLEVBQUUsTUFBTSxDQUFDLFNBQVM7Q0FDdEMsQ0FBQyxVQUFVLEVBQUVDLFlBQVUsR0FBRyxNQUFNLEdBQUdELFdBQVM7Q0FDNUMsQ0FBQyxtQkFBbUIsRUFBRUMsWUFBVSxHQUFHLE1BQU0sQ0FBQyxTQUFTLEdBQUdELFdBQVM7Q0FDL0QsQ0FBQyxlQUFlLEVBQUUsV0FBVztDQUM3QixDQUFDLHdCQUF3QixFQUFFLFdBQVcsQ0FBQyxTQUFTO0NBQ2hELENBQUMsa0JBQWtCLEVBQUUsY0FBYztDQUNuQyxDQUFDLGNBQWMsRUFBRSxVQUFVO0NBQzNCLENBQUMsdUJBQXVCLEVBQUUsVUFBVSxHQUFHLFVBQVUsQ0FBQyxTQUFTLEdBQUdBLFdBQVM7Q0FDdkUsQ0FBQyxhQUFhLEVBQUUsVUFBVTtDQUMxQixDQUFDLHNCQUFzQixFQUFFLFVBQVUsQ0FBQyxTQUFTO0NBQzdDLENBQUMsY0FBYyxFQUFFLE9BQU8sVUFBVSxLQUFLLFdBQVcsR0FBR0EsV0FBUyxHQUFHLFVBQVU7Q0FDM0UsQ0FBQyx1QkFBdUIsRUFBRSxPQUFPLFVBQVUsS0FBSyxXQUFXLEdBQUdBLFdBQVMsR0FBRyxVQUFVLENBQUMsU0FBUztDQUM5RixDQUFDLHFCQUFxQixFQUFFLE9BQU8saUJBQWlCLEtBQUssV0FBVyxHQUFHQSxXQUFTLEdBQUcsaUJBQWlCO0NBQ2hHLENBQUMsOEJBQThCLEVBQUUsT0FBTyxpQkFBaUIsS0FBSyxXQUFXLEdBQUdBLFdBQVMsR0FBRyxpQkFBaUIsQ0FBQyxTQUFTO0NBQ25ILENBQUMsZUFBZSxFQUFFLE9BQU8sV0FBVyxLQUFLLFdBQVcsR0FBR0EsV0FBUyxHQUFHLFdBQVc7Q0FDOUUsQ0FBQyx3QkFBd0IsRUFBRSxPQUFPLFdBQVcsS0FBSyxXQUFXLEdBQUdBLFdBQVMsR0FBRyxXQUFXLENBQUMsU0FBUztDQUNqRyxDQUFDLGVBQWUsRUFBRSxPQUFPLFdBQVcsS0FBSyxXQUFXLEdBQUdBLFdBQVMsR0FBRyxXQUFXO0NBQzlFLENBQUMsd0JBQXdCLEVBQUUsT0FBTyxXQUFXLEtBQUssV0FBVyxHQUFHQSxXQUFTLEdBQUcsV0FBVyxDQUFDLFNBQVM7Q0FDakcsQ0FBQyxZQUFZLEVBQUUsUUFBUTtDQUN2QixDQUFDLHFCQUFxQixFQUFFLFFBQVEsQ0FBQyxTQUFTO0NBQzFDLENBQUMsV0FBVyxFQUFFLE9BQU8sT0FBTyxLQUFLLFdBQVcsR0FBR0EsV0FBUyxHQUFHLE9BQU87Q0FDbEUsQ0FBQyxvQkFBb0IsRUFBRSxPQUFPLE9BQU8sS0FBSyxXQUFXLEdBQUdBLFdBQVMsR0FBRyxPQUFPLENBQUMsU0FBUztDQUNyRixDQUFDLFdBQVcsRUFBRSxPQUFPLE9BQU8sS0FBSyxXQUFXLEdBQUdBLFdBQVMsR0FBRyxPQUFPO0NBQ2xFLENBQUMsb0JBQW9CLEVBQUUsT0FBTyxPQUFPLEtBQUssV0FBVyxHQUFHQSxXQUFTLEdBQUcsT0FBTyxDQUFDLFNBQVM7Q0FDckYsQ0FBQyxDQUFDO0FBQ0Y7QUFDb0M7Q0FDcEMsSUFBSSxRQUFRLEdBQUdFLFlBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ2xFO0NBQ0E7Q0FDQSxJQUFJLFVBQVUsR0FBRyxvR0FBb0csQ0FBQztDQUN0SCxJQUFJLFlBQVksR0FBRyxVQUFVLENBQUM7Q0FDOUIsSUFBSSxZQUFZLEdBQUcsU0FBUyxZQUFZLENBQUMsTUFBTSxFQUFFO0NBQ2pELENBQUMsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDO0NBQ2pCLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUUsVUFBVSxLQUFLLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUU7Q0FDekUsRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEtBQUssR0FBRyxRQUFRLENBQUMsU0FBUyxFQUFFLFlBQVksRUFBRSxJQUFJLENBQUMsSUFBSSxNQUFNLElBQUksS0FBSyxDQUFDLENBQUM7Q0FDOUYsRUFBRSxDQUFDLENBQUM7Q0FDSixDQUFDLE9BQU8sTUFBTSxDQUFDO0NBQ2YsQ0FBQyxDQUFDO0NBQ0Y7QUFDQTtDQUNBLElBQUksZ0JBQWdCLEdBQUcsU0FBUyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsWUFBWSxFQUFFO0NBQ3JFLENBQUMsSUFBSSxFQUFFLElBQUksSUFBSSxVQUFVLENBQUMsRUFBRTtDQUM1QixFQUFFLE1BQU0sSUFBSSxXQUFXLENBQUMsWUFBWSxHQUFHLElBQUksR0FBRyxrQkFBa0IsQ0FBQyxDQUFDO0NBQ2xFLEVBQUU7QUFDRjtDQUNBO0NBQ0EsQ0FBQyxJQUFJLE9BQU8sVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLFdBQVcsSUFBSSxDQUFDLFlBQVksRUFBRTtDQUMvRCxFQUFFLE1BQU0sSUFBSSxVQUFVLENBQUMsWUFBWSxHQUFHLElBQUksR0FBRyxzREFBc0QsQ0FBQyxDQUFDO0NBQ3JHLEVBQUU7QUFDRjtDQUNBLENBQUMsT0FBTyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7Q0FDekIsQ0FBQyxDQUFDO0FBQ0Y7Q0FDQSxnQkFBYyxHQUFHLFNBQVMsWUFBWSxDQUFDLElBQUksRUFBRSxZQUFZLEVBQUU7Q0FDM0QsQ0FBQyxJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVEsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtDQUNwRCxFQUFFLE1BQU0sSUFBSSxTQUFTLENBQUMsMkNBQTJDLENBQUMsQ0FBQztDQUNuRSxFQUFFO0NBQ0YsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sWUFBWSxLQUFLLFNBQVMsRUFBRTtDQUNoRSxFQUFFLE1BQU0sSUFBSSxTQUFTLENBQUMsMkNBQTJDLENBQUMsQ0FBQztDQUNuRSxFQUFFO0FBQ0Y7Q0FDQSxDQUFDLElBQUksS0FBSyxHQUFHLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNoQztDQUNBLENBQUMsSUFBSSxLQUFLLEdBQUcsZ0JBQWdCLENBQUMsR0FBRyxJQUFJLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsWUFBWSxDQUFDLENBQUM7Q0FDNUYsQ0FBQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFO0NBQzNDLEVBQUUsSUFBSSxLQUFLLElBQUksSUFBSSxFQUFFO0NBQ3JCLEdBQUcsSUFBSSxLQUFLLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEtBQUssQ0FBQyxNQUFNLEVBQUU7Q0FDekMsSUFBSSxJQUFJLElBQUksR0FBRyxLQUFLLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ3RDLElBQUksSUFBSSxDQUFDLFlBQVksSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsRUFBRTtDQUMvQyxLQUFLLE1BQU0sSUFBSSxVQUFVLENBQUMscUJBQXFCLEdBQUcsSUFBSSxHQUFHLDZDQUE2QyxDQUFDLENBQUM7Q0FDeEcsS0FBSztDQUNMLElBQUksS0FBSyxHQUFHLElBQUksSUFBSSxJQUFJLENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQzlELElBQUksTUFBTTtDQUNWLElBQUksS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUM1QixJQUFJO0NBQ0osR0FBRztDQUNILEVBQUU7Q0FDRixDQUFDLE9BQU8sS0FBSyxDQUFDO0NBQ2QsQ0FBQzs7Q0NuTkQsSUFBSSxNQUFNLEdBQUcsWUFBWSxDQUFDLDRCQUE0QixDQUFDLENBQUM7Q0FDeEQsSUFBSSxLQUFLLEdBQUcsWUFBWSxDQUFDLDJCQUEyQixDQUFDLENBQUM7Q0FDdEQsSUFBSSxhQUFhLEdBQUcsWUFBWSxDQUFDLGlCQUFpQixFQUFFLElBQUksQ0FBQyxJQUFJQSxZQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztBQUN0RjtDQUNBLFlBQWMsR0FBRyxTQUFTLFFBQVEsR0FBRztDQUNyQyxDQUFDLE9BQU8sYUFBYSxDQUFDQSxZQUFJLEVBQUUsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0NBQzlDLENBQUMsQ0FBQztBQUNGO0NBQ0EsU0FBb0IsR0FBRyxTQUFTLFNBQVMsR0FBRztDQUM1QyxDQUFDLE9BQU8sYUFBYSxDQUFDQSxZQUFJLEVBQUUsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0NBQy9DLENBQUM7OztDQ2RELElBQUksV0FBVyxHQUFHLFVBQVUsS0FBSyxFQUFFO0NBQ25DLENBQUMsT0FBTyxLQUFLLEtBQUssS0FBSyxDQUFDO0NBQ3hCLENBQUMsQ0FBQztBQUNGO0NBQ0Esb0JBQWMsR0FBRyxTQUFTLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFO0NBQ25DLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7Q0FDekIsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUN6QixFQUFFO0NBQ0YsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7Q0FDZCxFQUFFLE9BQU8sSUFBSSxDQUFDO0NBQ2QsRUFBRTtDQUNGLENBQUMsSUFBSSxXQUFXLENBQUMsQ0FBQyxDQUFDLElBQUksV0FBVyxDQUFDLENBQUMsQ0FBQyxFQUFFO0NBQ3ZDLEVBQUUsT0FBTyxJQUFJLENBQUM7Q0FDZCxFQUFFO0NBQ0YsQ0FBQyxPQUFPLEtBQUssQ0FBQztDQUNkLENBQUM7O0NDYkQsWUFBYyxHQUFHLFNBQVMsV0FBVyxHQUFHO0NBQ3hDLENBQUMsT0FBTyxPQUFPLE1BQU0sQ0FBQyxFQUFFLEtBQUssVUFBVSxHQUFHLE1BQU0sQ0FBQyxFQUFFLEdBQUdMLGdCQUFjLENBQUM7Q0FDckUsQ0FBQzs7Q0NERCxRQUFjLEdBQUcsU0FBUyxZQUFZLEdBQUc7Q0FDekMsQ0FBQyxJQUFJTSxVQUFRLEdBQUdDLFFBQVcsRUFBRSxDQUFDO0NBQzlCLENBQUNDLGtCQUFNLENBQUMsTUFBTSxFQUFFLEVBQUUsRUFBRSxFQUFFRixVQUFRLEVBQUUsRUFBRTtDQUNsQyxFQUFFLEVBQUUsRUFBRSxTQUFTLFlBQVksR0FBRztDQUM5QixHQUFHLE9BQU8sTUFBTSxDQUFDLEVBQUUsS0FBS0EsVUFBUSxDQUFDO0NBQ2pDLEdBQUc7Q0FDSCxFQUFFLENBQUMsQ0FBQztDQUNKLENBQUMsT0FBT0EsVUFBUSxDQUFDO0NBQ2pCLENBQUM7O0NDSkQsSUFBSUEsVUFBUSxHQUFHLFFBQVEsQ0FBQ0MsUUFBVyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDL0M7QUFDQUMsbUJBQU0sQ0FBQ0YsVUFBUSxFQUFFO0NBQ2pCLENBQUMsV0FBVyxFQUFFQyxRQUFXO0NBQ3pCLENBQUMsY0FBYyxFQUFFUCxnQkFBYztDQUMvQixDQUFDLElBQUksRUFBRSxJQUFJO0NBQ1gsQ0FBQyxDQUFDLENBQUM7QUFDSDtDQUNBLFlBQWMsR0FBR00sVUFBUTs7Q0NmekIsSUFBSUYsWUFBVSxHQUFHekMsWUFBc0IsRUFBRSxDQUFDO0NBQzFDLElBQUk4QyxnQkFBYyxHQUFHTCxZQUFVLElBQUksT0FBTyxNQUFNLENBQUMsV0FBVyxLQUFLLFFBQVEsQ0FBQztDQUMxRSxJQUFJLGNBQWMsQ0FBQztDQUNuQixJQUFJLFNBQVMsQ0FBQztDQUNkLElBQUksYUFBYSxDQUFDO0NBQ2xCLElBQUksY0FBYyxDQUFDO0FBQ25CO0NBQ0EsSUFBSUssZ0JBQWMsRUFBRTtDQUNwQixDQUFDLGNBQWMsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0NBQ3RFLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7Q0FDdkQsQ0FBQyxhQUFhLEdBQUcsRUFBRSxDQUFDO0FBQ3BCO0NBQ0EsQ0FBQyxJQUFJLGdCQUFnQixHQUFHLFlBQVk7Q0FDcEMsRUFBRSxNQUFNLGFBQWEsQ0FBQztDQUN0QixFQUFFLENBQUM7Q0FDSCxDQUFDLGNBQWMsR0FBRztDQUNsQixFQUFFLFFBQVEsRUFBRSxnQkFBZ0I7Q0FDNUIsRUFBRSxPQUFPLEVBQUUsZ0JBQWdCO0NBQzNCLEVBQUUsQ0FBQztBQUNIO0NBQ0EsQ0FBQyxJQUFJLE9BQU8sTUFBTSxDQUFDLFdBQVcsS0FBSyxRQUFRLEVBQUU7Q0FDN0MsRUFBRSxjQUFjLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLGdCQUFnQixDQUFDO0NBQ3hELEVBQUU7Q0FDRixDQUFDO0FBQ0Q7Q0FDQSxJQUFJZCxPQUFLLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUM7Q0FDdEMsSUFBSSxJQUFJLEdBQUcsTUFBTSxDQUFDLHdCQUF3QixDQUFDO0NBQzNDLElBQUksVUFBVSxHQUFHLGlCQUFpQixDQUFDO0FBQ25DO0NBQ0EsV0FBYyxHQUFHYyxnQkFBYztDQUMvQjtDQUNBLEdBQUcsU0FBUyxPQUFPLENBQUMsS0FBSyxFQUFFO0NBQzNCLEVBQUUsSUFBSSxDQUFDLEtBQUssSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7Q0FDM0MsR0FBRyxPQUFPLEtBQUssQ0FBQztDQUNoQixHQUFHO0FBQ0g7Q0FDQSxFQUFFLElBQUksVUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsV0FBVyxDQUFDLENBQUM7Q0FDNUMsRUFBRSxJQUFJLHdCQUF3QixHQUFHLFVBQVUsSUFBSSxjQUFjLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0NBQ25GLEVBQUUsSUFBSSxDQUFDLHdCQUF3QixFQUFFO0NBQ2pDLEdBQUcsT0FBTyxLQUFLLENBQUM7Q0FDaEIsR0FBRztBQUNIO0NBQ0EsRUFBRSxJQUFJO0NBQ04sR0FBRyxTQUFTLENBQUMsS0FBSyxFQUFFLGNBQWMsQ0FBQyxDQUFDO0NBQ3BDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRTtDQUNkLEdBQUcsT0FBTyxDQUFDLEtBQUssYUFBYSxDQUFDO0NBQzlCLEdBQUc7Q0FDSCxFQUFFO0NBQ0YsR0FBRyxTQUFTLE9BQU8sQ0FBQyxLQUFLLEVBQUU7Q0FDM0I7Q0FDQSxFQUFFLElBQUksQ0FBQyxLQUFLLEtBQUssT0FBTyxLQUFLLEtBQUssUUFBUSxJQUFJLE9BQU8sS0FBSyxLQUFLLFVBQVUsQ0FBQyxFQUFFO0NBQzVFLEdBQUcsT0FBTyxLQUFLLENBQUM7Q0FDaEIsR0FBRztBQUNIO0NBQ0EsRUFBRSxPQUFPZCxPQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLFVBQVUsQ0FBQztDQUMxQyxFQUFFOztDQ3ZERixJQUFJLE9BQU8sR0FBRyxNQUFNLENBQUM7Q0FDckIsSUFBSWUsWUFBVSxHQUFHLFNBQVMsQ0FBQztBQUMzQjtDQUNBLG9CQUFjLEdBQUcsU0FBUyxLQUFLLEdBQUc7Q0FDbEMsQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtDQUM3QyxFQUFFLE1BQU0sSUFBSUEsWUFBVSxDQUFDLG9EQUFvRCxDQUFDLENBQUM7Q0FDN0UsRUFBRTtDQUNGLENBQUMsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDO0NBQ2pCLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO0NBQ2xCLEVBQUUsTUFBTSxJQUFJLEdBQUcsQ0FBQztDQUNoQixFQUFFO0NBQ0YsQ0FBQyxJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7Q0FDdEIsRUFBRSxNQUFNLElBQUksR0FBRyxDQUFDO0NBQ2hCLEVBQUU7Q0FDRixDQUFDLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtDQUNyQixFQUFFLE1BQU0sSUFBSSxHQUFHLENBQUM7Q0FDaEIsRUFBRTtDQUNGLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO0NBQ2xCLEVBQUUsTUFBTSxJQUFJLEdBQUcsQ0FBQztDQUNoQixFQUFFO0NBQ0YsQ0FBQyxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7Q0FDbkIsRUFBRSxNQUFNLElBQUksR0FBRyxDQUFDO0NBQ2hCLEVBQUU7Q0FDRixDQUFDLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtDQUNsQixFQUFFLE1BQU0sSUFBSSxHQUFHLENBQUM7Q0FDaEIsRUFBRTtDQUNGLENBQUMsT0FBTyxNQUFNLENBQUM7Q0FDZixDQUFDOztDQ3pCRCxJQUFJQyxxQkFBbUIsR0FBR2hELGtCQUE0QixDQUFDLG1CQUFtQixDQUFDO0NBQzNFLElBQUlpRCxPQUFLLEdBQUcsTUFBTSxDQUFDLHdCQUF3QixDQUFDO0NBQzVDLElBQUlGLFlBQVUsR0FBRyxTQUFTLENBQUM7QUFDM0I7Q0FDQSxjQUFjLEdBQUcsU0FBUyxXQUFXLEdBQUc7Q0FDeEMsQ0FBQyxJQUFJLENBQUNDLHFCQUFtQixFQUFFO0NBQzNCLEVBQUUsTUFBTSxJQUFJRCxZQUFVLENBQUMsMkZBQTJGLENBQUMsQ0FBQztDQUNwSCxFQUFFO0NBQ0YsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEtBQUssS0FBSyxLQUFLLEVBQUU7Q0FDL0IsRUFBRSxJQUFJLFVBQVUsR0FBR0UsT0FBSyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7Q0FDcEQsRUFBRSxJQUFJLFVBQVUsSUFBSSxPQUFPLFVBQVUsQ0FBQyxHQUFHLEtBQUssVUFBVSxJQUFJLE9BQU8sQ0FBQyxHQUFHLEVBQUUsTUFBTSxLQUFLLFNBQVMsRUFBRTtDQUMvRixHQUFHLE9BQU8sVUFBVSxDQUFDLEdBQUcsQ0FBQztDQUN6QixHQUFHO0NBQ0gsRUFBRTtDQUNGLENBQUMsT0FBT1osZ0JBQWMsQ0FBQztDQUN2QixDQUFDOztDQ2pCRCxJQUFJVyxxQkFBbUIsR0FBR2hELGtCQUE0QixDQUFDLG1CQUFtQixDQUFDO0FBQ25DO0NBQ3hDLElBQUlrRCxNQUFJLEdBQUcsTUFBTSxDQUFDLHdCQUF3QixDQUFDO0NBQzNDLElBQUlDLGdCQUFjLEdBQUcsTUFBTSxDQUFDLGNBQWMsQ0FBQztDQUMzQyxJQUFJLE9BQU8sR0FBRyxTQUFTLENBQUM7Q0FDeEIsSUFBSUMsVUFBUSxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUM7Q0FDckMsSUFBSSxLQUFLLEdBQUcsR0FBRyxDQUFDO0FBQ2hCO0NBQ0EsVUFBYyxHQUFHLFNBQVMsU0FBUyxHQUFHO0NBQ3RDLENBQUMsSUFBSSxDQUFDSixxQkFBbUIsSUFBSSxDQUFDSSxVQUFRLEVBQUU7Q0FDeEMsRUFBRSxNQUFNLElBQUksT0FBTyxDQUFDLDJGQUEyRixDQUFDLENBQUM7Q0FDakgsRUFBRTtDQUNGLENBQUMsSUFBSSxRQUFRLEdBQUdSLFVBQVcsRUFBRSxDQUFDO0NBQzlCLENBQUMsSUFBSSxLQUFLLEdBQUdRLFVBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztDQUM3QixDQUFDLElBQUksVUFBVSxHQUFHRixNQUFJLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0NBQ3ZDLENBQUMsSUFBSSxDQUFDLFVBQVUsSUFBSSxVQUFVLENBQUMsR0FBRyxLQUFLLFFBQVEsRUFBRTtDQUNqRCxFQUFFQyxnQkFBYyxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUU7Q0FDakMsR0FBRyxZQUFZLEVBQUUsSUFBSTtDQUNyQixHQUFHLFVBQVUsRUFBRSxLQUFLO0NBQ3BCLEdBQUcsR0FBRyxFQUFFLFFBQVE7Q0FDaEIsR0FBRyxDQUFDLENBQUM7Q0FDTCxFQUFFO0NBQ0YsQ0FBQyxPQUFPLFFBQVEsQ0FBQztDQUNqQixDQUFDOztDQ2hCRCxJQUFJLFVBQVUsR0FBRyxRQUFRLENBQUNkLGdCQUFjLENBQUMsQ0FBQztBQUMxQztBQUNBUSxtQkFBTSxDQUFDLFVBQVUsRUFBRTtDQUNuQixDQUFDLFdBQVcsRUFBRUQsVUFBVztDQUN6QixDQUFDLGNBQWMsRUFBRVAsZ0JBQWM7Q0FDL0IsQ0FBQyxJQUFJLEVBQUVnQixNQUFJO0NBQ1gsQ0FBQyxDQUFDLENBQUM7QUFDSDtDQUNBLDBCQUFjLEdBQUcsVUFBVTs7Q0NmM0IsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUM7Q0FDbkMsSUFBSSxhQUFhLEdBQUcsU0FBUyxpQkFBaUIsQ0FBQyxLQUFLLEVBQUU7Q0FDdEQsQ0FBQyxJQUFJO0NBQ0wsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0NBQ3JCLEVBQUUsT0FBTyxJQUFJLENBQUM7Q0FDZCxFQUFFLENBQUMsT0FBTyxDQUFDLEVBQUU7Q0FDYixFQUFFLE9BQU8sS0FBSyxDQUFDO0NBQ2YsRUFBRTtDQUNGLENBQUMsQ0FBQztBQUNGO0NBQ0EsSUFBSXJCLE9BQUssR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQztDQUN0QyxJQUFJLFNBQVMsR0FBRyxlQUFlLENBQUM7Q0FDaEMsSUFBSWMsZ0JBQWMsR0FBRyxPQUFPLE1BQU0sS0FBSyxVQUFVLElBQUksT0FBTyxNQUFNLENBQUMsV0FBVyxLQUFLLFFBQVEsQ0FBQztBQUM1RjtDQUNBLGdCQUFjLEdBQUcsU0FBUyxZQUFZLENBQUMsS0FBSyxFQUFFO0NBQzlDLENBQUMsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLElBQUksS0FBSyxLQUFLLElBQUksRUFBRTtDQUNsRCxFQUFFLE9BQU8sS0FBSyxDQUFDO0NBQ2YsRUFBRTtDQUNGLENBQUMsT0FBT0EsZ0JBQWMsR0FBRyxhQUFhLENBQUMsS0FBSyxDQUFDLEdBQUdkLE9BQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssU0FBUyxDQUFDO0NBQ2hGLENBQUM7O0NDZEQsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7QUFDckM7Q0FDQSxTQUFTLFNBQVMsQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRTtDQUM5QyxFQUFFLElBQUksSUFBSSxHQUFHLE9BQU8sSUFBSSxFQUFFLENBQUM7QUFDM0I7Q0FDQTtDQUNBLEVBQUUsSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHc0IsUUFBRSxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsR0FBRyxNQUFNLEtBQUssUUFBUSxFQUFFO0NBQ2hFLElBQUksT0FBTyxJQUFJLENBQUM7Q0FDaEIsR0FBRztBQUNIO0NBQ0E7Q0FDQSxFQUFFLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxRQUFRLEtBQUssT0FBTyxNQUFNLEtBQUssUUFBUSxJQUFJLE9BQU8sUUFBUSxLQUFLLFFBQVEsQ0FBQyxFQUFFO0NBQzVGLElBQUksT0FBTyxJQUFJLENBQUMsTUFBTSxHQUFHQSxRQUFFLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxHQUFHLE1BQU0sSUFBSSxRQUFRLENBQUM7Q0FDbkUsR0FBRztBQUNIO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0EsRUFBRSxPQUFPLFFBQVEsQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO0NBQzFDLENBQUM7QUFDRDtDQUNBLFNBQVMsaUJBQWlCLENBQUMsS0FBSyxFQUFFO0NBQ2xDLEVBQUUsT0FBTyxLQUFLLEtBQUssSUFBSSxJQUFJLEtBQUssS0FBSyxTQUFTLENBQUM7Q0FDL0MsQ0FBQztBQUNEO0NBQ0EsU0FBUyxRQUFRLENBQUMsQ0FBQyxFQUFFO0NBQ3JCLEVBQUUsSUFBSSxDQUFDLENBQUMsSUFBSSxPQUFPLENBQUMsS0FBSyxRQUFRLElBQUksT0FBTyxDQUFDLENBQUMsTUFBTSxLQUFLLFFBQVEsRUFBRTtDQUNuRSxJQUFJLE9BQU8sS0FBSyxDQUFDO0NBQ2pCLEdBQUc7Q0FDSCxFQUFFLElBQUksT0FBTyxDQUFDLENBQUMsSUFBSSxLQUFLLFVBQVUsSUFBSSxPQUFPLENBQUMsQ0FBQyxLQUFLLEtBQUssVUFBVSxFQUFFO0NBQ3JFLElBQUksT0FBTyxLQUFLLENBQUM7Q0FDakIsR0FBRztDQUNILEVBQUUsSUFBSSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRLEVBQUU7Q0FDaEQsSUFBSSxPQUFPLEtBQUssQ0FBQztDQUNqQixHQUFHO0NBQ0gsRUFBRSxPQUFPLElBQUksQ0FBQztDQUNkLENBQUM7QUFDRDtDQUNBLFNBQVMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFO0NBQzlCO0NBQ0EsRUFBRSxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUM7Q0FDYixFQUFFLElBQUksT0FBTyxDQUFDLEtBQUssT0FBTyxDQUFDLEVBQUUsRUFBRSxPQUFPLEtBQUssQ0FBQyxFQUFFO0NBQzlDLEVBQUUsSUFBSSxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsSUFBSSxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLE9BQU8sS0FBSyxDQUFDLEVBQUU7QUFDckU7Q0FDQTtDQUNBLEVBQUUsSUFBSSxDQUFDLENBQUMsU0FBUyxLQUFLLENBQUMsQ0FBQyxTQUFTLEVBQUUsRUFBRSxPQUFPLEtBQUssQ0FBQyxFQUFFO0FBQ3BEO0NBQ0EsRUFBRSxJQUFJQyxhQUFXLENBQUMsQ0FBQyxDQUFDLEtBQUtBLGFBQVcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLE9BQU8sS0FBSyxDQUFDLEVBQUU7QUFDMUQ7Q0FDQSxFQUFFLElBQUksUUFBUSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUM1QixFQUFFLElBQUksUUFBUSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUM1QixFQUFFLElBQUksUUFBUSxLQUFLLFFBQVEsRUFBRSxFQUFFLE9BQU8sS0FBSyxDQUFDLEVBQUU7Q0FDOUMsRUFBRSxJQUFJLFFBQVEsSUFBSSxRQUFRLEVBQUU7Q0FDNUIsSUFBSSxPQUFPLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLE1BQU0sSUFBSUMsc0JBQUssQ0FBQyxDQUFDLENBQUMsS0FBS0Esc0JBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUMxRCxHQUFHO0FBQ0g7Q0FDQSxFQUFFLElBQUlDLFlBQU0sQ0FBQyxDQUFDLENBQUMsSUFBSUEsWUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFO0NBQzlCLElBQUksT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDL0MsR0FBRztBQUNIO0NBQ0EsRUFBRSxJQUFJLFNBQVMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDOUIsRUFBRSxJQUFJLFNBQVMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDOUIsRUFBRSxJQUFJLFNBQVMsS0FBSyxTQUFTLEVBQUUsRUFBRSxPQUFPLEtBQUssQ0FBQyxFQUFFO0NBQ2hELEVBQUUsSUFBSSxTQUFTLElBQUksU0FBUyxFQUFFO0NBQzlCLElBQUksSUFBSSxDQUFDLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEtBQUssQ0FBQyxFQUFFO0NBQ2hELElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO0NBQ25DLE1BQU0sSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsT0FBTyxLQUFLLENBQUMsRUFBRTtDQUMxQyxLQUFLO0NBQ0wsSUFBSSxPQUFPLElBQUksQ0FBQztDQUNoQixHQUFHO0FBQ0g7Q0FDQSxFQUFFLElBQUksT0FBTyxDQUFDLEtBQUssT0FBTyxDQUFDLEVBQUUsRUFBRSxPQUFPLEtBQUssQ0FBQyxFQUFFO0FBQzlDO0NBQ0EsRUFBRSxJQUFJO0NBQ04sSUFBSSxJQUFJLEVBQUUsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDM0IsSUFBSSxJQUFJLEVBQUUsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDM0IsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFO0NBQ2QsSUFBSSxPQUFPLEtBQUssQ0FBQztDQUNqQixHQUFHO0NBQ0g7Q0FDQSxFQUFFLElBQUksRUFBRSxDQUFDLE1BQU0sS0FBSyxFQUFFLENBQUMsTUFBTSxFQUFFLEVBQUUsT0FBTyxLQUFLLENBQUMsRUFBRTtBQUNoRDtDQUNBO0NBQ0EsRUFBRSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7Q0FDWixFQUFFLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztDQUNaO0NBQ0EsRUFBRSxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO0NBQ3ZDLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsT0FBTyxLQUFLLENBQUMsRUFBRTtDQUN6QyxHQUFHO0NBQ0g7Q0FDQSxFQUFFLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Q0FDdkMsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ2hCLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsT0FBTyxLQUFLLENBQUMsRUFBRTtDQUMzRCxHQUFHO0FBQ0g7Q0FDQSxFQUFFLE9BQU8sSUFBSSxDQUFDO0NBQ2QsQ0FBQztBQUNEO0NBQ0EsZUFBYyxHQUFHLFNBQVM7O0NDL0cxQixNQUFNLENBQUMsZUFBZSxDQUFDLEdBQUcsT0FBTyxDQUFDLFVBQVUsRUFBQztBQUM3QztBQUNBO0FBQ0EsQ0FBTyxlQUFlLGVBQWUsR0FBRztDQUN4QyxJQUFJLElBQUksTUFBTSxHQUFHLEtBQUk7Q0FDckIsSUFBSSxNQUFNLGVBQWUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLE9BQU8sSUFBSTtDQUMxRixRQUFRLEtBQUssTUFBTSxNQUFNLElBQUksT0FBTyxFQUFFO0NBQ3RDLFlBQVksSUFBSSxNQUFNLENBQUMsSUFBSSxLQUFLLGVBQWUsRUFBRTtDQUNqRCxnQkFBZ0IsSUFBSTtDQUNwQixvQkFBb0IsTUFBTSxHQUFHLE1BQU0sU0FBUyxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUM7Q0FDdkUsd0JBQXdCLEtBQUssRUFBRSxLQUFLO0NBQ3BDLHdCQUF3QixLQUFLLEVBQUU7Q0FDL0IsNEJBQTRCLFNBQVMsRUFBRTtDQUN2QyxnQ0FBZ0MsaUJBQWlCLEVBQUUsU0FBUztDQUM1RCxnQ0FBZ0MsbUJBQW1CLEVBQUUsTUFBTSxDQUFDLEVBQUU7Q0FDOUQsZ0NBQWdDLFFBQVEsRUFBRSxJQUFJO0NBQzlDLGdDQUFnQyxRQUFRLEVBQUUsSUFBSTtDQUM5QyxnQ0FBZ0MsU0FBUyxFQUFFLEdBQUc7Q0FDOUMsZ0NBQWdDLFNBQVMsRUFBRSxHQUFHO0NBQzlDLDZCQUE2QjtDQUM3Qix5QkFBeUI7Q0FDekIscUJBQXFCLEVBQUM7Q0FDdEIsaUJBQWlCLENBQUMsT0FBTyxDQUFDLEVBQUU7Q0FDNUIsb0JBQW9CLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFDO0NBQ2xDLGlCQUFpQjtDQUNqQixhQUFhO0NBQ2IsU0FBUztDQUNULEtBQUssRUFBQztDQUNOLElBQUksT0FBTyxNQUFNO0NBQ2pCOztDQzdCQTtBQUNBLEFBR0E7Q0FDQSxNQUFNLENBQUMsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztDQUNoRCxNQUFNLEVBQUUsR0FBRyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ3BEO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0FBQ0EsQUFBWSxPQUFDLFFBQVEsR0FBRyxNQUFNLEVBQUUsQ0FBQztDQUNqQztBQUNBLEFBVUlDLDZCQUFvQixHQUFHLEVBQUUsQ0FBQztDQUM5QixJQUFJQyx3QkFBZ0IsR0FBRyxFQUFFLENBQUM7Q0FDMUIsSUFBSUMsaUJBQVMsR0FBRyxFQUFFLENBQ0U7QUFDcEI7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtBQUNBLENBQU8sZUFBZSxJQUFJLEdBQUc7Q0FDN0IsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsNkJBQTZCLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQzVELElBQUksSUFBSTtDQUNSO0NBQ0EsUUFBUUMsY0FBTSxHQUFHLElBQUlDLE9BQWdCLEVBQUUsQ0FBQztDQUN4QyxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUU7Q0FDaEIsUUFBUSxJQUFJLENBQUMsQ0FBQyxJQUFJLEtBQUssa0JBQWtCLEVBQUU7Q0FDM0MsWUFBWSxPQUFPLENBQUMsS0FBSyxDQUFDLHVDQUF1QyxDQUFDLENBQUM7Q0FDbkUsWUFBWSxPQUFPO0NBQ25CLFNBQVMsTUFBTTtDQUNmLFlBQVksT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUM3QixTQUFTO0NBQ1QsS0FBSztBQUNMO0NBQ0E7Q0FDQTtDQUNBO0NBQ0EsSUFBSSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLE1BQU0sR0FBRyxDQUFDLE9BQU8sRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztDQUNwRSxDQUFDO0FBQ0Q7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtBQUNBLENBQU8sZUFBZSxRQUFRLEdBQUc7Q0FDakMsSUFBSSxJQUFJQyxjQUFNLEVBQUU7Q0FDaEIsUUFBUSxPQUFPO0NBQ2YsS0FBSztBQUNMO0NBQ0EsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0NBQzdCLElBQUksQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO0FBQzlDO0NBQ0EsSUFBSSxJQUFJO0NBQ1I7Q0FDQTtDQUNBO0NBQ0EsUUFBUSxJQUFJLENBQUMscUJBQXFCLENBQUMsR0FBRyxNQUFNLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0NBQ3BFO0NBQ0EsUUFBUSxJQUFJLENBQUNGLGNBQU0sQ0FBQyxNQUFNLEVBQUU7Q0FDNUIsWUFBWSxNQUFNQSxjQUFNLENBQUMsSUFBSSxDQUFDLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDO0NBQ3ZELFNBQVM7Q0FDVCxRQUFRRSxjQUFNLEdBQUcsSUFBSSxDQUFDO0NBQ3RCLFFBQVEsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsU0FBUyxDQUFDO0NBQ25ELEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBRTtDQUNoQixRQUFRLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDekIsUUFBUSxPQUFPO0NBQ2YsS0FBSztBQUNMO0NBQ0E7Q0FDQTtDQUNBLElBQUlDLHVCQUFlLEdBQUcsV0FBVyxDQUFDLFlBQVk7Q0FDOUMsUUFBUSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsTUFBTSxhQUFhLEVBQUUsQ0FBQztDQUM1QyxRQUFRLElBQUksS0FBSyxFQUFFO0NBQ25CLFlBQVksYUFBYSxDQUFDQSx1QkFBZSxDQUFDLENBQUM7Q0FDM0MsWUFBWSxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0NBQy9CLFNBQVM7Q0FDVCxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7Q0FDYixDQUFDO0FBQ0Q7Q0FDQTtBQUNBLENBQU8sZUFBZSxpQkFBaUIsR0FBRztDQUMxQyxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQztDQUN2QyxJQUFJLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztBQUM3QztDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0EsSUFBSSxNQUFNLFFBQVEsRUFBRSxDQUFDO0NBQ3JCLElBQUksTUFBTSxXQUFXLEVBQUUsQ0FBQztBQUN4QjtDQUNBO0NBQ0E7Q0FDQSxJQUFJLElBQUksQ0FBQ0MscUJBQWEsRUFBRTtDQUN4QixRQUFRQSxxQkFBYSxHQUFHLE1BQU0sZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0NBQ3RELEtBQUs7QUFDTDtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQSxJQUFJQyx3QkFBZ0IsR0FBRyxNQUFNRCxxQkFBYSxDQUFDLE9BQU8sQ0FBQztDQUNuRCxRQUFRLEtBQUssRUFBRUUsZ0JBQVEsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLENBQUM7Q0FDM0MsUUFBUSxTQUFTLEVBQUUsWUFBWSxFQUFFO0NBQ2pDLFFBQVEsT0FBTyxFQUFFLENBQUMsUUFBUSxFQUFFLFdBQVcsQ0FBQztDQUN4QyxLQUFLLENBQUMsQ0FBQztDQUNQO0NBQ0EsSUFBSSxJQUFJLGlCQUFpQixFQUFFLEVBQUU7Q0FDN0IsUUFBUSxJQUFJO0NBQ1osWUFBWSxNQUFNRCx3QkFBZ0IsQ0FBQyxLQUFLLEVBQUUsQ0FBQztDQUMzQyxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUU7Q0FDcEIsWUFBWSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQzdCLFNBQVM7Q0FDVCxLQUFLO0FBQ0w7Q0FDQTtDQUNBO0NBQ0EsSUFBSUUsd0JBQWdCLEdBQUcsTUFBTUgscUJBQWEsQ0FBQyxPQUFPLENBQUM7Q0FDbkQsUUFBUSxLQUFLLEVBQUVFLGdCQUFRLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQyxDQUFDO0NBQzNDLFFBQVEsT0FBTyxFQUFFLENBQUMsUUFBUSxFQUFFLFdBQVcsQ0FBQztDQUN4QyxLQUFLLENBQUMsQ0FBQztDQUNQLElBQUksSUFBSSxpQkFBaUIsRUFBRSxFQUFFO0NBQzdCLFFBQVEsSUFBSTtDQUNaLFlBQVlDLHdCQUFnQixDQUFDLEtBQUssRUFBRSxDQUFDO0NBQ3JDLFNBQVMsQ0FBQyxPQUFPLENBQUMsRUFBRTtDQUNwQixZQUFZLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDN0IsU0FBUztDQUNULEtBQUs7QUFDTDtDQUNBLElBQUksQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsU0FBUyxDQUFDO0NBQ2pELElBQUksY0FBYyxFQUFFLENBQUM7Q0FDckIsQ0FBQztBQUNEO0NBQ0E7QUFDQSxDQUFPLGVBQWUsZ0JBQWdCLEdBQUc7Q0FDekMsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLENBQUM7Q0FDdEMsSUFBSSxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7QUFDOUM7Q0FDQTtDQUNBO0NBQ0E7Q0FDQSxJQUFJLE1BQU0sUUFBUSxFQUFFLENBQUM7Q0FDckI7Q0FDQSxJQUFJLElBQUksQ0FBQ0gscUJBQWEsRUFBRTtDQUN4QixRQUFRQSxxQkFBYSxHQUFHLE1BQU0sZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0NBQ3RELEtBQUs7QUFDTDtDQUNBO0NBQ0E7Q0FDQSxJQUFJSSxtQkFBVyxHQUFHLE1BQU0sZUFBZSxFQUFFLENBQUM7Q0FDMUMsSUFBSSxJQUFJLENBQUNBLG1CQUFXLEVBQUU7Q0FDdEIsUUFBUSxPQUFPLENBQUMsR0FBRyxDQUFDLCtDQUErQyxFQUFDO0NBQ3BFLFFBQVEsTUFBTTtDQUNkLEtBQUs7Q0FDTDtDQUNBO0NBQ0EsSUFBSUMsMkJBQW1CLEdBQUcsTUFBTUwscUJBQWEsQ0FBQyxPQUFPLENBQUM7Q0FDdEQsUUFBUSxLQUFLLEVBQUVJLG1CQUFXLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQyxDQUFDO0NBQzlDLFFBQVEsU0FBUyxFQUFFLG9CQUFvQixFQUFFO0NBQ3pDLFFBQVEsT0FBTyxFQUFFLENBQUMsUUFBUSxFQUFFLGNBQWMsQ0FBQztDQUMzQyxLQUFLLENBQUMsQ0FBQztBQUNQO0NBQ0E7Q0FDQTtDQUNBLElBQUksSUFBSUEsbUJBQVcsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxNQUFNLEVBQUU7Q0FDN0MsUUFBUUUsMkJBQW1CLEdBQUcsTUFBTU4scUJBQWEsQ0FBQyxPQUFPLENBQUM7Q0FDMUQsWUFBWSxLQUFLLEVBQUVJLG1CQUFXLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQyxDQUFDO0NBQ2xELFlBQVksT0FBTyxFQUFFLENBQUMsUUFBUSxFQUFFLGNBQWMsQ0FBQztDQUMvQyxTQUFTLENBQUMsQ0FBQztDQUNYLEtBQUs7QUFDTDtDQUNBO0NBQ0E7Q0FDQTtDQUNBLElBQUlDLDJCQUFtQixDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsWUFBWTtDQUNwRCxRQUFRLE9BQU8sQ0FBQyxHQUFHLENBQUMsc0JBQXNCLENBQUMsQ0FBQztDQUM1QyxRQUFRLElBQUk7Q0FDWjtDQUNBLFlBQVksTUFBTUEsMkJBQW1CLENBQUMsS0FBSyxFQUFFLENBQUM7Q0FDOUMsWUFBWSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsTUFBTSxHQUFHLENBQUMsZ0JBQWdCO0NBQ3BELGdCQUFnQixDQUFDLFVBQVUsRUFBRUEsMkJBQW1CLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztDQUN0RDtDQUNBLFlBQVksTUFBTUEsMkJBQW1CLENBQUMsS0FBSyxFQUFFLENBQUM7Q0FDOUMsWUFBWUEsMkJBQW1CLEdBQUcsSUFBSSxDQUFDO0NBQ3ZDLFlBQVksSUFBSSxLQUFLLEVBQUU7Q0FDdkIsZ0JBQWdCLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDbkMsYUFBYTtDQUNiO0NBQ0EsWUFBWSxJQUFJQywyQkFBbUIsRUFBRTtDQUNyQyxnQkFBZ0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLE1BQU0sR0FBRyxDQUFDLGdCQUFnQjtDQUN4RCxvQkFBb0IsQ0FBQyxVQUFVLEVBQUVBLDJCQUFtQixDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7Q0FDMUQsZ0JBQWdCLE1BQU1BLDJCQUFtQixDQUFDLEtBQUssRUFBRSxDQUFDO0NBQ2xELGdCQUFnQkEsMkJBQW1CLEdBQUcsSUFBSSxDQUFDO0NBQzNDLGdCQUFnQixJQUFJLEtBQUssRUFBRTtDQUMzQixvQkFBb0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztDQUN2QyxpQkFBaUI7Q0FDakIsYUFBYTtDQUNiLFNBQVMsQ0FBQyxPQUFPLENBQUMsRUFBRTtDQUNwQixZQUFZLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDN0IsU0FBUztDQUNULFFBQVEsQ0FBQyxDQUFDLDBCQUEwQixDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7Q0FDN0QsUUFBUSxDQUFDLENBQUMsZ0NBQWdDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztDQUNuRSxRQUFRLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLFNBQVMsQ0FBQztDQUNyRCxNQUFLO0FBQ0w7Q0FDQSxJQUFJLENBQUMsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0NBQzFELElBQUksSUFBSUEsMkJBQW1CLEVBQUU7Q0FDN0IsUUFBUSxDQUFDLENBQUMsZ0NBQWdDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztDQUNwRSxLQUFLO0NBQ0wsQ0FBQztBQUNEO0NBQ0E7QUFDQSxDQUFPLGVBQWUsV0FBVyxHQUFHO0NBQ3BDLElBQUksSUFBSUosZ0JBQVEsRUFBRTtDQUNsQixRQUFRLE9BQU87Q0FDZixLQUFLO0NBQ0wsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0NBQ2hDLElBQUksSUFBSTtDQUNSLFFBQVFBLGdCQUFRLEdBQUcsTUFBTSxTQUFTLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQztDQUM3RCxZQUFZLEtBQUssRUFBRSxJQUFJO0NBQ3ZCLFlBQVksS0FBSyxFQUFFLElBQUk7Q0FDdkIsU0FBUyxDQUFDLENBQUM7Q0FDWCxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUU7Q0FDaEIsUUFBUSxPQUFPLENBQUMsS0FBSyxDQUFDLG9CQUFvQixFQUFFLENBQUMsQ0FBQyxDQUFDO0NBQy9DLEtBQUs7Q0FDTCxDQUFDO0FBQ0Q7Q0FDQTtDQUNBO0NBQ0E7QUFDQSxDQUFPLGVBQWUsV0FBVyxHQUFHO0NBQ3BDLElBQUksSUFBSSxFQUFFRCx3QkFBZ0IsSUFBSUEsd0JBQWdCLENBQUMsS0FBSyxDQUFDLEVBQUU7Q0FDdkQsUUFBUSxPQUFPLENBQUMsR0FBRyxDQUFDLCtDQUErQyxDQUFDLENBQUM7Q0FDckUsUUFBUSxPQUFPO0NBQ2YsS0FBSztBQUNMO0NBQ0EsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQ2hDO0NBQ0E7Q0FDQSxJQUFJLElBQUksUUFBUSxHQUFHLE1BQU0sa0JBQWtCLEVBQUU7Q0FDN0MsUUFBUSxVQUFVLEdBQUcsTUFBTSxTQUFTLENBQUMsWUFBWSxDQUFDLGdCQUFnQixFQUFFO0NBQ3BFLFFBQVEsVUFBVSxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksS0FBSyxZQUFZLENBQUMsQ0FBQztDQUN2RSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtDQUNoQyxRQUFRLE9BQU8sQ0FBQyxHQUFHLENBQUMsdUNBQXVDLENBQUMsQ0FBQztDQUM3RCxRQUFRLE9BQU87Q0FDZixLQUFLO0NBQ0wsSUFBSSxJQUFJLEdBQUcsR0FBRyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRLEtBQUssUUFBUSxDQUFDLENBQUM7Q0FDbkUsSUFBSSxJQUFJLEdBQUcsTUFBTSxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxFQUFFO0NBQ3pDLFFBQVEsR0FBRyxHQUFHLENBQUMsQ0FBQztDQUNoQixLQUFLLE1BQU07Q0FDWCxRQUFRLEdBQUcsSUFBSSxDQUFDLENBQUM7Q0FDakIsS0FBSztBQUNMO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQSxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsd0NBQXdDLEVBQUUsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO0NBQ2pGLElBQUlDLGdCQUFRLEdBQUcsTUFBTSxTQUFTLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQztDQUN6RCxRQUFRLEtBQUssRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUM7Q0FDNUQsUUFBUSxLQUFLLEVBQUUsSUFBSTtDQUNuQixLQUFLLENBQUMsQ0FBQztBQUNQO0NBQ0E7Q0FDQSxJQUFJLE1BQU1ELHdCQUFnQixDQUFDLFlBQVksQ0FBQyxDQUFDLEtBQUssRUFBRUMsZ0JBQVEsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDL0UsSUFBSSxNQUFNQyx3QkFBZ0IsQ0FBQyxZQUFZLENBQUMsQ0FBQyxLQUFLLEVBQUVELGdCQUFRLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQy9FO0NBQ0E7Q0FDQSxJQUFJLGNBQWMsRUFBRSxDQUFDO0NBQ3JCLENBQUM7QUFDRDtDQUNBO0FBQ0EsQ0FBTyxlQUFlLFdBQVcsR0FBRztDQUNwQyxJQUFJLElBQUksRUFBRUEsZ0JBQVEsSUFBSUUsbUJBQVcsQ0FBQyxFQUFFO0NBQ3BDLFFBQVEsT0FBTztDQUNmLEtBQUs7Q0FDTCxJQUFJLElBQUksQ0FBQ0oscUJBQWEsRUFBRTtDQUN4QixRQUFRLE9BQU87Q0FDZixLQUFLO0FBQ0w7Q0FDQSxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsNEJBQTRCLENBQUMsQ0FBQztDQUM5QyxJQUFJLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztBQUM5QztDQUNBO0NBQ0EsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsTUFBTSxHQUFHLENBQUMsaUJBQWlCO0NBQzdDLFFBQVEsQ0FBQyxXQUFXLEVBQUVBLHFCQUFhLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztDQUN6QyxJQUFJLElBQUksS0FBSyxFQUFFO0NBQ2YsUUFBUSxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0NBQzNCLEtBQUs7Q0FDTDtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0EsSUFBSSxJQUFJO0NBQ1IsUUFBUSxNQUFNQSxxQkFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO0NBQ3BDLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBRTtDQUNoQixRQUFRLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDekIsS0FBSztDQUNMO0NBQ0EsSUFBSUEscUJBQWEsR0FBRyxJQUFJLENBQUM7Q0FDekIsSUFBSUMsd0JBQWdCLEdBQUcsSUFBSSxDQUFDO0NBQzVCLElBQUlFLHdCQUFnQixHQUFHLElBQUksQ0FBQztDQUM1QixJQUFJRSwyQkFBbUIsR0FBRyxJQUFJLENBQUM7Q0FDL0IsSUFBSUMsMkJBQW1CLEdBQUcsSUFBSSxDQUFDO0NBQy9CLElBQUlKLGdCQUFRLEdBQUcsSUFBSSxDQUFDO0NBQ3BCLElBQUlFLG1CQUFXLEdBQUcsSUFBSSxDQUFDO0FBQ3ZCO0NBQ0E7Q0FDQSxJQUFJLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLFNBQVMsQ0FBQztDQUNoRCxJQUFJLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLFNBQVMsQ0FBQztDQUNqRCxJQUFJLENBQUMsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO0NBQ3pELElBQUksQ0FBQyxDQUFDLGdDQUFnQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7Q0FDL0QsSUFBSSxjQUFjLEVBQUUsQ0FBQztDQUNyQixDQUFDO0FBQ0Q7Q0FDQTtBQUNBLENBQU8sZUFBZSxTQUFTLEdBQUc7Q0FDbEMsSUFBSSxJQUFJLENBQUNOLGNBQU0sRUFBRTtDQUNqQixRQUFRLE9BQU87Q0FDZixLQUFLO0FBQ0w7Q0FDQSxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7Q0FDOUIsSUFBSSxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7QUFDNUM7Q0FDQTtDQUNBLElBQUksYUFBYSxDQUFDQyx1QkFBZSxDQUFDLENBQUM7QUFDbkM7Q0FDQTtDQUNBO0NBQ0EsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsTUFBTSxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7Q0FDckMsSUFBSSxJQUFJLEtBQUssRUFBRTtDQUNmLFFBQVEsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztDQUMzQixLQUFLO0FBQ0w7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLElBQUksSUFBSTtDQUNSLFFBQVFRLHFCQUFhLElBQUksTUFBTUEscUJBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztDQUNyRCxRQUFRUCxxQkFBYSxJQUFJLE1BQU1BLHFCQUFhLENBQUMsS0FBSyxFQUFFLENBQUM7Q0FDckQsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFO0NBQ2hCLFFBQVEsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUN6QixLQUFLO0NBQ0w7Q0FDQSxJQUFJTyxxQkFBYSxHQUFHLElBQUksQ0FBQztDQUN6QixJQUFJUCxxQkFBYSxHQUFHLElBQUksQ0FBQztDQUN6QixJQUFJQyx3QkFBZ0IsR0FBRyxJQUFJLENBQUM7Q0FDNUIsSUFBSUUsd0JBQWdCLEdBQUcsSUFBSSxDQUFDO0NBQzVCLElBQUlFLDJCQUFtQixHQUFHLElBQUksQ0FBQztDQUMvQixJQUFJQywyQkFBbUIsR0FBRyxJQUFJLENBQUM7Q0FDL0IsSUFBSUosZ0JBQVEsR0FBRyxJQUFJLENBQUM7Q0FDcEIsSUFBSUUsbUJBQVcsR0FBRyxJQUFJLENBQUM7Q0FDdkIsSUFBSVYsd0JBQWdCLEdBQUcsRUFBRSxDQUFDO0NBQzFCLElBQUlDLGlCQUFTLEdBQUcsRUFBRSxDQUFDO0NBQ25CLElBQUlHLGNBQU0sR0FBRyxLQUFLLENBQUM7QUFDbkI7Q0FDQTtDQUNBLElBQUksQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsU0FBUyxDQUFDO0NBQ2pELElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsU0FBUyxDQUFDO0NBQ2hELElBQUksQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO0NBQzlDLElBQUksQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7Q0FDdEMsSUFBSSxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxTQUFTLENBQUM7Q0FDakQsSUFBSSxDQUFDLENBQUMsMEJBQTBCLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztDQUN6RCxJQUFJLENBQUMsQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO0NBQy9ELElBQUksY0FBYyxFQUFFLENBQUM7Q0FDckIsSUFBSSxrQ0FBa0MsRUFBRSxDQUFDO0NBQ3pDLElBQUkscUNBQXFDLEVBQUUsQ0FBQztDQUM1QyxJQUFJLGtCQUFrQixFQUFFLENBQUM7Q0FDekIsQ0FBQztBQUNEO0NBQ0E7QUFDQSxDQUFPLGVBQWUsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRTtDQUN6RCxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLEVBQUUsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ3hEO0NBQ0E7Q0FDQTtDQUNBLElBQUksSUFBSSxDQUFDUyxxQkFBYSxFQUFFO0NBQ3hCLFFBQVFBLHFCQUFhLEdBQUcsTUFBTSxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7Q0FDdEQsS0FBSztBQUNMO0NBQ0E7Q0FDQTtDQUNBO0NBQ0EsSUFBSSxJQUFJLFFBQVEsR0FBRyxvQkFBb0IsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7Q0FDMUQsSUFBSSxJQUFJLFFBQVEsRUFBRTtDQUNsQixRQUFRLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUNBQWlDLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBQztDQUN4RSxRQUFRLE9BQU87Q0FDZixLQUFLO0FBQ0wsQUFDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLElBQUksSUFBSSxrQkFBa0IsR0FBRyxNQUFNLEdBQUcsQ0FBQyxZQUFZLEVBQUU7Q0FDckQsUUFBUSxRQUFRO0NBQ2hCLFFBQVEsV0FBVyxFQUFFLE1BQU07Q0FDM0IsUUFBUSxlQUFlLEVBQUVYLGNBQU0sQ0FBQyxlQUFlO0NBQy9DLEtBQUssQ0FBQyxDQUFDO0NBQ1AsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFxQixFQUFFLGtCQUFrQixDQUFDLENBQUM7Q0FDM0Q7Q0FDQSxJQUFJLFFBQVEsR0FBRyxNQUFNVyxxQkFBYSxDQUFDLE9BQU8sQ0FBQztDQUMzQyxRQUFRLEdBQUcsa0JBQWtCO0NBQzdCLFFBQVEsT0FBTyxFQUFFLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQztDQUNuQyxLQUFLLENBQUMsQ0FBQztDQUNQLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsRUFBRSxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDckQ7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLElBQUksT0FBT0EscUJBQWEsQ0FBQyxlQUFlLEtBQUssV0FBVyxFQUFFO0NBQzFELFFBQVEsT0FBTyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsRUFBRUEscUJBQWEsQ0FBQyxlQUFlLENBQUMsQ0FBQztDQUM1RSxRQUFRLE1BQU0sS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQ3pCLEtBQUs7Q0FDTDtDQUNBO0NBQ0EsSUFBSSxNQUFNLGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNuQztDQUNBO0NBQ0E7Q0FDQSxJQUFJWixpQkFBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM3QjtDQUNBO0NBQ0EsSUFBSSxNQUFNLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztDQUNsQyxJQUFJLGtCQUFrQixFQUFFLENBQUM7Q0FDekIsQ0FBQztBQUNEO0NBQ0E7QUFDQSxDQUFPLGVBQWUsb0JBQW9CLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRTtDQUM3RCxJQUFJLElBQUksUUFBUSxHQUFHLG9CQUFvQixDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztDQUMxRCxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7Q0FDbkIsUUFBUSxPQUFPO0NBQ2YsS0FBSztBQUNMO0NBQ0EsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLHdCQUF3QixFQUFFLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztDQUM1RCxJQUFJLElBQUk7Q0FDUixRQUFRLE1BQU0sYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0NBQ3RDLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBRTtDQUNoQixRQUFRLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDekIsS0FBSztDQUNMO0NBQ0EsSUFBSSxrQkFBa0IsRUFBRSxDQUFDO0NBQ3pCLENBQUM7QUFDRDtDQUNBO0FBQ0EsQ0FBTyxlQUFlLGFBQWEsQ0FBQyxRQUFRLEVBQUU7Q0FDOUMsSUFBSSxJQUFJLFFBQVEsRUFBRTtDQUNsQixRQUFRLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztDQUMxRixRQUFRLElBQUk7Q0FDWjtDQUNBLFlBQVksTUFBTSxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7Q0FDbkU7Q0FDQSxZQUFZLE1BQU0sUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDO0NBQ25DLFNBQVMsQ0FBQyxPQUFPLENBQUMsRUFBRTtDQUNwQixZQUFZLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDN0IsU0FBUztDQUNULEtBQUs7Q0FDTCxDQUFDO0FBQ0Q7Q0FDQTtBQUNBLENBQU8sZUFBZSxjQUFjLENBQUMsUUFBUSxFQUFFO0NBQy9DLElBQUksSUFBSSxRQUFRLEVBQUU7Q0FDbEIsUUFBUSxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixFQUFFLFFBQVEsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7Q0FDM0YsUUFBUSxJQUFJO0NBQ1o7Q0FDQSxZQUFZLE1BQU0sR0FBRyxDQUFDLGlCQUFpQixFQUFFLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0NBQ3BFO0NBQ0EsWUFBWSxNQUFNLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQztDQUNwQyxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUU7Q0FDcEIsWUFBWSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQzdCLFNBQVM7Q0FDVCxLQUFLO0NBQ0wsQ0FBQztBQUNEO0NBQ0E7QUFDQSxDQUFPLGVBQWUsYUFBYSxDQUFDLFFBQVEsRUFBRTtDQUM5QyxJQUFJLElBQUksUUFBUSxFQUFFO0NBQ2xCLFFBQVEsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxRQUFRLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0NBQ2pFLFFBQVEsSUFBSTtDQUNaLFlBQVksTUFBTSxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7Q0FDbkUsWUFBWSxNQUFNLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztDQUNuQyxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUU7Q0FDcEIsWUFBWSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQzdCLFNBQVM7Q0FDVCxLQUFLO0NBQ0wsQ0FBQztBQUNEO0NBQ0E7QUFDQSxDQUFPLGVBQWUsY0FBYyxDQUFDLFFBQVEsRUFBRTtDQUMvQyxJQUFJLElBQUksUUFBUSxFQUFFO0NBQ2xCLFFBQVEsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxRQUFRLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0NBQ2xFLFFBQVEsSUFBSTtDQUNaLFlBQVksTUFBTSxHQUFHLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7Q0FDcEUsWUFBWSxNQUFNLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQztDQUNwQyxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUU7Q0FDcEIsWUFBWSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQzdCLFNBQVM7Q0FDVCxLQUFLO0NBQ0wsQ0FBQztBQUNEO0NBQ0E7Q0FDQSxlQUFlLGFBQWEsQ0FBQyxRQUFRLEVBQUU7Q0FDdkMsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO0NBQ25CLFFBQVEsT0FBTztDQUNmLEtBQUs7Q0FDTCxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEVBQUUsUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztDQUN4RixJQUFJLElBQUk7Q0FDUjtDQUNBO0NBQ0EsUUFBUSxNQUFNLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztDQUMvRCxRQUFRLE1BQU0sUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQy9CO0NBQ0EsUUFBUUEsaUJBQVMsR0FBR0EsaUJBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLFFBQVEsQ0FBQyxDQUFDO0NBQzVEO0NBQ0EsUUFBUSxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztDQUNuQyxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUU7Q0FDaEIsUUFBUSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ3pCLEtBQUs7Q0FDTCxDQUFDO0FBQ0Q7Q0FDQTtDQUNBO0NBQ0E7Q0FDQSxlQUFlLGVBQWUsQ0FBQyxTQUFTLEVBQUU7Q0FDMUMsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0FBQ2pEO0NBQ0E7Q0FDQTtDQUNBO0NBQ0EsSUFBSSxJQUFJLFNBQVM7Q0FDakIsUUFBUSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsTUFBTSxHQUFHLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO0NBQ3hFLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0FBQ3ZEO0NBQ0EsSUFBSSxJQUFJLFNBQVMsS0FBSyxNQUFNLEVBQUU7Q0FDOUI7Q0FDQSxRQUFRLFNBQVMsR0FBRyxNQUFNQyxjQUFNLENBQUMsbUJBQW1CLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztDQUN2RSxLQUFLLE1BQU0sSUFBSSxTQUFTLEtBQUssTUFBTSxFQUFFO0NBQ3JDO0NBQ0EsUUFBUSxTQUFTLEdBQUcsTUFBTUEsY0FBTSxDQUFDLG1CQUFtQixDQUFDLGdCQUFnQixDQUFDLENBQUM7Q0FDdkUsS0FBSyxNQUFNO0NBQ1gsUUFBUSxNQUFNLElBQUksS0FBSyxDQUFDLENBQUMsMkJBQTJCLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ25FLEtBQUs7QUFDTDtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0EsSUFBSSxTQUFTLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsY0FBYyxDQUFDLEVBQUUsUUFBUSxFQUFFLE9BQU8sS0FBSztDQUMzRSxRQUFRLE9BQU8sQ0FBQyxHQUFHLENBQUMseUJBQXlCLEVBQUUsU0FBUyxDQUFDLENBQUM7Q0FDMUQ7Q0FDQSxRQUFRLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxNQUFNLEdBQUcsQ0FBQyxtQkFBbUIsRUFBRTtDQUNyRCxZQUFZLFdBQVcsRUFBRSxnQkFBZ0IsQ0FBQyxFQUFFO0NBQzVDLFlBQVksY0FBYztDQUMxQixTQUFTLENBQUMsQ0FBQztDQUNYLFFBQVEsSUFBSSxLQUFLLEVBQUU7Q0FDbkIsWUFBWSxPQUFPLENBQUMsR0FBRyxDQUFDLDRCQUE0QixFQUFFLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQztDQUN4RSxZQUFZLE9BQU8sRUFBRSxDQUFDO0NBQ3RCLFlBQVksT0FBTztDQUNuQixTQUFTO0NBQ1QsUUFBUSxRQUFRLEVBQUUsQ0FBQztDQUNuQixLQUFLLENBQUMsQ0FBQztBQUNQO0NBQ0EsSUFBSSxJQUFJLFNBQVMsS0FBSyxNQUFNLEVBQUU7Q0FDOUI7Q0FDQTtDQUNBO0NBQ0E7Q0FDQSxRQUFRLFNBQVMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxJQUFJLEVBQUUsYUFBYSxFQUFFLE9BQU8sQ0FBQztDQUNyRSx1Q0FBdUMsUUFBUSxFQUFFLE9BQU8sS0FBSztDQUM3RCxZQUFZLE9BQU8sQ0FBQyxHQUFHLENBQUMseUJBQXlCLEVBQUUsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0NBQ3JFO0NBQ0E7Q0FDQTtDQUNBO0NBQ0EsWUFBWSxJQUFJLE1BQU0sR0FBRyxLQUFLLENBQUM7Q0FDL0IsWUFBWSxJQUFJLE9BQU8sQ0FBQyxRQUFRLEtBQUssV0FBVyxFQUFFO0NBQ2xELGdCQUFnQixNQUFNLEdBQUcsaUJBQWlCLEVBQUUsQ0FBQztDQUM3QyxhQUFhLE1BQU0sSUFBSSxPQUFPLENBQUMsUUFBUSxLQUFLLFdBQVcsRUFBRTtDQUN6RCxnQkFBZ0IsTUFBTSxHQUFHLGlCQUFpQixFQUFFLENBQUM7Q0FDN0MsYUFBYSxNQUFNLElBQUksT0FBTyxDQUFDLFFBQVEsS0FBSyxjQUFjLEVBQUU7Q0FDNUQsZ0JBQWdCLFVBQVUsQ0FBQyxXQUFXLEVBQUUsSUFBSSxFQUFDO0NBQzdDLGFBQWE7Q0FDYjtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0EsWUFBWSxJQUFJLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxHQUFHLE1BQU0sR0FBRyxDQUFDLFlBQVksRUFBRTtDQUN0RCxnQkFBZ0IsV0FBVyxFQUFFLGdCQUFnQixDQUFDLEVBQUU7Q0FDaEQsZ0JBQWdCLElBQUk7Q0FDcEIsZ0JBQWdCLGFBQWE7Q0FDN0IsZ0JBQWdCLE1BQU07Q0FDdEIsZ0JBQWdCLE9BQU87Q0FDdkIsYUFBYSxDQUFDLENBQUM7Q0FDZixZQUFZLElBQUksS0FBSyxFQUFFO0NBQ3ZCLGdCQUFnQixPQUFPLENBQUMsR0FBRyxDQUFDLHVDQUF1QyxFQUFFLEtBQUssQ0FBQyxDQUFDO0NBQzVFLGdCQUFnQixPQUFPLEVBQUUsQ0FBQztDQUMxQixnQkFBZ0IsT0FBTztDQUN2QixhQUFhO0NBQ2I7Q0FDQSxZQUFZLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7Q0FDM0IsU0FBUyxDQUFDLENBQUM7Q0FDWCxLQUFLO0FBQ0w7Q0FDQTtDQUNBO0NBQ0E7Q0FDQSxJQUFJLFNBQVMsQ0FBQyxFQUFFLENBQUMsdUJBQXVCLEVBQUUsT0FBTyxLQUFLLEtBQUs7Q0FDM0QsUUFBUSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsVUFBVSxFQUFFLFNBQVMsQ0FBQyxFQUFFLENBQUMsdUJBQXVCLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ2hGO0NBQ0E7Q0FDQTtDQUNBLFFBQVEsSUFBSSxLQUFLLEtBQUssUUFBUSxJQUFJLEtBQUssS0FBSyxRQUFRLElBQUksS0FBSyxLQUFLLGNBQWMsRUFBRTtDQUNsRixZQUFZLE9BQU8sQ0FBQyxHQUFHLENBQUMscURBQXFELENBQUMsQ0FBQztDQUMvRTtDQUNBLFlBQVksU0FBUyxFQUFFLENBQUM7Q0FDeEIsU0FBUztDQUNULEtBQUssQ0FBQyxDQUFDO0FBQ1A7Q0FDQSxJQUFJLE9BQU8sU0FBUyxDQUFDO0NBQ3JCLENBQUM7QUFDRDtDQUNBLGVBQWUsV0FBVyxHQUFHO0NBQzdCLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLE1BQU0sR0FBRyxDQUFDLGNBQWMsRUFBRTtDQUM3QyxRQUFRLFdBQVcsRUFBRUkscUJBQWEsQ0FBQyxFQUFFO0NBQ3JDLFFBQVEsZUFBZSxFQUFFRyx3QkFBZ0IsQ0FBQyxFQUFFO0NBQzVDLFFBQVEsZUFBZSxFQUFFRSwyQkFBbUIsQ0FBQyxFQUFFO0NBQy9DLEtBQUssQ0FBQyxDQUFDO0NBQ1AsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLCtCQUErQixFQUFDO0NBQ2hELElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUM7Q0FDdkIsQ0FBQztBQUNEO0NBQ0E7Q0FDQTtDQUNBO0FBQ0E7Q0FDQSxlQUFlLGFBQWEsR0FBRztDQUMvQixJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUUsYUFBYSxFQUFFLEtBQUssQ0FBQyxHQUFHLE1BQU0sR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0NBQzFELElBQUksSUFBSSxLQUFLLEVBQUU7Q0FDZixRQUFRLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRTtDQUN6QixLQUFLO0FBQ0w7Q0FDQTtDQUNBO0NBQ0EsSUFBSVosNEJBQW9CLEdBQUcsYUFBYSxDQUFDO0NBQ3pDLElBQUksbUJBQW1CLEVBQUUsQ0FBQztDQUMxQixJQUFJLGtDQUFrQyxFQUFFLENBQUM7Q0FDekMsSUFBSSxxQ0FBcUMsRUFBRSxDQUFDO0NBQzVDLElBQUksMkJBQTJCLEVBQUUsQ0FBQztBQUNsQztDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLElBQUksSUFBSSxhQUFhLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQztDQUN4QyxRQUFRLGFBQWEsR0FBRyxTQUFTLENBQUNDLHdCQUFnQixDQUFDLENBQUM7Q0FDcEQsSUFBSSxJQUFJLENBQUNjLFdBQVMsQ0FBQyxhQUFhLEVBQUUsYUFBYSxDQUFDLEVBQUU7Q0FDbEQsUUFBUSxrQkFBa0IsQ0FBQyxLQUFLLEVBQUUsYUFBYSxDQUFDLENBQUM7Q0FDakQsS0FBSztBQUNMO0NBQ0E7Q0FDQTtDQUNBO0NBQ0EsSUFBSSxLQUFLLElBQUksRUFBRSxJQUFJZCx3QkFBZ0IsRUFBRTtDQUNyQyxRQUFRLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEVBQUU7Q0FDeEIsWUFBWSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO0NBQ2pELFlBQVlDLGlCQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxLQUFLO0NBQzVDLGdCQUFnQixJQUFJLFFBQVEsQ0FBQyxPQUFPLENBQUMsTUFBTSxLQUFLLEVBQUUsRUFBRTtDQUNwRCxvQkFBb0IsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0NBQzVDLGlCQUFpQjtDQUNqQixhQUFhLENBQUMsQ0FBQztDQUNmLFNBQVM7Q0FDVCxLQUFLO0FBQ0w7Q0FDQTtDQUNBO0NBQ0E7Q0FDQSxJQUFJQSxpQkFBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsS0FBSztDQUNwQyxRQUFRLElBQUksQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQztDQUNsRCxRQUFRLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFO0NBQzVDLFlBQVksT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsMEJBQTBCLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQy9FLFlBQVksYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0NBQ3BDLFNBQVM7Q0FDVCxLQUFLLENBQUMsQ0FBQztBQUNQO0NBQ0E7Q0FDQSxJQUFJRCx3QkFBZ0IsR0FBRyxLQUFLLENBQUM7Q0FDN0IsSUFBSSxRQUFRLEVBQUUsRUFBRTtDQUNoQixDQUFDO0FBQ0Q7Q0FDQSxTQUFTLFNBQVMsQ0FBQyxLQUFLLEVBQUU7Q0FDMUIsSUFBSSxPQUFPLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO0NBQ2hDLFNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ2pGLFNBQVMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUN0RixDQUFDO0FBQ0Q7Q0FDQSxTQUFTLG9CQUFvQixDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUU7Q0FDaEQsSUFBSSxPQUFPQyxpQkFBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sS0FBSyxNQUFNO0NBQzdELFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQztDQUMxQyxDQUFDO0FBQ0Q7Q0FDQTtDQUNBO0NBQ0E7QUFDQTtBQUNBLENBQU8sU0FBUyxpQkFBaUIsR0FBRztDQUNwQyxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMscUJBQXFCLENBQUMsQ0FBQyxPQUFPLENBQUM7Q0FDN0MsQ0FBQztBQUNEO0FBQ0EsQ0FBTyxTQUFTLGlCQUFpQixHQUFHO0NBQ3BDLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLE9BQU8sQ0FBQztDQUM3QyxDQUFDO0FBQ0Q7QUFDQSxDQUFPLFNBQVMsb0JBQW9CLEdBQUc7Q0FDdkMsSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDLHdCQUF3QixDQUFDLENBQUMsT0FBTyxDQUFDO0NBQ2hELENBQUM7QUFDRDtBQUNBLENBQU8sU0FBUyx5QkFBeUIsR0FBRztDQUM1QyxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsOEJBQThCLENBQUMsQ0FBQyxPQUFPLENBQUM7Q0FDdEQsQ0FBQztBQUNEO0FBQ0EsQ0FBTyxlQUFlLGVBQWUsR0FBRztDQUN4QyxJQUFJLElBQUksaUJBQWlCLEVBQUUsRUFBRTtDQUM3QixRQUFRLGFBQWEsQ0FBQ00sd0JBQWdCLENBQUMsQ0FBQztDQUN4QyxRQUFRLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLFNBQVMsR0FBRyxpQkFBaUIsQ0FBQztDQUM1RCxLQUFLLE1BQU07Q0FDWCxRQUFRLGNBQWMsQ0FBQ0Esd0JBQWdCLENBQUMsQ0FBQztDQUN6QyxRQUFRLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUM7Q0FDbkQsS0FBSztDQUNMLENBQUM7QUFDRDtBQUNBLENBQU8sZUFBZSxlQUFlLEdBQUc7Q0FDeEMsSUFBSSxJQUFJLGlCQUFpQixFQUFFLEVBQUU7Q0FDN0IsUUFBUSxhQUFhLENBQUNFLHdCQUFnQixDQUFDLENBQUM7Q0FDeEMsUUFBUSxDQUFDLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxTQUFTLEdBQUcsY0FBYyxDQUFDO0NBQ3pELEtBQUssTUFBTTtDQUNYLFFBQVEsY0FBYyxDQUFDQSx3QkFBZ0IsQ0FBQyxDQUFDO0NBQ3pDLFFBQVEsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztDQUNoRCxLQUFLO0NBQ0wsQ0FBQztBQUNEO0FBQ0EsQ0FBTyxlQUFlLGtCQUFrQixHQUFHO0NBQzNDLElBQUksSUFBSSxvQkFBb0IsRUFBRSxFQUFFO0NBQ2hDLFFBQVEsYUFBYSxDQUFDRSwyQkFBbUIsQ0FBQyxDQUFDO0NBQzNDLFFBQVEsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLENBQUMsU0FBUyxHQUFHLGlCQUFpQixDQUFDO0NBQy9ELEtBQUssTUFBTTtDQUNYLFFBQVEsY0FBYyxDQUFDQSwyQkFBbUIsQ0FBQyxDQUFDO0NBQzVDLFFBQVEsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztDQUN0RCxLQUFLO0NBQ0wsQ0FBQztBQUNEO0FBQ0EsQ0FBTyxlQUFlLHVCQUF1QixHQUFHO0NBQ2hELElBQUksSUFBSSx5QkFBeUIsRUFBRSxFQUFFO0NBQ3JDLFFBQVEsYUFBYSxDQUFDQywyQkFBbUIsQ0FBQyxDQUFDO0NBQzNDLFFBQVEsQ0FBQyxDQUFDLDJCQUEyQixDQUFDLENBQUMsU0FBUyxHQUFHLGlCQUFpQixDQUFDO0NBQ3JFLEtBQUssTUFBTTtDQUNYLFFBQVEsY0FBYyxDQUFDQSwyQkFBbUIsQ0FBQyxDQUFDO0NBQzVDLFFBQVEsQ0FBQyxDQUFDLDJCQUEyQixDQUFDLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztDQUM1RCxLQUFLO0NBQ0wsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFPLGVBQWUsa0JBQWtCLENBQUMsU0FBUyxHQUFHWix3QkFBZ0I7Q0FDckUseUNBQXlDLFdBQVcsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUU7Q0FDN0UsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQ2pEO0NBQ0EsSUFBSSxDQUFDLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO0NBQzFDLElBQUksSUFBSU8sd0JBQWdCLEVBQUU7Q0FDMUIsUUFBUSxDQUFDLENBQUMsbUJBQW1CLENBQUM7Q0FDOUIsYUFBYSxXQUFXLENBQUMsa0JBQWtCLENBQUMsSUFBSSxFQUFFLFdBQVc7Q0FDN0QsZ0JBQWdCLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ3pELEtBQUs7Q0FDTCxJQUFJLElBQUlFLHdCQUFnQixFQUFFO0NBQzFCLFFBQVEsQ0FBQyxDQUFDLG1CQUFtQixDQUFDO0NBQzlCLGFBQWEsV0FBVyxDQUFDLGtCQUFrQixDQUFDLElBQUksRUFBRSxXQUFXO0NBQzdELGdCQUFnQixTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUN6RCxLQUFLO0NBQ0wsSUFBSSxJQUFJRSwyQkFBbUIsRUFBRTtDQUM3QixRQUFRLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQztDQUM5QixhQUFhLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLEVBQUUsY0FBYztDQUNoRSxnQkFBZ0IsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDNUQsS0FBSztDQUNMLElBQUksSUFBSUMsMkJBQW1CLEVBQUU7Q0FDN0IsUUFBUSxDQUFDLENBQUMsbUJBQW1CLENBQUM7Q0FDOUIsYUFBYSxXQUFXLENBQUMsa0JBQWtCLENBQUMsSUFBSSxFQUFFLGNBQWM7Q0FDaEUsZ0JBQWdCLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQzVELEtBQUs7QUFDTDtDQUNBLElBQUksS0FBSyxJQUFJLElBQUksSUFBSSxXQUFXLEVBQUU7Q0FDbEMsUUFBUSxJQUFJLElBQUksQ0FBQyxFQUFFLEtBQUssUUFBUSxFQUFFO0NBQ2xDLFlBQVksU0FBUztDQUNyQixTQUFTO0NBQ1QsUUFBUSxLQUFLLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7Q0FDakUsWUFBWSxDQUFDLENBQUMsbUJBQW1CLENBQUM7Q0FDbEMsaUJBQWlCLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0NBQzFFLFNBQVM7Q0FDVCxLQUFLO0NBQ0wsQ0FBQztBQUNEO0NBQ0EsU0FBUyxrQkFBa0IsQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRTtDQUMzRCxJQUFJLElBQUksR0FBRyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDO0NBQzNDLFFBQVEsTUFBTSxJQUFJLFFBQVEsS0FBSyxJQUFJLEdBQUcsUUFBUSxHQUFHLFFBQVEsQ0FBQztDQUMxRCxRQUFRLFFBQVEsR0FBRyxvQkFBb0IsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7Q0FDMUQsSUFBSSxHQUFHLENBQUMsU0FBUyxHQUFHLENBQUMsZ0NBQWdDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztBQUNoRTtDQUNBLElBQUksSUFBSSxHQUFHLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztDQUMvQyxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7Q0FDbkIsUUFBUSxHQUFHLENBQUMsU0FBUyxJQUFJLFlBQVc7Q0FDcEMsUUFBUSxHQUFHLENBQUMsT0FBTyxHQUFHLE1BQU0sZ0JBQWdCLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0NBQy9ELFFBQVEsR0FBRyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUM3QjtDQUNBLEtBQUssTUFBTTtDQUNYLFFBQVEsR0FBRyxDQUFDLFNBQVMsSUFBSSxjQUFhO0NBQ3RDLFFBQVEsR0FBRyxDQUFDLE9BQU8sR0FBRyxNQUFNLG9CQUFvQixDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztDQUNuRSxRQUFRLEdBQUcsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDN0IsS0FBSztBQUNMO0NBQ0EsSUFBSSxJQUFJLGdCQUFnQixHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7Q0FDMUQsSUFBSSxnQkFBZ0IsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLEVBQUM7Q0FDMUQsSUFBSSxHQUFHLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFDdEM7Q0FDQSxJQUFJLElBQUk7Q0FDUixRQUFRLElBQUksU0FBUyxFQUFFO0NBQ3ZCLFlBQVksSUFBSSxjQUFjLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQztDQUNsRCxZQUFZLElBQUksYUFBYSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7Q0FDL0QsWUFBWSxhQUFhLENBQUMsU0FBUyxHQUFHLGNBQWMsR0FBRyxtQkFBbUI7Q0FDMUUsa0JBQWtCLG9CQUFvQixDQUFDO0NBQ3ZDLFlBQVksR0FBRyxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsQ0FBQztDQUMzQyxTQUFTO0NBQ1QsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFO0NBQ2hCLFFBQVEsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUN6QixLQUFLO0FBQ0w7Q0FDQSxJQUFJLElBQUksUUFBUSxFQUFFO0NBQ2xCLFFBQVEsSUFBSSxLQUFLLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUM7Q0FDbEQsWUFBWSxRQUFRLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUM7Q0FDdEQsWUFBWSxLQUFLLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztDQUNwRCxRQUFRLEtBQUssQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDO0NBQ25DLFFBQVEsUUFBUSxDQUFDLElBQUksR0FBRyxVQUFVLENBQUM7Q0FDbkMsUUFBUSxRQUFRLENBQUMsT0FBTyxHQUFHLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztDQUM1QyxRQUFRLFFBQVEsQ0FBQyxRQUFRLEdBQUcsWUFBWTtDQUN4QyxZQUFZLElBQUksUUFBUSxDQUFDLE9BQU8sRUFBRTtDQUNsQyxnQkFBZ0IsTUFBTSxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUM7Q0FDL0MsYUFBYSxNQUFNO0NBQ25CLGdCQUFnQixNQUFNLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztDQUM5QyxhQUFhO0NBQ2IsWUFBWSxrQkFBa0IsRUFBRSxDQUFDO0NBQ2pDLFVBQVM7Q0FDVCxRQUFRLEtBQUssQ0FBQyxFQUFFLEdBQUcsQ0FBQyxlQUFlLEVBQUUsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7Q0FDbkQsUUFBUSxJQUFJLFFBQVEsQ0FBQyxNQUFNLEVBQUU7Q0FDN0IsWUFBWSxLQUFLLENBQUMsU0FBUyxHQUFHLG9CQUFtQjtDQUNqRCxTQUFTLE1BQU07Q0FDZixZQUFZLElBQUksS0FBSyxHQUFHWix3QkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztDQUNyRSxnQkFBZ0IsT0FBTyxHQUFHLEdBQUcsQ0FBQztDQUM5QixZQUFZLElBQUksS0FBSyxFQUFFO0NBQ3ZCLGdCQUFnQixPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxDQUFDO0NBQzdELGFBQWE7Q0FDYixZQUFZLEtBQUssQ0FBQyxTQUFTLEdBQUcsQ0FBQyxrQkFBa0IsRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7Q0FDbkUsU0FBUztDQUNULFFBQVEsS0FBSyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztDQUNwQyxRQUFRLEtBQUssQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDakMsUUFBUSxHQUFHLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQy9CO0NBQ0EsUUFBUSxJQUFJLFFBQVEsQ0FBQyxJQUFJLEtBQUssT0FBTyxFQUFFO0NBQ3ZDLFlBQVksSUFBSSxrQkFBa0IsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0NBQ3BFLFlBQVksa0JBQWtCLENBQUMsU0FBUyxHQUFHLG1CQUFtQixDQUFDO0NBQy9ELFlBQVksa0JBQWtCLENBQUMsRUFBRSxHQUFHLENBQUMsV0FBVyxFQUFFLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0NBQ3hFLFlBQVksR0FBRyxDQUFDLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0NBQ2hELFNBQVM7Q0FDVCxLQUFLO0FBQ0w7Q0FDQSxJQUFJLE9BQU8sR0FBRyxDQUFDO0NBQ2YsQ0FBQztBQUNEO0NBQ0EsU0FBUyxhQUFhLENBQUMsUUFBUSxFQUFFO0NBQ2pDLElBQUksSUFBSSxFQUFFLFFBQVEsSUFBSSxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUU7Q0FDdkMsUUFBUSxPQUFPO0NBQ2YsS0FBSztDQUNMLElBQUksSUFBSSxFQUFFLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7Q0FDbkQ7Q0FDQTtDQUNBO0NBQ0EsSUFBSSxJQUFJLFFBQVEsQ0FBQyxJQUFJLEtBQUssT0FBTyxFQUFFO0NBQ25DLFFBQVEsRUFBRSxDQUFDLFlBQVksQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLENBQUM7Q0FDN0MsS0FBSyxNQUFNO0NBQ1gsUUFBUSxFQUFFLENBQUMsWUFBWSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQztDQUM3QyxRQUFRLEVBQUUsQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDO0NBQzFDLEtBQUs7Q0FDTCxJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQztDQUNsRCxJQUFJLEVBQUUsQ0FBQyxTQUFTLEdBQUcsSUFBSSxXQUFXLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztDQUM3RCxJQUFJLEVBQUUsQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0NBQzNCO0NBQ0E7Q0FDQTtDQUNBLElBQUksRUFBRSxDQUFDLElBQUksRUFBRTtDQUNiLFNBQVMsSUFBSSxDQUFDLE1BQU07Q0FDcEIsU0FBUyxDQUFDO0NBQ1YsU0FBUyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUs7Q0FDdEIsWUFBWSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQzNCLFNBQVMsQ0FBQyxDQUFDO0NBQ1gsQ0FBQztBQUNEO0NBQ0EsU0FBUyxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUU7Q0FDcEMsSUFBSSxRQUFRLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSztDQUM1RCxRQUFRLElBQUksQ0FBQyxDQUFDLFFBQVEsS0FBSyxRQUFRLEVBQUU7Q0FDckMsWUFBWSxDQUFDLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUN4QyxTQUFTO0NBQ1QsS0FBSyxDQUFDLENBQUM7Q0FDUCxDQUFDO0FBQ0Q7Q0FDQSxlQUFlLGNBQWMsR0FBRztDQUNoQyxJQUFJLElBQUksUUFBUSxHQUFHLE1BQU0sa0JBQWtCLEVBQUU7Q0FDN0MsUUFBUSxNQUFNLEdBQUcsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0NBQ25DLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtDQUNuQixRQUFRLE1BQU0sQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO0NBQzlCLFFBQVEsT0FBTztDQUNmLEtBQUs7Q0FDTCxJQUFJLElBQUksT0FBTyxHQUFHLE1BQU0sU0FBUyxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsRUFBRTtDQUNqRSxRQUFRLFVBQVUsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRLEtBQUssUUFBUSxDQUFDLENBQUM7Q0FDbEUsSUFBSSxNQUFNLENBQUMsU0FBUyxHQUFHLENBQUM7QUFDeEIsTUFBTSxFQUFFLFVBQVUsQ0FBQyxLQUFLLENBQUM7QUFDekI7QUFDQSxFQUFFLENBQUMsQ0FBQztDQUNKLENBQUM7QUFDRDtBQUNBLENBQU8sZUFBZSxrQkFBa0IsR0FBRztDQUMzQyxJQUFJLElBQUksQ0FBQ08sd0JBQWdCLEVBQUU7Q0FDM0IsUUFBUSxPQUFPLElBQUksQ0FBQztDQUNwQixLQUFLO0NBQ0wsSUFBSSxJQUFJLFFBQVEsR0FBR0Esd0JBQWdCLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDLFFBQVEsQ0FBQztDQUNqRSxJQUFJLElBQUksUUFBUSxFQUFFO0NBQ2xCLFFBQVEsT0FBTyxRQUFRLENBQUM7Q0FDeEIsS0FBSztDQUNMO0NBQ0EsSUFBSSxJQUFJLEtBQUssR0FBR0MsZ0JBQVEsSUFBSUEsZ0JBQVEsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUN6RCxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7Q0FDaEIsUUFBUSxPQUFPLElBQUksQ0FBQztDQUNwQixLQUFLO0NBQ0wsSUFBSSxJQUFJLE9BQU8sR0FBRyxNQUFNLFNBQVMsQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLEVBQUU7Q0FDakUsUUFBUSxVQUFVLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztDQUMxRSxJQUFJLE9BQU8sVUFBVSxDQUFDLFFBQVEsQ0FBQztDQUMvQixDQUFDO0FBQ0Q7Q0FDQSxTQUFTLG1CQUFtQixHQUFHO0NBQy9CLElBQUksRUFBRSxDQUFDLGtCQUFrQixDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxLQUFLO0NBQzNDLFFBQVEsRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztDQUM5QyxLQUFLLENBQUMsQ0FBQztDQUNQLElBQUksSUFBSVQsNEJBQW9CLENBQUMsTUFBTSxFQUFFO0NBQ3JDLFFBQVEsRUFBRSxDQUFDLENBQUMsaUJBQWlCLEVBQUVBLDRCQUFvQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLEtBQUs7Q0FDOUUsWUFBWSxFQUFFLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0NBQy9DLFNBQVMsQ0FBQyxDQUFDO0NBQ1gsS0FBSztDQUNMLENBQUM7QUFDRDtDQUNBLFNBQVMsa0NBQWtDLEdBQUc7Q0FDOUMsSUFBSSxJQUFJLFFBQVEsR0FBRyxDQUFDLENBQUMsd0JBQXdCLENBQUMsQ0FBQztDQUMvQyxJQUFJLFFBQVEsQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO0NBQzVCLElBQUksSUFBSSxDQUFDUSx3QkFBZ0IsSUFBSUEsd0JBQWdCLENBQUMsTUFBTSxFQUFFO0NBQ3RELFFBQVEsT0FBTztDQUNmLEtBQUs7Q0FDTCxJQUFJLHlCQUF5QixDQUFDO0NBQzlCLFFBQVEsV0FBVyxFQUFFLGtCQUFrQjtDQUN2QyxRQUFRLFNBQVMsRUFBRSxRQUFRO0NBQzNCLFFBQVEsTUFBTSxFQUFFLFFBQVE7Q0FDeEIsUUFBUSxVQUFVLEVBQUVBLHdCQUFnQixDQUFDLEVBQUU7Q0FDdkMsUUFBUSxZQUFZLEVBQUVBLHdCQUFnQixDQUFDLGVBQWU7Q0FDdEQsUUFBUSxlQUFlLEVBQUUsQ0FBQyxDQUFDLEtBQUs7Q0FDaEMsWUFBWSxPQUFPLENBQUMsR0FBRyxDQUFDLGtDQUFrQyxDQUFDLENBQUM7Q0FDNUQsWUFBWUEsd0JBQWdCLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxFQUFDO0NBQ2xELFNBQVM7Q0FDVCxLQUFLLENBQUMsQ0FBQztDQUNQLENBQUM7QUFDRDtDQUNBLFNBQVMscUNBQXFDLEdBQUc7Q0FDakQsSUFBSSxJQUFJLFFBQVEsR0FBRyxDQUFDLENBQUMsd0JBQXdCLENBQUMsQ0FBQztDQUMvQyxJQUFJLFFBQVEsQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO0NBQzVCLElBQUksSUFBSSxDQUFDSSwyQkFBbUIsSUFBSUEsMkJBQW1CLENBQUMsTUFBTSxFQUFFO0NBQzVELFFBQVEsT0FBTztDQUNmLEtBQUs7Q0FDTCxJQUFJLHlCQUF5QixDQUFDO0NBQzlCLFFBQVEsV0FBVyxFQUFFLHFCQUFxQjtDQUMxQyxRQUFRLFNBQVMsRUFBRSxRQUFRO0NBQzNCLFFBQVEsTUFBTSxFQUFFLFFBQVE7Q0FDeEIsUUFBUSxVQUFVLEVBQUVBLDJCQUFtQixDQUFDLEVBQUU7Q0FDMUMsUUFBUSxZQUFZLEVBQUVBLDJCQUFtQixDQUFDLGVBQWU7Q0FDekQsUUFBUSxlQUFlLEVBQUUsQ0FBQyxDQUFDLEtBQUs7Q0FDaEMsWUFBWSxPQUFPLENBQUMsR0FBRyxDQUFDLHFDQUFxQyxDQUFDLENBQUM7Q0FDL0QsWUFBWUEsMkJBQW1CLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxFQUFDO0NBQ3JELFNBQVM7Q0FDVCxLQUFLLENBQUMsQ0FBQztDQUNQLENBQUM7QUFDRDtDQUNBLFNBQVMsMkJBQTJCLEdBQUc7Q0FDdkMsSUFBSSxJQUFJO0NBQ1IsUUFBUSxLQUFLLElBQUksUUFBUSxJQUFJVixpQkFBUyxFQUFFO0NBQ3hDLFlBQVksSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUM1RCxZQUFZLElBQUksS0FBSyxFQUFFO0NBQ3ZCLGdCQUFnQixJQUFJLFFBQVEsQ0FBQyxNQUFNLEVBQUU7Q0FDckMsb0JBQW9CLEtBQUssQ0FBQyxTQUFTLEdBQUcsb0JBQW1CO0NBQ3pELGlCQUFpQixNQUFNO0NBQ3ZCLG9CQUFvQixJQUFJLEtBQUssR0FBR0Qsd0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7Q0FDN0Usd0JBQXdCLE9BQU8sR0FBRyxHQUFHLENBQUM7Q0FDdEMsb0JBQW9CLElBQUksS0FBSyxFQUFFO0NBQy9CLHdCQUF3QixPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxDQUFDO0NBQ3JFLHFCQUFxQjtDQUNyQixvQkFBb0IsS0FBSyxDQUFDLFNBQVMsR0FBRyxDQUFDLGtCQUFrQixFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztDQUMzRSxpQkFBaUI7Q0FDakIsYUFBYTtBQUNiO0NBQ0EsWUFBWSxJQUFJLFNBQVMsR0FBR0Esd0JBQWdCLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7Q0FDckUsZ0JBQWdCQSx3QkFBZ0IsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQztDQUN6RCxxQkFBcUIsS0FBSyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7Q0FDdEQsWUFBWSxJQUFJLFNBQVMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUU7Q0FDaEQsZ0JBQWdCLElBQUksUUFBUSxHQUFHLENBQUMsQ0FBQyxDQUFDLFlBQVksRUFBRSxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ3ZFLGdCQUFnQixJQUFJLFFBQVEsSUFBSUEsd0JBQWdCLENBQUMsUUFBUSxDQUFDO0NBQzFELHFCQUFxQixjQUFjLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0NBQ2xELG9CQUFvQixRQUFRLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztDQUM1QyxvQkFBb0IsSUFBSSxZQUFZLEdBQUdBLHdCQUFnQixDQUFDLFFBQVEsQ0FBQztDQUNqRSx5QkFBeUIsY0FBYyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxZQUFZLENBQUM7Q0FDbEUsb0JBQW9CLHlCQUF5QixDQUFDO0NBQzlDLHdCQUF3QixXQUFXLEVBQUUsUUFBUSxDQUFDLEVBQUU7Q0FDaEQsd0JBQXdCLFNBQVMsRUFBRSxRQUFRO0NBQzNDLHdCQUF3QixNQUFNLEVBQUUsUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNO0NBQ3ZELHdCQUF3QixVQUFVLEVBQUUsUUFBUSxDQUFDLFVBQVU7Q0FDdkQsd0JBQXdCLFlBQVksRUFBRSxZQUFZO0NBQ2xELHdCQUF3QixlQUFlLEVBQUUsQ0FBQyxDQUFDLEtBQUs7Q0FDaEQsNEJBQTRCLE9BQU8sQ0FBQyxHQUFHLENBQUMsMEJBQTBCLENBQUMsQ0FBQztDQUNwRSw0QkFBNEIsR0FBRyxDQUFDLHFCQUFxQixFQUFFO0NBQ3ZELGdDQUFnQyxVQUFVLEVBQUUsUUFBUSxDQUFDLEVBQUU7Q0FDdkQsZ0NBQWdDLFlBQVksRUFBRSxDQUFDO0NBQy9DLDZCQUE2QixDQUFDLENBQUM7Q0FDL0IseUJBQXlCO0NBQ3pCLHFCQUFxQixDQUFDLENBQUM7Q0FDdkIsaUJBQWlCO0NBQ2pCLGFBQWE7Q0FDYixTQUFTO0NBQ1QsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFO0NBQ2hCLFFBQVEsT0FBTyxDQUFDLEdBQUcsQ0FBQyw4Q0FBOEMsRUFBRSxDQUFDLENBQUMsQ0FBQztDQUN2RSxLQUFLO0NBQ0wsQ0FBQztBQUNEO0NBQ0EsU0FBUyx5QkFBeUIsQ0FBQztDQUNuQyx1Q0FBdUMsV0FBVyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsVUFBVTtDQUNqRix1Q0FBdUMsWUFBWSxFQUFFLGVBQWU7Q0FDcEUsb0NBQW9DLEVBQUU7Q0FDdEMsSUFBSSxJQUFJO0NBQ1IsUUFBUSxJQUFJLFNBQVMsR0FBR0Esd0JBQWdCLENBQUMsTUFBTSxDQUFDO0NBQ2hELFlBQVlBLHdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztDQUN2RCxRQUFRLElBQUksQ0FBQyxTQUFTLEVBQUU7Q0FDeEIsWUFBWSxPQUFPO0NBQ25CLFNBQVM7QUFDVDtDQUNBLFFBQVEsSUFBSSxLQUFLLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7Q0FDOUMsYUFBYSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDMUUsUUFBUSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDbEIsUUFBUSxLQUFLLElBQUksQ0FBQyxJQUFJLEtBQUssRUFBRTtDQUM3QixZQUFZLElBQUksR0FBRyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDO0NBQ25ELGdCQUFnQixLQUFLLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUM7Q0FDdkQsZ0JBQWdCLEtBQUssR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQztDQUN2RCxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUN0QixZQUFZLEtBQUssQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDO0NBQ2pDLFlBQVksS0FBSyxDQUFDLElBQUksR0FBRyxDQUFDLE1BQU0sRUFBRSxXQUFXLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUM7Q0FDOUQsWUFBWSxLQUFLLENBQUMsT0FBTyxHQUFHLFlBQVksSUFBSSxTQUFTO0NBQ3JELGlCQUFpQixDQUFDLEtBQUssS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDO0NBQ3ZDLGlCQUFpQixDQUFDLEtBQUssWUFBWSxDQUFDLENBQUM7Q0FDckMsWUFBWSxLQUFLLENBQUMsUUFBUSxHQUFHLE1BQU0sZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ3RELFlBQVksSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxDQUFDO0NBQ3ZELFlBQVksS0FBSyxDQUFDLFNBQVMsR0FBRyxDQUFDLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0NBQ2hELFlBQVksR0FBRyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztDQUNuQyxZQUFZLEdBQUcsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDbkMsWUFBWSxTQUFTLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQ3ZDLFlBQVksQ0FBQyxFQUFFLENBQUM7Q0FDaEIsU0FBUztDQUNULFFBQVEsSUFBSSxDQUFDLEVBQUU7Q0FDZixZQUFZLElBQUksR0FBRyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDcEQsWUFBWSxHQUFHLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztDQUNyQyxZQUFZLFNBQVMsQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQztDQUM5RCxTQUFTO0NBQ1QsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFO0NBQ2hCLFFBQVEsT0FBTyxDQUFDLEdBQUcsQ0FBQywwQ0FBMEMsRUFBRSxDQUFDLENBQUMsQ0FBQztDQUNuRSxLQUFLO0NBQ0wsQ0FBQztBQUNEO0NBQ0E7Q0FDQTtDQUNBO0FBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQSxNQUFNLDZCQUE2QjtDQUNuQyxJQUFJO0NBQ0osUUFBUSxDQUFDLFVBQVUsRUFBRSxLQUFLLEVBQUUscUJBQXFCLEVBQUUsQ0FBQyxDQUFDO0NBQ3JELFFBQVEsQ0FBQyxVQUFVLEVBQUUsTUFBTSxFQUFFLHFCQUFxQixFQUFFLENBQUMsQ0FBQztDQUN0RCxLQUFLLENBQUM7QUFDTjtDQUNBLFNBQVMsWUFBWSxHQUFHO0NBQ3hCLElBQUksT0FBTyw2QkFBNkIsQ0FBQztDQUN6QyxDQUFDO0FBQ0Q7Q0FDQTtDQUNBO0NBQ0EsU0FBUyxvQkFBb0IsR0FBRztBQUNoQyxDQUNBLENBQUM7QUFDRDtDQUNBO0NBQ0E7Q0FDQTtBQUNBO0NBQ0EsZUFBZSxHQUFHLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUU7Q0FDM0MsSUFBSSxJQUFJO0NBQ1IsUUFBUSxJQUFJLE9BQU8sR0FBRyxDQUFDLGNBQWMsRUFBRSxrQkFBa0IsQ0FBQztDQUMxRCxZQUFZLElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBRyxJQUFJLEVBQUUsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDL0Q7Q0FDQSxRQUFRLElBQUksTUFBTSxFQUFFO0NBQ3BCLFlBQVksU0FBUyxDQUFDLFVBQVUsQ0FBQyxxQ0FBcUMsR0FBRyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7Q0FDekYsWUFBWSxPQUFPLElBQUksQ0FBQztDQUN4QixTQUFTO0FBQ1Q7Q0FDQSxRQUFRLElBQUksUUFBUSxHQUFHLE1BQU0sS0FBSztDQUNsQyxZQUFZLHNDQUFzQyxHQUFHLFFBQVEsRUFBRSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQztDQUM5RixTQUFTLENBQUM7Q0FDVixRQUFRLE9BQU8sTUFBTSxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7Q0FDckMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFO0NBQ2hCLFFBQVEsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUN6QixRQUFRLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7Q0FDMUIsS0FBSztDQUNMLENBQUM7QUFDRDtDQUNBO0NBQ0E7Q0FDQTtBQUNBO0NBQ0EsU0FBUyxNQUFNLEdBQUc7Q0FDbEIsSUFBSSxPQUFPLENBQUMsY0FBYyxFQUFFLE9BQU8sQ0FBQyxRQUFRLEVBQUU7Q0FDOUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsSUFBSSxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7Q0FDMUUsQ0FBQztBQUNEO0NBQ0E7Q0FDQTtDQUNBO0FBQ0E7Q0FDQSxlQUFlLEtBQUssQ0FBQyxFQUFFLEVBQUU7Q0FDekIsSUFBSSxPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLFVBQVUsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7Q0FDekQsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
